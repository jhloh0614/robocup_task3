/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-08-27 13:41:57.509625
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[4]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKsin(j[0]);
x9=IKcos(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.000199999996)*x10);
x13=((0.0565)*x2);
x14=((1.0)*x5);
x15=((1.99999892000083e-7)*x9);
x16=((0.0565)*x0);
x17=((0.000199999996)*x11);
x18=((1.0)*x3);
x19=((0.0565)*x3);
x20=((0.009)*x5);
x21=((0.000199999896000081)*x10);
x22=((0.000999999460000417)*x9);
x23=((0.104)*x7);
x24=((0.999999980000001)*x11);
x25=((0.999999480000406)*x11);
x26=((0.000999999480000406)*x11);
x27=((0.000199999896000081)*x11);
x28=((0.999999500000395)*x9);
x29=((0.999999980000001)*x10);
x30=((8.0e-8)*x7);
x31=((1.0)*x2);
x32=((0.000999999480000406)*x10);
x33=((0.09)*x2);
x34=((0.999999480000406)*x10);
x35=((8.0e-8)*x6);
x36=(x1*x8);
x37=((-0.009)*x7);
x38=(x10*x5);
x39=(x8*x9);
x40=((-0.009)*x6);
x41=(x0*x1);
x42=(x0*x9);
x43=(x4*x8);
x44=(x2*x4);
x45=((-1.0)*x5);
x46=(x5*x8);
x47=(x3*x4);
x48=(x0*x4);
x49=((-8.0e-8)*x7);
x50=(x0*x5);
x51=(x1*x3);
x52=(x18*x41);
x53=(x31*x43);
x54=(((x1*x2))+x47);
x55=(((x1*x18))+(((-1.0)*x31*x4)));
x56=((((-1.0)*x1*x31))+(((-1.0)*x18*x4)));
x57=(x54*x6);
x58=((-0.009)*x55);
x59=(x55*x7);
x60=(x55*x6);
x61=(((x0*x44))+(((-1.0)*x52)));
x62=(((x3*x36))+(((-1.0)*x53)));
x63=((((-1.0)*x31*x48))+x52);
x64=((((-1.0)*x18*x36))+x53);
x65=(((x18*x48))+((x31*x41)));
x66=((((-1.0)*x18*x43))+(((-1.0)*x31*x36)));
x67=(x6*x61);
x68=(x6*x62);
x69=(x63*x7);
x70=(x64*x7);
x71=(x66*x7);
x72=(x6*x65);
x73=(x65*x7);
x74=(x6*x66);
x75=(x59+x57);
x76=(((x56*x7))+x60);
x77=(x5*x75);
x78=((((-1.0)*x57))+(((-1.0)*x59)));
x79=(x11*x76);
x80=(x73+x67);
x81=(x71+x68);
x82=(x72+x69);
x83=(x74+x70);
x84=(x5*x80);
x85=(x81*x9);
x86=(x5*x81);
x87=(x39+x84);
x88=(x42+x86);
x89=((((-1.0)*x14*x81))+(((-1.0)*x42)));
x90=((((-1.0)*x39))+((x45*x80)));
x91=(x10*x89);
eerot[0]=((((0.999999500000395)*x46))+((x26*x82))+((x32*x90))+(((-1.0)*x28*x80)));
eerot[1]=((((-1.0)*x24*x87))+(((-1.99999892000083e-7)*x46))+((x15*x80))+(((-1.0)*x29*x82))+((x27*x82))+((x21*x90)));
IkReal x92=((1.0)*x80);
IkReal x93=((1.0)*x82);
eerot[2]=((((-1.0)*x17*x87))+(((0.000999999460000417)*x46))+(((-1.0)*x22*x92))+(((-1.0)*x34*(((((-1.0)*x39))+(((-1.0)*x14*x92))))))+(((-1.0)*x25*x93))+(((-1.0)*x12*x93)));
eetrans[0]=((-2.0e-8)+((x6*((((x16*x47))+((x13*x41))))))+((x9*(((((-0.104)*x73))+(((-0.104)*x67))))))+((x7*((((x16*x51))+(((-1.0)*x13*x48))))))+((x11*((((x20*x80))+(((0.009)*x39))))))+(((0.104)*x46))+(((-0.09)*x0*x47))+((x10*(((((8.0e-8)*x39))+(((8.0e-8)*x84))))))+(((1.0e-7)*x41))+(((-0.0565)*x8))+(((-0.09)*x48))+((x11*((((x49*x63))+(((-8.0e-8)*x72))))))+((x10*(((((0.009)*x69))+(((0.009)*x72))))))+(((-1.0)*x33*x41)));
eerot[3]=(((x28*x81))+(((-1.0)*x32*(((((-1.0)*x42))+((x45*x81))))))+(((-0.999999500000395)*x50))+(((-1.0)*x26*x83)));
eerot[4]=((((-1.0)*x15*x81))+(((-1.0)*x21*x89))+((x29*x83))+((x24*x88))+(((-1.0)*x27*x83))+(((1.99999892000083e-7)*x50)));
eerot[5]=(((x12*x83))+((x25*x83))+(((-0.000999999460000417)*x50))+((x17*x88))+((x34*x89))+((x22*x81)));
IkReal x94=((0.09)*x43);
eetrans[1]=((2.0e-8)+((x7*((((x19*x36))+(((-1.0)*x13*x43))))))+(((-1.0)*x3*x94))+((x11*(((((-0.009)*x42))+(((-1.0)*x20*x81))))))+((x10*((((x37*x64))+((x40*x66))))))+((x6*((((x19*x43))+((x13*x36))))))+((x11*((((x35*x66))+((x30*x64))))))+((x10*(((((-8.0e-8)*x42))+(((-8.0e-8)*x86))))))+x16+(((-1.0)*x94))+(((1.0e-7)*x36))+(((-0.104)*x50))+((x9*((((x23*x66))+(((0.104)*x68))))))+(((-1.0)*x33*x36)));
eerot[6]=(((x9*(((((0.999999500000395)*x59))+(((0.999999500000395)*x57))))))+(((-1.0)*x26*x76))+(((-1.0)*x32*x5*x78)));
eerot[7]=((((-1.0)*x27*x76))+(((-1.0)*x21*x5*x78))+((x29*x76))+((x24*x77))+((x9*(((((-1.99999892000083e-7)*x57))+(((-1.99999892000083e-7)*x59)))))));
eerot[8]=(((x17*x77))+((x9*(((((0.000999999460000417)*x57))+(((0.000999999460000417)*x59))))))+((x34*x5*x78))+((x25*x76))+((x12*x76)));
eetrans[2]=((0.0565)+((x6*(((((-1.0)*x1*x19))+((x13*x4))))))+((x10*((((x37*x56))+((x40*x55))))))+((x9*(((((0.104)*x57))+((x23*x55))))))+((x7*((((x1*x13))+((x19*x4))))))+(((0.09)*x1))+(((1.0e-7)*x4))+((x11*x5*((((x37*x55))+((x40*x54))))))+(((-1.0)*x33*x4))+((x38*((((x49*x55))+(((-8.0e-8)*x57))))))+(((0.09)*x51))+((x11*((((x35*x55))+((x30*x56)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((0.999999980000001)*r11))+(((0.000199999996)*r12)));
new_r01=((((-0.000199999896000081)*r11))+(((0.999999480000406)*r12))+(((-0.000999999480000406)*r10)));
new_r02=((((0.000999999460000417)*r12))+(((-1.99999892000083e-7)*r11))+(((0.999999500000395)*r10)));
new_px=((-2.0e-8)+(((-0.000102279943834443)*r12))+py+(((-0.103999947920041)*r10))+(((0.00900002063598876)*r11)));
new_r10=((((-0.999999980000001)*r01))+(((-0.000199999996)*r02)));
new_r11=((((0.000199999896000081)*r01))+(((0.000999999480000406)*r00))+(((-0.999999480000406)*r02)));
new_r12=((((1.99999892000083e-7)*r01))+(((-0.999999500000395)*r00))+(((-0.000999999460000417)*r02)));
new_py=((-2.0e-8)+(((0.103999947920041)*r00))+(((-1.0)*px))+(((0.000102279943834443)*r02))+(((-0.00900002063598876)*r01)));
new_r20=((((0.000199999996)*r22))+(((0.999999980000001)*r21)));
new_r21=((((-0.000999999480000406)*r20))+(((0.999999480000406)*r22))+(((-0.000199999896000081)*r21)));
new_r22=((((0.000999999460000417)*r22))+(((-1.99999892000083e-7)*r21))+(((0.999999500000395)*r20)));
new_pz=((-0.0565)+(((-0.000102279943834443)*r22))+(((0.00900002063598876)*r21))+pz+(((-0.103999947920041)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x95=((1.0)*px);
IkReal x96=((1.0)*pz);
IkReal x97=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x97))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x96)));
rxp0_2=((((-1.0)*r10*x95))+((py*r00)));
rxp1_0=((((-1.0)*r21*x97))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x96)));
rxp1_2=((((-1.0)*r11*x95))+((py*r01)));
rxp2_0=((((-1.0)*r22*x97))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x96)));
rxp2_2=((((-1.0)*r12*x95))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x98=((0.113)*npx);
IkReal x99=((0.113)*npy);
IkReal x100=((0.0565)*r20);
IkReal x101=((0.0565)*r22);
IkReal x102=((-0.0565)*r20);
IkReal x103=((-1.0)*r20);
IkReal x104=((-1.0)*rxp0_2);
IkReal x105=((-0.0565)*r21);
IkReal x106=((-1.0)*r21);
IkReal x107=((-1.0)*rxp1_2);
IkReal x108=((-1.0)*rxp2_2);
IkReal x109=((-1.0)*npx);
matrixinvcoeffs[0]=x102;
matrixinvcoeffs[1]=x98;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x103;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x104;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x102;
matrixinvcoeffs[19]=x98;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x103;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x104;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x105;
matrixinvcoeffs[33]=x99;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x106;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x107;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x105;
matrixinvcoeffs[51]=x99;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x106;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x107;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=r22;
matrixinvcoeffs[69]=npz;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x108;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-0.0565)*r22);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=r22;
matrixinvcoeffs[87]=npz;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x108;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x101;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=((-1.0)*npy);
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=r21;
matrixinvcoeffs[108]=x105;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=rxp1_2;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=0;
matrixinvcoeffs[119]=0;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=npy;
matrixinvcoeffs[122]=x106;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x105;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x107;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=npx;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=x103;
matrixinvcoeffs[140]=x100;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x104;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=0;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=x109;
matrixinvcoeffs[154]=r20;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x100;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=rxp0_2;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=npz;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=((-1.0)*r22);
matrixinvcoeffs[172]=x101;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x108;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=((-1.0)*npz);
matrixinvcoeffs[186]=r22;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x101;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=rxp2_2;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=r21;
matrixinvcoeffs[197]=npy;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x107;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x105;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=r21;
matrixinvcoeffs[215]=npy;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x107;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=((0.0565)*r21);
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=x103;
matrixinvcoeffs[229]=x109;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=rxp0_2;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x100;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=x103;
matrixinvcoeffs[247]=x109;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=rxp0_2;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x102;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_11=matrixinvcoeffs[180], gclwh4_12=matrixinvcoeffs[196], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_10=matrixinvcoeffs[165], gclwh5_13=matrixinvcoeffs[213], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh6_14=matrixinvcoeffs[230], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_3=matrixinvcoeffs[56], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_11=matrixinvcoeffs[184], gclwh8_14=matrixinvcoeffs[232], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_10=matrixinvcoeffs[169], gclwh9_15=matrixinvcoeffs[249], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_11=matrixinvcoeffs[186], gclwh10_14=matrixinvcoeffs[234], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_10=matrixinvcoeffs[171], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_11=matrixinvcoeffs[188], gclwh12_12=matrixinvcoeffs[204], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_10=matrixinvcoeffs[173], gclwh13_13=matrixinvcoeffs[221], gclwh14_2=matrixinvcoeffs[46], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_11=matrixinvcoeffs[190], gclwh14_12=matrixinvcoeffs[206], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_10=matrixinvcoeffs[175], gclwh15_13=matrixinvcoeffs[223];
IkReal op[72], zeror[48];
int numroots;;
IkReal x110=pp*pp;
IkReal x111=pz*pz;
IkReal x112=((0.113)*pz);
IkReal x113=((0.000180362125)*r21);
IkReal x114=((0.18)*pp);
IkReal x115=(gclwh12_2*r21);
IkReal x116=(gclwh10_14*r22);
IkReal x117=(gclwh4_2*r22);
IkReal x118=(pp*r21);
IkReal x119=(npz*pz);
IkReal x120=(npy*pz);
IkReal x121=((0.00319225)*r21);
IkReal x122=(gclwh6_2*pz);
IkReal x123=((2.0)*gclwh7_10);
IkReal x124=((0.0063845)*rxp0_2);
IkReal x125=(npx*pz);
IkReal x126=((0.000574605)*r21);
IkReal x127=(pp*r20);
IkReal x128=(gclwh8_3*r20);
IkReal x129=((1.13e-8)*rxp1_2);
IkReal x130=(pp*r22);
IkReal x131=(gclwh9_9*rxp0_2);
IkReal x132=((2.0)*gclwh11_10);
IkReal x133=((2.0)*pp);
IkReal x134=((1.14921e-10)*r22);
IkReal x135=((0.02034)*rxp1_2);
IkReal x136=(gclwh14_2*pz);
IkReal x137=((2.26e-8)*rxp1_2);
IkReal x138=((0.02034)*rxp0_2);
IkReal x139=(gclwh10_8*rxp2_2);
IkReal x140=((2.0)*gclwh4_11);
IkReal x141=(gclwh9_9*r20);
IkReal x142=((0.0063845)*rxp2_2);
IkReal x143=(gclwh6_8*r21);
IkReal x144=(gclwh8_14*r20);
IkReal x145=((0.113)*rxp2_2);
IkReal x146=(gclwh10_2*pz);
IkReal x147=((0.113)*pp);
IkReal x148=(gclwh8_3*rxp0_2);
IkReal x149=((0.0063845)*r21);
IkReal x150=((1.0)*pz);
IkReal x151=(gclwh5_1*r22);
IkReal x152=(gclwh14_12*r20);
IkReal x153=((0.00366120000000113)*rxp2_2);
IkReal x154=((2.0)*gclwh15_10);
IkReal x155=(gclwh15_0*pz);
IkReal x156=((0.0063845)*r20);
IkReal x157=((0.113)*gclwh9_15);
IkReal x158=(gclwh5_0*pz);
IkReal x159=((2.0)*gclwh13_10);
IkReal x160=(gclwh8_8*r20);
IkReal x161=((0.000180362125)*r20);
IkReal x162=((1.13e-15)*rxp0_2);
IkReal x163=((0.226)*rxp0_2);
IkReal x164=(gclwh15_13*r20);
IkReal x165=((2.0)*gclwh10_11);
IkReal x166=((1.13e-8)*rxp0_2);
IkReal x167=((1.14921e-10)*r21);
IkReal x168=((0.0063845)*r22);
IkReal x169=((0.113)*gclwh8_14);
IkReal x170=((0.113)*rxp1_2);
IkReal x171=(gclwh13_0*pz);
IkReal x172=((3.19225e-17)*r21);
IkReal x173=((0.000180362125)*r22);
IkReal x174=(gclwh11_9*r22);
IkReal x175=((0.113)*gclwh11_15);
IkReal x176=((0.113)*rxp0_2);
IkReal x177=(gclwh8_8*rxp0_2);
IkReal x178=(gclwh14_2*r20);
IkReal x179=(gclwh9_1*rxp0_2);
IkReal x180=(gclwh7_13*r21);
IkReal x181=(gclwh7_9*r21);
IkReal x182=(gclwh5_13*r22);
IkReal x183=((0.00319225)*r20);
IkReal x184=(gclwh8_2*pz);
IkReal x185=((0.226)*rxp1_2);
IkReal x186=((0.00036072425)*r21);
IkReal x187=((0.00319225)*r22);
IkReal x188=((0.012769)*rxp2_2);
IkReal x189=(gclwh12_12*r21);
IkReal x190=(gclwh4_12*r22);
IkReal x191=((0.000103428900000032)*r21);
IkReal x192=(gclwh7_0*pz);
IkReal x193=(gclwh7_1*rxp1_2);
IkReal x194=(gclwh4_3*r22);
IkReal x195=(gclwh1_3*r20);
IkReal x196=((0.00319225)*pz);
IkReal x197=((0.0063845113)*rxp1_2);
IkReal x198=((1.14921e-10)*r20);
IkReal x199=((0.0063844887)*rxp1_2);
IkReal x200=((0.0063845)*rxp1_2);
IkReal x201=((0.226)*rxp2_2);
IkReal x202=(gclwh5_1*rxp2_2);
IkReal x203=((2.0)*gclwh6_11);
IkReal x204=(gclwh11_9*rxp2_2);
IkReal x205=(gclwh13_13*r21);
IkReal x206=(gclwh11_1*rxp2_2);
IkReal x207=((2.0)*gclwh9_10);
IkReal x208=((2.0)*gclwh12_11);
IkReal x209=((0.012769)*rxp0_2);
IkReal x210=(gclwh9_0*pz);
IkReal x211=(gclwh10_8*r22);
IkReal x212=(gclwh15_1*r20);
IkReal x213=(gclwh12_3*rxp1_2);
IkReal x214=((0.012769)*rxp1_2);
IkReal x215=((2.0)*gclwh8_11);
IkReal x216=(gclwh13_1*rxp1_2);
IkReal x217=((2.0)*gclwh5_10);
IkReal x218=(gclwh4_3*rxp2_2);
IkReal x219=(gclwh5_0*r22);
IkReal x220=(gclwh0_1*r20);
IkReal x221=((3.19225e-17)*r22);
IkReal x222=(gclwh6_3*rxp1_2);
IkReal x223=((0.113)*gclwh6_14);
IkReal x224=(gclwh10_3*rxp2_2);
IkReal x225=(gclwh9_1*r20);
IkReal x226=((0.02034)*rxp2_2);
IkReal x227=(gclwh6_12*r21);
IkReal x228=(gclwh15_0*r20);
IkReal x229=((0.113)*gclwh7_15);
IkReal x230=((1.13e-8)*rxp2_2);
IkReal x231=((2.0)*gclwh14_11);
IkReal x232=(gclwh15_1*rxp0_2);
IkReal x233=(gclwh6_8*x135);
IkReal x234=((0.02034)*x139);
IkReal x235=(gclwh8_8*x138);
IkReal x236=(gclwh6_11*x170);
IkReal x237=(gclwh14_11*x183);
IkReal x238=((3.19225e-10)*x189);
IkReal x239=(gclwh12_5*x113);
IkReal x240=(gclwh8_5*x124);
IkReal x241=(gclwh4_5*x173);
IkReal x242=((3.19225e-10)*x190);
IkReal x243=(gclwh10_5*x142);
IkReal x244=(gclwh4_11*x187);
IkReal x245=(gclwh6_5*x200);
IkReal x246=(gclwh8_11*x176);
IkReal x247=(gclwh6_12*x129);
IkReal x248=(gclwh12_11*x121);
IkReal x249=(gclwh14_5*x161);
IkReal x250=(gclwh10_11*x145);
IkReal x251=((3.19225e-10)*x152);
IkReal x252=(gclwh6_14*x200);
IkReal x253=(gclwh10_14*x142);
IkReal x254=(gclwh8_14*x124);
IkReal x255=((0.02034)*x204);
IkReal x256=((0.02034)*x131);
IkReal x257=(gclwh7_9*x135);
IkReal x258=(gclwh11_15*x142);
IkReal x259=(gclwh9_15*x124);
IkReal x260=(gclwh7_15*x200);
IkReal x261=(gclwh13_7*x113);
IkReal x262=((3.19225e-10)*x182);
IkReal x263=(gclwh7_10*x170);
IkReal x264=((3.19225e-10)*x205);
IkReal x265=(gclwh11_7*x142);
IkReal x266=(gclwh9_7*x124);
IkReal x267=(gclwh15_10*x183);
IkReal x268=(gclwh5_7*x173);
IkReal x269=(gclwh7_13*x129);
IkReal x270=(gclwh13_10*x121);
IkReal x271=(gclwh15_7*x161);
IkReal x272=(gclwh11_10*x145);
IkReal x273=(gclwh9_10*x176);
IkReal x274=(gclwh7_7*x200);
IkReal x275=((3.19225e-10)*x164);
IkReal x276=(gclwh5_10*x187);
IkReal x277=(gclwh6_8*x126);
IkReal x278=((0.000574605)*x211);
IkReal x279=((0.000574605)*x160);
IkReal x280=(gclwh4_11*x145);
IkReal x281=(gclwh14_5*x124);
IkReal x282=(gclwh8_5*x161);
IkReal x283=(gclwh12_11*x170);
IkReal x284=(gclwh14_12*x166);
IkReal x285=(gclwh10_5*x173);
IkReal x286=(gclwh6_11*x121);
IkReal x287=(gclwh10_11*x187);
IkReal x288=(gclwh6_5*x113);
IkReal x289=(gclwh12_12*x129);
IkReal x290=((3.19225e-10)*x227);
IkReal x291=(gclwh4_12*x230);
IkReal x292=(gclwh4_5*x142);
IkReal x293=(gclwh14_11*x176);
IkReal x294=(gclwh8_11*x183);
IkReal x295=(gclwh12_5*x200);
IkReal x296=(gclwh7_9*x126);
IkReal x297=((0.000574605)*x174);
IkReal x298=((0.000574605)*x141);
IkReal x299=((2.0)*x111);
IkReal x300=(r21*x110);
IkReal x301=(r22*x110);
IkReal x302=((1.0)*x110);
IkReal x303=((0.0565)*gclwh12_5*x118);
IkReal x304=(gclwh14_5*npx*x112);
IkReal x305=(x119*x140);
IkReal x306=((1.0e-7)*gclwh4_12*x130);
IkReal x307=((2.0e-7)*gclwh14_12*x125);
IkReal x308=((1.0e-7)*gclwh12_12*x118);
IkReal x309=(x120*x208);
IkReal x310=((0.0565)*gclwh4_5*x130);
IkReal x311=((0.0565)*gclwh14_5*x127);
IkReal x312=(gclwh12_5*npy*x112);
IkReal x313=((2.0e-7)*gclwh4_12*x119);
IkReal x314=(x125*x231);
IkReal x315=(gclwh4_5*npz*x112);
IkReal x316=((2.0e-7)*gclwh12_12*x120);
IkReal x317=((1.0e-7)*gclwh14_12*x127);
IkReal x318=(x127*x136);
IkReal x319=(gclwh10_3*pp*x145);
IkReal x320=(gclwh12_3*x300);
IkReal x321=(gclwh6_2*rxp1_2*x112);
IkReal x322=(x136*x183);
IkReal x323=(x110*x194);
IkReal x324=(x147*x148);
IkReal x325=(x147*x222);
IkReal x326=(gclwh8_2*rxp0_2*x112);
IkReal x327=(x115*x196);
IkReal x328=(x117*x196);
IkReal x329=(gclwh10_2*rxp2_2*x112);
IkReal x330=(gclwh11_1*pp*x145);
IkReal x331=(x127*x155);
IkReal x332=(gclwh13_1*x300);
IkReal x333=(x155*x183);
IkReal x334=(gclwh7_0*rxp1_2*x112);
IkReal x335=(x147*x179);
IkReal x336=(x110*x151);
IkReal x337=(gclwh9_0*rxp0_2*x112);
IkReal x338=(x147*x193);
IkReal x339=(x121*x171);
IkReal x340=(x158*x187);
IkReal x341=((0.0565)*gclwh13_7*x118);
IkReal x342=((1.0e-7)*gclwh5_13*x130);
IkReal x343=(gclwh15_7*npx*x112);
IkReal x344=(x119*x217);
IkReal x345=((1.0e-7)*gclwh13_13*x118);
IkReal x346=(x120*x159);
IkReal x347=((0.0565)*gclwh5_7*x130);
IkReal x348=((2.0e-7)*gclwh15_13*x125);
IkReal x349=((2.0e-7)*gclwh13_13*x120);
IkReal x350=((1.0e-7)*gclwh15_13*x127);
IkReal x351=(x125*x154);
IkReal x352=(gclwh13_7*npy*x112);
IkReal x353=((2.0e-7)*gclwh5_13*x119);
IkReal x354=((0.0565)*gclwh15_7*x127);
IkReal x355=(gclwh5_7*npz*x112);
IkReal x356=((0.36)*gclwh8_8*x125);
IkReal x357=((0.36)*gclwh10_8*x119);
IkReal x358=(x114*x143);
IkReal x359=(x114*x211);
IkReal x360=((0.36)*gclwh6_8*x120);
IkReal x361=(x114*x160);
IkReal x362=((0.0565)*gclwh8_5*x127);
IkReal x363=(gclwh6_5*npy*x112);
IkReal x364=((2.0e-7)*gclwh6_12*x120);
IkReal x365=(x119*x165);
IkReal x366=((0.0565)*gclwh10_5*x130);
IkReal x367=(x125*x215);
IkReal x368=((0.0565)*gclwh6_5*x118);
IkReal x369=(x120*x203);
IkReal x370=((1.0e-7)*gclwh6_12*x118);
IkReal x371=(gclwh8_5*npx*x112);
IkReal x372=(gclwh10_5*npz*x112);
IkReal x373=((0.36)*gclwh9_9*x125);
IkReal x374=((0.36)*gclwh11_9*x119);
IkReal x375=(x114*x181);
IkReal x376=(x114*x141);
IkReal x377=((0.36)*gclwh7_9*x120);
IkReal x378=(x114*x174);
IkReal x379=(gclwh12_2*npy*x299);
IkReal x380=(gclwh4_2*npz*x299);
IkReal x381=(gclwh4_3*x119*x133);
IkReal x382=(pp*x115*x150);
IkReal x383=(pp*x117*x150);
IkReal x384=(gclwh12_3*x120*x133);
IkReal x385=(gclwh14_2*npx*x299);
IkReal x386=(gclwh5_0*npz*x299);
IkReal x387=(gclwh13_0*npy*x299);
IkReal x388=(gclwh15_1*x125*x133);
IkReal x389=(gclwh5_1*x119*x133);
IkReal x390=(gclwh13_1*x120*x133);
IkReal x391=(x212*x302);
IkReal x392=(gclwh5_0*x130*x150);
IkReal x393=(gclwh15_0*npx*x299);
IkReal x394=(gclwh13_0*x118*x150);
IkReal x395=(x234+x235);
IkReal x396=(x254+x253);
IkReal x397=(x255+x256);
IkReal x398=(x258+x259);
IkReal x399=(x369+x293+x294+x287);
IkReal x400=(x309+x305+x236+x237);
IkReal x401=(x346+x344+x267+x263);
IkReal x402=(x375+x374+x373+x296);
IkReal x403=(x357+x356+x358+x277);
IkReal x404=(x314+x250+x246+x244+x248);
IkReal x405=(x351+x276+x272+x273+x270);
IkReal x406=(x365+x367+x286+x283+x280);
IkReal x407=(x378+x377+x376+x298+x297);
IkReal x408=(x359+x360+x361+x278+x279);
IkReal x409=(x362+x363+x364+x366+x285+x284+x282+x281);
IkReal x410=(x372+x371+x370+x368+x290+x291+x292+x295+x289+x288);
IkReal x411=(x315+x317+x316+x311+x313+x312+x251+x247+x245+x249);
IkReal x412=(x350+x353+x352+x355+x354+x349+x269+x274+x275+x271);
IkReal x413=(x324+x320+x321+x322+x323+x319+x318+x380+x379);
IkReal x414=(x342+x343+x341+x347+x345+x348+x265+x264+x266+x261+x262+x268);
IkReal x415=(x308+x306+x307+x304+x303+x310+x238+x239+x243+x242+x241+x240);
IkReal x416=(x333+x332+x331+x330+x336+x335+x334+x386+x387+x388);
IkReal x417=(x325+x326+x327+x328+x329+x384+x385+x382+x383+x381);
IkReal x418=(x339+x338+x337+x389+x340+x394+x391+x390+x393+x392);
op[0]=((0.02034)+((gclwh12_11*x118))+(((-1.0)*x395))+((gclwh4_11*x130))+x233+x404+x415+(((-1.0)*gclwh14_11*x127))+(((-1.0)*x411))+(((-1.0)*x400)));
op[1]=((((0.06480000000002)*gclwh4_3*x119))+(((0.36)*gclwh14_2*x125))+((gclwh8_2*x138))+(((-0.00366120000000113)*x148))+(((0.06480000000002)*gclwh12_3*x120))+((x114*x115))+((x114*x117))+(((-1.0)*gclwh12_3*x191))+(((-1.0)*x114*x178))+(((0.00366120000000113)*x222))+(((0.000574605)*x117))+(((0.000574605)*x115))+(((0.0063844887)*x139))+x396+x413+(((-0.36)*gclwh4_2*x119))+(((-0.000103428900000032)*x194))+(((-0.000574605)*x178))+(((-1.0)*gclwh6_8*x199))+(((0.0063844887)*x177))+(((-0.02920775000001)*gclwh4_3*x130))+(((-0.02920775000001)*gclwh12_3*x118))+(((-1.0)*gclwh10_3*x153))+(((-1.0)*x417))+(((-1.0)*gclwh6_2*x135))+(((-0.36)*gclwh12_2*x120))+(((-1.0)*x252))+((gclwh10_2*x226)));
op[2]=((((-1.0)*gclwh12_12*x126))+(((-1.0)*x114*x190))+(((0.000574605)*x152))+(((-1.0)*gclwh6_8*x137))+(((-1.0)*x114*x189))+(((0.36)*gclwh4_12*x119))+(((-1.0)*gclwh10_14*x188))+((gclwh6_14*x214))+(((-0.36)*gclwh14_12*x125))+((gclwh6_12*x135))+(((-0.000574605)*x190))+(((-1.0)*gclwh8_14*x209))+(((2.26e-8)*x139))+(((0.36)*gclwh12_12*x120))+(((2.26e-8)*x177))+((x114*x152)));
op[3]=((((-4.0)*gclwh4_11*x119))+((x118*x208))+(((-4.0)*gclwh12_11*x120))+(((-1.0)*x395))+((gclwh10_11*x201))+(((-1.0)*gclwh14_11*x156))+(((4.0)*gclwh14_11*x125))+x233+(((3.6e-8)*gclwh12_3*x118))+(((3.6e-8)*gclwh4_3*x130))+(((-7.2e-8)*gclwh12_3*x120))+((gclwh4_11*x168))+(((-7.2e-8)*gclwh4_3*x119))+((gclwh4_3*x134))+((gclwh12_3*x167))+((gclwh12_11*x149))+(((-1.0)*x127*x231))+((gclwh8_11*x163))+(((-4.068e-9)*x222))+(((-1.0)*gclwh6_11*x185))+((x130*x140))+(((4.068e-9)*x224))+(((4.068e-9)*x148)));
op[4]=((((-1.0)*gclwh4_11*x130))+x400+x415+((gclwh14_11*x127))+(((-1.0)*gclwh12_11*x118))+(((-1.0)*x411))+(((-1.0)*x404)));
op[5]=((((0.0063845113)*x177))+(((-3.19225e-17)*x194))+(((0.00319224999999)*gclwh4_3*x130))+(((-1.0)*x396))+(((-1.0)*gclwh12_3*x172))+(((-1.13e-15)*x148))+(((1.13e-15)*x222))+(((0.00319224999999)*gclwh12_3*x118))+x252+(((-1.13e-15)*x224))+x413+(((-1.0)*gclwh6_8*x197))+(((2.0e-14)*gclwh4_3*x119))+(((-1.0)*x417))+(((0.0063845113)*x139))+(((2.0e-14)*gclwh12_3*x120)));
op[6]=((((0.02920775000001)*gclwh15_1*x127))+(((-0.02920775000001)*gclwh5_1*x130))+((x114*x219))+(((-1.0)*x398))+(((-1.0)*gclwh7_0*x135))+(((0.000103428900000032)*x212))+(((-0.36)*gclwh5_0*x119))+(((0.000574605)*x219))+(((-1.0)*gclwh11_1*x153))+((gclwh13_0*x126))+(((0.06480000000002)*gclwh5_1*x119))+(((-0.06480000000002)*gclwh15_1*x125))+x260+(((-0.36)*gclwh13_0*x120))+x416+((gclwh9_0*x138))+(((-1.0)*gclwh7_9*x197))+(((-1.0)*gclwh13_1*x191))+(((-0.000103428900000032)*x151))+(((0.06480000000002)*gclwh13_1*x120))+((gclwh13_0*r21*x114))+(((-0.02920775000001)*gclwh13_1*x118))+(((0.0063845113)*x204))+(((-0.000574605)*x228))+(((0.36)*gclwh15_0*x125))+(((-1.0)*x418))+(((0.0063845113)*x131))+(((-1.0)*x114*x228))+(((0.00366120000000113)*x193))+(((-0.00366120000000113)*x179)));
op[7]=((0.02034)+(((-1.0)*gclwh15_10*x127))+(((-1.0)*x397))+((gclwh5_10*x130))+x257+((gclwh13_10*x118))+x405+x414+(((-1.0)*x412))+(((-1.0)*x401)));
op[8]=(((gclwh13_1*x167))+(((-1.0)*gclwh9_10*x163))+(((-4.0)*gclwh15_10*x125))+(((4.068e-9)*x179))+(((-1.0)*gclwh5_10*x168))+(((4.068e-9)*x206))+(((-1.0)*gclwh13_10*x149))+(((-1.0)*x130*x217))+(((3.6e-8)*gclwh13_1*x118))+(((4.0)*gclwh13_10*x120))+((gclwh15_10*x156))+(((-3.6e-8)*gclwh15_1*x127))+((gclwh5_1*x134))+(((-4.068e-9)*x193))+x397+(((4.0)*gclwh5_10*x119))+(((-1.0)*gclwh15_1*x198))+((x127*x154))+(((-7.2e-8)*gclwh13_1*x120))+(((-7.2e-8)*gclwh5_1*x119))+(((7.2e-8)*gclwh15_1*x125))+(((-1.0)*x118*x159))+((gclwh7_10*x185))+(((-1.0)*gclwh11_10*x201))+(((3.6e-8)*gclwh5_1*x130))+(((-1.0)*x257)));
op[9]=(((x114*x164))+(((0.000574605)*x164))+(((-1.0)*x114*x205))+(((-1.0)*gclwh7_9*x137))+(((-1.0)*x114*x182))+((gclwh7_13*x135))+(((-0.36)*gclwh15_13*x125))+((gclwh7_15*x214))+(((0.36)*gclwh5_13*x119))+(((0.36)*gclwh13_13*x120))+(((-1.0)*gclwh13_13*x126))+(((-1.0)*gclwh9_15*x209))+(((-0.000574605)*x182))+(((2.26e-8)*x131))+(((-1.0)*gclwh11_15*x188))+(((2.26e-8)*x204)));
op[10]=((((0.0063844887)*x204))+(((2.0e-14)*gclwh5_1*x119))+(((-3.19225e-17)*x151))+(((1.13e-15)*x193))+(((-1.0)*gclwh13_1*x172))+(((-1.0)*gclwh9_1*x162))+(((-2.0e-14)*gclwh15_1*x125))+(((0.00319224999999)*gclwh13_1*x118))+(((0.0063844887)*x131))+(((0.00319224999999)*gclwh5_1*x130))+x398+(((3.19225e-17)*x212))+x416+(((-1.0)*gclwh7_9*x199))+(((2.0e-14)*gclwh13_1*x120))+(((-1.13e-15)*x206))+(((-1.0)*x260))+(((-1.0)*x418))+(((-0.00319224999999)*gclwh15_1*x127)));
op[11]=((((-1.0)*gclwh5_10*x130))+(((-1.0)*gclwh13_10*x118))+x401+x414+((gclwh15_10*x127))+(((-1.0)*x412))+(((-1.0)*x405)));
op[12]=((-0.02920774999999)+(((-1.0)*gclwh6_11*x118))+((gclwh8_11*x127))+((gclwh10_11*x130))+x399+x403+x409+(((-1.0)*x410))+(((-1.0)*x408))+(((-1.0)*x406)));
op[13]=((-3.6e-8)+(((0.18)*gclwh8_2*pp*r20))+(((0.06480000000002)*gclwh1_3*npx*pz))+(((0.000574605)*gclwh8_2*r20))+(((0.18)*gclwh1_2*pp*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.113)*gclwh12_3*pp*rxp1_2))+(((-0.02920775000001)*gclwh8_3*pp*r20))+(((0.00366120000000113)*gclwh4_3*rxp2_2))+(((-0.36)*gclwh3_2*npy*pz))+(((-0.03559225000001)*gclwh3_3*pp*r21))+(((0.36)*gclwh6_2*npy*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.0564999)*gclwh6_8*pp*r21))+(((-0.000103428900000032)*gclwh8_3*r20))+(((-0.06480000000002)*gclwh6_3*npy*pz))+(((0.00319225)*gclwh1_2*pz*r20))+(((0.06480000000002)*gclwh3_3*npy*pz))+(((0.000180362125)*gclwh8_14*r20))+(((-0.02920775000001)*gclwh10_3*pp*r22))+(((0.18)*gclwh3_2*pp*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.113)*gclwh4_2*pz*rxp2_2))+(((0.06480000000002)*gclwh10_3*npz*pz))+(((0.000103428900000032)*gclwh1_3*r20))+(((0.113)*pz))+(((0.000180362125)*gclwh10_14*r22))+(((0.00319225)*gclwh3_2*pz*r21))+((gclwh6_2*pp*pz*r21))+(((0.0565)*gclwh10_14*pp*r22))+(((0.000180361805775)*gclwh8_8*r20))+(((2.0)*gclwh6_3*npy*pp*pz))+(((-0.36)*gclwh1_2*npx*pz))+(((0.113)*gclwh6_14*npy*pz))+(((-0.36)*gclwh10_2*npz*pz))+(((-0.000103428900000032)*gclwh10_3*r22))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((0.02034)*gclwh14_2*rxp0_2))+(((-0.1129998)*gclwh8_8*npx*pz))+(((-0.113)*gclwh8_14*npx*pz))+(((0.000574605)*gclwh10_2*r22))+(((0.0564999)*gclwh8_8*pp*r20))+(((-0.36)*gclwh8_2*npx*pz))+(((-0.000574605)*gclwh3_2*r21))+(((0.0564999)*gclwh10_8*pp*r22))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((0.00319225)*gclwh6_2*pz*r21))+(((-0.0565)*gclwh6_14*pp*r21))+(((0.18)*gclwh10_2*pp*r22))+(((0.00366120000000113)*gclwh12_3*rxp1_2))+((gclwh10_3*r22*(pp*pp)))+((gclwh3_3*r21*(pp*pp)))+(((-0.113)*gclwh4_3*pp*rxp2_2))+((gclwh1_3*r20*(pp*pp)))+(((-0.00319225)*gclwh10_2*pz*r22))+(((-0.000574605)*gclwh6_2*r21))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((0.06480000000002)*gclwh8_3*npx*pz))+(((0.000103428900000032)*gclwh6_3*r21))+(((0.000180361805775)*gclwh10_8*r22))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((0.1129998)*gclwh6_8*npy*pz))+(((-0.03559225000001)*gclwh1_3*pp*r20))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.000180362125)*gclwh6_14*r21))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-0.000180361805775)*gclwh6_8*r21))+(((-0.113)*gclwh14_2*pz*rxp0_2))+(((-0.18)*gclwh6_2*pp*r21))+(((-0.02034)*gclwh12_2*rxp1_2))+(((0.113)*gclwh12_2*pz*rxp1_2))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.00319225)*gclwh8_2*pz*r20))+(((0.02920775000001)*gclwh6_3*pp*r21))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((0.000103428900000032)*gclwh3_3*r21))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((-0.113)*gclwh10_14*npz*pz))+(((0.0565)*gclwh8_14*pp*r20))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-0.1129998)*gclwh10_8*npz*pz))+(((-1.0)*gclwh8_2*pp*pz*r20))+(((-0.000574605)*gclwh1_2*r20))+((gclwh8_3*r20*(pp*pp)))+(((-0.02034)*gclwh4_2*rxp2_2)));
op[14]=((3.6e-8)+(((0.226)*gclwh10_14*x119))+(((4.0e-7)*gclwh6_8*x120))+((gclwh4_12*x226))+(((-1.0)*x127*x169))+((x114*x227))+(((-6.3845e-10)*x143))+(((-1.0)*gclwh14_12*x138))+(((-0.00036072425)*x116))+(((0.226)*gclwh8_14*x125))+(((2.0e-7)*gclwh8_8*x127))+(((-0.226)*gclwh6_14*x120))+(((-0.00036072425)*x144))+(((-1.0)*x116*x147))+((gclwh6_12*x126))+(((6.3845e-10)*x160))+(((2.0e-7)*gclwh10_8*x130))+(((-4.0e-7)*gclwh8_8*x125))+(((-2.0e-7)*gclwh6_8*x118))+((x118*x223))+(((-0.36)*gclwh6_12*x120))+(((6.3845e-10)*x211))+(((-4.0e-7)*gclwh10_8*x119))+((gclwh12_12*x135))+((gclwh6_14*x186)));
op[15]=((0.00638450000002)+(((-1.0)*gclwh4_11*x201))+(((-1.0)*gclwh3_3*x167))+(((-1.14921e-10)*x195))+(((-4.0)*gclwh10_11*x119))+(((-1.0)*gclwh12_11*x185))+(((-1.0)*gclwh6_11*x149))+((gclwh10_3*x134))+(((3.6e-8)*gclwh8_3*x127))+((x127*x215))+(((-4.068e-9)*x213))+(((-4.068e-9)*x218))+(((-7.2e-8)*gclwh3_3*x120))+(((3.6e-8)*gclwh10_3*x130))+(((1.14921e-10)*x128))+(((3.6e-8)*gclwh1_3*x127))+(((-1.0)*x118*x203))+x403+(((3.6e-8)*gclwh3_3*x118))+((gclwh8_11*x156))+(((4.0)*gclwh6_11*x120))+(((-4.0)*gclwh8_11*x125))+(((-3.6e-8)*gclwh6_3*x118))+(((-7.2e-8)*gclwh10_3*x119))+(((-1.0)*gclwh6_3*x167))+((x130*x165))+(((7.2e-8)*gclwh6_3*x120))+(((-7.2e-8)*gclwh1_3*x125))+((gclwh10_11*x168))+((gclwh14_11*x163))+(((-1.0)*x408))+(((-7.2e-8)*gclwh8_3*x125)));
op[16]=((-0.00319225000001)+(((-1.0)*x399))+((gclwh6_11*x118))+(((-1.0)*gclwh8_11*x127))+x406+x409+(((-1.0)*gclwh10_11*x130))+(((-1.0)*x410)));
op[17]=((((2.0e-14)*gclwh10_3*x119))+(((-1.0)*gclwh8_2*x127*x150))+(((2.0e-14)*gclwh8_3*x125))+((x121*x122))+(((0.0565001)*gclwh10_8*x130))+(((-0.000180362444225)*x143))+(((-1.0)*gclwh6_2*npy*x299))+((gclwh3_3*x300))+(((-0.0565001)*gclwh6_8*x118))+(((1.13e-15)*x213))+(((1.13e-15)*x218))+((gclwh6_3*x120*x133))+(((-1.0)*gclwh1_3*x125*x133))+((gclwh3_2*pz*x121))+((gclwh10_3*x301))+(((-0.00319225000001)*gclwh1_3*x127))+((x110*x195))+(((-1.0)*x146*x187))+((gclwh6_3*x172))+((gclwh4_2*rxp2_2*x112))+(((-1.0)*gclwh14_2*rxp0_2*x112))+x112+(((-1.0)*x147*x213))+(((2.0e-14)*gclwh1_3*x125))+(((-0.00319224999999)*gclwh6_3*x118))+((gclwh3_3*x172))+(((-1.0)*gclwh3_2*x118*x150))+((gclwh6_14*x113))+(((-0.1130002)*gclwh8_8*x125))+((gclwh8_2*npx*x299))+((gclwh3_2*npy*x299))+((gclwh10_2*npz*x299))+((gclwh1_2*pz*x183))+(((0.0565)*gclwh6_14*x118))+(((-1.0)*gclwh8_3*x125*x133))+(((-0.1130002)*gclwh10_8*x119))+(((-3.19225e-17)*x128))+(((-0.000180362125)*x144))+((gclwh1_2*npx*x299))+(((-1.0)*x130*x146))+(((-1.0)*gclwh6_14*npy*x112))+(((0.000180362444225)*x160))+((gclwh12_2*rxp1_2*x112))+(((-1.0)*gclwh6_3*x300))+(((2.0e-14)*gclwh3_3*x120))+(((0.00319224999999)*gclwh10_3*x130))+(((-1.0)*gclwh3_3*x120*x133))+(((-0.000180362125)*x116))+((gclwh8_14*npx*x112))+(((0.1130002)*gclwh6_8*x120))+(((-0.0565)*pp*x116))+(((-1.0)*gclwh10_3*x119*x133))+(((-1.0)*gclwh4_3*pp*x145))+((x118*x122))+(((-0.0565)*gclwh8_14*x127))+(((0.0565001)*gclwh8_8*x127))+(((-1.0)*x183*x184))+((x110*x128))+((gclwh10_14*npz*x112))+(((-0.00319225000001)*gclwh3_3*x118))+(((-2.0e-14)*gclwh6_3*x120))+(((0.00319224999999)*gclwh8_3*x127))+(((3.19225e-17)*x195))+(((-1.0)*gclwh10_3*x221))+(((0.000180362444225)*x211))+(((-1.0)*gclwh1_2*x127*x150)));
op[18]=((3.6e-8)+(((0.06480000000002)*gclwh7_1*npy*pz))+(((0.02920775000001)*gclwh11_1*pp*r22))+(((-0.000574605)*gclwh2_0*r21))+(((-0.00366120000000113)*gclwh5_1*rxp2_2))+(((-0.000180362444225)*gclwh11_9*r22))+(((-0.0565001)*gclwh11_9*pp*r22))+(((-0.02920775000001)*gclwh7_1*pp*r21))+(((0.0565)*gclwh9_15*pp*r20))+(((0.1130002)*gclwh11_9*npz*pz))+(((0.18)*gclwh7_0*pp*r21))+(((0.0565001)*gclwh7_9*pp*r21))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+((gclwh7_1*r21*(pp*pp)))+(((0.113)*pz))+(((-0.18)*gclwh9_0*pp*r20))+(((2.0)*gclwh11_1*npz*pp*pz))+(((-0.36)*gclwh7_0*npy*pz))+(((0.000103428900000032)*gclwh9_1*r20))+(((-0.113)*gclwh11_15*npz*pz))+(((0.000180362444225)*gclwh7_9*r21))+(((-0.113)*gclwh13_0*pz*rxp1_2))+(((-0.1130002)*gclwh7_9*npy*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.02034)*gclwh5_0*rxp2_2))+(((0.02920775000001)*gclwh9_1*pp*r20))+(((-0.36)*gclwh0_0*npx*pz))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((-0.00319225)*gclwh7_0*pz*r21))+(((0.000180362125)*gclwh9_15*r20))+(((0.06480000000002)*gclwh0_1*npx*pz))+(((0.18)*gclwh2_0*pp*r21))+(((0.000574605)*gclwh7_0*r21))+(((0.00366120000000113)*gclwh15_1*rxp0_2))+(((0.0565)*gclwh11_15*pp*r22))+(((-0.06480000000002)*gclwh11_1*npz*pz))+(((-0.36)*gclwh2_0*npy*pz))+(((-0.03559225000001)*gclwh0_1*pp*r20))+(((-0.000574605)*gclwh0_0*r20))+(((-0.02034)*gclwh15_0*rxp0_2))+(((2.0)*gclwh9_1*npx*pp*pz))+(((0.000103428900000032)*gclwh11_1*r22))+(((-0.000574605)*gclwh9_0*r20))+(((-0.113)*gclwh9_15*npx*pz))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((0.113)*gclwh13_1*pp*rxp1_2))+(((-0.0565001)*gclwh9_9*pp*r20))+(((0.1130002)*gclwh9_9*npx*pz))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((0.18)*gclwh0_0*pp*r20))+(((0.113)*gclwh15_0*pz*rxp0_2))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.000180362125)*gclwh7_15*r21))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.00319225)*gclwh2_0*pz*r21))+(((-0.00366120000000113)*gclwh13_1*rxp1_2))+(((0.00319225)*gclwh9_0*pz*r20))+(((0.06480000000002)*gclwh2_1*npy*pz))+(((-0.000180362444225)*gclwh9_9*r20))+(((-0.0565)*gclwh7_15*pp*r21))+(((0.000103428900000032)*gclwh0_1*r20))+(((-0.03559225000001)*gclwh2_1*pp*r21))+((gclwh2_1*r21*(pp*pp)))+(((-0.06480000000002)*gclwh9_1*npx*pz))+(((0.00319225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((-0.000103428900000032)*gclwh7_1*r21))+(((-0.113)*gclwh5_0*pz*rxp2_2))+(((0.000180362125)*gclwh11_15*r22))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.113)*gclwh15_1*pp*rxp0_2))+(((0.113)*gclwh7_15*npy*pz))+(((0.113)*gclwh5_1*pp*rxp2_2))+(((2.0)*gclwh7_0*npy*(pz*pz)))+((gclwh0_1*r20*(pp*pp)))+(((0.000103428900000032)*gclwh2_1*r21))+((gclwh9_0*pp*pz*r20))+(((0.02034)*gclwh13_0*rxp1_2))+(((0.36)*gclwh9_0*npx*pz)));
op[19]=((-0.02920774999999)+((gclwh7_7*x113))+((gclwh7_10*x121))+(((-1.0)*gclwh11_10*x130))+(((-1.0)*x120*x123))+(((1.0e-7)*gclwh7_13*x118))+((gclwh5_7*x142))+((gclwh7_10*x118))+(((-1.0)*gclwh15_13*x166))+(((3.19225e-10)*x180))+((x125*x207))+(((-1.0)*gclwh9_10*x183))+(((-1.0)*gclwh15_7*x124))+((gclwh9_7*npx*x112))+(((-0.0565)*gclwh9_7*x127))+(((-1.0)*gclwh15_10*x176))+((gclwh13_10*x170))+(((-1.0)*gclwh9_10*x127))+(((-1.0)*gclwh9_7*x161))+x407+((gclwh5_13*x230))+((gclwh5_10*x145))+((gclwh13_7*x200))+((gclwh13_13*x129))+(((-1.0)*gclwh11_7*x173))+(((-0.0565)*gclwh11_7*x130))+(((0.0565)*gclwh7_7*x118))+(((-1.0)*gclwh7_7*npy*x112))+((gclwh11_7*npz*x112))+((x119*x132))+(((-1.0)*x402))+(((-1.0)*gclwh11_10*x187))+(((-2.0e-7)*gclwh7_13*x120)));
op[20]=((-0.00638450000002)+(((-1.0)*x118*x123))+((x127*x207))+((gclwh9_10*x156))+(((-7.2e-8)*gclwh2_1*x120))+(((7.2e-8)*gclwh11_1*x119))+(((4.068e-9)*x202))+((gclwh11_10*x168))+(((-1.0)*gclwh2_1*x167))+(((-3.6e-8)*gclwh11_1*x130))+((gclwh15_10*x163))+(((-3.6e-8)*gclwh9_1*x127))+(((-1.0)*gclwh0_1*x198))+(((3.6e-8)*gclwh2_1*x118))+(((3.6e-8)*gclwh0_1*x127))+(((-7.2e-8)*gclwh7_1*x120))+(((7.2e-8)*gclwh9_1*x125))+(((-1.0)*gclwh13_10*x185))+(((-7.2e-8)*gclwh0_1*x125))+(((-1.0)*gclwh5_10*x201))+(((-1.0)*gclwh9_1*x198))+x402+((x130*x132))+(((-4.0)*gclwh9_10*x125))+(((3.6e-8)*gclwh7_1*x118))+(((4.068e-9)*x216))+(((-1.0)*gclwh11_1*x134))+(((-1.0)*gclwh7_10*x149))+(((-4.0)*gclwh11_10*x119))+(((-4.068e-9)*x232))+((gclwh7_1*x167))+(((4.0)*gclwh7_10*x120))+(((-1.0)*x407)));
op[21]=((3.6e-8)+(((-0.226)*gclwh11_15*x119))+(((0.00036072425)*gclwh11_15*r22))+(((-6.3845e-10)*x141))+(((-2.0e-7)*gclwh9_9*x127))+(((-1.0)*x114*x180))+(((-2.0e-7)*gclwh11_9*x130))+(((-6.3845e-10)*x174))+(((0.226)*gclwh7_15*x120))+(((4.0e-7)*gclwh11_9*x119))+(((-4.0e-7)*gclwh7_9*x120))+(((6.3845e-10)*x181))+(((-1.0)*gclwh13_13*x135))+(((0.36)*gclwh7_13*x120))+((x127*x157))+(((-1.0)*x118*x229))+(((4.0e-7)*gclwh9_9*x125))+(((-1.0)*gclwh5_13*x226))+(((2.0e-7)*gclwh7_9*x118))+(((-1.0)*gclwh7_13*x126))+(((-0.226)*gclwh9_15*x125))+(((0.00036072425)*gclwh9_15*r20))+(((-1.0)*gclwh7_15*x186))+((x130*x175))+((gclwh15_13*x138)));
op[22]=(((gclwh11_15*npz*x112))+(((-1.0)*gclwh7_1*x120*x133))+((x147*x216))+(((2.0e-14)*gclwh7_1*x120))+(((-1.0)*gclwh7_0*x118*x150))+((gclwh2_1*x172))+((gclwh7_0*npy*x299))+(((-0.00319224999999)*gclwh11_1*x130))+((x110*x220))+((gclwh2_0*pz*x121))+(((2.0e-14)*gclwh0_1*x125))+(((0.00319224999999)*gclwh7_1*x118))+(((-1.0)*x225*x302))+(((0.1129998)*gclwh9_9*x125))+(((-1.0)*gclwh7_15*npy*x112))+(((-0.0565)*gclwh11_15*x130))+((gclwh9_1*x125*x133))+(((-1.0)*gclwh0_0*x127*x150))+(((-0.0565)*gclwh9_15*x127))+(((3.19225e-17)*x220))+(((3.19225e-17)*x225))+(((-1.13e-15)*x216))+(((0.0565)*gclwh7_15*x118))+(((-1.0)*x121*x192))+(((-1.0)*gclwh11_1*x301))+(((2.0e-14)*gclwh2_1*x120))+((x183*x210))+(((-0.1129998)*gclwh7_9*x120))+(((-1.0)*gclwh2_1*x120*x133))+(((0.0564999)*gclwh7_9*x118))+((gclwh5_1*pp*x145))+(((0.1129998)*gclwh11_9*x119))+(((-1.0)*gclwh0_1*x125*x133))+((x127*x210))+x112+(((-1.0)*gclwh9_15*x161))+((gclwh11_1*x119*x133))+((gclwh15_1*x162))+(((-1.0)*gclwh5_0*rxp2_2*x112))+(((-1.0)*gclwh7_1*x172))+((gclwh0_0*pz*x183))+(((-0.00319224999999)*gclwh9_1*x127))+(((-1.0)*gclwh11_15*x173))+((gclwh0_0*npx*x299))+(((-1.0)*x147*x232))+(((-0.000180361805775)*x141))+(((-0.000180361805775)*x174))+((gclwh7_1*x300))+(((-1.0)*gclwh2_0*x118*x150))+(((-1.13e-15)*x202))+(((-0.00319225000001)*gclwh0_1*x127))+((gclwh2_0*npy*x299))+((gclwh9_15*npx*x112))+((gclwh15_0*rxp0_2*x112))+(((0.000180361805775)*x181))+(((-0.00319225000001)*gclwh2_1*x118))+(((-0.0564999)*gclwh9_9*x127))+(((-0.0564999)*gclwh11_9*x130))+((gclwh7_15*x113))+((gclwh2_1*x300))+((gclwh11_1*x221))+(((-1.0)*gclwh9_0*npx*x299))+(((-2.0e-14)*gclwh9_1*x125))+(((-1.0)*gclwh13_0*rxp1_2*x112))+(((-2.0e-14)*gclwh11_1*x119)));
IkReal x419=pp*pp;
IkReal x420=pz*pz;
IkReal x421=((0.000180362125)*r21);
IkReal x422=((0.18)*pp);
IkReal x423=(gclwh12_2*r21);
IkReal x424=(gclwh4_2*r22);
IkReal x425=(pp*r21);
IkReal x426=((0.36)*pp);
IkReal x427=(gclwh5_0*r22);
IkReal x428=(gclwh10_14*r22);
IkReal x429=(npz*pz);
IkReal x430=(npy*pz);
IkReal x431=((4.0)*gclwh12_11);
IkReal x432=(gclwh15_13*r20);
IkReal x433=(gclwh9_10*r20);
IkReal x434=((0.0063845)*rxp0_2);
IkReal x435=((1.0e-7)*pp);
IkReal x436=((0.04068)*rxp1_2);
IkReal x437=(pp*r22);
IkReal x438=((0.113)*rxp1_2);
IkReal x439=(gclwh8_2*r20);
IkReal x440=((2.0e-7)*pp);
IkReal x441=(gclwh9_9*rxp0_2);
IkReal x442=((2.0)*gclwh11_10);
IkReal x443=((4.0)*gclwh4_11);
IkReal x444=(gclwh14_2*pz);
IkReal x445=(pp*r20);
IkReal x446=((2.26e-8)*rxp1_2);
IkReal x447=((4.0e-7)*npx);
IkReal x448=((0.02034)*rxp1_2);
IkReal x449=((2.26e-8)*rxp2_2);
IkReal x450=((2.0)*gclwh4_11);
IkReal x451=((0.0063845)*rxp2_2);
IkReal x452=(gclwh0_0*r20);
IkReal x453=(gclwh4_12*r22);
IkReal x454=((0.04068)*rxp2_2);
IkReal x455=(gclwh8_14*r20);
IkReal x456=(gclwh6_11*rxp1_2);
IkReal x457=((0.113)*pz);
IkReal x458=(gclwh10_2*rxp2_2);
IkReal x459=((0.113)*pp);
IkReal x460=(gclwh8_3*rxp0_2);
IkReal x461=((0.0063845)*r21);
IkReal x462=((0.04068)*rxp0_2);
IkReal x463=(gclwh15_1*r20);
IkReal x464=(gclwh14_12*r20);
IkReal x465=((0.00366120000000113)*rxp2_2);
IkReal x466=(gclwh15_0*r20);
IkReal x467=((2.0)*gclwh15_10);
IkReal x468=(gclwh9_10*rxp0_2);
IkReal x469=(gclwh13_0*pz);
IkReal x470=((4.0)*gclwh14_11);
IkReal x471=((6.3845e-10)*r20);
IkReal x472=((2.0)*gclwh13_10);
IkReal x473=((0.000574605)*r21);
IkReal x474=(gclwh8_8*r20);
IkReal x475=((0.000180362125)*r20);
IkReal x476=((1.13e-8)*rxp1_2);
IkReal x477=((1.13e-8)*rxp0_2);
IkReal x478=(gclwh13_0*r21);
IkReal x479=(npx*pz);
IkReal x480=((2.26e-8)*rxp0_2);
IkReal x481=((0.00319225)*r20);
IkReal x482=(gclwh12_3*r21);
IkReal x483=(gclwh14_2*r20);
IkReal x484=((2.0)*gclwh7_10);
IkReal x485=((0.00319225)*pz);
IkReal x486=((0.226)*rxp0_2);
IkReal x487=((4.0)*gclwh15_10);
IkReal x488=(gclwh9_1*rxp0_2);
IkReal x489=(gclwh1_2*r20);
IkReal x490=(gclwh7_15*r21);
IkReal x491=(gclwh7_15*rxp1_2);
IkReal x492=(gclwh8_14*rxp0_2);
IkReal x493=(gclwh5_1*r22);
IkReal x494=(gclwh5_13*r22);
IkReal x495=((0.00319225)*r21);
IkReal x496=((4.0)*gclwh8_11);
IkReal x497=((6.3845e-10)*r21);
IkReal x498=(gclwh11_15*r22);
IkReal x499=((0.02034)*rxp0_2);
IkReal x500=((0.0063844887)*rxp2_2);
IkReal x501=((2.0)*pp);
IkReal x502=(gclwh11_15*rxp2_2);
IkReal x503=(gclwh12_12*r21);
IkReal x504=((0.226)*gclwh7_15);
IkReal x505=(gclwh13_1*r21);
IkReal x506=((4.0)*gclwh7_10);
IkReal x507=(gclwh7_10*rxp1_2);
IkReal x508=(gclwh7_1*rxp1_2);
IkReal x509=((0.226)*rxp1_2);
IkReal x510=(gclwh13_13*r21);
IkReal x511=(gclwh4_3*r22);
IkReal x512=(gclwh4_11*rxp2_2);
IkReal x513=((0.452)*rxp0_2);
IkReal x514=((0.0063845113)*rxp1_2);
IkReal x515=((0.0063845)*r22);
IkReal x516=((0.0063844887)*rxp1_2);
IkReal x517=((0.226)*gclwh8_14);
IkReal x518=((2.0)*gclwh6_11);
IkReal x519=((0.0063845)*r20);
IkReal x520=((0.012769)*r21);
IkReal x521=((0.00319225)*r22);
IkReal x522=((0.226)*gclwh6_14);
IkReal x523=((1.13e-15)*rxp2_2);
IkReal x524=(gclwh6_14*r21);
IkReal x525=((0.012769)*r22);
IkReal x526=((2.0)*gclwh12_11);
IkReal x527=((0.02034)*rxp2_2);
IkReal x528=((0.00114921)*r21);
IkReal x529=((2.0)*gclwh14_11);
IkReal x530=(gclwh10_2*r22);
IkReal x531=(gclwh8_8*rxp0_2);
IkReal x532=((0.226)*gclwh9_15);
IkReal x533=(gclwh10_8*r22);
IkReal x534=(gclwh9_15*r20);
IkReal x535=((0.113)*rxp0_2);
IkReal x536=((0.0063845)*rxp1_2);
IkReal x537=((0.000180362125)*r22);
IkReal x538=((2.0)*gclwh8_11);
IkReal x539=((0.226)*gclwh11_15);
IkReal x540=((0.226)*rxp2_2);
IkReal x541=((4.0)*gclwh11_10);
IkReal x542=((4.0)*gclwh5_10);
IkReal x543=((2.0)*gclwh5_10);
IkReal x544=((4.0)*gclwh10_11);
IkReal x545=((3.19225e-10)*r21);
IkReal x546=((0.36)*gclwh12_12);
IkReal x547=((4.0)*gclwh13_10);
IkReal x548=((0.452)*rxp1_2);
IkReal x549=((4.0)*gclwh6_11);
IkReal x550=(gclwh11_1*rxp2_2);
IkReal x551=(gclwh9_15*rxp0_2);
IkReal x552=((0.36)*gclwh13_0);
IkReal x553=((0.012769)*r20);
IkReal x554=((0.113)*rxp2_2);
IkReal x555=(gclwh10_14*rxp2_2);
IkReal x556=(gclwh10_3*rxp2_2);
IkReal x557=(gclwh6_3*rxp1_2);
IkReal x558=(gclwh9_0*r20);
IkReal x559=((0.452)*rxp2_2);
IkReal x560=((1.13e-8)*rxp2_2);
IkReal x561=((0.0063845113)*rxp2_2);
IkReal x562=((2.0)*gclwh10_11);
IkReal x563=(gclwh6_14*rxp1_2);
IkReal x564=((0.36)*gclwh13_13);
IkReal x565=(gclwh15_0*pz);
IkReal x566=((0.012769)*x492);
IkReal x567=((0.012769)*x555);
IkReal x568=((0.012769)*x563);
IkReal x569=((6.3845e-10)*x423);
IkReal x570=(gclwh10_2*x449);
IkReal x571=((0.226)*x456);
IkReal x572=(gclwh14_11*x519);
IkReal x573=((6.3845e-10)*x424);
IkReal x574=(gclwh8_2*x480);
IkReal x575=(gclwh8_11*x486);
IkReal x576=(gclwh14_2*x471);
IkReal x577=(gclwh10_11*x540);
IkReal x578=(gclwh12_11*x461);
IkReal x579=(gclwh6_2*x446);
IkReal x580=(gclwh4_11*x515);
IkReal x581=(gclwh9_0*x480);
IkReal x582=(gclwh5_10*x515);
IkReal x583=((6.3845e-10)*x427);
IkReal x584=((0.226)*x468);
IkReal x585=((6.3845e-10)*x478);
IkReal x586=(gclwh11_10*x540);
IkReal x587=(gclwh13_10*x461);
IkReal x588=((0.226)*x507);
IkReal x589=((6.3845e-10)*x466);
IkReal x590=(gclwh7_0*x446);
IkReal x591=(gclwh15_10*x519);
IkReal x592=((0.012769)*x551);
IkReal x593=((0.012769)*x502);
IkReal x594=((0.012769)*x491);
IkReal x595=((0.00036072425)*x428);
IkReal x596=((0.00036072425)*x455);
IkReal x597=((0.00036072425)*x524);
IkReal x598=(gclwh14_2*x480);
IkReal x599=((6.3845e-10)*x530);
IkReal x600=((6.3845e-10)*x439);
IkReal x601=(gclwh6_11*x461);
IkReal x602=(gclwh12_11*x509);
IkReal x603=((0.226)*x512);
IkReal x604=(gclwh10_11*x515);
IkReal x605=(gclwh3_2*x497);
IkReal x606=(gclwh12_2*x446);
IkReal x607=(gclwh4_2*x449);
IkReal x608=(gclwh14_11*x486);
IkReal x609=(gclwh6_2*x497);
IkReal x610=(gclwh1_2*x471);
IkReal x611=(gclwh8_11*x519);
IkReal x612=(gclwh5_0*x449);
IkReal x613=(gclwh5_10*x540);
IkReal x614=(gclwh7_0*x497);
IkReal x615=(gclwh13_10*x509);
IkReal x616=(gclwh7_10*x461);
IkReal x617=(gclwh13_0*x446);
IkReal x618=(gclwh15_0*x480);
IkReal x619=(gclwh15_10*x486);
IkReal x620=(gclwh2_0*x497);
IkReal x621=((0.0063845)*x433);
IkReal x622=(gclwh11_10*x515);
IkReal x623=(gclwh9_0*x471);
IkReal x624=((6.3845e-10)*x452);
IkReal x625=((0.00036072425)*x490);
IkReal x626=((0.00036072425)*x498);
IkReal x627=((0.00036072425)*x534);
IkReal x628=(gclwh6_8*x448);
IkReal x629=(gclwh10_8*x527);
IkReal x630=(gclwh8_8*x499);
IkReal x631=(gclwh4_11*x521);
IkReal x632=(gclwh8_11*x535);
IkReal x633=(gclwh6_12*x476);
IkReal x634=(gclwh12_11*x495);
IkReal x635=(gclwh12_5*x421);
IkReal x636=(gclwh10_11*x554);
IkReal x637=(gclwh8_5*x434);
IkReal x638=(gclwh4_5*x537);
IkReal x639=(gclwh10_5*x451);
IkReal x640=((3.19225e-10)*x464);
IkReal x641=(gclwh6_11*x438);
IkReal x642=(gclwh6_5*x536);
IkReal x643=(gclwh14_11*x481);
IkReal x644=((3.19225e-10)*x503);
IkReal x645=(gclwh14_5*x475);
IkReal x646=((3.19225e-10)*x453);
IkReal x647=(gclwh10_14*x451);
IkReal x648=(gclwh8_14*x434);
IkReal x649=(gclwh6_14*x536);
IkReal x650=(gclwh11_9*x527);
IkReal x651=((0.02034)*x441);
IkReal x652=(gclwh7_9*x448);
IkReal x653=((0.0063845)*x491);
IkReal x654=(gclwh11_15*x451);
IkReal x655=(gclwh9_15*x434);
IkReal x656=(gclwh7_13*x476);
IkReal x657=(gclwh13_7*x421);
IkReal x658=(gclwh13_10*x495);
IkReal x659=(gclwh11_10*x554);
IkReal x660=((0.113)*x468);
IkReal x661=(gclwh11_7*x451);
IkReal x662=(gclwh9_7*x434);
IkReal x663=((3.19225e-10)*x432);
IkReal x664=(gclwh5_7*x537);
IkReal x665=(gclwh5_10*x521);
IkReal x666=((3.19225e-10)*x494);
IkReal x667=(gclwh15_7*x475);
IkReal x668=(gclwh7_10*x438);
IkReal x669=((3.19225e-10)*x510);
IkReal x670=(gclwh15_10*x481);
IkReal x671=(gclwh7_7*x536);
IkReal x672=((2.0)*x420);
IkReal x673=(gclwh9_10*x479);
IkReal x674=((0.72)*x479);
IkReal x675=((1.0)*pp*pz);
IkReal x676=(x445*x529);
IkReal x677=(x430*x431);
IkReal x678=(x429*x443);
IkReal x679=(x423*x440);
IkReal x680=(x444*x447);
IkReal x681=(x424*x440);
IkReal x682=(x440*x483);
IkReal x683=(x437*x450);
IkReal x684=((4.0e-7)*gclwh4_2*x429);
IkReal x685=(x425*x526);
IkReal x686=(x470*x479);
IkReal x687=((4.0e-7)*gclwh12_2*x430);
IkReal x688=(x427*x440);
IkReal x689=(x447*x565);
IkReal x690=(x425*x472);
IkReal x691=(x479*x487);
IkReal x692=((2.0e-7)*gclwh13_0*x425);
IkReal x693=(x437*x543);
IkReal x694=(x445*x467);
IkReal x695=((4.0e-7)*gclwh13_0*x430);
IkReal x696=(x429*x542);
IkReal x697=((4.0e-7)*gclwh5_0*x429);
IkReal x698=(x430*x547);
IkReal x699=(x440*x466);
IkReal x700=(x430*x522);
IkReal x701=((0.113)*gclwh8_14*x445);
IkReal x702=(x428*x459);
IkReal x703=(x479*x517);
IkReal x704=((0.226)*gclwh10_14*x429);
IkReal x705=((0.113)*gclwh6_14*x425);
IkReal x706=((2.0e-7)*gclwh10_2*x437);
IkReal x707=(x440*x489);
IkReal x708=((4.0e-7)*gclwh6_2*x430);
IkReal x709=((2.0e-7)*gclwh3_2*x425);
IkReal x710=(x479*x496);
IkReal x711=(x425*x518);
IkReal x712=(x439*x440);
IkReal x713=(x429*x544);
IkReal x714=(gclwh8_2*pz*x447);
IkReal x715=(gclwh1_2*pz*x447);
IkReal x716=(x445*x538);
IkReal x717=((4.0e-7)*gclwh10_2*x429);
IkReal x718=(x437*x562);
IkReal x719=((4.0e-7)*gclwh3_2*x430);
IkReal x720=((2.0e-7)*gclwh6_2*x425);
IkReal x721=(x430*x549);
IkReal x722=(x440*x452);
IkReal x723=(x425*x484);
IkReal x724=((4.0)*x673);
IkReal x725=((2.0e-7)*gclwh2_0*x425);
IkReal x726=((2.0e-7)*gclwh7_0*x425);
IkReal x727=(gclwh9_0*pz*x447);
IkReal x728=(x429*x541);
IkReal x729=(gclwh0_0*pz*x447);
IkReal x730=(x437*x442);
IkReal x731=((4.0e-7)*gclwh2_0*x430);
IkReal x732=(x430*x506);
IkReal x733=(x433*x501);
IkReal x734=(x440*x558);
IkReal x735=((4.0e-7)*gclwh7_0*x430);
IkReal x736=((0.113)*gclwh7_15*x425);
IkReal x737=(x429*x539);
IkReal x738=(x479*x532);
IkReal x739=(x430*x504);
IkReal x740=((0.113)*gclwh11_15*x437);
IkReal x741=((0.113)*gclwh9_15*x445);
IkReal x742=((0.0565)*gclwh12_5*x425);
IkReal x743=(gclwh14_5*npx*x457);
IkReal x744=((2.0e-7)*gclwh4_12*x429);
IkReal x745=(x479*x529);
IkReal x746=((2.0e-7)*gclwh12_12*x430);
IkReal x747=(x435*x464);
IkReal x748=((0.0565)*gclwh4_5*x437);
IkReal x749=((0.0565)*gclwh14_5*x445);
IkReal x750=(x429*x450);
IkReal x751=(x435*x453);
IkReal x752=((0.113)*gclwh12_5*x430);
IkReal x753=((2.0e-7)*gclwh14_12*x479);
IkReal x754=((1.0e-7)*gclwh12_12*x425);
IkReal x755=((0.113)*gclwh4_5*x429);
IkReal x756=(x430*x526);
IkReal x757=(x444*x445);
IkReal x758=(x459*x556);
IkReal x759=(x419*x482);
IkReal x760=(gclwh6_2*pz*x438);
IkReal x761=(x444*x481);
IkReal x762=(x419*x511);
IkReal x763=(x459*x460);
IkReal x764=(gclwh6_3*pp*x438);
IkReal x765=(gclwh8_2*rxp0_2*x457);
IkReal x766=(x423*x485);
IkReal x767=(x424*x485);
IkReal x768=(x457*x458);
IkReal x769=(x459*x550);
IkReal x770=(x445*x565);
IkReal x771=(x419*x505);
IkReal x772=(x466*x485);
IkReal x773=(gclwh7_0*pz*x438);
IkReal x774=(x459*x488);
IkReal x775=(x419*x493);
IkReal x776=(gclwh9_0*rxp0_2*x457);
IkReal x777=(gclwh7_1*pp*x438);
IkReal x778=(x469*x495);
IkReal x779=(x427*x485);
IkReal x780=((0.0565)*gclwh13_7*x425);
IkReal x781=((2.0e-7)*gclwh13_13*x430);
IkReal x782=(x432*x435);
IkReal x783=(gclwh15_7*npx*x457);
IkReal x784=(x467*x479);
IkReal x785=((2.0e-7)*gclwh5_13*x429);
IkReal x786=((0.0565)*gclwh5_7*x437);
IkReal x787=(x435*x494);
IkReal x788=(x429*x543);
IkReal x789=((1.0e-7)*gclwh13_13*x425);
IkReal x790=((0.113)*gclwh13_7*x430);
IkReal x791=(x430*x472);
IkReal x792=((0.0565)*gclwh15_7*x445);
IkReal x793=((0.113)*gclwh5_7*x429);
IkReal x794=((2.0e-7)*gclwh15_13*x479);
IkReal x795=(gclwh12_2*npy*x672);
IkReal x796=(gclwh4_2*npz*x672);
IkReal x797=(gclwh4_3*x429*x501);
IkReal x798=(x423*x675);
IkReal x799=(x424*x675);
IkReal x800=(gclwh12_3*x430*x501);
IkReal x801=(gclwh14_2*npx*x672);
IkReal x802=(gclwh5_0*npz*x672);
IkReal x803=(gclwh13_0*npy*x672);
IkReal x804=(gclwh15_1*x479*x501);
IkReal x805=(gclwh5_1*x429*x501);
IkReal x806=(gclwh13_1*x430*x501);
IkReal x807=((1.0)*x419*x463);
IkReal x808=(x427*x675);
IkReal x809=(gclwh15_0*npx*x672);
IkReal x810=((1.0)*x425*x469);
IkReal x811=(x650+x651);
IkReal x812=(x566+x567);
IkReal x813=(x629+x630);
IkReal x814=(x593+x592);
IkReal x815=(x647+x648);
IkReal x816=(x654+x655);
IkReal x817=(x668+x670+x791+x788);
IkReal x818=(x643+x641+x756+x750);
IkReal x819=(x625+x737+x736+x738);
IkReal x820=(x597+x703+x704+x705);
IkReal x821=(x658+x659+x660+x665+x784);
IkReal x822=(x636+x634+x632+x631+x745);
IkReal x823=(x579+x576+x682+x687+x684);
IkReal x824=(x596+x595+x702+x700+x701);
IkReal x825=(x571+x572+x678+x676+x677);
IkReal x826=(x588+x591+x694+x696+x698);
IkReal x827=(x589+x590+x695+x697+x699);
IkReal x828=(x627+x626+x739+x740+x741);
IkReal x829=(x619+x621+x622+x733+x732+x730);
IkReal x830=(x604+x608+x611+x718+x716+x721);
IkReal x831=(x581+x583+x585+x689+x688+x692);
IkReal x832=(x603+x602+x601+x711+x710+x713);
IkReal x833=(x615+x616+x613+x723+x724+x728);
IkReal x834=(x578+x575+x577+x580+x683+x686+x685);
IkReal x835=(x582+x584+x586+x587+x690+x691+x693);
IkReal x836=(x574+x570+x573+x569+x679+x681+x680);
IkReal x837=(x614+x617+x612+x722+x725+x726+x727);
IkReal x838=(x618+x624+x620+x623+x735+x734+x731+x729);
IkReal x839=(x599+x598+x600+x712+x708+x709+x706+x707);
IkReal x840=(x607+x606+x605+x609+x610+x719+x715+x714+x717+x720);
IkReal x841=(x669+x667+x666+x671+x790+x793+x792+x794+x787+x789);
IkReal x842=(x646+x645+x644+x642+x755+x754+x751+x753+x752+x749);
IkReal x843=(x757+x759+x758+x760+x761+x762+x763+x795+x796);
IkReal x844=(x656+x657+x661+x663+x662+x664+x782+x783+x780+x781+x786+x785);
IkReal x845=(x640+x637+x635+x633+x638+x639+x746+x747+x744+x742+x743+x748);
IkReal x846=(x773+x772+x771+x770+x775+x774+x769+x804+x803+x802);
IkReal x847=(x768+x764+x765+x766+x767+x797+x799+x798+x801+x800);
IkReal x848=(x777+x776+x779+x778+x810+x809+x808+x805+x807+x806);
op[23]=((-0.00319225000001)+((x430*x484))+(((-0.113)*gclwh7_7*x430))+(((-1.0)*gclwh11_7*x537))+(((-2.0e-7)*gclwh7_13*x430))+(((-1.0)*gclwh7_10*x425))+(((1.0e-7)*gclwh7_13*x425))+((gclwh15_10*x535))+(((-0.0565)*gclwh9_7*x445))+(((-1.0)*gclwh13_10*x438))+(((-0.0565)*gclwh11_7*x437))+(((0.113)*gclwh11_7*x429))+((gclwh13_7*x536))+((pp*x433))+((gclwh5_7*x451))+(((-1.0)*gclwh9_7*x475))+(((-1.0)*x429*x442))+(((-2.0)*x673))+((gclwh7_7*x421))+((gclwh9_7*npx*x457))+((gclwh11_10*x437))+((gclwh11_10*x521))+(((0.0565)*gclwh7_7*x425))+((gclwh13_13*x476))+(((0.00319225)*x433))+(((-1.0)*gclwh15_13*x477))+((gclwh5_13*x560))+((gclwh7_13*x545))+(((-1.0)*gclwh15_7*x434))+(((-1.0)*gclwh7_10*x495))+(((-1.0)*gclwh5_10*x554)));
op[24]=((2.26e-8)+(((-1.0)*gclwh14_12*x674))+(((-0.00114921)*x453))+(((-1.0)*x812))+(((-0.00114921)*x503))+((x426*x464))+x568+(((0.72)*gclwh12_12*x430))+(((0.00114921)*x464))+(((-1.0)*x426*x453))+(((0.72)*gclwh4_12*x429))+((gclwh6_12*x436))+(((-1.0)*x425*x546)));
op[25]=((((-1.0)*x823))+(((-1.0)*x825))+x834+x836);
op[26]=((-0.04068)+(((-1.0)*x437*x443))+(((-1.0)*gclwh4_11*x525))+(((-1.0)*gclwh8_11*x513))+(((-1.0)*gclwh12_11*x520))+(((0.452)*x456))+(((-8.0)*gclwh14_11*x479))+(((8.0)*gclwh12_11*x430))+(((-1.0)*x425*x431))+(((8.0)*gclwh4_11*x429))+((x445*x470))+(((-1.0)*gclwh10_11*x559))+((gclwh14_11*x553)));
op[27]=((((0.72)*gclwh12_2*x430))+((gclwh6_2*x436))+(((0.72)*gclwh4_2*x429))+(((-0.72)*npx*x444))+(((-1.0)*gclwh8_2*x462))+(((0.00114921)*x483))+(((-0.025538)*x555))+((x426*x483))+(((-1.0)*x424*x426))+(((-1.0)*x423*x426))+(((-1.0)*gclwh10_2*x454))+(((-0.00114921)*x424))+(((-0.00114921)*x423))+(((0.025538)*x563))+(((-0.025538)*x492)));
op[28]=((2.26e-8)+x812+(((-1.0)*x568)));
op[29]=((((-1.0)*x823))+(((-1.0)*x834))+x825+x836);
op[30]=((((-1.0)*x827))+(((-1.0)*x835))+x826+x831);
op[31]=((2.26e-8)+(((-1.0)*gclwh15_13*x674))+(((-0.00114921)*x494))+((x426*x432))+(((-1.0)*x425*x564))+(((-1.0)*x814))+((gclwh7_13*x436))+x594+(((-0.00114921)*x510))+(((0.72)*gclwh13_13*x430))+(((0.72)*gclwh5_13*x429))+(((0.00114921)*x432))+(((-1.0)*x426*x494)));
op[32]=((((0.025538)*x502))+((gclwh7_0*x436))+(((0.025538)*x551))+(((-1.0)*gclwh9_0*x462))+((x426*x466))+(((-1.0)*x426*x427))+(((-1.0)*gclwh15_0*x674))+(((0.72)*gclwh5_0*x429))+(((0.00114921)*x466))+(((-1.0)*x425*x552))+(((0.72)*gclwh13_0*x430))+(((-0.00114921)*x427))+(((-0.025538)*x491))+(((-0.00114921)*x478)));
op[33]=((-0.04068)+(((0.452)*x507))+(((-0.452)*x468))+(((-1.0)*gclwh5_10*x525))+((gclwh15_10*x553))+((x445*x487))+(((-1.0)*gclwh11_10*x559))+(((8.0)*gclwh5_10*x429))+(((-1.0)*x437*x542))+(((8.0)*gclwh13_10*x430))+(((-1.0)*gclwh13_10*x520))+(((-8.0)*gclwh15_10*x479))+(((-1.0)*x425*x547)));
op[34]=((((-1.0)*x826))+(((-1.0)*x827))+x835+x831);
op[35]=((2.26e-8)+(((-1.0)*x594))+x814);
op[36]=((-7.2e-8)+((gclwh12_12*x436))+(((-0.72)*gclwh6_12*x430))+((gclwh4_12*x454))+(((-1.0)*x824))+(((-1.0)*gclwh14_12*x462))+(((0.36)*gclwh6_12*x425))+x820+((gclwh6_12*x528)));
op[37]=((0.07118449999998)+(((-1.0)*x840))+(((-1.0)*x832))+x830+x839);
op[38]=((-0.01276899999996)+((gclwh6_11*x520))+((gclwh12_11*x548))+(((-8.0)*gclwh6_11*x430))+(((8.0)*gclwh10_11*x429))+(((0.452)*x512))+(((-1.0)*gclwh8_11*x553))+(((-1.0)*x445*x496))+(((-1.0)*x437*x544))+(((8.0)*gclwh8_11*x479))+(((-1.0)*gclwh10_11*x525))+((x425*x549))+(((-1.0)*gclwh14_11*x513)));
op[39]=((-7.2e-8)+(((-0.226)*pp*x428))+(((-0.452)*gclwh6_14*x430))+((gclwh4_2*x454))+((gclwh1_2*x674))+(((-0.72)*gclwh6_2*x430))+(((0.36)*gclwh6_2*x425))+(((-0.0007214485)*x428))+(((-0.36)*gclwh3_2*x425))+(((0.452)*gclwh8_14*x479))+(((0.72)*gclwh3_2*x430))+(((-1.0)*x445*x517))+(((0.00114921)*x489))+(((-0.0007214485)*x455))+((gclwh6_2*x528))+(((-0.00114921)*x530))+((gclwh3_2*x528))+((gclwh8_2*x674))+(((0.0007214485)*x524))+(((-1.0)*gclwh14_2*x462))+(((-1.0)*x426*x439))+(((-0.00114921)*x439))+(((0.452)*gclwh10_14*x429))+((x425*x522))+(((-1.0)*x426*x489))+((gclwh12_2*x436))+(((-1.0)*x426*x530))+(((0.72)*gclwh10_2*x429)));
op[40]=((((-1.0)*x820))+x824);
op[41]=((-0.00638449999998)+(((-1.0)*x840))+(((-1.0)*x830))+x832+x839);
op[42]=((-0.07118449999998)+(((-1.0)*x838))+(((-1.0)*x833))+x829+x837);
op[43]=((-7.2e-8)+(((-1.0)*gclwh13_13*x436))+((gclwh15_13*x462))+(((-1.0)*x819))+(((-1.0)*gclwh7_13*x528))+(((-1.0)*gclwh5_13*x454))+(((-0.36)*gclwh7_13*x425))+(((0.72)*gclwh7_13*x430))+x828);
op[44]=((7.2e-8)+(((-1.0)*gclwh5_0*x454))+(((-0.0007214485)*x534))+((gclwh0_0*x674))+(((-0.452)*gclwh7_15*x430))+(((-1.0)*gclwh9_0*x674))+(((-1.0)*gclwh7_0*x528))+(((-0.36)*gclwh7_0*x425))+((gclwh2_0*x528))+((x425*x504))+(((0.0007214485)*x490))+(((-1.0)*gclwh13_0*x436))+(((0.00114921)*x558))+(((0.72)*gclwh2_0*x430))+(((0.452)*gclwh9_15*x479))+(((0.00114921)*x452))+(((-0.0007214485)*x498))+((x426*x558))+(((-1.0)*x445*x532))+(((-1.0)*x426*x452))+(((0.452)*gclwh11_15*x429))+(((-1.0)*x437*x539))+((gclwh15_0*x462))+(((0.72)*gclwh7_0*x430))+(((-0.36)*gclwh2_0*x425)));
op[45]=((-0.01276899999996)+(((0.012769)*x433))+(((4.0)*pp*x433))+(((8.0)*gclwh7_10*x430))+(((-1.0)*gclwh7_10*x520))+((x437*x541))+(((-1.0)*x425*x506))+(((-8.0)*x673))+((gclwh15_10*x513))+((gclwh11_10*x525))+(((-1.0)*gclwh13_10*x548))+(((-8.0)*gclwh11_10*x429))+(((-1.0)*gclwh5_10*x559)));
op[46]=((0.00638449999998)+(((-1.0)*x829))+(((-1.0)*x838))+x837+x833);
op[47]=((((-1.0)*x828))+x819);
op[48]=((-0.02034)+(((-1.0)*gclwh4_11*x437))+(((-1.0)*gclwh12_11*x425))+(((-1.0)*x822))+(((-1.0)*x813))+(((-1.0)*x842))+((gclwh14_11*x445))+x628+x818+x845);
op[49]=((((-1.0)*x422*x423))+(((-1.0)*x422*x424))+(((-0.02920775000001)*gclwh4_3*x437))+(((-1.0)*gclwh10_3*x465))+(((-1.0)*gclwh8_2*x499))+(((0.0063844887)*x531))+((gclwh6_2*x448))+(((0.000574605)*x483))+(((-0.000103428900000032)*x511))+(((-1.0)*gclwh6_8*x516))+(((0.36)*gclwh4_2*x429))+(((-1.0)*x815))+(((-0.02034)*x458))+((gclwh10_8*x500))+(((-1.0)*x847))+(((0.06480000000002)*gclwh12_3*x430))+(((-0.000574605)*x424))+(((-0.000574605)*x423))+x649+(((-0.00366120000000113)*x460))+(((-0.000103428900000032)*x482))+((x422*x483))+(((0.00366120000000113)*x557))+(((0.36)*gclwh12_2*x430))+x843+(((-0.02920775000001)*gclwh12_3*x425))+(((0.06480000000002)*gclwh4_3*x429))+(((-0.36)*npx*x444)));
op[50]=(((x422*x503))+(((-1.0)*x422*x464))+(((-0.36)*gclwh4_12*x429))+((gclwh10_8*x449))+(((-1.0)*gclwh6_12*x448))+(((-0.000574605)*x464))+(((-1.0)*x430*x546))+((x422*x453))+(((0.000574605)*x453))+(((0.36)*gclwh14_12*x479))+((gclwh12_12*x473))+(((-1.0)*gclwh6_8*x446))+x812+((gclwh8_8*x480))+(((-1.0)*x568)));
op[51]=((((-7.2e-8)*gclwh4_3*x429))+(((-7.2e-8)*gclwh12_3*x430))+(((3.6e-8)*gclwh4_3*x437))+(((4.068e-9)*x556))+(((-1.0)*x813))+(((3.6e-8)*gclwh12_3*x425))+(((4.068e-9)*x460))+(((-1.0)*x834))+(((1.14921e-10)*x482))+x628+(((1.14921e-10)*x511))+(((-4.068e-9)*x557))+x825);
op[52]=(((gclwh4_11*x437))+(((-1.0)*x818))+(((-1.0)*gclwh14_11*x445))+(((-1.0)*x842))+x822+x845+((gclwh12_11*x425)));
op[53]=((((-3.19225e-17)*x482))+(((-1.0)*gclwh10_3*x523))+(((-3.19225e-17)*x511))+(((0.0063845113)*x531))+(((-1.0)*gclwh6_8*x514))+(((-1.0)*x649))+(((0.00319224999999)*gclwh12_3*x425))+(((2.0e-14)*gclwh12_3*x430))+(((-1.13e-15)*x460))+(((-1.0)*x847))+(((1.13e-15)*x557))+(((2.0e-14)*gclwh4_3*x429))+((gclwh10_8*x561))+x815+x843+(((0.00319224999999)*gclwh4_3*x437)));
op[54]=((((-1.0)*x422*x427))+(((0.06480000000002)*gclwh5_1*x429))+(((0.00366120000000113)*x508))+(((-0.02920775000001)*gclwh5_1*x437))+(((-1.0)*x422*x478))+(((-1.0)*gclwh11_1*x465))+(((-1.0)*gclwh13_0*x473))+(((-1.0)*gclwh7_9*x514))+((gclwh7_0*x448))+(((0.06480000000002)*gclwh13_1*x430))+(((-1.0)*gclwh9_0*x499))+(((0.0063845113)*x441))+(((-1.0)*x653))+(((-0.06480000000002)*gclwh15_1*x479))+(((-1.0)*x848))+((x430*x552))+(((0.02920775000001)*gclwh15_1*x445))+(((-0.000574605)*x427))+(((-0.36)*gclwh15_0*x479))+((x422*x466))+(((0.000574605)*x466))+(((0.000103428900000032)*x463))+(((0.36)*gclwh5_0*x429))+(((-0.00366120000000113)*x488))+((gclwh11_9*x561))+(((-0.000103428900000032)*x493))+x816+x846+(((-0.02920775000001)*gclwh13_1*x425))+(((-0.000103428900000032)*x505)));
op[55]=((-0.02034)+(((-1.0)*x821))+(((-1.0)*x811))+((gclwh15_10*x445))+(((-1.0)*x841))+(((-1.0)*gclwh13_10*x425))+(((-1.0)*gclwh5_10*x437))+x652+x817+x844);
op[56]=((((3.6e-8)*gclwh13_1*x425))+(((-7.2e-8)*gclwh13_1*x430))+(((-7.2e-8)*gclwh5_1*x429))+(((1.14921e-10)*x505))+(((4.068e-9)*x488))+(((7.2e-8)*gclwh15_1*x479))+(((4.068e-9)*x550))+(((-1.0)*x826))+(((-4.068e-9)*x508))+(((-1.0)*x652))+(((1.14921e-10)*x493))+(((-1.14921e-10)*x463))+(((-3.6e-8)*gclwh15_1*x445))+x811+x835+(((3.6e-8)*gclwh5_1*x437)));
op[57]=(((gclwh11_9*x449))+(((-1.0)*gclwh7_9*x446))+(((2.26e-8)*x441))+(((-0.36)*gclwh5_13*x429))+(((-1.0)*x430*x564))+(((0.000574605)*x494))+(((0.36)*gclwh15_13*x479))+(((-1.0)*x594))+(((-1.0)*gclwh7_13*x448))+(((-0.000574605)*x432))+((x422*x510))+((gclwh13_13*x473))+x814+(((-1.0)*x422*x432))+((x422*x494)));
op[58]=(((gclwh11_9*x500))+(((2.0e-14)*gclwh5_1*x429))+(((-3.19225e-17)*x493))+(((-0.00319224999999)*gclwh15_1*x445))+(((3.19225e-17)*x463))+(((-1.0)*gclwh11_1*x523))+(((0.00319224999999)*gclwh13_1*x425))+(((-1.0)*gclwh7_9*x516))+(((1.13e-15)*x508))+(((-1.0)*x816))+(((-1.13e-15)*x488))+(((-1.0)*x848))+(((-2.0e-14)*gclwh15_1*x479))+(((0.00319224999999)*gclwh5_1*x437))+(((2.0e-14)*gclwh13_1*x430))+x653+(((0.0063844887)*x441))+x846+(((-3.19225e-17)*x505)));
op[59]=((((-1.0)*gclwh15_10*x445))+(((-1.0)*x817))+(((-1.0)*x841))+((gclwh5_10*x437))+((gclwh13_10*x425))+x821+x844);
op[60]=((0.02920774999999)+((x479*x538))+((gclwh6_11*x425))+(((0.0565)*gclwh8_5*x445))+(((0.36)*gclwh8_8*x479))+((gclwh12_11*x438))+(((0.113)*gclwh6_5*x430))+(((-1.0)*x422*x474))+(((-1.0)*gclwh14_11*x535))+(((-1.0)*gclwh8_11*x445))+(((0.0565)*gclwh10_5*x437))+(((-0.0565)*gclwh6_5*x425))+((gclwh6_8*r21*x422))+((x429*x562))+(((0.36)*gclwh10_8*x429))+((gclwh6_11*x495))+(((-1.0)*gclwh12_5*x536))+(((-1.0)*gclwh8_11*x481))+(((-0.36)*gclwh6_8*x430))+(((1.0e-7)*gclwh6_12*x425))+(((-0.000574605)*x474))+((gclwh14_5*x434))+((gclwh4_12*x560))+(((-1.0)*x430*x518))+(((-1.0)*x422*x533))+(((-1.0)*gclwh10_11*x437))+((gclwh12_12*x476))+(((-0.000574605)*x533))+(((-0.113)*gclwh10_5*x429))+(((-1.0)*gclwh8_5*npx*x457))+(((-1.0)*gclwh4_5*x451))+(((-1.0)*gclwh10_11*x521))+(((-1.0)*gclwh14_12*x477))+((gclwh6_8*x473))+(((0.113)*x512))+(((-1.0)*gclwh6_5*x421))+((gclwh10_5*x537))+(((-2.0e-7)*gclwh6_12*x430))+((gclwh8_5*x475))+((gclwh6_12*x545)));
op[61]=((3.6e-8)+(((0.06480000000002)*gclwh1_3*npx*pz))+(((0.02034)*gclwh4_2*rxp2_2))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.18)*gclwh10_2*pp*r22))+(((-0.000180362125)*gclwh8_14*r20))+(((-0.113)*gclwh12_3*pp*rxp1_2))+(((-0.02920775000001)*gclwh8_3*pp*r20))+(((0.00366120000000113)*gclwh4_3*rxp2_2))+(((-0.03559225000001)*gclwh3_3*pp*r21))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((-0.0564999)*gclwh6_8*pp*r21))+(((-0.000103428900000032)*gclwh8_3*r20))+(((-0.06480000000002)*gclwh6_3*npy*pz))+(((0.00319225)*gclwh1_2*pz*r20))+(((0.06480000000002)*gclwh3_3*npy*pz))+(((-0.02920775000001)*gclwh10_3*pp*r22))+(((0.000574605)*gclwh6_2*r21))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.113)*gclwh4_2*pz*rxp2_2))+(((0.06480000000002)*gclwh10_3*npz*pz))+(((0.000574605)*gclwh1_2*r20))+(((0.000103428900000032)*gclwh1_3*r20))+(((0.18)*gclwh6_2*pp*r21))+(((-0.02034)*gclwh14_2*rxp0_2))+(((0.113)*pz))+(((0.00319225)*gclwh3_2*pz*r21))+((gclwh6_2*pp*pz*r21))+(((0.0565)*gclwh6_14*pp*r21))+(((0.000180361805775)*gclwh8_8*r20))+(((-0.18)*gclwh3_2*pp*r21))+(((2.0)*gclwh6_3*npy*pp*pz))+(((0.36)*gclwh10_2*npz*pz))+(((-0.000103428900000032)*gclwh10_3*r22))+(((0.113)*gclwh8_14*npx*pz))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((-0.1129998)*gclwh8_8*npx*pz))+(((-0.000574605)*gclwh10_2*r22))+(((0.0564999)*gclwh8_8*pp*r20))+(((0.0564999)*gclwh10_8*pp*r22))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((-0.18)*gclwh8_2*pp*r20))+(((0.00319225)*gclwh6_2*pz*r21))+(((0.00366120000000113)*gclwh12_3*rxp1_2))+((gclwh10_3*r22*(pp*pp)))+((gclwh3_3*r21*(pp*pp)))+(((-0.113)*gclwh4_3*pp*rxp2_2))+((gclwh1_3*r20*(pp*pp)))+(((-0.00319225)*gclwh10_2*pz*r22))+(((-0.113)*gclwh6_14*npy*pz))+(((0.36)*gclwh3_2*npy*pz))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((0.06480000000002)*gclwh8_3*npx*pz))+(((0.000103428900000032)*gclwh6_3*r21))+(((0.000180361805775)*gclwh10_8*r22))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((0.1129998)*gclwh6_8*npy*pz))+(((0.113)*gclwh10_14*npz*pz))+(((-0.03559225000001)*gclwh1_3*pp*r20))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.0565)*gclwh8_14*pp*r20))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((0.36)*gclwh1_2*npx*pz))+(((-0.000180361805775)*gclwh6_8*r21))+(((-0.113)*gclwh14_2*pz*rxp0_2))+(((0.36)*gclwh8_2*npx*pz))+(((-0.000574605)*gclwh8_2*r20))+(((0.113)*gclwh12_2*pz*rxp1_2))+(((0.02034)*gclwh12_2*rxp1_2))+(((0.000180362125)*gclwh6_14*r21))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.0565)*gclwh10_14*pp*r22))+(((-0.00319225)*gclwh8_2*pz*r20))+(((0.02920775000001)*gclwh6_3*pp*r21))+(((-0.36)*gclwh6_2*npy*pz))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((-0.000180362125)*gclwh10_14*r22))+(((0.000103428900000032)*gclwh3_3*r21))+(((-0.18)*gclwh1_2*pp*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.000574605)*gclwh3_2*r21))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-0.1129998)*gclwh10_8*npz*pz))+(((-1.0)*gclwh8_2*pp*pz*r20))+((gclwh8_3*r20*(pp*pp))));
IkReal x849=pz*pz;
IkReal x850=pp*pp;
IkReal x851=((0.113)*pz);
IkReal x852=(gclwh6_5*r21);
IkReal x853=((0.0565)*pp);
IkReal x854=(gclwh10_14*r22);
IkReal x855=((0.113)*rxp1_2);
IkReal x856=(npz*pz);
IkReal x857=((2.0)*pp);
IkReal x858=((0.00319225)*pz);
IkReal x859=(gclwh10_2*r22);
IkReal x860=((1.13e-8)*rxp1_2);
IkReal x861=(npy*pz);
IkReal x862=(gclwh7_9*r21);
IkReal x863=((0.0063845)*rxp2_2);
IkReal x864=(gclwh6_8*r21);
IkReal x865=(npx*pz);
IkReal x866=(gclwh6_2*r21);
IkReal x867=(gclwh11_7*r22);
IkReal x868=(gclwh7_15*r21);
IkReal x869=(pp*r20);
IkReal x870=(gclwh6_11*r21);
IkReal x871=((1.0)*pp);
IkReal x872=(gclwh10_8*r22);
IkReal x873=(gclwh7_10*r21);
IkReal x874=(gclwh6_12*r21);
IkReal x875=((0.113)*pp);
IkReal x876=(gclwh15_1*rxp0_2);
IkReal x877=(gclwh7_13*r21);
IkReal x878=(gclwh9_15*r20);
IkReal x879=(gclwh11_10*r22);
IkReal x880=(gclwh5_10*rxp2_2);
IkReal x881=(gclwh10_3*r22);
IkReal x882=((0.02034)*rxp1_2);
IkReal x883=(gclwh6_14*r21);
IkReal x884=(gclwh11_1*r22);
IkReal x885=((1.13e-15)*rxp1_2);
IkReal x886=((0.0564999)*pp);
IkReal x887=((1.0e-7)*pp);
IkReal x888=((1.13e-8)*rxp2_2);
IkReal x889=((2.0e-7)*pp);
IkReal x890=((0.18)*pp);
IkReal x891=(gclwh11_15*r22);
IkReal x892=(gclwh8_14*r20);
IkReal x893=(gclwh8_3*r20);
IkReal x894=(gclwh15_13*rxp0_2);
IkReal x895=(gclwh7_0*r21);
IkReal x896=((1.0)*pz);
IkReal x897=((0.226)*rxp1_2);
IkReal x898=((0.02034)*rxp2_2);
IkReal x899=((0.0565001)*pp);
IkReal x900=(gclwh7_7*r21);
IkReal x901=(gclwh10_11*r22);
IkReal x902=((0.113)*rxp0_2);
IkReal x903=((0.00319224999999)*pp);
IkReal x904=(gclwh4_3*rxp2_2);
IkReal x905=((3.19225e-17)*r20);
IkReal x906=(gclwh8_5*r20);
IkReal x907=(gclwh9_1*r20);
IkReal x908=(gclwh6_3*r21);
IkReal x909=(gclwh5_1*rxp2_2);
IkReal x910=(gclwh11_9*r22);
IkReal x911=(gclwh7_1*r21);
IkReal x912=((3.6e-8)*pp);
IkReal x913=((0.000574605)*r20);
IkReal x914=(gclwh4_11*rxp2_2);
IkReal x915=(gclwh1_3*r20);
IkReal x916=((0.00319225)*r20);
IkReal x917=(gclwh3_3*r21);
IkReal x918=((0.0063845)*r20);
IkReal x919=(gclwh3_2*r21);
IkReal x920=((0.226)*rxp0_2);
IkReal x921=((0.00319225000001)*pp);
IkReal x922=(gclwh14_12*rxp0_2);
IkReal x923=(gclwh2_1*r21);
IkReal x924=((0.113)*gclwh9_15);
IkReal x925=((0.113)*gclwh8_14);
IkReal x926=((0.0063845)*rxp1_2);
IkReal x927=((6.3845e-10)*r20);
IkReal x928=(gclwh9_7*r20);
IkReal x929=((4.068e-9)*rxp1_2);
IkReal x930=(gclwh10_5*r22);
IkReal x931=(gclwh2_0*r21);
IkReal x932=((0.0063845)*rxp0_2);
IkReal x933=(gclwh0_1*r20);
IkReal x934=((0.000574605)*x862);
IkReal x935=((0.000574605)*x910);
IkReal x936=(gclwh9_9*x913);
IkReal x937=((1.13e-8)*x894);
IkReal x938=(gclwh13_7*x926);
IkReal x939=((0.000180362125)*x900);
IkReal x940=((0.113)*x880);
IkReal x941=(gclwh5_7*x863);
IkReal x942=(gclwh13_10*x855);
IkReal x943=((0.00319225)*x873);
IkReal x944=((3.19225e-10)*x877);
IkReal x945=(gclwh13_13*x860);
IkReal x946=((0.000180362125)*x928);
IkReal x947=(gclwh15_7*x932);
IkReal x948=((0.000180362125)*x867);
IkReal x949=(gclwh15_10*x902);
IkReal x950=(gclwh9_10*x916);
IkReal x951=(gclwh5_13*x888);
IkReal x952=((0.00319225)*x879);
IkReal x953=(gclwh1_3*x869);
IkReal x954=((1.0)*x850);
IkReal x955=((2.0)*x849);
IkReal x956=((0.36)*gclwh9_9*x865);
IkReal x957=((0.36)*gclwh11_9*x856);
IkReal x958=(x862*x890);
IkReal x959=((0.18)*gclwh9_9*x869);
IkReal x960=((0.36)*gclwh7_9*x861);
IkReal x961=(x890*x910);
IkReal x962=((2.0)*gclwh11_10*x856);
IkReal x963=((2.0)*gclwh9_10*x865);
IkReal x964=((2.0e-7)*gclwh7_13*x861);
IkReal x965=(gclwh9_7*npx*x851);
IkReal x966=(x853*x900);
IkReal x967=(gclwh11_7*npz*x851);
IkReal x968=(x853*x928);
IkReal x969=(gclwh7_7*npy*x851);
IkReal x970=(x853*x867);
IkReal x971=((2.0)*gclwh7_10*x861);
IkReal x972=(x877*x887);
IkReal x973=(x971+x952+x950+x949);
IkReal x974=(x934+x958+x957+x956);
IkReal x975=(x962+x963+x940+x942+x943);
IkReal x976=(x935+x936+x960+x961+x959);
IkReal x977=(x939+x938+x937+x966+x967+x964+x965+x941);
IkReal x978=(x970+x972+x968+x969+x951+x948+x944+x945+x946+x947);
op[62]=((-3.6e-8)+(((4.0e-7)*gclwh6_8*x861))+(((0.02034)*x922))+(((-0.00036072425)*x883))+(((0.00036072425)*x854))+(((2.0e-7)*gclwh8_8*x869))+((x869*x925))+(((-0.000574605)*x874))+(((-4.0e-7)*gclwh10_8*x856))+(((0.36)*gclwh6_12*x861))+((gclwh8_8*x927))+(((6.3845e-10)*x872))+(((-0.226)*gclwh8_14*x865))+(((-1.0)*x864*x889))+(((-0.226)*gclwh10_14*x856))+((x854*x875))+((x872*x889))+(((0.00036072425)*x892))+(((-4.0e-7)*gclwh8_8*x865))+(((-6.3845e-10)*x864))+(((0.226)*gclwh6_14*x861))+(((-1.0)*x874*x890))+(((-1.0)*gclwh4_12*x898))+(((-1.0)*gclwh12_12*x882))+(((-1.0)*x875*x883)));
op[63]=((-0.00638450000002)+(((-1.14921e-10)*x908))+((gclwh12_11*x897))+(((-1.14921e-10)*x915))+(((-1.14921e-10)*x917))+(((-1.0)*x908*x912))+(((-7.2e-8)*gclwh8_3*x865))+(((-0.18)*gclwh8_8*x869))+(((0.36)*gclwh10_8*x856))+(((0.000574605)*x864))+(((-0.36)*gclwh6_8*x861))+(((-4.068e-9)*x904))+(((-0.000574605)*x872))+(((-1.0)*gclwh8_11*r20*x857))+(((-7.2e-8)*gclwh3_3*x861))+((x864*x890))+((x881*x912))+(((3.6e-8)*x953))+(((-1.0)*gclwh8_8*x913))+(((-4.0)*gclwh6_11*x861))+(((-7.2e-8)*gclwh10_3*x856))+(((0.226)*x914))+(((0.0063845)*x870))+(((4.0)*gclwh10_11*x856))+(((-1.0)*gclwh8_11*x918))+(((3.6e-8)*gclwh8_3*x869))+((x912*x917))+(((-1.0)*gclwh14_11*x920))+(((-7.2e-8)*gclwh1_3*x865))+(((-1.0)*x857*x901))+(((-0.0063845)*x901))+(((0.36)*gclwh8_8*x865))+(((7.2e-8)*gclwh6_3*x861))+(((-1.0)*x872*x890))+(((1.14921e-10)*x893))+(((4.0)*gclwh8_11*x865))+((x857*x870))+(((1.14921e-10)*x881))+(((-1.0)*gclwh12_3*x929)));
op[64]=((0.00319225000001)+(((-0.00319225)*x870))+((gclwh4_12*x888))+(((0.00319225)*x901))+(((0.000180362125)*x930))+((x874*x887))+((pp*x901))+(((-1.0)*gclwh8_5*npx*x851))+(((-1.13e-8)*x922))+(((0.000180362125)*x906))+(((-1.0)*x852*x853))+((gclwh6_5*npy*x851))+(((-1.0)*gclwh12_11*x855))+((gclwh14_11*x902))+((x853*x906))+(((-2.0e-7)*gclwh6_12*x861))+(((2.0)*gclwh6_11*x861))+((gclwh8_11*x916))+((gclwh12_12*x860))+(((-1.0)*gclwh12_5*x926))+(((-2.0)*gclwh8_11*x865))+((x853*x930))+(((-1.0)*x870*x871))+(((3.19225e-10)*x874))+(((-1.0)*gclwh4_5*x863))+((gclwh8_11*x869))+(((-1.0)*gclwh10_5*npz*x851))+(((-2.0)*gclwh10_11*x856))+(((-0.000180362125)*x852))+(((-0.113)*x914))+((gclwh14_5*x932)));
op[65]=((((1.13e-15)*x904))+((gclwh3_2*npy*x955))+(((-1.0)*x903*x908))+(((2.0e-14)*gclwh8_3*x865))+((gclwh6_3*x857*x861))+(((-3.19225e-17)*x893))+(((-0.1130002)*gclwh8_8*x865))+(((0.000180362444225)*gclwh8_8*r20))+(((0.00319224999999)*gclwh8_3*x869))+(((-1.0)*gclwh1_2*x869*x896))+(((-1.0)*gclwh6_2*npy*x955))+(((-0.000180362125)*x883))+(((-1.0)*gclwh8_3*x857*x865))+(((-1.0)*pz*x859*x871))+(((0.0565001)*gclwh8_8*x869))+((x850*x915))+((x850*x917))+((x850*x881))+(((-1.0)*x908*x954))+(((0.000180362125)*x854))+(((2.0e-14)*gclwh1_3*x865))+(((-0.1130002)*gclwh10_8*x856))+((x850*x893))+(((-1.0)*gclwh10_14*npz*x851))+(((-1.0)*gclwh1_3*x857*x865))+((gclwh6_14*npy*x851))+((x858*x919))+((gclwh10_2*npz*x955))+(((-1.0)*gclwh10_3*x856*x857))+(((-1.0)*gclwh8_2*r20*x858))+((gclwh8_2*npx*x955))+((gclwh4_2*rxp2_2*x851))+((x858*x866))+((x881*x903))+(((-0.000180362444225)*x864))+(((2.0e-14)*gclwh10_3*x856))+((gclwh1_2*r20*x858))+(((0.000180362125)*x892))+(((-1.0)*gclwh3_3*x857*x861))+((x853*x892))+(((-1.0)*x858*x859))+(((3.19225e-17)*x908))+(((-1.0)*x875*x904))+(((-1.0)*gclwh14_2*rxp0_2*x851))+(((0.000180362444225)*x872))+(((-1.0)*x864*x899))+(((-0.00319225000001)*x953))+(((3.19225e-17)*x917))+((gclwh1_3*x905))+(((-1.0)*pz*x871*x919))+((pp*pz*x866))+(((0.1130002)*gclwh6_8*x861))+((gclwh12_2*rxp1_2*x851))+x851+(((2.0e-14)*gclwh3_3*x861))+(((-1.0)*gclwh8_2*x869*x896))+(((-1.0)*gclwh12_3*pp*x855))+((gclwh1_2*npx*x955))+(((-2.0e-14)*gclwh6_3*x861))+((x853*x854))+((x872*x899))+(((-1.0)*gclwh8_14*npx*x851))+(((-1.0)*x917*x921))+((gclwh12_3*x885))+(((-1.0)*x853*x883))+(((-3.19225e-17)*x881)));
op[66]=((-3.6e-8)+(((0.06480000000002)*gclwh7_1*npy*pz))+(((0.36)*gclwh0_0*npx*pz))+(((0.02920775000001)*gclwh11_1*pp*r22))+(((-0.00366120000000113)*gclwh5_1*rxp2_2))+(((-0.000180362444225)*gclwh11_9*r22))+(((-0.0565001)*gclwh11_9*pp*r22))+(((-0.02920775000001)*gclwh7_1*pp*r21))+(((0.000574605)*gclwh0_0*r20))+(((0.113)*gclwh9_15*npx*pz))+(((0.1130002)*gclwh11_9*npz*pz))+(((0.0565001)*gclwh7_9*pp*r21))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+((gclwh7_1*r21*(pp*pp)))+(((0.113)*pz))+(((0.18)*gclwh9_0*pp*r20))+(((2.0)*gclwh11_1*npz*pp*pz))+(((0.000103428900000032)*gclwh9_1*r20))+(((0.000180362444225)*gclwh7_9*r21))+(((-0.113)*gclwh13_0*pz*rxp1_2))+(((-0.1130002)*gclwh7_9*npy*pz))+(((0.36)*gclwh7_0*npy*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.02920775000001)*gclwh9_1*pp*r20))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((-0.00319225)*gclwh7_0*pz*r21))+(((-0.36)*gclwh9_0*npx*pz))+(((0.06480000000002)*gclwh0_1*npx*pz))+(((0.00366120000000113)*gclwh15_1*rxp0_2))+(((-0.000574605)*gclwh7_0*r21))+(((-0.06480000000002)*gclwh11_1*npz*pz))+(((-0.000180362125)*gclwh11_15*r22))+(((-0.03559225000001)*gclwh0_1*pp*r20))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.0565)*gclwh9_15*pp*r20))+(((0.000103428900000032)*gclwh11_1*r22))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((0.113)*gclwh13_1*pp*rxp1_2))+(((0.000574605)*gclwh2_0*r21))+(((-0.0565001)*gclwh9_9*pp*r20))+(((0.1130002)*gclwh9_9*npx*pz))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((0.02034)*gclwh15_0*rxp0_2))+(((-0.18)*gclwh7_0*pp*r21))+(((0.113)*gclwh15_0*pz*rxp0_2))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.00319225)*gclwh2_0*pz*r21))+(((0.36)*gclwh2_0*npy*pz))+(((-0.00366120000000113)*gclwh13_1*rxp1_2))+(((0.00319225)*gclwh9_0*pz*r20))+(((0.06480000000002)*gclwh2_1*npy*pz))+(((-0.000180362444225)*gclwh9_9*r20))+(((0.000180362125)*gclwh7_15*r21))+(((-0.0565)*gclwh11_15*pp*r22))+(((0.000103428900000032)*gclwh0_1*r20))+(((-0.03559225000001)*gclwh2_1*pp*r21))+((gclwh2_1*r21*(pp*pp)))+(((-0.06480000000002)*gclwh9_1*npx*pz))+(((-0.18)*gclwh0_0*pp*r20))+(((-0.18)*gclwh2_0*pp*r21))+(((-0.02034)*gclwh13_0*rxp1_2))+(((0.0565)*gclwh7_15*pp*r21))+(((0.00319225)*gclwh0_0*pz*r20))+(((0.113)*gclwh11_15*npz*pz))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.000574605)*gclwh9_0*r20))+(((-0.000103428900000032)*gclwh7_1*r21))+(((-0.113)*gclwh5_0*pz*rxp2_2))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.113)*gclwh15_1*pp*rxp0_2))+(((-0.113)*gclwh7_15*npy*pz))+(((0.113)*gclwh5_1*pp*rxp2_2))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((-0.000180362125)*gclwh9_15*r20))+((gclwh0_1*r20*(pp*pp)))+(((0.000103428900000032)*gclwh2_1*r21))+((gclwh9_0*pp*pz*r20))+(((-0.02034)*gclwh5_0*rxp2_2)));
op[67]=((0.02920774999999)+((pp*x879))+(((-1.0)*x871*x873))+((gclwh9_10*x869))+x973+x977+x976+(((-1.0)*x974))+(((-1.0)*x975))+(((-1.0)*x978)));
op[68]=((0.00638450000002)+(((-1.14921e-10)*x907))+(((-1.14921e-10)*x884))+(((-1.0)*x857*x879))+(((4.068e-9)*x909))+(((-3.6e-8)*gclwh9_1*x869))+(((4.0)*gclwh9_10*x865))+((gclwh13_10*x897))+(((-7.2e-8)*gclwh2_1*x861))+(((-1.14921e-10)*x933))+(((-1.14921e-10)*x923))+(((0.226)*x880))+(((1.14921e-10)*x911))+(((3.6e-8)*gclwh0_1*x869))+(((4.0)*gclwh11_10*x856))+(((7.2e-8)*gclwh11_1*x856))+(((-7.2e-8)*gclwh0_1*x865))+(((7.2e-8)*gclwh9_1*x865))+((x911*x912))+(((-1.0)*x884*x912))+(((-0.0063845)*x879))+(((0.0063845)*x873))+((gclwh13_1*x929))+(((-1.0)*gclwh9_10*r20*x857))+(((-1.0)*gclwh15_10*x920))+(((-1.0)*gclwh9_10*x918))+(((-7.2e-8)*gclwh7_1*x861))+x974+((x857*x873))+((x912*x923))+(((-1.0)*x976))+(((-4.0)*gclwh7_10*x861))+(((-4.068e-9)*x876)));
op[69]=((-3.6e-8)+(((-0.02034)*x894))+(((-0.00036072425)*x891))+(((-1.0)*x889*x910))+(((-0.00036072425)*x878))+(((0.226)*gclwh9_15*x865))+((x868*x875))+((gclwh13_13*x882))+(((0.000574605)*x877))+(((4.0e-7)*gclwh9_9*x865))+((x877*x890))+(((0.00036072425)*x868))+(((6.3845e-10)*x862))+(((-0.226)*gclwh7_15*x861))+(((-0.36)*gclwh7_13*x861))+(((0.226)*gclwh11_15*x856))+(((-4.0e-7)*gclwh7_9*x861))+(((4.0e-7)*gclwh11_9*x856))+((x862*x889))+(((-6.3845e-10)*x910))+(((-2.0e-7)*gclwh9_9*x869))+(((-1.0)*gclwh9_9*x927))+(((-1.0)*x875*x891))+((gclwh5_13*x898))+(((-1.0)*x869*x924)));
op[70]=((((2.0e-14)*gclwh0_1*x865))+(((-1.0)*gclwh11_15*npz*x851))+(((-2.0e-14)*gclwh9_1*x865))+((gclwh9_0*pz*x869))+(((-1.0)*gclwh2_1*x857*x861))+((x850*x923))+((x850*x933))+(((-1.0)*gclwh5_0*rxp2_2*x851))+(((-1.0)*gclwh13_1*x885))+((gclwh13_1*pp*x855))+(((-1.0)*gclwh0_1*x857*x865))+(((-0.00319224999999)*gclwh9_1*x869))+(((-0.000180361805775)*gclwh9_9*r20))+(((-0.0564999)*gclwh9_9*x869))+((x858*x931))+((x850*x911))+(((-1.0)*gclwh13_0*rxp1_2*x851))+(((-3.19225e-17)*x911))+((gclwh2_0*npy*x955))+(((-1.0)*x907*x954))+(((-2.0e-14)*gclwh11_1*x856))+((gclwh0_0*r20*x858))+((x875*x909))+((x903*x911))+(((-1.0)*gclwh9_0*npx*x955))+(((-1.0)*x884*x903))+(((-1.0)*x853*x868))+((gclwh15_0*rxp0_2*x851))+((gclwh9_0*r20*x858))+(((0.1129998)*gclwh11_9*x856))+((gclwh7_0*npy*x955))+((gclwh0_0*npx*x955))+((gclwh11_1*x856*x857))+(((-1.0)*gclwh9_15*npx*x851))+(((2.0e-14)*gclwh2_1*x861))+(((0.000180362125)*x878))+(((3.19225e-17)*x884))+(((0.000180361805775)*x862))+(((0.1129998)*gclwh9_9*x865))+(((-1.13e-15)*x909))+(((-1.0)*x886*x910))+((gclwh7_15*npy*x851))+((gclwh0_1*x905))+(((0.000180362125)*x891))+(((-1.0)*gclwh7_1*x857*x861))+((x853*x891))+(((-0.1129998)*gclwh7_9*x861))+(((-0.00319225000001)*gclwh0_1*x869))+(((-1.0)*x884*x954))+(((-1.0)*x921*x923))+(((-1.0)*x875*x876))+((x853*x878))+((x862*x886))+(((-1.0)*pz*x871*x895))+(((2.0e-14)*gclwh7_1*x861))+x851+((gclwh9_1*x857*x865))+(((3.19225e-17)*x923))+(((-1.0)*gclwh0_0*x869*x896))+(((-0.000180361805775)*x910))+(((1.13e-15)*x876))+(((-1.0)*pz*x871*x931))+(((-1.0)*x858*x895))+(((-0.000180362125)*x868))+((gclwh9_1*x905)));
op[71]=((0.00319225000001)+((pp*x873))+(((-1.0)*x871*x879))+(((-1.0)*gclwh9_10*x869))+x975+x977+(((-1.0)*x973))+(((-1.0)*x978)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x979=htj1*htj1;
CheckValue<IkReal> x980=IKPowWithIntegerCheck(((1.0)+x979),-1);
if(!x980.valid){
continue;
}
cj1array[numsolutions]=((x980.value)*(((1.0)+(((-1.0)*x979)))));
CheckValue<IkReal> x981=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x981.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x981.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x982=htj2*htj2;
CheckValue<IkReal> x983=IKPowWithIntegerCheck(((1.0)+x982),-1);
if(!x983.valid){
continue;
}
cj2array[numsolutions]=((x983.value)*(((1.0)+(((-1.0)*x982)))));
CheckValue<IkReal> x984=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x984.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x984.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x985=htj3*htj3;
CheckValue<IkReal> x986=IKPowWithIntegerCheck(((1.0)+x985),-1);
if(!x986.valid){
continue;
}
cj3array[numsolutions]=((x986.value)*(((1.0)+(((-1.0)*x985)))));
CheckValue<IkReal> x987=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x987.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x987.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x988=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x988);
rxp1_0=(pz*r11);
rxp1_1=(r01*x988);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x989=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x989);
rxp1_0=(pz*r11);
rxp1_1=(r01*x989);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x990=IKPowWithIntegerCheck(cj3,-1);
if(!x990.valid){
continue;
}
CheckValue<IkReal> x991=IKPowWithIntegerCheck(r22,-1);
if(!x991.valid){
continue;
}
cj4array[0]=((-1.0)*(x990.value)*(x991.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*sj3*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x992=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x992);
rxp1_0=(pz*r11);
rxp1_1=(r01*x992);
IkReal x993=(cj2*sj1);
IkReal x994=((4.0)*sj4);
IkReal x995=((8.0)*r01);
IkReal x996=((4.0)*sj3);
IkReal x997=(cj3*sj4);
IkReal x998=((16.0)*cj4);
IkReal x999=(cj1*sj2);
IkReal x1000=((12.0)*sj4);
IkReal x1001=((8.0)*r11);
IkReal x1002=((16.0)*sj3);
IkReal x1003=(cj3*cj4);
IkReal x1004=((8.0)*sj3);
IkReal x1005=(r11*x996);
IkReal x1006=(r01*x996);
IkReal x1007=((4.0)*cj4*r00);
IkReal x1008=((4.0)*cj4*r10);
IkReal x1009=(cj3*r10*x994);
IkReal x1010=((12.0)*r12*x1003);
IkReal x1011=(cj3*r00*x994);
IkReal x1012=((12.0)*r02*x1003);
IkReal x1013=(x1007*x993);
IkReal x1014=(x1007*x999);
IkReal x1015=(r02*x1000*x999);
IkReal x1016=(r02*x1000*x993);
IkReal x1017=(x1008*x993);
IkReal x1018=(x1008*x999);
IkReal x1019=(r12*x1000*x999);
IkReal x1020=(r12*x1000*x993);
IkReal x1021=(x1009+x1005);
IkReal x1022=(x1014+x1013);
IkReal x1023=(x1019+x1020);
IkReal x1024=(x1015+x1016+x1010);
IkReal x1025=(x1018+x1017+x1011+x1006);
j5eval[0]=((((0.5)*(IKabs((x1012+x1025+(((-1.0)*x1023)))))))+(IKabs((((cj4*x995*x999))+((cj4*x993*x995))+(((-1.0)*x1001*x997))+((r10*x1004)))))+(((0.5)*(IKabs((x1012+(((-1.0)*x1025))+(((-1.0)*x1023)))))))+(((0.5)*(IKabs((x1024+x1021+(((-1.0)*x1022)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x994*x999))+(((-1.0)*r12*x993*x994))+(((-1.0)*x1025))+(((4.0)*r02*x1003)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x998*x999))+(((-16.0)*r01*x997))+(((-1.0)*r11*x993*x998))+((r00*x1002)))))))+(((0.5)*(IKabs(((((-16.0)*r11*x997))+((r01*x998*x999))+((r01*x993*x998))+((r10*x1002)))))))+(((0.5)*(IKabs((((r02*x993*x994))+x1022+(((4.0)*r12*x1003))+((r02*x994*x999))+(((-1.0)*x1021)))))))+(((0.5)*(IKabs((x1024+x1022+(((-1.0)*x1021)))))))+(IKabs(((((-1.0)*x995*x997))+(((-1.0)*cj4*x1001*x999))+(((-1.0)*cj4*x1001*x993))+((r00*x1004))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1026=(cj1*sj2);
IkReal x1027=(r12*sj4);
IkReal x1028=(cj2*sj1);
IkReal x1029=(cj3*sj4);
IkReal x1030=(r00*sj3);
IkReal x1031=((4.0)*r01*sj3);
IkReal x1032=((8.0)*cj4*r11);
IkReal x1033=(cj3*cj4*r02);
IkReal x1034=((4.0)*cj4*r10);
IkReal x1035=((16.0)*cj4*r11);
IkReal x1036=((4.0)*r00*x1029);
IkReal x1037=((12.0)*x1033);
IkReal x1038=((4.0)*x1033);
IkReal x1039=(x1028*x1034);
IkReal x1040=(x1026*x1034);
IkReal x1041=((12.0)*x1026*x1027);
IkReal x1042=((12.0)*x1027*x1028);
IkReal x1043=((4.0)*x1027*x1028);
IkReal x1044=((4.0)*x1026*x1027);
IkReal x1045=(x1042+x1041);
IkReal x1046=(x1043+x1044);
IkReal x1047=((((8.0)*x1030))+(((-1.0)*x1028*x1032))+(((-1.0)*x1026*x1032))+(((-8.0)*r01*x1029)));
IkReal x1048=(x1040+x1039+x1031+x1036);
op[0]=(x1038+(((-1.0)*x1046))+(((-1.0)*x1048)));
op[1]=x1047;
op[2]=(x1037+(((-1.0)*x1045))+(((-1.0)*x1048)));
op[3]=((((-1.0)*x1028*x1035))+(((-16.0)*r01*x1029))+(((-1.0)*x1026*x1035))+(((16.0)*x1030)));
op[4]=(x1048+x1037+(((-1.0)*x1045)));
op[5]=x1047;
op[6]=(x1048+x1038+(((-1.0)*x1046)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1049=((4.0)*r00);
IkReal x1050=(cj3*sj4);
IkReal x1051=((16.0)*r01);
IkReal x1052=((8.0)*r01);
IkReal x1053=(r10*sj3);
IkReal x1054=((4.0)*r11*sj3);
IkReal x1055=(cj1*cj4*sj2);
IkReal x1056=(cj2*cj4*sj1);
IkReal x1057=(cj3*cj4*r12);
IkReal x1058=((4.0)*x1057);
IkReal x1059=((4.0)*r10*x1050);
IkReal x1060=((12.0)*x1057);
IkReal x1061=(cj2*r02*sj1*sj4);
IkReal x1062=(cj1*r02*sj2*sj4);
IkReal x1063=((4.0)*x1061);
IkReal x1064=(x1049*x1056);
IkReal x1065=(x1049*x1055);
IkReal x1066=((12.0)*x1062);
IkReal x1067=((12.0)*x1061);
IkReal x1068=((4.0)*x1062);
IkReal x1069=(x1054+x1059);
IkReal x1070=(x1065+x1064);
IkReal x1071=(x1060+x1067+x1066);
IkReal x1072=(x1058+x1068+x1063);
IkReal x1073=(((x1052*x1055))+((x1052*x1056))+(((-8.0)*r11*x1050))+(((8.0)*x1053)));
j5evalpoly[0]=((((htj5*htj5*htj5)*(((((16.0)*x1053))+((x1051*x1056))+((x1051*x1055))+(((-16.0)*r11*x1050))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1072+x1070+(((-1.0)*x1069))))))+x1072+x1069+(((htj5*htj5*htj5*htj5)*((x1070+x1071+(((-1.0)*x1069))))))+((htj5*x1073))+((x1073*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1070))+(((htj5*htj5)*((x1071+x1069+(((-1.0)*x1070)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1074=(cj4*cj5);
IkReal x1075=((1.0)*sj4);
IkReal x1076=((1.0)*cj4*sj5);
if( IKabs(((((-1.0)*r12*x1075))+(((-1.0)*r11*x1076))+((r10*x1074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1076))+(((-1.0)*r02*x1075))+((r00*x1074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1075))+(((-1.0)*r11*x1076))+((r10*x1074))))+IKsqr(((((-1.0)*r01*x1076))+(((-1.0)*r02*x1075))+((r00*x1074))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x1075))+(((-1.0)*r11*x1076))+((r10*x1074))), ((((-1.0)*r01*x1076))+(((-1.0)*r02*x1075))+((r00*x1074))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1077=IKsin(j0);
IkReal x1078=IKcos(j0);
IkReal x1079=((1.0)*cj4);
IkReal x1080=(r10*sj5);
IkReal x1081=(cj3*cj4);
IkReal x1082=((1.0)*sj2);
IkReal x1083=(cj5*r01);
IkReal x1084=((0.09)*sj2);
IkReal x1085=(cj5*r00);
IkReal x1086=(sj3*sj4);
IkReal x1087=(r01*sj5);
IkReal x1088=(cj5*r11);
IkReal x1089=(r00*sj5);
IkReal x1090=((1.0)*cj2);
IkReal x1091=(r11*sj5);
IkReal x1092=(cj3*sj4);
IkReal x1093=(cj5*r10);
IkReal x1094=((0.09)*cj2);
IkReal x1095=(sj1*x1077);
IkReal x1096=(cj1*x1078);
IkReal x1097=(cj1*x1077);
IkReal x1098=(sj1*x1078);
evalcond[0]=(x1078+((cj4*x1087))+((r02*sj4))+(((-1.0)*x1079*x1085)));
evalcond[1]=((((-1.0)*x1079*x1093))+x1077+((cj4*x1091))+((r12*sj4)));
evalcond[2]=(((sj3*x1083))+((sj3*x1089))+((x1085*x1092))+((sj2*x1097))+((r02*x1081))+((cj2*x1095))+(((-1.0)*x1087*x1092)));
evalcond[3]=((((-1.0)*r02*sj3*x1079))+(((-1.0)*x1085*x1086))+((cj3*x1083))+((cj3*x1089))+((x1086*x1087))+((cj2*x1097))+(((-1.0)*x1082*x1095)));
evalcond[4]=((((-1.0)*x1086*x1093))+(((-1.0)*x1090*x1096))+((x1086*x1091))+((cj3*x1080))+((cj3*x1088))+((sj2*x1098))+(((-1.0)*r12*sj3*x1079)));
evalcond[5]=(((sj3*x1080))+((sj3*x1088))+(((-1.0)*x1091*x1092))+(((-1.0)*x1090*x1098))+((r12*x1081))+((x1092*x1093))+(((-1.0)*x1082*x1096)));
evalcond[6]=((((-1.0)*x1084*x1097))+(((-0.0565)*x1089))+(((-0.0565)*x1083))+(((-0.09)*x1095))+(((-1.0)*px))+(((-1.0)*x1094*x1095))+(((0.0565)*x1078))+(((1.0e-7)*x1097)));
evalcond[7]=(((x1084*x1096))+(((-1.0e-7)*x1096))+((x1094*x1098))+(((-0.0565)*x1088))+(((-0.0565)*x1080))+(((-1.0)*py))+(((0.09)*x1098))+(((0.0565)*x1077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1099=IKPowWithIntegerCheck(r22,-1);
if(!x1099.valid){
continue;
}
CheckValue<IkReal> x1100=IKPowWithIntegerCheck(sj3,-1);
if(!x1100.valid){
continue;
}
cj4array[0]=((x1099.value)*(x1100.value)*((((cj2*sj1))+((cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=(((cj3*r22*(IKcos(j4))))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1101=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1101);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1101);
IkReal x1102=(cj2*sj1);
IkReal x1103=((4.0)*sj4);
IkReal x1104=((8.0)*r01);
IkReal x1105=((4.0)*sj3);
IkReal x1106=(cj3*sj4);
IkReal x1107=((16.0)*cj4);
IkReal x1108=(cj1*sj2);
IkReal x1109=((12.0)*sj4);
IkReal x1110=((8.0)*r11);
IkReal x1111=((16.0)*sj3);
IkReal x1112=(cj3*cj4);
IkReal x1113=((8.0)*sj3);
IkReal x1114=(r11*x1105);
IkReal x1115=(r01*x1105);
IkReal x1116=((4.0)*cj4*r00);
IkReal x1117=((4.0)*cj4*r10);
IkReal x1118=(cj3*r10*x1103);
IkReal x1119=((12.0)*r12*x1112);
IkReal x1120=(cj3*r00*x1103);
IkReal x1121=((12.0)*r02*x1112);
IkReal x1122=(x1102*x1116);
IkReal x1123=(x1108*x1116);
IkReal x1124=(r02*x1108*x1109);
IkReal x1125=(r02*x1102*x1109);
IkReal x1126=(x1102*x1117);
IkReal x1127=(x1108*x1117);
IkReal x1128=(r12*x1108*x1109);
IkReal x1129=(r12*x1102*x1109);
IkReal x1130=(x1114+x1118);
IkReal x1131=(x1122+x1123);
IkReal x1132=(x1128+x1129);
IkReal x1133=(x1119+x1124+x1125);
IkReal x1134=(x1115+x1120+x1126+x1127);
j5eval[0]=((IKabs(((((-1.0)*cj4*x1102*x1110))+((r00*x1113))+(((-1.0)*cj4*x1108*x1110))+(((-1.0)*x1104*x1106)))))+(((0.5)*(IKabs((x1133+x1131+(((-1.0)*x1130)))))))+(((0.5)*(IKabs((((r01*x1102*x1107))+(((-16.0)*r11*x1106))+((r01*x1107*x1108))+((r10*x1111)))))))+(((0.5)*(IKabs((x1133+x1130+(((-1.0)*x1131)))))))+(((0.5)*(IKabs((x1121+(((-1.0)*x1134))+(((-1.0)*x1132)))))))+(((0.5)*(IKabs((((r00*x1111))+(((-1.0)*r11*x1107*x1108))+(((-1.0)*r11*x1102*x1107))+(((-16.0)*r01*x1106)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x1103*x1108))+(((4.0)*r02*x1112))+(((-1.0)*x1134))+(((-1.0)*r12*x1102*x1103)))))))+(((0.5)*(IKabs((x1131+((r02*x1102*x1103))+(((4.0)*r12*x1112))+(((-1.0)*x1130))+((r02*x1103*x1108)))))))+(((0.5)*(IKabs((x1121+x1134+(((-1.0)*x1132)))))))+(IKabs((((cj4*x1102*x1104))+((cj4*x1104*x1108))+(((-1.0)*x1106*x1110))+((r10*x1113))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1135=(cj1*sj2);
IkReal x1136=(r12*sj4);
IkReal x1137=(cj2*sj1);
IkReal x1138=(cj3*sj4);
IkReal x1139=(r00*sj3);
IkReal x1140=((4.0)*r01*sj3);
IkReal x1141=((8.0)*cj4*r11);
IkReal x1142=(cj3*cj4*r02);
IkReal x1143=((4.0)*cj4*r10);
IkReal x1144=((16.0)*cj4*r11);
IkReal x1145=((4.0)*r00*x1138);
IkReal x1146=((12.0)*x1142);
IkReal x1147=((4.0)*x1142);
IkReal x1148=(x1137*x1143);
IkReal x1149=(x1135*x1143);
IkReal x1150=((12.0)*x1135*x1136);
IkReal x1151=((12.0)*x1136*x1137);
IkReal x1152=((4.0)*x1136*x1137);
IkReal x1153=((4.0)*x1135*x1136);
IkReal x1154=(x1151+x1150);
IkReal x1155=(x1153+x1152);
IkReal x1156=((((-1.0)*x1135*x1141))+(((-1.0)*x1137*x1141))+(((-8.0)*r01*x1138))+(((8.0)*x1139)));
IkReal x1157=(x1140+x1145+x1148+x1149);
op[0]=(x1147+(((-1.0)*x1157))+(((-1.0)*x1155)));
op[1]=x1156;
op[2]=(x1146+(((-1.0)*x1157))+(((-1.0)*x1154)));
op[3]=((((-1.0)*x1135*x1144))+(((-1.0)*x1137*x1144))+(((16.0)*x1139))+(((-16.0)*r01*x1138)));
op[4]=(x1146+x1157+(((-1.0)*x1154)));
op[5]=x1156;
op[6]=(x1147+x1157+(((-1.0)*x1155)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1158=((4.0)*r00);
IkReal x1159=(cj3*sj4);
IkReal x1160=((16.0)*r01);
IkReal x1161=((8.0)*r01);
IkReal x1162=(r10*sj3);
IkReal x1163=((4.0)*r11*sj3);
IkReal x1164=(cj1*cj4*sj2);
IkReal x1165=(cj2*cj4*sj1);
IkReal x1166=(cj3*cj4*r12);
IkReal x1167=((4.0)*x1166);
IkReal x1168=((4.0)*r10*x1159);
IkReal x1169=((12.0)*x1166);
IkReal x1170=(cj2*r02*sj1*sj4);
IkReal x1171=(cj1*r02*sj2*sj4);
IkReal x1172=((4.0)*x1170);
IkReal x1173=(x1158*x1165);
IkReal x1174=(x1158*x1164);
IkReal x1175=((12.0)*x1171);
IkReal x1176=((12.0)*x1170);
IkReal x1177=((4.0)*x1171);
IkReal x1178=(x1163+x1168);
IkReal x1179=(x1174+x1173);
IkReal x1180=(x1169+x1176+x1175);
IkReal x1181=(x1167+x1177+x1172);
IkReal x1182=((((-8.0)*r11*x1159))+(((8.0)*x1162))+((x1161*x1164))+((x1161*x1165)));
j5evalpoly[0]=(((x1182*(htj5*htj5*htj5*htj5*htj5)))+x1181+x1178+(((htj5*htj5*htj5)*(((((-16.0)*r11*x1159))+(((16.0)*x1162))+((x1160*x1165))+((x1160*x1164))))))+(((htj5*htj5)*((x1180+x1178+(((-1.0)*x1179))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1181+x1179+(((-1.0)*x1178))))))+(((-1.0)*x1179))+((htj5*x1182))+(((htj5*htj5*htj5*htj5)*((x1180+x1179+(((-1.0)*x1178)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1183=(cj4*cj5);
IkReal x1184=((1.0)*sj4);
IkReal x1185=((1.0)*cj4*sj5);
if( IKabs(((((-1.0)*r11*x1185))+((r10*x1183))+(((-1.0)*r12*x1184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1185))+((r00*x1183))+(((-1.0)*r02*x1184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1185))+((r10*x1183))+(((-1.0)*r12*x1184))))+IKsqr(((((-1.0)*r01*x1185))+((r00*x1183))+(((-1.0)*r02*x1184))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x1185))+((r10*x1183))+(((-1.0)*r12*x1184))), ((((-1.0)*r01*x1185))+((r00*x1183))+(((-1.0)*r02*x1184))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1186=IKsin(j0);
IkReal x1187=IKcos(j0);
IkReal x1188=((1.0)*cj4);
IkReal x1189=(r10*sj5);
IkReal x1190=(cj3*cj4);
IkReal x1191=((1.0)*sj2);
IkReal x1192=(cj5*r01);
IkReal x1193=((0.09)*sj2);
IkReal x1194=(cj5*r00);
IkReal x1195=(sj3*sj4);
IkReal x1196=(r01*sj5);
IkReal x1197=(cj5*r11);
IkReal x1198=(r00*sj5);
IkReal x1199=((1.0)*cj2);
IkReal x1200=(r11*sj5);
IkReal x1201=(cj3*sj4);
IkReal x1202=(cj5*r10);
IkReal x1203=((0.09)*cj2);
IkReal x1204=(sj1*x1186);
IkReal x1205=(cj1*x1187);
IkReal x1206=(cj1*x1186);
IkReal x1207=(sj1*x1187);
evalcond[0]=(x1187+(((-1.0)*x1188*x1194))+((cj4*x1196))+((r02*sj4)));
evalcond[1]=(x1186+(((-1.0)*x1188*x1202))+((r12*sj4))+((cj4*x1200)));
evalcond[2]=(((x1194*x1201))+((cj2*x1204))+((sj2*x1206))+((r02*x1190))+((sj3*x1192))+((sj3*x1198))+(((-1.0)*x1196*x1201)));
evalcond[3]=((((-1.0)*x1191*x1204))+(((-1.0)*x1194*x1195))+(((-1.0)*r02*sj3*x1188))+((x1195*x1196))+((cj2*x1206))+((cj3*x1198))+((cj3*x1192)));
evalcond[4]=((((-1.0)*x1199*x1205))+(((-1.0)*x1195*x1202))+((sj2*x1207))+(((-1.0)*r12*sj3*x1188))+((x1195*x1200))+((cj3*x1189))+((cj3*x1197)));
evalcond[5]=((((-1.0)*x1199*x1207))+(((-1.0)*x1191*x1205))+(((-1.0)*x1200*x1201))+((sj3*x1189))+((sj3*x1197))+((x1201*x1202))+((r12*x1190)));
evalcond[6]=((((1.0e-7)*x1206))+(((-1.0)*px))+(((-1.0)*x1203*x1204))+(((0.0565)*x1187))+(((-0.09)*x1204))+(((-0.0565)*x1192))+(((-0.0565)*x1198))+(((-1.0)*x1193*x1206)));
evalcond[7]=((((0.09)*x1207))+((x1193*x1205))+(((-1.0)*py))+((x1203*x1207))+(((0.0565)*x1186))+(((-0.0565)*x1189))+(((-0.0565)*x1197))+(((-1.0e-7)*x1205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1208=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1208);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1208);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1209=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1209);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1209);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1210=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1210);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1210);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1211=IKPowWithIntegerCheck(r22,-1);
if(!x1211.valid){
continue;
}
cj4array[0]=((x1211.value)*((((cj2*sj1))+((cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1212=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1212);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1212);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1214 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj4)),IkReal((r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1214.valid){
continue;
}
IkReal x1213=x1214.value;
j5array[0]=((-1.0)*x1213);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1213)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r11*sj4*(IKsin(j5))))+(((-1.0)*r10*sj4*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1215=(cj4*cj5);
IkReal x1216=((1.0)*cj4*sj5);
if( IKabs((((r10*x1215))+(((-1.0)*r11*x1216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1215))+(((-1.0)*r01*x1216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1215))+(((-1.0)*r11*x1216))))+IKsqr((((r00*x1215))+(((-1.0)*r01*x1216))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x1215))+(((-1.0)*r11*x1216))), (((r00*x1215))+(((-1.0)*r01*x1216))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1217=IKsin(j0);
IkReal x1218=IKcos(j0);
IkReal x1219=(cj5*r01);
IkReal x1220=((0.0565)*sj5);
IkReal x1221=(cj1*sj2);
IkReal x1222=(cj5*r11);
IkReal x1223=(cj2*sj1);
IkReal x1224=((1.0e-7)*cj1);
IkReal x1225=(cj4*sj5);
IkReal x1226=((1.0)*x1218);
IkReal x1227=((0.09)*x1217);
IkReal x1228=((1.0)*cj4*cj5);
IkReal x1229=((0.09)*x1218);
evalcond[0]=(x1218+(((-1.0)*r00*x1228))+((r01*x1225)));
evalcond[1]=(x1217+(((-1.0)*r10*x1228))+((r11*x1225)));
evalcond[2]=(((r00*sj5))+x1219+((x1217*x1223))+((x1217*x1221)));
evalcond[3]=(x1222+((r10*sj5))+(((-1.0)*x1221*x1226))+(((-1.0)*x1223*x1226)));
evalcond[4]=((((0.0565)*x1218))+(((-1.0)*r00*x1220))+((x1217*x1224))+(((-1.0)*x1221*x1227))+(((-1.0)*px))+(((-1.0)*sj1*x1227))+(((-0.0565)*x1219))+(((-1.0)*x1223*x1227)));
evalcond[5]=((((0.0565)*x1217))+((sj1*x1229))+((x1223*x1229))+(((-1.0)*x1218*x1224))+(((-1.0)*py))+((x1221*x1229))+(((-1.0)*r10*x1220))+(((-0.0565)*x1222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1230=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1230);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1230);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1231=IKPowWithIntegerCheck(r22,-1);
if(!x1231.valid){
continue;
}
cj4array[0]=((-1.0)*(x1231.value)*((((cj2*sj1))+((cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1232=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1232);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1232);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1234 = IKatan2WithCheck(IkReal((r00*sj4)),IkReal(((-1.0)*r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1234.valid){
continue;
}
IkReal x1233=x1234.value;
j5array[0]=((-1.0)*x1233);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1233)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj4*(IKcos(j5))))+(((-1.0)*r11*sj4*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1235=(cj4*cj5);
IkReal x1236=((1.0)*cj4*sj5);
if( IKabs(((((-1.0)*r11*x1236))+((r10*x1235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1235))+(((-1.0)*r01*x1236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1236))+((r10*x1235))))+IKsqr((((r00*x1235))+(((-1.0)*r01*x1236))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x1236))+((r10*x1235))), (((r00*x1235))+(((-1.0)*r01*x1236))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1237=IKsin(j0);
IkReal x1238=IKcos(j0);
IkReal x1239=((0.0565)*cj5);
IkReal x1240=(r10*sj5);
IkReal x1241=(cj1*sj2);
IkReal x1242=((1.0)*cj5);
IkReal x1243=(cj2*sj1);
IkReal x1244=(r00*sj5);
IkReal x1245=((1.0e-7)*cj1);
IkReal x1246=(cj4*sj5);
IkReal x1247=((1.0)*x1238);
IkReal x1248=((0.09)*x1237);
IkReal x1249=((0.09)*x1238);
evalcond[0]=(x1238+((r01*x1246))+(((-1.0)*cj4*r00*x1242)));
evalcond[1]=(x1237+(((-1.0)*cj4*r10*x1242))+((r11*x1246)));
evalcond[2]=((((-1.0)*x1244))+(((-1.0)*r01*x1242))+((x1237*x1241))+((x1237*x1243)));
evalcond[3]=((((-1.0)*x1240))+(((-1.0)*x1243*x1247))+(((-1.0)*r11*x1242))+(((-1.0)*x1241*x1247)));
evalcond[4]=((((-0.0565)*x1244))+(((-1.0)*sj1*x1248))+(((-1.0)*r01*x1239))+(((-1.0)*x1243*x1248))+(((-1.0)*px))+(((0.0565)*x1238))+(((-1.0)*x1241*x1248))+((x1237*x1245)));
evalcond[5]=((((-0.0565)*x1240))+(((-1.0)*r11*x1239))+(((-1.0)*py))+(((-1.0)*x1238*x1245))+(((0.0565)*x1237))+((x1241*x1249))+((x1243*x1249))+((sj1*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1250=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1250);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1250);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1251=IKPowWithIntegerCheck(r22,-1);
if(!x1251.valid){
continue;
}
cj4array[0]=((-1.0)*(x1251.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1252=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1252);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1252);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1254 = IKatan2WithCheck(IkReal((r00*sj4)),IkReal(((-1.0)*r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1254.valid){
continue;
}
IkReal x1253=x1254.value;
j5array[0]=((-1.0)*x1253);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1253)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj4*(IKcos(j5))))+(((-1.0)*r11*sj4*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1255=(cj4*cj5);
IkReal x1256=((1.0)*cj4*sj5);
if( IKabs(((((-1.0)*r11*x1256))+((r10*x1255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1256))+((r00*x1255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1256))+((r10*x1255))))+IKsqr(((((-1.0)*r01*x1256))+((r00*x1255))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x1256))+((r10*x1255))), ((((-1.0)*r01*x1256))+((r00*x1255))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1257=IKsin(j0);
IkReal x1258=IKcos(j0);
IkReal x1259=(cj5*r01);
IkReal x1260=((0.0565)*sj5);
IkReal x1261=(cj5*r11);
IkReal x1262=(cj4*sj5);
IkReal x1263=(sj1*x1257);
IkReal x1264=(cj1*x1257);
IkReal x1265=((1.0)*cj4*cj5);
IkReal x1266=(sj1*x1258);
IkReal x1267=(cj1*x1258);
evalcond[0]=(x1258+(((-1.0)*r00*x1265))+((r01*x1262)));
evalcond[1]=((((-1.0)*r10*x1265))+((r11*x1262))+x1257);
evalcond[2]=(((r00*sj5))+x1259+((cj2*x1264))+(((-1.0)*sj2*x1263)));
evalcond[3]=(x1261+((r10*sj5))+(((-1.0)*cj2*x1267))+((sj2*x1266)));
evalcond[4]=((((0.0565)*x1258))+(((-1.0)*r00*x1260))+(((1.0e-7)*x1264))+(((-0.09)*x1263))+(((-0.0565)*x1259))+(((-1.0)*px)));
evalcond[5]=((((-1.0)*r10*x1260))+(((0.0565)*x1257))+(((-0.0565)*x1261))+(((-1.0)*py))+(((0.09)*x1266))+(((-1.0e-7)*x1267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1268=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1268);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1268);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1269=IKPowWithIntegerCheck(r22,-1);
if(!x1269.valid){
continue;
}
cj4array[0]=((x1269.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1270=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1270);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1270);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1272 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj4)),IkReal((r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1272.valid){
continue;
}
IkReal x1271=x1272.value;
j5array[0]=((-1.0)*x1271);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1271)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r11*sj4*(IKsin(j5))))+(((-1.0)*r10*sj4*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1273=(cj4*cj5);
IkReal x1274=((1.0)*cj4*sj5);
if( IKabs((((r10*x1273))+(((-1.0)*r11*x1274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1274))+((r00*x1273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1273))+(((-1.0)*r11*x1274))))+IKsqr(((((-1.0)*r01*x1274))+((r00*x1273))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x1273))+(((-1.0)*r11*x1274))), ((((-1.0)*r01*x1274))+((r00*x1273))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1275=IKsin(j0);
IkReal x1276=IKcos(j0);
IkReal x1277=((0.0565)*cj5);
IkReal x1278=(r10*sj5);
IkReal x1279=((1.0)*cj5);
IkReal x1280=(r00*sj5);
IkReal x1281=(cj4*sj5);
IkReal x1282=(sj1*x1275);
IkReal x1283=(cj1*x1275);
IkReal x1284=(sj1*x1276);
IkReal x1285=(cj1*x1276);
evalcond[0]=((((-1.0)*cj4*r00*x1279))+x1276+((r01*x1281)));
evalcond[1]=(x1275+(((-1.0)*cj4*r10*x1279))+((r11*x1281)));
evalcond[2]=((((-1.0)*sj2*x1282))+(((-1.0)*x1280))+(((-1.0)*r01*x1279))+((cj2*x1283)));
evalcond[3]=((((-1.0)*cj2*x1285))+(((-1.0)*r11*x1279))+((sj2*x1284))+(((-1.0)*x1278)));
evalcond[4]=((((-0.0565)*x1280))+(((-0.09)*x1282))+(((0.0565)*x1276))+(((-1.0)*r01*x1277))+(((-1.0)*px))+(((1.0e-7)*x1283)));
evalcond[5]=((((0.0565)*x1275))+(((0.09)*x1284))+(((-1.0)*r11*x1277))+(((-1.0)*py))+(((-0.0565)*x1278))+(((-1.0e-7)*x1285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(cj3,-1);
if(!x1286.valid){
continue;
}
CheckValue<IkReal> x1287=IKPowWithIntegerCheck(r22,-1);
if(!x1287.valid){
continue;
}
cj4array[0]=((-1.0)*(x1286.value)*(x1287.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*sj3*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1288=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1288);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1288);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1289=((12.0)*py);
IkReal x1290=((0.226)*r11);
IkReal x1291=((12.0)*px);
IkReal x1292=((0.226)*r01);
IkReal x1293=(cj4*r11);
IkReal x1294=((0.72)*sj1);
IkReal x1295=(cj4*r10);
IkReal x1296=(cj4*r00);
IkReal x1297=((1.44)*sj1);
IkReal x1298=(cj4*r01);
IkReal x1299=((0.36)*sj1);
IkReal x1300=((4.0e-7)*cj1);
IkReal x1301=((8.0e-7)*cj1);
IkReal x1302=(cj1*sj2);
IkReal x1303=((1.6e-6)*cj1);
IkReal x1304=((0.226)*x1295);
IkReal x1305=((0.226)*x1296);
IkReal x1306=((0.36)*x1302);
IkReal x1307=(x1296*x1299);
IkReal x1308=(x1296*x1300);
IkReal x1309=(x1295*x1300);
IkReal x1310=(x1295*x1299);
IkReal x1311=(x1296*x1306);
IkReal x1312=(cj2*x1307);
IkReal x1313=(x1295*x1306);
IkReal x1314=(cj2*x1310);
IkReal x1315=(x1308+x1290);
IkReal x1316=(x1305+x1309);
IkReal x1317=(x1314+x1313+x1310+x1292);
IkReal x1318=(x1304+x1307+x1312+x1311);
j5eval[0]=((IKabs(((((0.452)*r00))+((x1293*x1301))+(((-0.72)*x1293*x1302))+(((-1.0)*x1293*x1294))+(((0.452)*x1298))+(((-1.0)*cj2*x1293*x1294)))))+(((0.5)*(IKabs((x1317+x1291+(((-1.0)*x1316)))))))+(((0.5)*(IKabs((((x1297*x1298))+(((0.904)*x1293))+(((1.44)*x1298*x1302))+((cj2*x1297*x1298))+(((0.904)*r10))+(((-1.0)*x1298*x1303)))))))+(((0.5)*(IKabs((x1316+(((4.0)*px))+(((-1.0)*x1317)))))))+(((0.5)*(IKabs((x1316+x1291+(((-1.0)*x1317)))))))+(((0.5)*(IKabs((x1318+x1289+(((-1.0)*x1315)))))))+(((0.5)*(IKabs((x1318+(((4.0)*py))+(((-1.0)*x1315)))))))+(((0.5)*(IKabs(((((-1.44)*x1293*x1302))+(((0.904)*x1298))+(((0.904)*r00))+((x1293*x1303))+(((-1.0)*x1293*x1297))+(((-1.0)*cj2*x1293*x1297)))))))+(((0.5)*(IKabs((x1315+x1289+(((-1.0)*x1318)))))))+(IKabs(((((0.72)*x1298*x1302))+((x1294*x1298))+(((0.452)*r10))+((cj2*x1294*x1298))+(((-1.0)*x1298*x1301))+(((0.452)*x1293))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1319=((12.0)*px);
IkReal x1320=((0.226)*r01);
IkReal x1321=((4.0)*px);
IkReal x1322=(cj4*sj1);
IkReal x1323=((0.36)*r10);
IkReal x1324=((0.72)*r11);
IkReal x1325=(cj4*r01);
IkReal x1326=((0.226)*cj4*r00);
IkReal x1327=(cj1*cj4*r10);
IkReal x1328=(cj1*cj4*r11);
IkReal x1329=((4.0e-7)*x1327);
IkReal x1330=(x1322*x1323);
IkReal x1331=(cj2*r11*x1322);
IkReal x1332=(cj1*cj4*sj2*x1323);
IkReal x1333=(cj2*x1330);
IkReal x1334=(x1326+x1329);
IkReal x1335=(x1320+x1330+x1333+x1332);
IkReal x1336=((((8.0e-7)*x1328))+(((-1.0)*x1322*x1324))+(((0.452)*r00))+(((-1.0)*cj2*x1322*x1324))+(((0.452)*x1325))+(((-1.0)*cj1*cj4*sj2*x1324)));
op[0]=(x1321+x1334+(((-1.0)*x1335)));
op[1]=x1336;
op[2]=(x1319+x1334+(((-1.0)*x1335)));
op[3]=((((-1.44)*x1331))+(((0.904)*x1325))+(((0.904)*r00))+(((-1.44)*sj2*x1328))+(((1.6e-6)*x1328))+(((-1.44)*r11*x1322)));
op[4]=(x1319+x1335+(((-1.0)*x1334)));
op[5]=x1336;
op[6]=(x1321+x1335+(((-1.0)*x1334)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1337=((12.0)*py);
IkReal x1338=((0.226)*r11);
IkReal x1339=((4.0)*py);
IkReal x1340=(cj4*r11);
IkReal x1341=(cj1*sj2);
IkReal x1342=(cj2*sj1);
IkReal x1343=(cj4*r01);
IkReal x1344=((0.226)*cj4*r10);
IkReal x1345=((0.36)*cj4*r00);
IkReal x1346=(sj1*x1345);
IkReal x1347=((4.0e-7)*cj1*cj4*r00);
IkReal x1348=(x1341*x1345);
IkReal x1349=(x1342*x1345);
IkReal x1350=(x1347+x1338);
IkReal x1351=(x1348+x1349+x1344+x1346);
IkReal x1352=((((0.452)*x1340))+(((-8.0e-7)*cj1*x1343))+(((0.72)*x1342*x1343))+(((0.452)*r10))+(((0.72)*x1341*x1343))+(((0.72)*sj1*x1343)));
j5evalpoly[0]=(x1350+x1339+(((-1.0)*x1351))+(((htj5*htj5*htj5*htj5)*((x1351+x1337+(((-1.0)*x1350))))))+((htj5*x1352))+(((htj5*htj5)*((x1350+x1337+(((-1.0)*x1351))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1351+x1339+(((-1.0)*x1350))))))+(((htj5*htj5*htj5)*(((((1.44)*x1341*x1343))+(((1.44)*x1342*x1343))+(((0.904)*r10))+(((1.44)*sj1*x1343))+(((0.904)*x1340))+(((-1.6e-6)*cj1*x1343))))))+((x1352*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1353=(cj4*cj5);
IkReal x1354=((1.0)*cj4*sj5);
if( IKabs((((r10*x1353))+(((-1.0)*r11*x1354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1354))+((r00*x1353)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1353))+(((-1.0)*r11*x1354))))+IKsqr(((((-1.0)*r01*x1354))+((r00*x1353))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x1353))+(((-1.0)*r11*x1354))), ((((-1.0)*r01*x1354))+((r00*x1353))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1355=IKsin(j0);
IkReal x1356=IKcos(j0);
IkReal x1357=(cj5*r01);
IkReal x1358=(r10*sj5);
IkReal x1359=((1.0)*sj2);
IkReal x1360=((0.09)*sj2);
IkReal x1361=(sj3*sj4);
IkReal x1362=(r01*sj5);
IkReal x1363=(cj5*r11);
IkReal x1364=(r00*sj5);
IkReal x1365=((1.0)*cj2);
IkReal x1366=(r11*sj5);
IkReal x1367=(cj3*sj4);
IkReal x1368=(cj5*r10);
IkReal x1369=((0.09)*cj2);
IkReal x1370=(sj1*x1355);
IkReal x1371=(cj1*x1356);
IkReal x1372=(cj1*x1355);
IkReal x1373=((1.0)*cj5*r00);
IkReal x1374=(sj1*x1356);
evalcond[0]=(x1356+((cj4*x1362))+(((-1.0)*cj4*x1373)));
evalcond[1]=(x1355+(((-1.0)*cj4*x1368))+((cj4*x1366)));
evalcond[2]=(((sj2*x1372))+((cj5*r00*x1367))+(((-1.0)*x1362*x1367))+((cj2*x1370))+((sj3*x1357))+((sj3*x1364)));
evalcond[3]=(((x1361*x1362))+((cj2*x1372))+(((-1.0)*x1359*x1370))+(((-1.0)*x1361*x1373))+((cj3*x1357))+((cj3*x1364)));
evalcond[4]=((((-1.0)*x1365*x1371))+((x1361*x1366))+((sj2*x1374))+(((-1.0)*x1361*x1368))+((cj3*x1358))+((cj3*x1363)));
evalcond[5]=(((x1367*x1368))+(((-1.0)*x1365*x1374))+(((-1.0)*x1366*x1367))+(((-1.0)*x1359*x1371))+((sj3*x1358))+((sj3*x1363)));
evalcond[6]=((((-0.0565)*x1357))+(((0.0565)*x1356))+(((-0.0565)*x1364))+(((1.0e-7)*x1372))+(((-1.0)*px))+(((-0.09)*x1370))+(((-1.0)*x1360*x1372))+(((-1.0)*x1369*x1370)));
evalcond[7]=((((-0.0565)*x1358))+(((0.0565)*x1355))+(((0.09)*x1374))+(((-0.0565)*x1363))+(((-1.0e-7)*x1371))+(((-1.0)*py))+((x1369*x1374))+((x1360*x1371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1375=IKPowWithIntegerCheck(r22,-1);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(sj3,-1);
if(!x1376.valid){
continue;
}
cj4array[0]=((x1375.value)*(x1376.value)*((((cj2*sj1))+((cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=(((cj3*r22*(IKcos(j4))))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1377=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1377);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1377);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1378=((12.0)*py);
IkReal x1379=((0.226)*r11);
IkReal x1380=((12.0)*px);
IkReal x1381=((0.226)*r01);
IkReal x1382=(cj4*r11);
IkReal x1383=((0.72)*sj1);
IkReal x1384=(cj4*r10);
IkReal x1385=(cj4*r00);
IkReal x1386=((1.44)*sj1);
IkReal x1387=(cj4*r01);
IkReal x1388=((0.36)*sj1);
IkReal x1389=((4.0e-7)*cj1);
IkReal x1390=((8.0e-7)*cj1);
IkReal x1391=(cj1*sj2);
IkReal x1392=((1.6e-6)*cj1);
IkReal x1393=((0.226)*x1384);
IkReal x1394=((0.226)*x1385);
IkReal x1395=((0.36)*x1391);
IkReal x1396=(x1385*x1388);
IkReal x1397=(x1385*x1389);
IkReal x1398=(x1384*x1389);
IkReal x1399=(x1384*x1388);
IkReal x1400=(x1385*x1395);
IkReal x1401=(cj2*x1396);
IkReal x1402=(x1384*x1395);
IkReal x1403=(cj2*x1399);
IkReal x1404=(x1379+x1397);
IkReal x1405=(x1398+x1394);
IkReal x1406=(x1381+x1399+x1403+x1402);
IkReal x1407=(x1396+x1393+x1401+x1400);
j5eval[0]=((((0.5)*(IKabs((((cj2*x1386*x1387))+(((1.44)*x1387*x1391))+(((0.904)*r10))+((x1386*x1387))+(((0.904)*x1382))+(((-1.0)*x1387*x1392)))))))+(((0.5)*(IKabs(((((4.0)*py))+(((-1.0)*x1404))+x1407)))))+(((0.5)*(IKabs((x1378+(((-1.0)*x1404))+x1407)))))+(IKabs((((x1382*x1390))+(((-1.0)*cj2*x1382*x1383))+(((0.452)*r00))+(((-1.0)*x1382*x1383))+(((-0.72)*x1382*x1391))+(((0.452)*x1387)))))+(((0.5)*(IKabs((x1380+(((-1.0)*x1406))+x1405)))))+(IKabs(((((0.452)*r10))+(((0.72)*x1387*x1391))+(((-1.0)*x1387*x1390))+((cj2*x1383*x1387))+((x1383*x1387))+(((0.452)*x1382)))))+(((0.5)*(IKabs((x1378+(((-1.0)*x1407))+x1404)))))+(((0.5)*(IKabs((x1380+(((-1.0)*x1405))+x1406)))))+(((0.5)*(IKabs((((x1382*x1392))+(((-1.44)*x1382*x1391))+(((-1.0)*cj2*x1382*x1386))+(((-1.0)*x1382*x1386))+(((0.904)*r00))+(((0.904)*x1387)))))))+(((0.5)*(IKabs(((((4.0)*px))+(((-1.0)*x1406))+x1405))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1408=((12.0)*px);
IkReal x1409=((0.226)*r01);
IkReal x1410=((4.0)*px);
IkReal x1411=(cj4*sj1);
IkReal x1412=((0.36)*r10);
IkReal x1413=((0.72)*r11);
IkReal x1414=(cj4*r01);
IkReal x1415=((0.226)*cj4*r00);
IkReal x1416=(cj1*cj4*r10);
IkReal x1417=(cj1*cj4*r11);
IkReal x1418=((4.0e-7)*x1416);
IkReal x1419=(x1411*x1412);
IkReal x1420=(cj2*r11*x1411);
IkReal x1421=(cj1*cj4*sj2*x1412);
IkReal x1422=(cj2*x1419);
IkReal x1423=(x1418+x1415);
IkReal x1424=(x1421+x1422+x1419+x1409);
IkReal x1425=((((8.0e-7)*x1417))+(((-1.0)*cj2*x1411*x1413))+(((0.452)*r00))+(((-1.0)*x1411*x1413))+(((-1.0)*cj1*cj4*sj2*x1413))+(((0.452)*x1414)));
op[0]=(x1423+x1410+(((-1.0)*x1424)));
op[1]=x1425;
op[2]=(x1423+x1408+(((-1.0)*x1424)));
op[3]=((((-1.44)*x1420))+(((0.904)*r00))+(((-1.44)*sj2*x1417))+(((0.904)*x1414))+(((-1.44)*r11*x1411))+(((1.6e-6)*x1417)));
op[4]=(x1424+x1408+(((-1.0)*x1423)));
op[5]=x1425;
op[6]=(x1424+x1410+(((-1.0)*x1423)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1426=((12.0)*py);
IkReal x1427=((0.226)*r11);
IkReal x1428=((4.0)*py);
IkReal x1429=(cj4*r11);
IkReal x1430=(cj1*sj2);
IkReal x1431=(cj2*sj1);
IkReal x1432=(cj4*r01);
IkReal x1433=((0.226)*cj4*r10);
IkReal x1434=((0.36)*cj4*r00);
IkReal x1435=(sj1*x1434);
IkReal x1436=((4.0e-7)*cj1*cj4*r00);
IkReal x1437=(x1430*x1434);
IkReal x1438=(x1431*x1434);
IkReal x1439=(x1427+x1436);
IkReal x1440=(x1437+x1435+x1433+x1438);
IkReal x1441=((((0.72)*sj1*x1432))+(((-8.0e-7)*cj1*x1432))+(((0.452)*x1429))+(((0.452)*r10))+(((0.72)*x1431*x1432))+(((0.72)*x1430*x1432)));
j5evalpoly[0]=((((htj5*htj5*htj5)*(((((-1.6e-6)*cj1*x1432))+(((1.44)*x1431*x1432))+(((1.44)*sj1*x1432))+(((0.904)*r10))+(((0.904)*x1429))+(((1.44)*x1430*x1432))))))+((x1441*(htj5*htj5*htj5*htj5*htj5)))+x1428+x1439+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1439))+x1426+x1440))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1439))+x1428+x1440))))+(((-1.0)*x1440))+(((htj5*htj5)*((x1426+x1439+(((-1.0)*x1440))))))+((htj5*x1441)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1442=(cj4*cj5);
IkReal x1443=((1.0)*cj4*sj5);
if( IKabs((((r10*x1442))+(((-1.0)*r11*x1443)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1443))+((r00*x1442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1442))+(((-1.0)*r11*x1443))))+IKsqr(((((-1.0)*r01*x1443))+((r00*x1442))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x1442))+(((-1.0)*r11*x1443))), ((((-1.0)*r01*x1443))+((r00*x1442))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1444=IKsin(j0);
IkReal x1445=IKcos(j0);
IkReal x1446=(cj5*r01);
IkReal x1447=(r10*sj5);
IkReal x1448=((1.0)*sj2);
IkReal x1449=((0.09)*sj2);
IkReal x1450=(sj3*sj4);
IkReal x1451=(r01*sj5);
IkReal x1452=(cj5*r11);
IkReal x1453=(r00*sj5);
IkReal x1454=((1.0)*cj2);
IkReal x1455=(r11*sj5);
IkReal x1456=(cj3*sj4);
IkReal x1457=(cj5*r10);
IkReal x1458=((0.09)*cj2);
IkReal x1459=(sj1*x1444);
IkReal x1460=(cj1*x1445);
IkReal x1461=(cj1*x1444);
IkReal x1462=((1.0)*cj5*r00);
IkReal x1463=(sj1*x1445);
evalcond[0]=(((cj4*x1451))+x1445+(((-1.0)*cj4*x1462)));
evalcond[1]=(((cj4*x1455))+x1444+(((-1.0)*cj4*x1457)));
evalcond[2]=(((sj2*x1461))+((cj5*r00*x1456))+((sj3*x1453))+((sj3*x1446))+((cj2*x1459))+(((-1.0)*x1451*x1456)));
evalcond[3]=(((cj2*x1461))+(((-1.0)*x1448*x1459))+((x1450*x1451))+((cj3*x1446))+((cj3*x1453))+(((-1.0)*x1450*x1462)));
evalcond[4]=(((sj2*x1463))+((x1450*x1455))+(((-1.0)*x1454*x1460))+((cj3*x1447))+(((-1.0)*x1450*x1457))+((cj3*x1452)));
evalcond[5]=(((x1456*x1457))+(((-1.0)*x1448*x1460))+((sj3*x1452))+(((-1.0)*x1454*x1463))+(((-1.0)*x1455*x1456))+((sj3*x1447)));
evalcond[6]=((((-1.0)*x1458*x1459))+(((0.0565)*x1445))+(((-0.0565)*x1453))+(((-1.0)*px))+(((-0.09)*x1459))+(((-1.0)*x1449*x1461))+(((-0.0565)*x1446))+(((1.0e-7)*x1461)));
evalcond[7]=((((0.09)*x1463))+(((0.0565)*x1444))+(((-1.0e-7)*x1460))+(((-0.0565)*x1452))+((x1458*x1463))+(((-1.0)*py))+(((-0.0565)*x1447))+((x1449*x1460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1464=((0.09)*cj1);
CheckValue<IkReal> x1467 = IKatan2WithCheck(IkReal(((-0.0565)*r21)),IkReal(((-0.0565)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1467.valid){
continue;
}
IkReal x1465=((1.0)*(x1467.value));
if((((((0.00319225)*(r20*r20)))+(((0.00319225)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1468=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.00319225)*(r20*r20)))+(((0.00319225)*(r21*r21)))))),-1);
if(!x1468.valid){
continue;
}
if( (((x1468.value)*((((cj2*x1464))+(((-0.09)*sj1*sj2))+(((-1.0)*pz))+x1464+(((1.0e-7)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((x1468.value)*((((cj2*x1464))+(((-0.09)*sj1*sj2))+(((-1.0)*pz))+x1464+(((1.0e-7)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1466=IKasin(((x1468.value)*((((cj2*x1464))+(((-0.09)*sj1*sj2))+(((-1.0)*pz))+x1464+(((1.0e-7)*sj1))))));
j5array[0]=((((-1.0)*x1465))+(((-1.0)*x1466)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1465))+x1466);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1469=cj5*cj5;
IkReal x1470=r21*r21;
IkReal x1471=(cj3*x1469);
IkReal x1472=(((x1471*(r20*r20)))+(((-2.0)*cj3*cj5*r20*r21*sj5))+((cj3*(r22*r22)))+((cj3*x1470))+(((-1.0)*x1470*x1471)));
j4eval[0]=x1472;
j4eval[1]=IKsign(x1472);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1473=r21*r21;
IkReal x1474=cj5*cj5;
IkReal x1475=((1.0)*sj3);
IkReal x1476=(sj3*x1474);
IkReal x1477=((((-1.0)*x1474*x1475*(r20*r20)))+((x1473*x1476))+(((-1.0)*x1475*(r22*r22)))+(((2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1473*x1475)));
j4eval[0]=x1477;
j4eval[1]=IKsign(x1477);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1478=cj1*cj1;
IkReal x1479=cj2*cj2;
IkReal x1480=(cj1*sj1);
IkReal x1481=((1620000000000.0)*sj2);
IkReal x1482=((64800.0)*sj2);
IkReal x1483=(cj2*x1478);
IkReal x1484=(sj2*x1478);
IkReal x1485=(x1478*x1479);
j0eval[0]=((-1129225000000.0)+(((-1620000000000.0)*cj2))+(((-1.0)*cj2*x1480*x1481))+(((1800000.0)*cj2*x1480))+(((-1.0)*x1480*x1481))+(((-1.0)*x1478))+(((1800000.0)*x1480))+(((1800000.0)*x1484))+(((1620000000000.0)*x1483))+(((1620000000000.0)*x1485))+(((-810000000000.0)*x1479)));
j0eval[1]=IKsign(((-45169.0)+(((-64800.0)*cj2))+(((0.072)*x1480))+(((0.072)*x1484))+(((-1.0)*cj2*x1480*x1482))+(((-1.0)*x1480*x1482))+(((0.072)*cj2*x1480))+(((-32400.0)*x1479))+(((64800.0)*x1483))+(((64800.0)*x1485))+(((-4.0e-8)*x1478))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1486=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x1486;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x1486);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1487=cj5*cj5;
IkReal x1488=r21*r21;
IkReal x1489=(r21*sj5);
IkReal x1490=(sj1*sj2);
IkReal x1491=(cj1*cj2);
IkReal x1492=(cj5*r20);
IkReal x1493=((((-2.0)*x1489*x1492))+(r22*r22)+((x1487*(r20*r20)))+(((-1.0)*x1487*x1488))+x1488);
j4eval[0]=x1493;
j4eval[1]=IKsign(x1493);
j4eval[2]=((IKabs(((((-1.0)*r22*x1490))+((r22*x1491)))))+(IKabs((((x1489*x1490))+(((-1.0)*x1489*x1491))+((x1491*x1492))+(((-1.0)*x1490*x1492))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.00343953258753)*py))+(((-7.97007181573318)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.97007181573318)*py))+(((5.00343953258753)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.00343953258753)*py))+(((-7.97007181573318)*px))))+IKsqr(((((7.97007181573318)*py))+(((5.00343953258753)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.00343953258753)*py))+(((-7.97007181573318)*px))), ((((7.97007181573318)*py))+(((5.00343953258753)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1494=IKcos(j0);
IkReal x1495=IKsin(j0);
evalcond[0]=((((-0.0899999)*x1495))+(((-1.0)*px))+(((0.0565)*x1494)));
evalcond[1]=((((-1.0)*py))+(((0.0899999)*x1494))+(((0.0565)*x1495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1496=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1496;
j4eval[1]=IKsign(x1496);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1497=((1.0)*cj5);
IkReal x1498=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1497)));
j4eval[0]=x1498;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1497))))));
j4eval[2]=IKsign(x1498);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1499=cj5*cj5;
IkReal x1500=((1.0)*r20);
IkReal x1501=(r01*r21);
IkReal x1502=(r21*sj5);
IkReal x1503=(((cj5*r01*r20*sj5))+((x1499*x1501))+(((-1.0)*r02*r22))+(((-1.0)*x1501))+((cj5*r00*x1502))+(((-1.0)*r00*x1499*x1500)));
j4eval[0]=x1503;
j4eval[1]=((IKabs((((cj0*x1502))+(((-1.0)*cj0*cj5*x1500)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1504=cj5*cj5;
IkReal x1505=((1.0)*r20);
IkReal x1506=(r01*r21);
IkReal x1507=(r21*sj5);
CheckValue<IkReal> x1508=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x1506))+((cj5*r00*x1507))+((x1504*x1506))+(((-1.0)*r00*x1504*x1505)))),-1);
if(!x1508.valid){
continue;
}
CheckValue<IkReal> x1509 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x1507))+(((-1.0)*cj0*cj5*x1505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1508.value)))+(x1509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1510=IKcos(j4);
IkReal x1511=IKsin(j4);
IkReal x1512=(cj5*r00);
IkReal x1513=(cj5*r10);
IkReal x1514=(cj5*r20);
IkReal x1515=((1.0)*x1510);
IkReal x1516=(sj5*x1510);
IkReal x1517=((1.0)*sj5*x1511);
evalcond[0]=((((-1.0)*x1514*x1515))+((r22*x1511))+((r21*x1516)));
evalcond[1]=(((r22*x1510))+((x1511*x1514))+(((-1.0)*r21*x1517)));
evalcond[2]=(cj0+((r01*x1516))+((r02*x1511))+(((-1.0)*x1512*x1515)));
evalcond[3]=(sj0+((r11*x1516))+((r12*x1511))+(((-1.0)*x1513*x1515)));
evalcond[4]=(sj0+(((-1.0)*r01*x1517))+((r02*x1510))+((x1511*x1512)));
evalcond[5]=(((r12*x1510))+(((-1.0)*r11*x1517))+((x1511*x1513))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1518=((1.0)*cj5);
CheckValue<IkReal> x1519=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1518)))),-1);
if(!x1519.valid){
continue;
}
CheckValue<IkReal> x1520 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x1518))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1519.value)))+(x1520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1521=IKcos(j4);
IkReal x1522=IKsin(j4);
IkReal x1523=(cj5*r00);
IkReal x1524=(cj5*r10);
IkReal x1525=(cj5*r20);
IkReal x1526=((1.0)*x1521);
IkReal x1527=(sj5*x1521);
IkReal x1528=((1.0)*sj5*x1522);
evalcond[0]=((((-1.0)*x1525*x1526))+((r21*x1527))+((r22*x1522)));
evalcond[1]=(((x1522*x1525))+((r22*x1521))+(((-1.0)*r21*x1528)));
evalcond[2]=(cj0+((r01*x1527))+(((-1.0)*x1523*x1526))+((r02*x1522)));
evalcond[3]=((((-1.0)*x1524*x1526))+sj0+((r12*x1522))+((r11*x1527)));
evalcond[4]=(sj0+(((-1.0)*r01*x1528))+((x1522*x1523))+((r02*x1521)));
evalcond[5]=((((-1.0)*r11*x1528))+((r12*x1521))+((x1522*x1524))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1529 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1529.valid){
continue;
}
CheckValue<IkReal> x1530=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1529.value)+(((1.5707963267949)*(x1530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1531=IKcos(j4);
IkReal x1532=IKsin(j4);
IkReal x1533=(cj5*r00);
IkReal x1534=(cj5*r10);
IkReal x1535=(cj5*r20);
IkReal x1536=((1.0)*x1531);
IkReal x1537=(sj5*x1531);
IkReal x1538=((1.0)*sj5*x1532);
evalcond[0]=((((-1.0)*x1535*x1536))+((r21*x1537))+((r22*x1532)));
evalcond[1]=(((x1532*x1535))+((r22*x1531))+(((-1.0)*r21*x1538)));
evalcond[2]=(cj0+((r01*x1537))+(((-1.0)*x1533*x1536))+((r02*x1532)));
evalcond[3]=(((r12*x1532))+sj0+((r11*x1537))+(((-1.0)*x1534*x1536)));
evalcond[4]=((((-1.0)*r01*x1538))+sj0+((x1532*x1533))+((r02*x1531)));
evalcond[5]=((((-1.0)*r11*x1538))+((r12*x1531))+((x1532*x1534))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.0034235815117)*py))+(((7.97006411820197)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.0034235815117)*px))+(((-7.97006411820197)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.0034235815117)*py))+(((7.97006411820197)*px))))+IKsqr(((((5.0034235815117)*px))+(((-7.97006411820197)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.0034235815117)*py))+(((7.97006411820197)*px))), ((((5.0034235815117)*px))+(((-7.97006411820197)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1539=IKsin(j0);
IkReal x1540=IKcos(j0);
evalcond[0]=((((0.0565)*x1540))+(((-1.0)*px))+(((0.0900001)*x1539)));
evalcond[1]=((((-0.0900001)*x1540))+(((0.0565)*x1539))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1541=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1541;
j4eval[1]=IKsign(x1541);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1542=((1.0)*cj5);
IkReal x1543=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1542)));
j4eval[0]=x1543;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1542)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1544=cj5*cj5;
IkReal x1545=((1.0)*r20);
IkReal x1546=(r01*r21);
IkReal x1547=(r21*sj5);
IkReal x1548=(((cj5*r01*r20*sj5))+(((-1.0)*x1546))+(((-1.0)*r02*r22))+((x1544*x1546))+(((-1.0)*r00*x1544*x1545))+((cj5*r00*x1547)));
j4eval[0]=x1548;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x1545))+((cj0*x1547))))));
j4eval[2]=IKsign(x1548);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1549=cj5*cj5;
IkReal x1550=((1.0)*r20);
IkReal x1551=(r01*r21);
IkReal x1552=(r21*sj5);
CheckValue<IkReal> x1553 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1550))+((cj0*x1552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1553.valid){
continue;
}
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x1551))+(((-1.0)*r02*r22))+((x1549*x1551))+((cj5*r00*x1552))+(((-1.0)*r00*x1549*x1550)))),-1);
if(!x1554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1553.value)+(((1.5707963267949)*(x1554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1555=IKcos(j4);
IkReal x1556=IKsin(j4);
IkReal x1557=(cj5*r00);
IkReal x1558=(cj5*r10);
IkReal x1559=(cj5*r20);
IkReal x1560=((1.0)*x1555);
IkReal x1561=(sj5*x1555);
IkReal x1562=((1.0)*sj5*x1556);
evalcond[0]=((((-1.0)*x1559*x1560))+((r22*x1556))+((r21*x1561)));
evalcond[1]=(((x1556*x1559))+((r22*x1555))+(((-1.0)*r21*x1562)));
evalcond[2]=(cj0+(((-1.0)*x1557*x1560))+((r02*x1556))+((r01*x1561)));
evalcond[3]=(sj0+((r11*x1561))+((r12*x1556))+(((-1.0)*x1558*x1560)));
evalcond[4]=(cj0+((x1556*x1558))+((r12*x1555))+(((-1.0)*r11*x1562)));
evalcond[5]=((((-1.0)*sj0))+((x1556*x1557))+((r02*x1555))+(((-1.0)*r01*x1562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1563=((1.0)*cj5);
CheckValue<IkReal> x1564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1563)))),-1);
if(!x1564.valid){
continue;
}
CheckValue<IkReal> x1565 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1563)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1564.value)))+(x1565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1566=IKcos(j4);
IkReal x1567=IKsin(j4);
IkReal x1568=(cj5*r00);
IkReal x1569=(cj5*r10);
IkReal x1570=(cj5*r20);
IkReal x1571=((1.0)*x1566);
IkReal x1572=(sj5*x1566);
IkReal x1573=((1.0)*sj5*x1567);
evalcond[0]=((((-1.0)*x1570*x1571))+((r21*x1572))+((r22*x1567)));
evalcond[1]=(((x1567*x1570))+(((-1.0)*r21*x1573))+((r22*x1566)));
evalcond[2]=(cj0+(((-1.0)*x1568*x1571))+((r02*x1567))+((r01*x1572)));
evalcond[3]=(sj0+((r12*x1567))+(((-1.0)*x1569*x1571))+((r11*x1572)));
evalcond[4]=(((x1567*x1569))+cj0+((r12*x1566))+(((-1.0)*r11*x1573)));
evalcond[5]=(((x1567*x1568))+(((-1.0)*sj0))+(((-1.0)*r01*x1573))+((r02*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1574.value)+(((1.5707963267949)*(x1575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1576=IKcos(j4);
IkReal x1577=IKsin(j4);
IkReal x1578=(cj5*r00);
IkReal x1579=(cj5*r10);
IkReal x1580=(cj5*r20);
IkReal x1581=((1.0)*x1576);
IkReal x1582=(sj5*x1576);
IkReal x1583=((1.0)*sj5*x1577);
evalcond[0]=((((-1.0)*x1580*x1581))+((r22*x1577))+((r21*x1582)));
evalcond[1]=(((x1577*x1580))+((r22*x1576))+(((-1.0)*r21*x1583)));
evalcond[2]=(((r01*x1582))+(((-1.0)*x1578*x1581))+cj0+((r02*x1577)));
evalcond[3]=(sj0+((r12*x1577))+((r11*x1582))+(((-1.0)*x1579*x1581)));
evalcond[4]=((((-1.0)*r11*x1583))+cj0+((r12*x1576))+((x1577*x1579)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x1583))+((x1577*x1578))+((r02*x1576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.58742422858909)*py))+(((-5.05728072824842)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.05728072824842)*py))+(((1.58742422858909)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.58742422858909)*py))+(((-5.05728072824842)*px))))+IKsqr(((((5.05728072824842)*py))+(((1.58742422858909)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.58742422858909)*py))+(((-5.05728072824842)*px))), ((((5.05728072824842)*py))+(((1.58742422858909)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1584=IKcos(j0);
IkReal x1585=IKsin(j0);
evalcond[0]=((((0.0565)*x1584))+(((-0.18)*x1585))+(((-1.0)*px)));
evalcond[1]=((((0.18)*x1584))+(((0.0565)*x1585))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1586=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1586;
j4eval[1]=IKsign(x1586);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1587=((1.0)*cj5);
IkReal x1588=((((-1.0)*r11*x1587))+(((-1.0)*r10*sj5)));
j4eval[0]=x1588;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1587))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1588);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1589=cj5*cj5;
IkReal x1590=((1.0)*r20);
IkReal x1591=(r01*r21);
IkReal x1592=(r21*sj5);
IkReal x1593=(((cj5*r01*r20*sj5))+((cj5*r00*x1592))+(((-1.0)*r02*r22))+((x1589*x1591))+(((-1.0)*r00*x1589*x1590))+(((-1.0)*x1591)));
j4eval[0]=x1593;
j4eval[1]=((IKabs((((cj0*x1592))+(((-1.0)*cj0*cj5*x1590)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1594=cj5*cj5;
IkReal x1595=((1.0)*r20);
IkReal x1596=(r01*r21);
IkReal x1597=(r21*sj5);
CheckValue<IkReal> x1598 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x1597))+(((-1.0)*cj0*cj5*x1595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1598.valid){
continue;
}
CheckValue<IkReal> x1599=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x1597))+(((-1.0)*r02*r22))+((x1594*x1596))+(((-1.0)*r00*x1594*x1595))+(((-1.0)*x1596)))),-1);
if(!x1599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1598.value)+(((1.5707963267949)*(x1599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1600=IKcos(j4);
IkReal x1601=IKsin(j4);
IkReal x1602=(cj5*r00);
IkReal x1603=(cj5*r10);
IkReal x1604=(cj5*r20);
IkReal x1605=((1.0)*x1600);
IkReal x1606=(sj5*x1600);
IkReal x1607=((1.0)*sj5*x1601);
evalcond[0]=(((r21*x1606))+((r22*x1601))+(((-1.0)*x1604*x1605)));
evalcond[1]=((((-1.0)*r21*x1607))+((x1601*x1604))+((r22*x1600)));
evalcond[2]=(cj0+((r01*x1606))+(((-1.0)*x1602*x1605))+((r02*x1601)));
evalcond[3]=(sj0+((r11*x1606))+((r12*x1601))+(((-1.0)*x1603*x1605)));
evalcond[4]=(sj0+((x1601*x1602))+(((-1.0)*r01*x1607))+((r02*x1600)));
evalcond[5]=(((x1601*x1603))+((r12*x1600))+(((-1.0)*cj0))+(((-1.0)*r11*x1607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1608=((1.0)*cj5);
CheckValue<IkReal> x1609 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x1608))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1609.valid){
continue;
}
CheckValue<IkReal> x1610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1608)))),-1);
if(!x1610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1609.value)+(((1.5707963267949)*(x1610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1611=IKcos(j4);
IkReal x1612=IKsin(j4);
IkReal x1613=(cj5*r00);
IkReal x1614=(cj5*r10);
IkReal x1615=(cj5*r20);
IkReal x1616=((1.0)*x1611);
IkReal x1617=(sj5*x1611);
IkReal x1618=((1.0)*sj5*x1612);
evalcond[0]=(((r21*x1617))+((r22*x1612))+(((-1.0)*x1615*x1616)));
evalcond[1]=((((-1.0)*r21*x1618))+((x1612*x1615))+((r22*x1611)));
evalcond[2]=(((r01*x1617))+cj0+(((-1.0)*x1613*x1616))+((r02*x1612)));
evalcond[3]=(sj0+((r12*x1612))+((r11*x1617))+(((-1.0)*x1614*x1616)));
evalcond[4]=(sj0+(((-1.0)*r01*x1618))+((x1612*x1613))+((r02*x1611)));
evalcond[5]=((((-1.0)*r11*x1618))+((r12*x1611))+((x1612*x1614))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1619 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1619.valid){
continue;
}
CheckValue<IkReal> x1620=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1619.value)+(((1.5707963267949)*(x1620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1621=IKcos(j4);
IkReal x1622=IKsin(j4);
IkReal x1623=(cj5*r00);
IkReal x1624=(cj5*r10);
IkReal x1625=(cj5*r20);
IkReal x1626=((1.0)*x1621);
IkReal x1627=(sj5*x1621);
IkReal x1628=((1.0)*sj5*x1622);
evalcond[0]=(((r21*x1627))+(((-1.0)*x1625*x1626))+((r22*x1622)));
evalcond[1]=((((-1.0)*r21*x1628))+((x1622*x1625))+((r22*x1621)));
evalcond[2]=(((r02*x1622))+cj0+((r01*x1627))+(((-1.0)*x1623*x1626)));
evalcond[3]=(sj0+((r12*x1622))+((r11*x1627))+(((-1.0)*x1624*x1626)));
evalcond[4]=(((r02*x1621))+sj0+((x1622*x1623))+(((-1.0)*r01*x1628)));
evalcond[5]=((((-1.0)*r11*x1628))+((x1622*x1624))+((r12*x1621))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((17.6991150442478)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((17.6991150442478)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.6991150442478)*py))+IKsqr(((17.6991150442478)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((17.6991150442478)*py), ((17.6991150442478)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.0565)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.0565)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1629=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1629;
j4eval[1]=IKsign(x1629);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1630=((1.0)*cj5);
IkReal x1631=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1630)));
j4eval[0]=x1631;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1630))))));
j4eval[2]=IKsign(x1631);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1632=cj5*cj5;
IkReal x1633=((1.0)*r20);
IkReal x1634=(r01*r21);
IkReal x1635=(r21*sj5);
IkReal x1636=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x1632*x1633))+((cj5*r00*x1635))+(((-1.0)*x1634))+((x1632*x1634)));
j4eval[0]=x1636;
j4eval[1]=((IKabs((((cj0*x1635))+(((-1.0)*cj0*cj5*x1633)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1637=cj5*cj5;
IkReal x1638=((1.0)*r20);
IkReal x1639=(r01*r21);
IkReal x1640=(r21*sj5);
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x1640))+(((-1.0)*cj0*cj5*x1638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
CheckValue<IkReal> x1642=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x1637*x1639))+(((-1.0)*r02*r22))+((cj5*r00*x1640))+(((-1.0)*x1639))+(((-1.0)*r00*x1637*x1638)))),-1);
if(!x1642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1641.value)+(((1.5707963267949)*(x1642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1643=IKcos(j4);
IkReal x1644=IKsin(j4);
IkReal x1645=(cj5*r00);
IkReal x1646=(cj5*r10);
IkReal x1647=(cj5*r20);
IkReal x1648=((1.0)*x1643);
IkReal x1649=(sj5*x1643);
IkReal x1650=((1.0)*sj5*x1644);
evalcond[0]=((((-1.0)*x1647*x1648))+((r21*x1649))+((r22*x1644)));
evalcond[1]=((((-1.0)*r21*x1650))+((x1644*x1647))+((r22*x1643)));
evalcond[2]=(((r02*x1644))+cj0+(((-1.0)*x1645*x1648))+((r01*x1649)));
evalcond[3]=((((-1.0)*x1646*x1648))+((r11*x1649))+sj0+((r12*x1644)));
evalcond[4]=(cj0+((r12*x1643))+(((-1.0)*r11*x1650))+((x1644*x1646)));
evalcond[5]=((((-1.0)*r01*x1650))+(((-1.0)*sj0))+((r02*x1643))+((x1644*x1645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1651=((1.0)*cj5);
CheckValue<IkReal> x1652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1651)))),-1);
if(!x1652.valid){
continue;
}
CheckValue<IkReal> x1653 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1651)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1652.value)))+(x1653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1654=IKcos(j4);
IkReal x1655=IKsin(j4);
IkReal x1656=(cj5*r00);
IkReal x1657=(cj5*r10);
IkReal x1658=(cj5*r20);
IkReal x1659=((1.0)*x1654);
IkReal x1660=(sj5*x1654);
IkReal x1661=((1.0)*sj5*x1655);
evalcond[0]=(((r22*x1655))+(((-1.0)*x1658*x1659))+((r21*x1660)));
evalcond[1]=(((r22*x1654))+((x1655*x1658))+(((-1.0)*r21*x1661)));
evalcond[2]=((((-1.0)*x1656*x1659))+cj0+((r02*x1655))+((r01*x1660)));
evalcond[3]=(((r12*x1655))+sj0+((r11*x1660))+(((-1.0)*x1657*x1659)));
evalcond[4]=(((r12*x1654))+cj0+((x1655*x1657))+(((-1.0)*r11*x1661)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x1661))+((r02*x1654))+((x1655*x1656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1662 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1662.valid){
continue;
}
CheckValue<IkReal> x1663=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1662.value)+(((1.5707963267949)*(x1663.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1664=IKcos(j4);
IkReal x1665=IKsin(j4);
IkReal x1666=(cj5*r00);
IkReal x1667=(cj5*r10);
IkReal x1668=(cj5*r20);
IkReal x1669=((1.0)*x1664);
IkReal x1670=(sj5*x1664);
IkReal x1671=((1.0)*sj5*x1665);
evalcond[0]=(((r21*x1670))+(((-1.0)*x1668*x1669))+((r22*x1665)));
evalcond[1]=(((x1665*x1668))+(((-1.0)*r21*x1671))+((r22*x1664)));
evalcond[2]=(cj0+((r02*x1665))+(((-1.0)*x1666*x1669))+((r01*x1670)));
evalcond[3]=(sj0+((r12*x1665))+(((-1.0)*x1667*x1669))+((r11*x1670)));
evalcond[4]=(cj0+((r12*x1664))+(((-1.0)*r11*x1671))+((x1665*x1667)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1664))+(((-1.0)*r01*x1671))+((x1665*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.97007181573318)*px))+(((5.00343953258753)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.00343953258753)*px))+(((-7.97007181573318)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.97007181573318)*px))+(((5.00343953258753)*py))))+IKsqr(((((5.00343953258753)*px))+(((-7.97007181573318)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.97007181573318)*px))+(((5.00343953258753)*py))), ((((5.00343953258753)*px))+(((-7.97007181573318)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1672=IKsin(j0);
IkReal x1673=IKcos(j0);
evalcond[0]=((((0.0899999)*x1672))+(((-1.0)*px))+(((0.0565)*x1673)));
evalcond[1]=((((-0.0899999)*x1673))+(((-1.0)*py))+(((0.0565)*x1672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1674=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1674;
j4eval[1]=IKsign(x1674);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1675=((1.0)*cj5);
IkReal x1676=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1675)));
j4eval[0]=x1676;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1675)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1676);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1677=cj5*cj5;
IkReal x1678=((1.0)*r20);
IkReal x1679=(r01*r21);
IkReal x1680=(r21*sj5);
IkReal x1681=(((cj5*r01*r20*sj5))+((cj5*r00*x1680))+(((-1.0)*r02*r22))+(((-1.0)*r00*x1677*x1678))+(((-1.0)*x1679))+((x1677*x1679)));
j4eval[0]=x1681;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1678))+((cj0*x1680)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1681);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1682=cj5*cj5;
IkReal x1683=((1.0)*r20);
IkReal x1684=(r01*r21);
IkReal x1685=(r21*sj5);
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1683))+((cj0*x1685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
CheckValue<IkReal> x1687=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x1685))+(((-1.0)*r02*r22))+(((-1.0)*x1684))+(((-1.0)*r00*x1682*x1683))+((x1682*x1684)))),-1);
if(!x1687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1686.value)+(((1.5707963267949)*(x1687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1688=IKcos(j4);
IkReal x1689=IKsin(j4);
IkReal x1690=(cj5*r00);
IkReal x1691=(cj5*r10);
IkReal x1692=(cj5*r20);
IkReal x1693=((1.0)*x1688);
IkReal x1694=(sj5*x1688);
IkReal x1695=((1.0)*sj5*x1689);
evalcond[0]=((((-1.0)*x1692*x1693))+((r21*x1694))+((r22*x1689)));
evalcond[1]=((((-1.0)*r21*x1695))+((r22*x1688))+((x1689*x1692)));
evalcond[2]=(((r01*x1694))+cj0+(((-1.0)*x1690*x1693))+((r02*x1689)));
evalcond[3]=(sj0+((r11*x1694))+((r12*x1689))+(((-1.0)*x1691*x1693)));
evalcond[4]=(cj0+(((-1.0)*r11*x1695))+((r12*x1688))+((x1689*x1691)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1688))+((x1689*x1690))+(((-1.0)*r01*x1695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1696=((1.0)*cj5);
CheckValue<IkReal> x1697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1696)))),-1);
if(!x1697.valid){
continue;
}
CheckValue<IkReal> x1698 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x1696))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1697.value)))+(x1698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1699=IKcos(j4);
IkReal x1700=IKsin(j4);
IkReal x1701=(cj5*r00);
IkReal x1702=(cj5*r10);
IkReal x1703=(cj5*r20);
IkReal x1704=((1.0)*x1699);
IkReal x1705=(sj5*x1699);
IkReal x1706=((1.0)*sj5*x1700);
evalcond[0]=(((r22*x1700))+(((-1.0)*x1703*x1704))+((r21*x1705)));
evalcond[1]=((((-1.0)*r21*x1706))+((x1700*x1703))+((r22*x1699)));
evalcond[2]=(((r02*x1700))+cj0+((r01*x1705))+(((-1.0)*x1701*x1704)));
evalcond[3]=((((-1.0)*x1702*x1704))+((r12*x1700))+sj0+((r11*x1705)));
evalcond[4]=(((r12*x1699))+cj0+((x1700*x1702))+(((-1.0)*r11*x1706)));
evalcond[5]=((((-1.0)*sj0))+((x1700*x1701))+((r02*x1699))+(((-1.0)*r01*x1706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1707 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1707.valid){
continue;
}
CheckValue<IkReal> x1708=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1707.value)+(((1.5707963267949)*(x1708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1709=IKcos(j4);
IkReal x1710=IKsin(j4);
IkReal x1711=(cj5*r00);
IkReal x1712=(cj5*r10);
IkReal x1713=(cj5*r20);
IkReal x1714=((1.0)*x1709);
IkReal x1715=(sj5*x1709);
IkReal x1716=((1.0)*sj5*x1710);
evalcond[0]=(((r22*x1710))+(((-1.0)*x1713*x1714))+((r21*x1715)));
evalcond[1]=(((x1710*x1713))+((r22*x1709))+(((-1.0)*r21*x1716)));
evalcond[2]=(((r02*x1710))+cj0+((r01*x1715))+(((-1.0)*x1711*x1714)));
evalcond[3]=(sj0+((r11*x1715))+(((-1.0)*x1712*x1714))+((r12*x1710)));
evalcond[4]=(((x1710*x1712))+((r12*x1709))+cj0+(((-1.0)*r11*x1716)));
evalcond[5]=(((x1710*x1711))+(((-1.0)*sj0))+((r02*x1709))+(((-1.0)*r01*x1716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.0034235815117)*py))+(((-7.97006411820197)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.0034235815117)*px))+(((7.97006411820197)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.0034235815117)*py))+(((-7.97006411820197)*px))))+IKsqr(((((5.0034235815117)*px))+(((7.97006411820197)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.0034235815117)*py))+(((-7.97006411820197)*px))), ((((5.0034235815117)*px))+(((7.97006411820197)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1717=IKcos(j0);
IkReal x1718=IKsin(j0);
evalcond[0]=((((0.0565)*x1717))+(((-1.0)*px))+(((-0.0900001)*x1718)));
evalcond[1]=((((0.0565)*x1718))+(((0.0900001)*x1717))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1719=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1719;
j4eval[1]=IKsign(x1719);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1720=((1.0)*cj5);
IkReal x1721=((((-1.0)*r11*x1720))+(((-1.0)*r10*sj5)));
j4eval[0]=x1721;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1720))))));
j4eval[2]=IKsign(x1721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1722=cj5*cj5;
IkReal x1723=((1.0)*r20);
IkReal x1724=(r01*r21);
IkReal x1725=(r21*sj5);
IkReal x1726=(((cj5*r01*r20*sj5))+((x1722*x1724))+(((-1.0)*r02*r22))+((cj5*r00*x1725))+(((-1.0)*r00*x1722*x1723))+(((-1.0)*x1724)));
j4eval[0]=x1726;
j4eval[1]=((IKabs((((cj0*x1725))+(((-1.0)*cj0*cj5*x1723)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1727=cj5*cj5;
IkReal x1728=((1.0)*r20);
IkReal x1729=(r01*r21);
IkReal x1730=(r21*sj5);
CheckValue<IkReal> x1731=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x1730))+((x1727*x1729))+(((-1.0)*x1729))+(((-1.0)*r00*x1727*x1728)))),-1);
if(!x1731.valid){
continue;
}
CheckValue<IkReal> x1732 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x1730))+(((-1.0)*cj0*cj5*x1728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1731.value)))+(x1732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1733=IKcos(j4);
IkReal x1734=IKsin(j4);
IkReal x1735=(cj5*r00);
IkReal x1736=(cj5*r10);
IkReal x1737=(cj5*r20);
IkReal x1738=((1.0)*x1733);
IkReal x1739=(sj5*x1733);
IkReal x1740=((1.0)*sj5*x1734);
evalcond[0]=(((r21*x1739))+((r22*x1734))+(((-1.0)*x1737*x1738)));
evalcond[1]=(((x1734*x1737))+((r22*x1733))+(((-1.0)*r21*x1740)));
evalcond[2]=(((r01*x1739))+cj0+((r02*x1734))+(((-1.0)*x1735*x1738)));
evalcond[3]=(sj0+(((-1.0)*x1736*x1738))+((r11*x1739))+((r12*x1734)));
evalcond[4]=(sj0+((x1734*x1735))+((r02*x1733))+(((-1.0)*r01*x1740)));
evalcond[5]=((((-1.0)*r11*x1740))+((x1734*x1736))+((r12*x1733))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1741=((1.0)*cj5);
CheckValue<IkReal> x1742=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1741))+(((-1.0)*r10*sj5)))),-1);
if(!x1742.valid){
continue;
}
CheckValue<IkReal> x1743 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1741)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1742.value)))+(x1743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1744=IKcos(j4);
IkReal x1745=IKsin(j4);
IkReal x1746=(cj5*r00);
IkReal x1747=(cj5*r10);
IkReal x1748=(cj5*r20);
IkReal x1749=((1.0)*x1744);
IkReal x1750=(sj5*x1744);
IkReal x1751=((1.0)*sj5*x1745);
evalcond[0]=((((-1.0)*x1748*x1749))+((r22*x1745))+((r21*x1750)));
evalcond[1]=(((r22*x1744))+((x1745*x1748))+(((-1.0)*r21*x1751)));
evalcond[2]=(cj0+((r02*x1745))+(((-1.0)*x1746*x1749))+((r01*x1750)));
evalcond[3]=(((r12*x1745))+sj0+(((-1.0)*x1747*x1749))+((r11*x1750)));
evalcond[4]=(sj0+((x1745*x1746))+((r02*x1744))+(((-1.0)*r01*x1751)));
evalcond[5]=((((-1.0)*r11*x1751))+((r12*x1744))+((x1745*x1747))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1752 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1752.valid){
continue;
}
CheckValue<IkReal> x1753=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1752.value)+(((1.5707963267949)*(x1753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1754=IKcos(j4);
IkReal x1755=IKsin(j4);
IkReal x1756=(cj5*r00);
IkReal x1757=(cj5*r10);
IkReal x1758=(cj5*r20);
IkReal x1759=((1.0)*x1754);
IkReal x1760=(sj5*x1754);
IkReal x1761=((1.0)*sj5*x1755);
evalcond[0]=(((r21*x1760))+(((-1.0)*x1758*x1759))+((r22*x1755)));
evalcond[1]=((((-1.0)*r21*x1761))+((r22*x1754))+((x1755*x1758)));
evalcond[2]=((((-1.0)*x1756*x1759))+cj0+((r02*x1755))+((r01*x1760)));
evalcond[3]=(sj0+(((-1.0)*x1757*x1759))+((r11*x1760))+((r12*x1755)));
evalcond[4]=((((-1.0)*r01*x1761))+sj0+((r02*x1754))+((x1755*x1756)));
evalcond[5]=((((-1.0)*r11*x1761))+((r12*x1754))+(((-1.0)*cj0))+((x1755*x1757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.05728072824842)*px))+(((1.58742422858909)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.58742422858909)*px))+(((-5.05728072824842)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.05728072824842)*px))+(((1.58742422858909)*py))))+IKsqr(((((1.58742422858909)*px))+(((-5.05728072824842)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.05728072824842)*px))+(((1.58742422858909)*py))), ((((1.58742422858909)*px))+(((-5.05728072824842)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1762=IKsin(j0);
IkReal x1763=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.18)*x1762))+(((0.0565)*x1763)));
evalcond[1]=((((-1.0)*py))+(((-0.18)*x1763))+(((0.0565)*x1762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1764=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1764;
j4eval[1]=IKsign(x1764);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1765=((1.0)*cj5);
IkReal x1766=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1765)));
j4eval[0]=x1766;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1765))))));
j4eval[2]=IKsign(x1766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1767=cj5*cj5;
IkReal x1768=((1.0)*r20);
IkReal x1769=(r01*r21);
IkReal x1770=(r21*sj5);
IkReal x1771=(((cj5*r01*r20*sj5))+(((-1.0)*x1769))+(((-1.0)*r02*r22))+(((-1.0)*r00*x1767*x1768))+((x1767*x1769))+((cj5*r00*x1770)));
j4eval[0]=x1771;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x1770))+(((-1.0)*cj0*cj5*x1768))))));
j4eval[2]=IKsign(x1771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1772=cj5*cj5;
IkReal x1773=((1.0)*r20);
IkReal x1774=(r01*r21);
IkReal x1775=(r21*sj5);
CheckValue<IkReal> x1776=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x1774))+((cj5*r00*x1775))+(((-1.0)*r00*x1772*x1773))+((x1772*x1774)))),-1);
if(!x1776.valid){
continue;
}
CheckValue<IkReal> x1777 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x1775))+(((-1.0)*cj0*cj5*x1773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1776.value)))+(x1777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1778=IKcos(j4);
IkReal x1779=IKsin(j4);
IkReal x1780=(cj5*r00);
IkReal x1781=(cj5*r10);
IkReal x1782=(cj5*r20);
IkReal x1783=((1.0)*x1778);
IkReal x1784=(sj5*x1778);
IkReal x1785=((1.0)*sj5*x1779);
evalcond[0]=(((r22*x1779))+((r21*x1784))+(((-1.0)*x1782*x1783)));
evalcond[1]=(((r22*x1778))+((x1779*x1782))+(((-1.0)*r21*x1785)));
evalcond[2]=(cj0+((r02*x1779))+(((-1.0)*x1780*x1783))+((r01*x1784)));
evalcond[3]=(sj0+((r12*x1779))+((r11*x1784))+(((-1.0)*x1781*x1783)));
evalcond[4]=(((r12*x1778))+cj0+(((-1.0)*r11*x1785))+((x1779*x1781)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1778))+(((-1.0)*r01*x1785))+((x1779*x1780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1786=((1.0)*cj5);
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x1786))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1786)))),-1);
if(!x1788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1787.value)+(((1.5707963267949)*(x1788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1789=IKcos(j4);
IkReal x1790=IKsin(j4);
IkReal x1791=(cj5*r00);
IkReal x1792=(cj5*r10);
IkReal x1793=(cj5*r20);
IkReal x1794=((1.0)*x1789);
IkReal x1795=(sj5*x1789);
IkReal x1796=((1.0)*sj5*x1790);
evalcond[0]=(((r21*x1795))+(((-1.0)*x1793*x1794))+((r22*x1790)));
evalcond[1]=(((r22*x1789))+(((-1.0)*r21*x1796))+((x1790*x1793)));
evalcond[2]=(cj0+((r02*x1790))+((r01*x1795))+(((-1.0)*x1791*x1794)));
evalcond[3]=((((-1.0)*x1792*x1794))+sj0+((r12*x1790))+((r11*x1795)));
evalcond[4]=(cj0+(((-1.0)*r11*x1796))+((r12*x1789))+((x1790*x1792)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x1796))+((r02*x1789))+((x1790*x1791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1797 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1797.valid){
continue;
}
CheckValue<IkReal> x1798=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1797.value)+(((1.5707963267949)*(x1798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1799=IKcos(j4);
IkReal x1800=IKsin(j4);
IkReal x1801=(cj5*r00);
IkReal x1802=(cj5*r10);
IkReal x1803=(cj5*r20);
IkReal x1804=((1.0)*x1799);
IkReal x1805=(sj5*x1799);
IkReal x1806=((1.0)*sj5*x1800);
evalcond[0]=(((r22*x1800))+((r21*x1805))+(((-1.0)*x1803*x1804)));
evalcond[1]=((((-1.0)*r21*x1806))+((x1800*x1803))+((r22*x1799)));
evalcond[2]=(cj0+(((-1.0)*x1801*x1804))+((r02*x1800))+((r01*x1805)));
evalcond[3]=(sj0+(((-1.0)*x1802*x1804))+((r12*x1800))+((r11*x1805)));
evalcond[4]=(cj0+((x1800*x1802))+((r12*x1799))+(((-1.0)*r11*x1806)));
evalcond[5]=((((-1.0)*r01*x1806))+(((-1.0)*sj0))+((x1800*x1801))+((r02*x1799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((17.6991150442478)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((17.6991150442478)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.6991150442478)*py))+IKsqr(((17.6991150442478)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((17.6991150442478)*py), ((17.6991150442478)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.0565)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.0565)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1807=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1807;
j4eval[1]=IKsign(x1807);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1808=((1.0)*cj5);
IkReal x1809=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1808)));
j4eval[0]=x1809;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1808)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1810=cj5*cj5;
IkReal x1811=((1.0)*r20);
IkReal x1812=(r01*r21);
IkReal x1813=(r21*sj5);
IkReal x1814=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x1810*x1811))+((cj5*r00*x1813))+((x1810*x1812))+(((-1.0)*x1812)));
j4eval[0]=x1814;
j4eval[1]=((IKabs((((cj0*x1813))+(((-1.0)*cj0*cj5*x1811)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1815=cj5*cj5;
IkReal x1816=((1.0)*r20);
IkReal x1817=(r01*r21);
IkReal x1818=(r21*sj5);
CheckValue<IkReal> x1819 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x1818))+(((-1.0)*cj0*cj5*x1816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1819.valid){
continue;
}
CheckValue<IkReal> x1820=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x1815*x1816))+((x1815*x1817))+((cj5*r00*x1818))+(((-1.0)*x1817)))),-1);
if(!x1820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1819.value)+(((1.5707963267949)*(x1820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1821=IKcos(j4);
IkReal x1822=IKsin(j4);
IkReal x1823=(cj5*r00);
IkReal x1824=(cj5*r10);
IkReal x1825=(cj5*r20);
IkReal x1826=((1.0)*x1821);
IkReal x1827=(sj5*x1821);
IkReal x1828=((1.0)*sj5*x1822);
evalcond[0]=(((r22*x1822))+(((-1.0)*x1825*x1826))+((r21*x1827)));
evalcond[1]=(((r22*x1821))+((x1822*x1825))+(((-1.0)*r21*x1828)));
evalcond[2]=(cj0+((r01*x1827))+((r02*x1822))+(((-1.0)*x1823*x1826)));
evalcond[3]=(sj0+((r11*x1827))+(((-1.0)*x1824*x1826))+((r12*x1822)));
evalcond[4]=(sj0+((x1822*x1823))+(((-1.0)*r01*x1828))+((r02*x1821)));
evalcond[5]=(((x1822*x1824))+(((-1.0)*r11*x1828))+(((-1.0)*cj0))+((r12*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1829=((1.0)*cj5);
CheckValue<IkReal> x1830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1829)))),-1);
if(!x1830.valid){
continue;
}
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x1829))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1830.value)))+(x1831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1832=IKcos(j4);
IkReal x1833=IKsin(j4);
IkReal x1834=(cj5*r00);
IkReal x1835=(cj5*r10);
IkReal x1836=(cj5*r20);
IkReal x1837=((1.0)*x1832);
IkReal x1838=(sj5*x1832);
IkReal x1839=((1.0)*sj5*x1833);
evalcond[0]=((((-1.0)*x1836*x1837))+((r22*x1833))+((r21*x1838)));
evalcond[1]=((((-1.0)*r21*x1839))+((r22*x1832))+((x1833*x1836)));
evalcond[2]=(((r01*x1838))+(((-1.0)*x1834*x1837))+cj0+((r02*x1833)));
evalcond[3]=(sj0+(((-1.0)*x1835*x1837))+((r11*x1838))+((r12*x1833)));
evalcond[4]=(sj0+(((-1.0)*r01*x1839))+((r02*x1832))+((x1833*x1834)));
evalcond[5]=(((r12*x1832))+((x1833*x1835))+(((-1.0)*r11*x1839))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
CheckValue<IkReal> x1841=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1840.value)+(((1.5707963267949)*(x1841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1842=IKcos(j4);
IkReal x1843=IKsin(j4);
IkReal x1844=(cj5*r00);
IkReal x1845=(cj5*r10);
IkReal x1846=(cj5*r20);
IkReal x1847=((1.0)*x1842);
IkReal x1848=(sj5*x1842);
IkReal x1849=((1.0)*sj5*x1843);
evalcond[0]=(((r22*x1843))+((r21*x1848))+(((-1.0)*x1846*x1847)));
evalcond[1]=(((r22*x1842))+((x1843*x1846))+(((-1.0)*r21*x1849)));
evalcond[2]=(cj0+((r02*x1843))+((r01*x1848))+(((-1.0)*x1844*x1847)));
evalcond[3]=(sj0+(((-1.0)*x1845*x1847))+((r12*x1843))+((r11*x1848)));
evalcond[4]=(sj0+((r02*x1842))+(((-1.0)*r01*x1849))+((x1843*x1844)));
evalcond[5]=((((-1.0)*r11*x1849))+((x1843*x1845))+((r12*x1842))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1850=(sj1*sj2);
IkReal x1851=((0.0002)*cj1);
IkReal x1852=(r00*sj5);
IkReal x1853=(cj5*r01);
IkReal x1854=((180.0)*sj1);
IkReal x1855=(cj1*cj2);
IkReal x1856=((2000.0)*px);
IkReal x1857=((113.0)*x1855);
IkReal x1858=((180.0)*cj1*sj2);
CheckValue<IkReal> x1859=IKPowWithIntegerCheck(((((-1.0)*x1850))+x1855),-1);
if(!x1859.valid){
continue;
}
CheckValue<IkReal> x1860=IKPowWithIntegerCheck(((((-113.0)*x1850))+x1857),-1);
if(!x1860.valid){
continue;
}
if( IKabs(((x1859.value)*(((((-1.0)*x1853))+(((-1.0)*x1852)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1860.value)*((((x1852*x1857))+((x1851*x1853))+((x1851*x1852))+(((-1.0)*x1852*x1858))+(((-1.0)*x1852*x1854))+((x1855*x1856))+(((-1.0)*x1850*x1856))+(((-1.0)*cj2*x1852*x1854))+((x1853*x1857))+(((-113.0)*x1850*x1853))+(((-113.0)*x1850*x1852))+(((-1.0)*x1853*x1854))+(((-1.0)*x1853*x1858))+(((-1.0)*cj2*x1853*x1854)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1859.value)*(((((-1.0)*x1853))+(((-1.0)*x1852))))))+IKsqr(((x1860.value)*((((x1852*x1857))+((x1851*x1853))+((x1851*x1852))+(((-1.0)*x1852*x1858))+(((-1.0)*x1852*x1854))+((x1855*x1856))+(((-1.0)*x1850*x1856))+(((-1.0)*cj2*x1852*x1854))+((x1853*x1857))+(((-113.0)*x1850*x1853))+(((-113.0)*x1850*x1852))+(((-1.0)*x1853*x1854))+(((-1.0)*x1853*x1858))+(((-1.0)*cj2*x1853*x1854))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1859.value)*(((((-1.0)*x1853))+(((-1.0)*x1852))))), ((x1860.value)*((((x1852*x1857))+((x1851*x1853))+((x1851*x1852))+(((-1.0)*x1852*x1858))+(((-1.0)*x1852*x1854))+((x1855*x1856))+(((-1.0)*x1850*x1856))+(((-1.0)*cj2*x1852*x1854))+((x1853*x1857))+(((-113.0)*x1850*x1853))+(((-113.0)*x1850*x1852))+(((-1.0)*x1853*x1854))+(((-1.0)*x1853*x1858))+(((-1.0)*cj2*x1853*x1854))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1861=IKsin(j0);
IkReal x1862=IKcos(j0);
IkReal x1863=(cj5*r01);
IkReal x1864=((0.0565)*sj5);
IkReal x1865=((0.09)*sj2);
IkReal x1866=(cj5*r11);
IkReal x1867=((0.09)*cj2);
IkReal x1868=(sj1*x1861);
IkReal x1869=(cj1*x1861);
IkReal x1870=(cj1*x1862);
IkReal x1871=(sj1*x1862);
evalcond[0]=(((r00*sj5))+(((-1.0)*sj2*x1868))+x1863+((cj2*x1869)));
evalcond[1]=(((r10*sj5))+((sj2*x1871))+x1866+(((-1.0)*cj2*x1870)));
evalcond[2]=((((-0.09)*x1868))+(((-1.0)*x1867*x1868))+(((-1.0)*x1865*x1869))+(((-0.0565)*x1863))+(((1.0e-7)*x1869))+(((-1.0)*px))+(((-1.0)*r00*x1864))+(((0.0565)*x1862)));
evalcond[3]=((((-1.0e-7)*x1870))+((x1865*x1870))+(((-0.0565)*x1866))+(((-1.0)*py))+(((0.09)*x1871))+((x1867*x1871))+(((0.0565)*x1861))+(((-1.0)*r10*x1864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1872=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1872;
j4eval[1]=IKsign(x1872);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1873=((1.0)*cj5);
IkReal x1874=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1873)));
j4eval[0]=x1874;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1873)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1874);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1875=((1.0)*sj0);
IkReal x1876=((1.0)*sj5);
IkReal x1877=((((-1.0)*cj5*r21))+(((-1.0)*r20*x1876)));
j4eval[0]=x1877;
j4eval[1]=((IKabs((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*cj5*r00*x1875))+(((-1.0)*cj0*r11*x1876)))))+(IKabs(((((-1.0)*r02*x1875))+((cj0*r12))))));
j4eval[2]=IKsign(x1877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1878=((-1.0)*r20);
IkReal x1880 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1880)==0){
continue;
}
IkReal x1879=pow(x1880,-0.5);
CheckValue<IkReal> x1881 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1878),IKFAST_ATAN2_MAGTHRESH);
if(!x1881.valid){
continue;
}
IkReal gconst112=((-1.0)*(x1881.value));
IkReal gconst113=(r21*x1879);
IkReal gconst114=(x1878*x1879);
CheckValue<IkReal> x1882 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1882.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1882.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1883=((-1.0)*r20);
IkReal x1884=x1879;
CheckValue<IkReal> x1886 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1883),IKFAST_ATAN2_MAGTHRESH);
if(!x1886.valid){
continue;
}
IkReal x1885=((-1.0)*(x1886.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst113;
cj5=gconst114;
j5=x1885;
IkReal gconst112=x1885;
IkReal gconst113=(r21*x1884);
IkReal gconst114=(x1883*x1884);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1887=((-1.0)*r20);
IkReal x1888=x1879;
CheckValue<IkReal> x1890 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1887),IKFAST_ATAN2_MAGTHRESH);
if(!x1890.valid){
continue;
}
IkReal x1889=((-1.0)*(x1890.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst113;
cj5=gconst114;
j5=x1889;
IkReal gconst112=x1889;
IkReal gconst113=(r21*x1888);
IkReal gconst114=(x1887*x1888);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1891=((-1.0)*r20);
IkReal x1892=x1879;
CheckValue<IkReal> x1894 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1891),IKFAST_ATAN2_MAGTHRESH);
if(!x1894.valid){
continue;
}
IkReal x1893=((-1.0)*(x1894.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst113;
cj5=gconst114;
j5=x1893;
IkReal gconst112=x1893;
IkReal gconst113=(r21*x1892);
IkReal gconst114=(x1891*x1892);
IkReal x1895=r22*r22;
CheckValue<IkReal> x1898=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1895))),-1);
if(!x1898.valid){
continue;
}
IkReal x1896=x1898.value;
IkReal x1897=(((x1896*(r21*r21*r21*r21)))+x1895+((x1896*(r20*r20*r20*r20)))+(((2.0)*x1896*(r20*r20)*(r21*r21))));
j4eval[0]=x1897;
j4eval[1]=IKsign(x1897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1899=(gconst113*r21);
IkReal x1900=(gconst114*r20);
IkReal x1901=(sj1*sj2);
IkReal x1902=(cj1*cj2);
CheckValue<IkReal> x1903 = IKatan2WithCheck(IkReal((((x1900*x1902))+(((-1.0)*x1899*x1902))+((x1899*x1901))+(((-1.0)*x1900*x1901)))),IkReal((((r22*x1902))+(((-1.0)*r22*x1901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1903.valid){
continue;
}
CheckValue<IkReal> x1904=IKPowWithIntegerCheck(IKsign(((x1900*x1900)+(x1899*x1899)+(r22*r22)+(((-2.0)*x1899*x1900)))),-1);
if(!x1904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1903.value)+(((1.5707963267949)*(x1904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1905=IKcos(j4);
IkReal x1906=IKsin(j4);
IkReal x1907=(cj2*sj1);
IkReal x1908=((1.0)*cj1);
IkReal x1909=(gconst113*x1905);
IkReal x1910=(gconst114*x1906);
IkReal x1911=((1.0)*gconst114*x1905);
IkReal x1912=((1.0)*gconst113*x1906);
evalcond[0]=(((r21*x1909))+((r22*x1906))+(((-1.0)*r20*x1911)));
evalcond[1]=((((-1.0)*r00*x1911))+((r01*x1909))+cj0+((r02*x1906)));
evalcond[2]=(sj0+((r12*x1906))+(((-1.0)*r10*x1911))+((r11*x1909)));
evalcond[3]=(((sj1*sj2))+((r22*x1905))+(((-1.0)*cj2*x1908))+(((-1.0)*r21*x1912))+((r20*x1910)));
evalcond[4]=((((-1.0)*r01*x1912))+((r00*x1910))+((cj1*sj0*sj2))+((sj0*x1907))+((r02*x1905)));
evalcond[5]=(((r10*x1910))+(((-1.0)*cj0*sj2*x1908))+(((-1.0)*r11*x1912))+((r12*x1905))+(((-1.0)*cj0*x1907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1913=((1.0)*gconst114);
CheckValue<IkReal> x1914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1913))+(((-1.0)*gconst113*r10)))),-1);
if(!x1914.valid){
continue;
}
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal((((cj0*gconst113*r21))+(((-1.0)*cj0*r20*x1913)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1914.value)))+(x1915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1916=IKcos(j4);
IkReal x1917=IKsin(j4);
IkReal x1918=(cj2*sj1);
IkReal x1919=((1.0)*cj1);
IkReal x1920=(gconst113*x1916);
IkReal x1921=(gconst114*x1917);
IkReal x1922=((1.0)*gconst114*x1916);
IkReal x1923=((1.0)*gconst113*x1917);
evalcond[0]=(((r22*x1917))+(((-1.0)*r20*x1922))+((r21*x1920)));
evalcond[1]=(((r01*x1920))+cj0+(((-1.0)*r00*x1922))+((r02*x1917)));
evalcond[2]=(sj0+((r12*x1917))+((r11*x1920))+(((-1.0)*r10*x1922)));
evalcond[3]=((((-1.0)*r21*x1923))+((r22*x1916))+((sj1*sj2))+((r20*x1921))+(((-1.0)*cj2*x1919)));
evalcond[4]=(((r00*x1921))+(((-1.0)*r01*x1923))+((cj1*sj0*sj2))+((sj0*x1918))+((r02*x1916)));
evalcond[5]=((((-1.0)*r11*x1923))+(((-1.0)*cj0*sj2*x1919))+((r12*x1916))+(((-1.0)*cj0*x1918))+((r10*x1921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1924=IKPowWithIntegerCheck(IKsign((((gconst113*r00))+((gconst114*r01)))),-1);
if(!x1924.valid){
continue;
}
CheckValue<IkReal> x1925 = IKatan2WithCheck(IkReal(((((-1.0)*gconst114*r20*sj0))+((gconst113*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1924.value)))+(x1925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1926=IKcos(j4);
IkReal x1927=IKsin(j4);
IkReal x1928=(cj2*sj1);
IkReal x1929=((1.0)*cj1);
IkReal x1930=(gconst113*x1926);
IkReal x1931=(gconst114*x1927);
IkReal x1932=((1.0)*gconst114*x1926);
IkReal x1933=((1.0)*gconst113*x1927);
evalcond[0]=(((r22*x1927))+(((-1.0)*r20*x1932))+((r21*x1930)));
evalcond[1]=(cj0+((r01*x1930))+((r02*x1927))+(((-1.0)*r00*x1932)));
evalcond[2]=(sj0+(((-1.0)*r10*x1932))+((r11*x1930))+((r12*x1927)));
evalcond[3]=(((r22*x1926))+((sj1*sj2))+(((-1.0)*r21*x1933))+(((-1.0)*cj2*x1929))+((r20*x1931)));
evalcond[4]=((((-1.0)*r01*x1933))+((r00*x1931))+((cj1*sj0*sj2))+((r02*x1926))+((sj0*x1928)));
evalcond[5]=((((-1.0)*cj0*x1928))+(((-1.0)*r11*x1933))+((r10*x1931))+(((-1.0)*cj0*sj2*x1929))+((r12*x1926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1934=((-1.0)*r21);
IkReal x1936 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1936)==0){
continue;
}
IkReal x1935=pow(x1936,-0.5);
CheckValue<IkReal> x1937 = IKatan2WithCheck(IkReal(x1934),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1937.valid){
continue;
}
IkReal gconst115=((3.14159265358979)+(((-1.0)*(x1937.value))));
IkReal gconst116=(x1934*x1935);
IkReal gconst117=((1.0)*r20*x1935);
CheckValue<IkReal> x1938 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1938.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1938.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1939=((-1.0)*r21);
CheckValue<IkReal> x1942 = IKatan2WithCheck(IkReal(x1939),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1942.valid){
continue;
}
IkReal x1940=((1.0)*(x1942.value));
IkReal x1941=x1935;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x1940)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x1940)));
IkReal gconst116=(x1939*x1941);
IkReal gconst117=((1.0)*r20*x1941);
IkReal x1943=r22*r22;
IkReal x1944=((1.0)*x1943);
CheckValue<IkReal> x1948=IKPowWithIntegerCheck(((-1.0)+x1943),-1);
if(!x1948.valid){
continue;
}
IkReal x1945=x1948.value;
if((((1.0)+(((-1.0)*x1944)))) < -0.00001)
continue;
IkReal x1946=IKsqrt(((1.0)+(((-1.0)*x1944))));
IkReal x1947=(sj0*x1945*x1946);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1944*x1947))+x1947))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1949=((-1.0)*r21);
CheckValue<IkReal> x1952 = IKatan2WithCheck(IkReal(x1949),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1952.valid){
continue;
}
IkReal x1950=((1.0)*(x1952.value));
IkReal x1951=x1935;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x1950)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x1950)));
IkReal gconst116=(x1949*x1951);
IkReal gconst117=((1.0)*r20*x1951);
IkReal x1953=r22*r22;
IkReal x1954=((1.0)*x1953);
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(((-1.0)+x1953),-1);
if(!x1958.valid){
continue;
}
IkReal x1955=x1958.value;
if((((1.0)+(((-1.0)*x1954)))) < -0.00001)
continue;
IkReal x1956=IKsqrt(((1.0)+(((-1.0)*x1954))));
IkReal x1957=(cj0*x1955*x1956);
j4eval[0]=((IKabs(((((-1.0)*x1954*x1957))+x1957)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1959=((-1.0)*r21);
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal(x1959),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
IkReal x1960=((1.0)*(x1962.value));
IkReal x1961=x1935;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x1960)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x1960)));
IkReal gconst116=(x1959*x1961);
IkReal gconst117=((1.0)*r20*x1961);
IkReal x1963=r22*r22;
IkReal x1964=(cj0*r12);
IkReal x1965=((1.0)*r02*sj0);
CheckValue<IkReal> x1969=IKPowWithIntegerCheck(((-1.0)+x1963),-1);
if(!x1969.valid){
continue;
}
IkReal x1966=x1969.value;
if((((1.0)+(((-1.0)*x1963)))) < -0.00001)
continue;
IkReal x1967=IKsqrt(((1.0)+(((-1.0)*x1963))));
IkReal x1968=(r22*x1966*x1967);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x1965))+x1964)))+(IKabs((((x1964*x1968))+(((-1.0)*x1965*x1968))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1970=((1.0)*sj0);
IkReal x1971=((1.0)*gconst116);
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x1971))+((gconst116*r01*sj0))+(((-1.0)*gconst117*r00*x1970))+((cj0*gconst117*r10)))),IkReal(((((-1.0)*r02*x1970))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
CheckValue<IkReal> x1973=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst117*r21))+(((-1.0)*r20*x1971)))),-1);
if(!x1973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1972.value)+(((1.5707963267949)*(x1973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1974=IKcos(j4);
IkReal x1975=IKsin(j4);
IkReal x1976=(cj2*sj1);
IkReal x1977=((1.0)*cj1);
IkReal x1978=(gconst116*x1974);
IkReal x1979=(gconst117*x1975);
IkReal x1980=((1.0)*gconst117*x1974);
IkReal x1981=((1.0)*gconst116*x1975);
evalcond[0]=(((r21*x1978))+((r22*x1975))+(((-1.0)*r20*x1980)));
evalcond[1]=(((r02*x1975))+cj0+((r01*x1978))+(((-1.0)*r00*x1980)));
evalcond[2]=(sj0+((r12*x1975))+((r11*x1978))+(((-1.0)*r10*x1980)));
evalcond[3]=(((r20*x1979))+((sj1*sj2))+((r22*x1974))+(((-1.0)*cj2*x1977))+(((-1.0)*r21*x1981)));
evalcond[4]=(((r02*x1974))+((sj0*x1976))+((cj1*sj0*sj2))+((r00*x1979))+(((-1.0)*r01*x1981)));
evalcond[5]=((((-1.0)*cj0*x1976))+((r12*x1974))+((r10*x1979))+(((-1.0)*cj0*sj2*x1977))+(((-1.0)*r11*x1981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1982=((1.0)*gconst117);
CheckValue<IkReal> x1983 = IKatan2WithCheck(IkReal((((cj0*gconst116*r21))+(((-1.0)*cj0*r20*x1982)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1983.valid){
continue;
}
CheckValue<IkReal> x1984=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r10))+(((-1.0)*r11*x1982)))),-1);
if(!x1984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1983.value)+(((1.5707963267949)*(x1984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1985=IKcos(j4);
IkReal x1986=IKsin(j4);
IkReal x1987=(cj2*sj1);
IkReal x1988=((1.0)*cj1);
IkReal x1989=(gconst116*x1985);
IkReal x1990=(gconst117*x1986);
IkReal x1991=((1.0)*gconst117*x1985);
IkReal x1992=((1.0)*gconst116*x1986);
evalcond[0]=(((r21*x1989))+((r22*x1986))+(((-1.0)*r20*x1991)));
evalcond[1]=(cj0+(((-1.0)*r00*x1991))+((r01*x1989))+((r02*x1986)));
evalcond[2]=((((-1.0)*r10*x1991))+sj0+((r11*x1989))+((r12*x1986)));
evalcond[3]=((((-1.0)*r21*x1992))+(((-1.0)*cj2*x1988))+((sj1*sj2))+((r20*x1990))+((r22*x1985)));
evalcond[4]=((((-1.0)*r01*x1992))+((sj0*x1987))+((cj1*sj0*sj2))+((r00*x1990))+((r02*x1985)));
evalcond[5]=((((-1.0)*cj0*sj2*x1988))+((r12*x1985))+((r10*x1990))+(((-1.0)*r11*x1992))+(((-1.0)*cj0*x1987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1993=IKPowWithIntegerCheck(IKsign((((gconst117*r01))+((gconst116*r00)))),-1);
if(!x1993.valid){
continue;
}
CheckValue<IkReal> x1994 = IKatan2WithCheck(IkReal((((gconst116*r21*sj0))+(((-1.0)*gconst117*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1993.value)))+(x1994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1995=IKcos(j4);
IkReal x1996=IKsin(j4);
IkReal x1997=(cj2*sj1);
IkReal x1998=((1.0)*cj1);
IkReal x1999=(gconst116*x1995);
IkReal x2000=(gconst117*x1996);
IkReal x2001=((1.0)*gconst117*x1995);
IkReal x2002=((1.0)*gconst116*x1996);
evalcond[0]=(((r21*x1999))+((r22*x1996))+(((-1.0)*r20*x2001)));
evalcond[1]=(cj0+(((-1.0)*r00*x2001))+((r02*x1996))+((r01*x1999)));
evalcond[2]=(((r12*x1996))+sj0+((r11*x1999))+(((-1.0)*r10*x2001)));
evalcond[3]=((((-1.0)*cj2*x1998))+((sj1*sj2))+((r20*x2000))+(((-1.0)*r21*x2002))+((r22*x1995)));
evalcond[4]=(((sj0*x1997))+((r00*x2000))+(((-1.0)*r01*x2002))+((r02*x1995))+((cj1*sj0*sj2)));
evalcond[5]=(((r12*x1995))+(((-1.0)*cj0*x1997))+((r10*x2000))+(((-1.0)*r11*x2002))+(((-1.0)*cj0*sj2*x1998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2003=((-1.0)*r10);
IkReal x2005 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2005)==0){
continue;
}
IkReal x2004=pow(x2005,-0.5);
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2003),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
IkReal gconst118=((-1.0)*(x2006.value));
IkReal gconst119=(r11*x2004);
IkReal gconst120=(x2003*x2004);
CheckValue<IkReal> x2007 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2007.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2007.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2008=((-1.0)*r10);
IkReal x2009=x2004;
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2008),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
IkReal x2010=((-1.0)*(x2011.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst119;
cj5=gconst120;
j5=x2010;
IkReal gconst118=x2010;
IkReal gconst119=(r11*x2009);
IkReal gconst120=(x2008*x2009);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2012=((-1.0)*r10);
IkReal x2013=x2004;
CheckValue<IkReal> x2015 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2012),IKFAST_ATAN2_MAGTHRESH);
if(!x2015.valid){
continue;
}
IkReal x2014=((-1.0)*(x2015.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst119;
cj5=gconst120;
j5=x2014;
IkReal gconst118=x2014;
IkReal gconst119=(r11*x2013);
IkReal gconst120=(x2012*x2013);
IkReal x2016=r12*r12;
IkReal x2017=(r02*sj0);
IkReal x2018=((1.0)*x2016);
CheckValue<IkReal> x2022=IKPowWithIntegerCheck(((-1.0)+x2016),-1);
if(!x2022.valid){
continue;
}
IkReal x2019=x2022.value;
if((((1.0)+(((-1.0)*x2018)))) < -0.00001)
continue;
IkReal x2020=IKsqrt(((1.0)+(((-1.0)*x2018))));
IkReal x2021=(cj0*x2019*x2020);
j4eval[0]=((IKabs(((((-1.0)*x2017))+((cj0*r12)))))+(IKabs((x2021+(((-1.0)*x2018*x2021))+((r12*x2017*x2019*x2020))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2023=((-1.0)*r10);
IkReal x2024=x2004;
CheckValue<IkReal> x2026 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2023),IKFAST_ATAN2_MAGTHRESH);
if(!x2026.valid){
continue;
}
IkReal x2025=((-1.0)*(x2026.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst119;
cj5=gconst120;
j5=x2025;
IkReal gconst118=x2025;
IkReal gconst119=(r11*x2024);
IkReal gconst120=(x2023*x2024);
IkReal x2027=r12*r12;
IkReal x2028=(cj1*cj2);
IkReal x2029=(sj1*sj2);
CheckValue<IkReal> x2033=IKPowWithIntegerCheck(((-1.0)+x2027),-1);
if(!x2033.valid){
continue;
}
IkReal x2030=x2033.value;
if((((1.0)+(((-1.0)*x2027)))) < -0.00001)
continue;
IkReal x2031=IKsqrt(((1.0)+(((-1.0)*x2027))));
IkReal x2032=(r12*r22*x2030*x2031);
j4eval[0]=((IKabs((((r22*x2028))+(((-1.0)*r22*x2029)))))+(IKabs(((((-1.0)*x2028*x2032))+((x2029*x2032))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2034=(gconst120*r20);
IkReal x2035=(cj1*cj2);
IkReal x2036=(gconst119*r21);
IkReal x2037=((1.0)*sj1*sj2);
CheckValue<IkReal> x2038=IKPowWithIntegerCheck(IKsign(((x2036*x2036)+(r22*r22)+(x2034*x2034)+(((-2.0)*x2034*x2036)))),-1);
if(!x2038.valid){
continue;
}
CheckValue<IkReal> x2039 = IKatan2WithCheck(IkReal((((x2034*x2035))+(((-1.0)*x2035*x2036))+((sj1*sj2*x2036))+(((-1.0)*x2034*x2037)))),IkReal((((r22*x2035))+(((-1.0)*r22*x2037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2038.value)))+(x2039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2040=IKcos(j4);
IkReal x2041=IKsin(j4);
IkReal x2042=(cj2*sj1);
IkReal x2043=((1.0)*cj1);
IkReal x2044=(gconst120*r00);
IkReal x2045=(gconst119*x2040);
IkReal x2046=(gconst120*x2041);
IkReal x2047=((1.0)*gconst120*x2040);
IkReal x2048=((1.0)*gconst119*x2041);
evalcond[0]=(((r22*x2041))+((r21*x2045))+(((-1.0)*r20*x2047)));
evalcond[1]=(cj0+(((-1.0)*x2040*x2044))+((r02*x2041))+((r01*x2045)));
evalcond[2]=(sj0+(((-1.0)*r10*x2047))+((r11*x2045))+((r12*x2041)));
evalcond[3]=((((-1.0)*cj2*x2043))+((r22*x2040))+((r20*x2046))+((sj1*sj2))+(((-1.0)*r21*x2048)));
evalcond[4]=(((x2041*x2044))+((r02*x2040))+((cj1*sj0*sj2))+((sj0*x2042))+(((-1.0)*r01*x2048)));
evalcond[5]=((((-1.0)*cj0*x2042))+(((-1.0)*cj0*sj2*x2043))+((r12*x2040))+((r10*x2046))+(((-1.0)*r11*x2048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2049=((1.0)*sj0);
IkReal x2050=((1.0)*gconst119);
CheckValue<IkReal> x2051=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst120*r21))+(((-1.0)*r20*x2050)))),-1);
if(!x2051.valid){
continue;
}
CheckValue<IkReal> x2052 = IKatan2WithCheck(IkReal((((cj0*gconst120*r10))+((gconst119*r01*sj0))+(((-1.0)*gconst120*r00*x2049))+(((-1.0)*cj0*r11*x2050)))),IkReal(((((-1.0)*r02*x2049))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2051.value)))+(x2052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2053=IKcos(j4);
IkReal x2054=IKsin(j4);
IkReal x2055=(cj2*sj1);
IkReal x2056=((1.0)*cj1);
IkReal x2057=(gconst120*r00);
IkReal x2058=(gconst119*x2053);
IkReal x2059=(gconst120*x2054);
IkReal x2060=((1.0)*gconst120*x2053);
IkReal x2061=((1.0)*gconst119*x2054);
evalcond[0]=(((r22*x2054))+(((-1.0)*r20*x2060))+((r21*x2058)));
evalcond[1]=(((r01*x2058))+cj0+(((-1.0)*x2053*x2057))+((r02*x2054)));
evalcond[2]=(((r12*x2054))+(((-1.0)*r10*x2060))+sj0+((r11*x2058)));
evalcond[3]=(((r22*x2053))+(((-1.0)*cj2*x2056))+((sj1*sj2))+(((-1.0)*r21*x2061))+((r20*x2059)));
evalcond[4]=(((x2054*x2057))+((sj0*x2055))+((cj1*sj0*sj2))+((r02*x2053))+(((-1.0)*r01*x2061)));
evalcond[5]=(((r10*x2059))+((r12*x2053))+(((-1.0)*r11*x2061))+(((-1.0)*cj0*sj2*x2056))+(((-1.0)*cj0*x2055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2062=IKPowWithIntegerCheck(IKsign((((gconst120*r01))+((gconst119*r00)))),-1);
if(!x2062.valid){
continue;
}
CheckValue<IkReal> x2063 = IKatan2WithCheck(IkReal(((((-1.0)*gconst120*r20*sj0))+((gconst119*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2062.value)))+(x2063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2064=IKcos(j4);
IkReal x2065=IKsin(j4);
IkReal x2066=(cj2*sj1);
IkReal x2067=((1.0)*cj1);
IkReal x2068=(gconst120*r00);
IkReal x2069=(gconst119*x2064);
IkReal x2070=(gconst120*x2065);
IkReal x2071=((1.0)*gconst120*x2064);
IkReal x2072=((1.0)*gconst119*x2065);
evalcond[0]=(((r22*x2065))+((r21*x2069))+(((-1.0)*r20*x2071)));
evalcond[1]=(cj0+(((-1.0)*x2064*x2068))+((r02*x2065))+((r01*x2069)));
evalcond[2]=((((-1.0)*r10*x2071))+sj0+((r12*x2065))+((r11*x2069)));
evalcond[3]=(((r22*x2064))+(((-1.0)*cj2*x2067))+((r20*x2070))+((sj1*sj2))+(((-1.0)*r21*x2072)));
evalcond[4]=(((cj1*sj0*sj2))+((r02*x2064))+(((-1.0)*r01*x2072))+((sj0*x2066))+((x2065*x2068)));
evalcond[5]=((((-1.0)*r11*x2072))+(((-1.0)*cj0*x2066))+(((-1.0)*cj0*sj2*x2067))+((r12*x2064))+((r10*x2070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2073=((-1.0)*r11);
IkReal x2075 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2075)==0){
continue;
}
IkReal x2074=pow(x2075,-0.5);
CheckValue<IkReal> x2076 = IKatan2WithCheck(IkReal(x2073),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2076.valid){
continue;
}
IkReal gconst121=((3.14159265358979)+(((-1.0)*(x2076.value))));
IkReal gconst122=(x2073*x2074);
IkReal gconst123=((1.0)*r10*x2074);
CheckValue<IkReal> x2077 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2077.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2077.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2078=((-1.0)*r11);
CheckValue<IkReal> x2081 = IKatan2WithCheck(IkReal(x2078),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2081.valid){
continue;
}
IkReal x2079=((1.0)*(x2081.value));
IkReal x2080=x2074;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst122;
cj5=gconst123;
j5=((3.14159265)+(((-1.0)*x2079)));
IkReal gconst121=((3.14159265358979)+(((-1.0)*x2079)));
IkReal gconst122=(x2078*x2080);
IkReal gconst123=((1.0)*r10*x2080);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2082=((-1.0)*r11);
CheckValue<IkReal> x2085 = IKatan2WithCheck(IkReal(x2082),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2085.valid){
continue;
}
IkReal x2083=((1.0)*(x2085.value));
IkReal x2084=x2074;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst122;
cj5=gconst123;
j5=((3.14159265)+(((-1.0)*x2083)));
IkReal gconst121=((3.14159265358979)+(((-1.0)*x2083)));
IkReal gconst122=(x2082*x2084);
IkReal gconst123=((1.0)*r10*x2084);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2086=((1.0)*sj0);
IkReal x2087=((1.0)*gconst122);
CheckValue<IkReal> x2088=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2087))+(((-1.0)*gconst123*r21)))),-1);
if(!x2088.valid){
continue;
}
CheckValue<IkReal> x2089 = IKatan2WithCheck(IkReal(((((-1.0)*gconst123*r00*x2086))+((cj0*gconst123*r10))+(((-1.0)*cj0*r11*x2087))+((gconst122*r01*sj0)))),IkReal(((((-1.0)*r02*x2086))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2088.value)))+(x2089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2090=IKcos(j4);
IkReal x2091=IKsin(j4);
IkReal x2092=(cj2*sj1);
IkReal x2093=(gconst123*r00);
IkReal x2094=((1.0)*cj1);
IkReal x2095=(gconst123*r20);
IkReal x2096=(gconst123*r10);
IkReal x2097=((1.0)*x2090);
IkReal x2098=(gconst122*x2090);
IkReal x2099=((1.0)*gconst122*x2091);
evalcond[0]=((((-1.0)*x2095*x2097))+((r22*x2091))+((r21*x2098)));
evalcond[1]=(cj0+((r01*x2098))+(((-1.0)*x2093*x2097))+((r02*x2091)));
evalcond[2]=((((-1.0)*x2096*x2097))+sj0+((r12*x2091))+((r11*x2098)));
evalcond[3]=((((-1.0)*r21*x2099))+((x2091*x2095))+((sj1*sj2))+((r22*x2090))+(((-1.0)*cj2*x2094)));
evalcond[4]=(((sj0*x2092))+((x2091*x2093))+((cj1*sj0*sj2))+((r02*x2090))+(((-1.0)*r01*x2099)));
evalcond[5]=(((x2091*x2096))+(((-1.0)*r11*x2099))+((r12*x2090))+(((-1.0)*cj0*x2092))+(((-1.0)*cj0*sj2*x2094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2100=((1.0)*gconst123);
CheckValue<IkReal> x2101=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2100))+(((-1.0)*gconst122*r10)))),-1);
if(!x2101.valid){
continue;
}
CheckValue<IkReal> x2102 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x2100))+((cj0*gconst122*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2101.value)))+(x2102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2103=IKcos(j4);
IkReal x2104=IKsin(j4);
IkReal x2105=(cj2*sj1);
IkReal x2106=(gconst123*r00);
IkReal x2107=((1.0)*cj1);
IkReal x2108=(gconst123*r20);
IkReal x2109=(gconst123*r10);
IkReal x2110=((1.0)*x2103);
IkReal x2111=(gconst122*x2103);
IkReal x2112=((1.0)*gconst122*x2104);
evalcond[0]=(((r21*x2111))+((r22*x2104))+(((-1.0)*x2108*x2110)));
evalcond[1]=(cj0+((r01*x2111))+((r02*x2104))+(((-1.0)*x2106*x2110)));
evalcond[2]=(sj0+((r12*x2104))+(((-1.0)*x2109*x2110))+((r11*x2111)));
evalcond[3]=((((-1.0)*r21*x2112))+((x2104*x2108))+(((-1.0)*cj2*x2107))+((sj1*sj2))+((r22*x2103)));
evalcond[4]=((((-1.0)*r01*x2112))+((r02*x2103))+((x2104*x2106))+((cj1*sj0*sj2))+((sj0*x2105)));
evalcond[5]=((((-1.0)*cj0*sj2*x2107))+((r12*x2103))+((x2104*x2109))+(((-1.0)*cj0*x2105))+(((-1.0)*r11*x2112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2113 = IKatan2WithCheck(IkReal(((((-1.0)*gconst123*r20*sj0))+((gconst122*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2113.valid){
continue;
}
CheckValue<IkReal> x2114=IKPowWithIntegerCheck(IKsign((((gconst122*r00))+((gconst123*r01)))),-1);
if(!x2114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2113.value)+(((1.5707963267949)*(x2114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2115=IKcos(j4);
IkReal x2116=IKsin(j4);
IkReal x2117=(cj2*sj1);
IkReal x2118=(gconst123*r00);
IkReal x2119=((1.0)*cj1);
IkReal x2120=(gconst123*r20);
IkReal x2121=(gconst123*r10);
IkReal x2122=((1.0)*x2115);
IkReal x2123=(gconst122*x2115);
IkReal x2124=((1.0)*gconst122*x2116);
evalcond[0]=((((-1.0)*x2120*x2122))+((r21*x2123))+((r22*x2116)));
evalcond[1]=(cj0+(((-1.0)*x2118*x2122))+((r02*x2116))+((r01*x2123)));
evalcond[2]=(((r12*x2116))+sj0+((r11*x2123))+(((-1.0)*x2121*x2122)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r21*x2124))+(((-1.0)*cj2*x2119))+((r22*x2115))+((x2116*x2120)));
evalcond[4]=(((x2116*x2118))+((sj0*x2117))+(((-1.0)*r01*x2124))+((cj1*sj0*sj2))+((r02*x2115)));
evalcond[5]=(((r12*x2115))+(((-1.0)*cj0*sj2*x2119))+(((-1.0)*r11*x2124))+(((-1.0)*cj0*x2117))+((x2116*x2121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2125=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2125;
j4eval[1]=IKsign(x2125);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2126=((1.0)*cj5);
IkReal x2127=((((-1.0)*r21*x2126))+(((-1.0)*r20*sj5)));
j4eval[0]=x2127;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2126))))));
j4eval[2]=IKsign(x2127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2128=cj5*cj5;
IkReal x2129=r11*r11;
IkReal x2130=(cj5*r10);
IkReal x2131=(r11*sj5);
IkReal x2132=((((2.0)*x2130*x2131))+((x2128*x2129))+(((-1.0)*x2129))+(((-1.0)*(r12*r12)))+(((-1.0)*x2128*(r10*r10))));
j4eval[0]=x2132;
j4eval[1]=((IKabs(r12))+(IKabs((x2131+(((-1.0)*x2130))))));
j4eval[2]=IKsign(x2132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2133=cj5*cj5;
IkReal x2134=r11*r11;
IkReal x2135=(cj5*r10);
IkReal x2136=(r11*sj5);
CheckValue<IkReal> x2137=IKPowWithIntegerCheck(IKsign(((((2.0)*x2135*x2136))+(((-1.0)*(r12*r12)))+(((-1.0)*x2133*(r10*r10)))+(((-1.0)*x2134))+((x2133*x2134)))),-1);
if(!x2137.valid){
continue;
}
CheckValue<IkReal> x2138 = IKatan2WithCheck(IkReal(r12),IkReal((x2136+(((-1.0)*x2135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2137.value)))+(x2138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2139=IKcos(j4);
IkReal x2140=IKsin(j4);
IkReal x2141=(cj5*r00);
IkReal x2142=(cj5*r20);
IkReal x2143=(cj5*r10);
IkReal x2144=((1.0)*x2139);
IkReal x2145=(sj5*x2139);
IkReal x2146=((1.0)*sj5*x2140);
evalcond[0]=((((-1.0)*x2142*x2144))+((r21*x2145))+((r22*x2140)));
evalcond[1]=(((r02*x2140))+((r01*x2145))+(((-1.0)*x2141*x2144)));
evalcond[2]=(((r12*x2139))+(((-1.0)*r11*x2146))+((x2140*x2143)));
evalcond[3]=((1.0)+((r11*x2145))+(((-1.0)*x2143*x2144))+((r12*x2140)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x2146))+((r02*x2139))+((cj1*sj2))+((x2140*x2141)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2140*x2142))+((r22*x2139))+(((-1.0)*r21*x2146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2147=((1.0)*cj5);
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x2147)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
CheckValue<IkReal> x2149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2147))+(((-1.0)*r20*sj5)))),-1);
if(!x2149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2148.value)+(((1.5707963267949)*(x2149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2150=IKcos(j4);
IkReal x2151=IKsin(j4);
IkReal x2152=(cj5*r00);
IkReal x2153=(cj5*r20);
IkReal x2154=(cj5*r10);
IkReal x2155=((1.0)*x2150);
IkReal x2156=(sj5*x2150);
IkReal x2157=((1.0)*sj5*x2151);
evalcond[0]=((((-1.0)*x2153*x2155))+((r22*x2151))+((r21*x2156)));
evalcond[1]=((((-1.0)*x2152*x2155))+((r02*x2151))+((r01*x2156)));
evalcond[2]=(((x2151*x2154))+(((-1.0)*r11*x2157))+((r12*x2150)));
evalcond[3]=((1.0)+(((-1.0)*x2154*x2155))+((r12*x2151))+((r11*x2156)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x2157))+((cj1*sj2))+((r02*x2150))+((x2151*x2152)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2151*x2153))+((r22*x2150))+(((-1.0)*r21*x2157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2158=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2158.valid){
continue;
}
CheckValue<IkReal> x2159 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2158.value)))+(x2159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2160=IKcos(j4);
IkReal x2161=IKsin(j4);
IkReal x2162=(cj5*r00);
IkReal x2163=(cj5*r20);
IkReal x2164=(cj5*r10);
IkReal x2165=((1.0)*x2160);
IkReal x2166=(sj5*x2160);
IkReal x2167=((1.0)*sj5*x2161);
evalcond[0]=((((-1.0)*x2163*x2165))+((r21*x2166))+((r22*x2161)));
evalcond[1]=(((r01*x2166))+((r02*x2161))+(((-1.0)*x2162*x2165)));
evalcond[2]=(((r12*x2160))+((x2161*x2164))+(((-1.0)*r11*x2167)));
evalcond[3]=((1.0)+((r12*x2161))+(((-1.0)*x2164*x2165))+((r11*x2166)));
evalcond[4]=((((-1.0)*r01*x2167))+((cj2*sj1))+((cj1*sj2))+((x2161*x2162))+((r02*x2160)));
evalcond[5]=((((-1.0)*r21*x2167))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2161*x2163))+((r22*x2160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2168=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2168;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x2168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2169=((1.0)*cj5);
IkReal x2170=((((-1.0)*r01*x2169))+(((-1.0)*r00*sj5)));
j4eval[0]=x2170;
j4eval[1]=((IKabs(((((-1.0)*r20*x2169))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2171=cj5*cj5;
IkReal x2172=r11*r11;
IkReal x2173=(r11*sj5);
IkReal x2174=(cj5*r10);
IkReal x2175=((r12*r12)+x2172+(((-1.0)*x2171*x2172))+(((-2.0)*x2173*x2174))+((x2171*(r10*r10))));
j4eval[0]=x2175;
j4eval[1]=((IKabs(r12))+(IKabs((x2173+(((-1.0)*x2174))))));
j4eval[2]=IKsign(x2175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2176=cj5*cj5;
IkReal x2177=r11*r11;
IkReal x2178=(cj5*r10);
IkReal x2179=(r11*sj5);
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal(r12),IkReal((x2179+(((-1.0)*x2178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
CheckValue<IkReal> x2181=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x2176*x2177))+x2177+((x2176*(r10*r10)))+(((-2.0)*x2178*x2179)))),-1);
if(!x2181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2180.value)+(((1.5707963267949)*(x2181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2182=IKcos(j4);
IkReal x2183=IKsin(j4);
IkReal x2184=(cj5*r00);
IkReal x2185=((1.0)*cj1);
IkReal x2186=(cj5*r20);
IkReal x2187=(cj5*r10);
IkReal x2188=((1.0)*x2182);
IkReal x2189=(sj5*x2182);
IkReal x2190=((1.0)*sj5*x2183);
evalcond[0]=(((r22*x2183))+(((-1.0)*x2186*x2188))+((r21*x2189)));
evalcond[1]=(((r02*x2183))+(((-1.0)*x2184*x2188))+((r01*x2189)));
evalcond[2]=(((x2183*x2187))+((r12*x2182))+(((-1.0)*r11*x2190)));
evalcond[3]=((-1.0)+(((-1.0)*x2187*x2188))+((r12*x2183))+((r11*x2189)));
evalcond[4]=(((r22*x2182))+(((-1.0)*r21*x2190))+((x2183*x2186))+((sj1*sj2))+(((-1.0)*cj2*x2185)));
evalcond[5]=((((-1.0)*r01*x2190))+(((-1.0)*cj2*sj1))+((x2183*x2184))+(((-1.0)*sj2*x2185))+((r02*x2182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2191=((1.0)*cj5);
CheckValue<IkReal> x2192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2191))+(((-1.0)*r00*sj5)))),-1);
if(!x2192.valid){
continue;
}
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2191))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2192.value)))+(x2193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2194=IKcos(j4);
IkReal x2195=IKsin(j4);
IkReal x2196=(cj5*r00);
IkReal x2197=((1.0)*cj1);
IkReal x2198=(cj5*r20);
IkReal x2199=(cj5*r10);
IkReal x2200=((1.0)*x2194);
IkReal x2201=(sj5*x2194);
IkReal x2202=((1.0)*sj5*x2195);
evalcond[0]=(((r22*x2195))+(((-1.0)*x2198*x2200))+((r21*x2201)));
evalcond[1]=(((r01*x2201))+(((-1.0)*x2196*x2200))+((r02*x2195)));
evalcond[2]=((((-1.0)*r11*x2202))+((r12*x2194))+((x2195*x2199)));
evalcond[3]=((-1.0)+((r11*x2201))+((r12*x2195))+(((-1.0)*x2199*x2200)));
evalcond[4]=(((r22*x2194))+((sj1*sj2))+(((-1.0)*r21*x2202))+(((-1.0)*cj2*x2197))+((x2195*x2198)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2197))+((r02*x2194))+(((-1.0)*r01*x2202))+((x2195*x2196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2203=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2203.valid){
continue;
}
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2203.value)))+(x2204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2205=IKcos(j4);
IkReal x2206=IKsin(j4);
IkReal x2207=(cj5*r00);
IkReal x2208=((1.0)*cj1);
IkReal x2209=(cj5*r20);
IkReal x2210=(cj5*r10);
IkReal x2211=((1.0)*x2205);
IkReal x2212=(sj5*x2205);
IkReal x2213=((1.0)*sj5*x2206);
evalcond[0]=((((-1.0)*x2209*x2211))+((r21*x2212))+((r22*x2206)));
evalcond[1]=(((r02*x2206))+((r01*x2212))+(((-1.0)*x2207*x2211)));
evalcond[2]=((((-1.0)*r11*x2213))+((r12*x2205))+((x2206*x2210)));
evalcond[3]=((-1.0)+(((-1.0)*x2210*x2211))+((r12*x2206))+((r11*x2212)));
evalcond[4]=(((x2206*x2209))+((sj1*sj2))+(((-1.0)*r21*x2213))+(((-1.0)*cj2*x2208))+((r22*x2205)));
evalcond[5]=(((r02*x2205))+(((-1.0)*sj2*x2208))+((x2206*x2207))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*x2213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2215 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2215)==0){
continue;
}
IkReal x2214=pow(x2215,-0.5);
CheckValue<IkReal> x2216 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2216.valid){
continue;
}
IkReal gconst124=((-1.0)*(x2216.value));
IkReal gconst125=((-1.0)*r01*x2214);
IkReal gconst126=(r00*x2214);
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2217.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2220 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2220.valid){
continue;
}
IkReal x2218=((-1.0)*(x2220.value));
IkReal x2219=x2214;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst125;
cj5=gconst126;
j5=x2218;
IkReal gconst124=x2218;
IkReal gconst125=((-1.0)*r01*x2219);
IkReal gconst126=(r00*x2219);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2223 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2223.valid){
continue;
}
IkReal x2221=((-1.0)*(x2223.value));
IkReal x2222=x2214;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst125;
cj5=gconst126;
j5=x2221;
IkReal gconst124=x2221;
IkReal gconst125=((-1.0)*r01*x2222);
IkReal gconst126=(r00*x2222);
IkReal x2224=r02*r02;
IkReal x2225=((1.0)*sj0);
IkReal x2226=(cj0*r12);
CheckValue<IkReal> x2230=IKPowWithIntegerCheck(((-1.0)+x2224),-1);
if(!x2230.valid){
continue;
}
IkReal x2227=x2230.value;
if((((1.0)+(((-1.0)*x2224)))) < -0.00001)
continue;
IkReal x2228=IKsqrt(((1.0)+(((-1.0)*x2224))));
IkReal x2229=(x2227*x2228);
j4eval[0]=((IKabs((((sj0*x2229))+((r02*x2226*x2229))+(((-1.0)*x2224*x2225*x2229)))))+(IKabs((x2226+(((-1.0)*r02*x2225))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2233 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2233.valid){
continue;
}
IkReal x2231=((-1.0)*(x2233.value));
IkReal x2232=x2214;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst125;
cj5=gconst126;
j5=x2231;
IkReal gconst124=x2231;
IkReal gconst125=((-1.0)*r01*x2232);
IkReal gconst126=(r00*x2232);
IkReal x2234=r02*r02;
IkReal x2235=(cj1*cj2);
IkReal x2236=((1.0)*sj1*sj2);
CheckValue<IkReal> x2240=IKPowWithIntegerCheck(((-1.0)+x2234),-1);
if(!x2240.valid){
continue;
}
IkReal x2237=x2240.value;
if((((1.0)+(((-1.0)*x2234)))) < -0.00001)
continue;
IkReal x2238=IKsqrt(((1.0)+(((-1.0)*x2234))));
IkReal x2239=(r02*r22*x2237*x2238);
j4eval[0]=((IKabs((((x2235*x2239))+(((-1.0)*x2236*x2239)))))+(IKabs((((r22*x2235))+(((-1.0)*r22*x2236))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2241=(gconst126*r20);
IkReal x2242=(gconst125*r21);
IkReal x2243=(sj1*sj2);
IkReal x2244=(cj1*cj2);
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal((((x2241*x2244))+(((-1.0)*x2241*x2243))+(((-1.0)*x2242*x2244))+((x2242*x2243)))),IkReal(((((-1.0)*r22*x2243))+((r22*x2244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
CheckValue<IkReal> x2246=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2241*x2242))+(r22*r22)+(x2242*x2242)+(x2241*x2241))),-1);
if(!x2246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2245.value)+(((1.5707963267949)*(x2246.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2247=IKcos(j4);
IkReal x2248=IKsin(j4);
IkReal x2249=(cj2*sj1);
IkReal x2250=(gconst126*r10);
IkReal x2251=((1.0)*cj1);
IkReal x2252=(gconst125*x2247);
IkReal x2253=(gconst126*x2248);
IkReal x2254=((1.0)*gconst126*x2247);
IkReal x2255=((1.0)*gconst125*x2248);
evalcond[0]=(((r21*x2252))+((r22*x2248))+(((-1.0)*r20*x2254)));
evalcond[1]=(cj0+(((-1.0)*r00*x2254))+((r01*x2252))+((r02*x2248)));
evalcond[2]=(sj0+(((-1.0)*x2247*x2250))+((r12*x2248))+((r11*x2252)));
evalcond[3]=((((-1.0)*r21*x2255))+((sj1*sj2))+(((-1.0)*cj2*x2251))+((r20*x2253))+((r22*x2247)));
evalcond[4]=(((cj1*sj0*sj2))+((sj0*x2249))+(((-1.0)*r01*x2255))+((r00*x2253))+((r02*x2247)));
evalcond[5]=((((-1.0)*cj0*sj2*x2251))+(((-1.0)*cj0*x2249))+(((-1.0)*r11*x2255))+((x2248*x2250))+((r12*x2247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2256=((1.0)*gconst126);
IkReal x2257=((1.0)*gconst125);
CheckValue<IkReal> x2258=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2256))+(((-1.0)*r20*x2257)))),-1);
if(!x2258.valid){
continue;
}
CheckValue<IkReal> x2259 = IKatan2WithCheck(IkReal((((gconst125*r01*sj0))+(((-1.0)*r00*sj0*x2256))+(((-1.0)*cj0*r11*x2257))+((cj0*gconst126*r10)))),IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2258.value)))+(x2259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2260=IKcos(j4);
IkReal x2261=IKsin(j4);
IkReal x2262=(cj2*sj1);
IkReal x2263=(gconst126*r10);
IkReal x2264=((1.0)*cj1);
IkReal x2265=(gconst125*x2260);
IkReal x2266=(gconst126*x2261);
IkReal x2267=((1.0)*gconst126*x2260);
IkReal x2268=((1.0)*gconst125*x2261);
evalcond[0]=(((r21*x2265))+(((-1.0)*r20*x2267))+((r22*x2261)));
evalcond[1]=(((r01*x2265))+cj0+(((-1.0)*r00*x2267))+((r02*x2261)));
evalcond[2]=(sj0+((r11*x2265))+((r12*x2261))+(((-1.0)*x2260*x2263)));
evalcond[3]=(((r22*x2260))+((sj1*sj2))+(((-1.0)*r21*x2268))+((r20*x2266))+(((-1.0)*cj2*x2264)));
evalcond[4]=(((r00*x2266))+((sj0*x2262))+(((-1.0)*r01*x2268))+((cj1*sj0*sj2))+((r02*x2260)));
evalcond[5]=(((x2261*x2263))+(((-1.0)*cj0*sj2*x2264))+((r12*x2260))+(((-1.0)*cj0*x2262))+(((-1.0)*r11*x2268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2269=((1.0)*gconst126);
CheckValue<IkReal> x2270 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x2269))+((cj0*gconst125*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2270.valid){
continue;
}
CheckValue<IkReal> x2271=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2269))+(((-1.0)*gconst125*r10)))),-1);
if(!x2271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2270.value)+(((1.5707963267949)*(x2271.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2272=IKcos(j4);
IkReal x2273=IKsin(j4);
IkReal x2274=(cj2*sj1);
IkReal x2275=(gconst126*r10);
IkReal x2276=((1.0)*cj1);
IkReal x2277=(gconst125*x2272);
IkReal x2278=(gconst126*x2273);
IkReal x2279=((1.0)*gconst126*x2272);
IkReal x2280=((1.0)*gconst125*x2273);
evalcond[0]=(((r21*x2277))+(((-1.0)*r20*x2279))+((r22*x2273)));
evalcond[1]=(((r01*x2277))+cj0+(((-1.0)*r00*x2279))+((r02*x2273)));
evalcond[2]=(sj0+((r11*x2277))+((r12*x2273))+(((-1.0)*x2272*x2275)));
evalcond[3]=(((sj1*sj2))+((r22*x2272))+((r20*x2278))+(((-1.0)*r21*x2280))+(((-1.0)*cj2*x2276)));
evalcond[4]=(((r00*x2278))+((sj0*x2274))+((cj1*sj0*sj2))+((r02*x2272))+(((-1.0)*r01*x2280)));
evalcond[5]=(((x2273*x2275))+(((-1.0)*r11*x2280))+(((-1.0)*cj0*sj2*x2276))+(((-1.0)*cj0*x2274))+((r12*x2272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2282 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2282)==0){
continue;
}
IkReal x2281=pow(x2282,-0.5);
CheckValue<IkReal> x2283 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2283.valid){
continue;
}
IkReal gconst127=((3.14159265358979)+(((-1.0)*(x2283.value))));
IkReal gconst128=((1.0)*r01*x2281);
IkReal gconst129=((-1.0)*r00*x2281);
CheckValue<IkReal> x2284 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2284.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2284.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x2287 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2287.valid){
continue;
}
IkReal x2285=((1.0)*(x2287.value));
IkReal x2286=x2281;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst128;
cj5=gconst129;
j5=((3.14159265)+(((-1.0)*x2285)));
IkReal gconst127=((3.14159265358979)+(((-1.0)*x2285)));
IkReal gconst128=((1.0)*r01*x2286);
IkReal gconst129=((-1.0)*r00*x2286);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2290 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2290.valid){
continue;
}
IkReal x2288=((1.0)*(x2290.value));
IkReal x2289=x2281;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst128;
cj5=gconst129;
j5=((3.14159265)+(((-1.0)*x2288)));
IkReal gconst127=((3.14159265358979)+(((-1.0)*x2288)));
IkReal gconst128=((1.0)*r01*x2289);
IkReal gconst129=((-1.0)*r00*x2289);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2291=((1.0)*gconst128);
IkReal x2292=((1.0)*sj0);
CheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal((((gconst128*r01*sj0))+((cj0*gconst129*r10))+(((-1.0)*cj0*r11*x2291))+(((-1.0)*gconst129*r00*x2292)))),IkReal(((((-1.0)*r02*x2292))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2293.valid){
continue;
}
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst129*r21))+(((-1.0)*r20*x2291)))),-1);
if(!x2294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2293.value)+(((1.5707963267949)*(x2294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2295=IKcos(j4);
IkReal x2296=IKsin(j4);
IkReal x2297=(cj2*sj1);
IkReal x2298=((1.0)*cj1);
IkReal x2299=(gconst129*x2296);
IkReal x2300=(gconst128*x2295);
IkReal x2301=((1.0)*gconst128*x2296);
IkReal x2302=((1.0)*gconst129*x2295);
evalcond[0]=((((-1.0)*r20*x2302))+((r22*x2296))+((r21*x2300)));
evalcond[1]=(cj0+(((-1.0)*r00*x2302))+((r02*x2296))+((r01*x2300)));
evalcond[2]=((((-1.0)*r10*x2302))+sj0+((r11*x2300))+((r12*x2296)));
evalcond[3]=((((-1.0)*cj2*x2298))+(((-1.0)*r21*x2301))+((r22*x2295))+((sj1*sj2))+((r20*x2299)));
evalcond[4]=(((sj0*x2297))+(((-1.0)*r01*x2301))+((r02*x2295))+((cj1*sj0*sj2))+((r00*x2299)));
evalcond[5]=((((-1.0)*r11*x2301))+((r10*x2299))+(((-1.0)*cj0*sj2*x2298))+(((-1.0)*cj0*x2297))+((r12*x2295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2303=((1.0)*gconst129);
CheckValue<IkReal> x2304=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2303))+(((-1.0)*gconst128*r10)))),-1);
if(!x2304.valid){
continue;
}
CheckValue<IkReal> x2305 = IKatan2WithCheck(IkReal((((cj0*gconst128*r21))+(((-1.0)*cj0*r20*x2303)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2304.value)))+(x2305.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2306=IKcos(j4);
IkReal x2307=IKsin(j4);
IkReal x2308=(cj2*sj1);
IkReal x2309=((1.0)*cj1);
IkReal x2310=(gconst129*x2307);
IkReal x2311=(gconst128*x2306);
IkReal x2312=((1.0)*gconst128*x2307);
IkReal x2313=((1.0)*gconst129*x2306);
evalcond[0]=((((-1.0)*r20*x2313))+((r21*x2311))+((r22*x2307)));
evalcond[1]=(cj0+((r02*x2307))+((r01*x2311))+(((-1.0)*r00*x2313)));
evalcond[2]=(((r12*x2307))+sj0+((r11*x2311))+(((-1.0)*r10*x2313)));
evalcond[3]=((((-1.0)*cj2*x2309))+((sj1*sj2))+((r22*x2306))+((r20*x2310))+(((-1.0)*r21*x2312)));
evalcond[4]=(((sj0*x2308))+((r02*x2306))+((cj1*sj0*sj2))+((r00*x2310))+(((-1.0)*r01*x2312)));
evalcond[5]=((((-1.0)*cj0*sj2*x2309))+((r10*x2310))+((r12*x2306))+(((-1.0)*cj0*x2308))+(((-1.0)*r11*x2312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2314 = IKatan2WithCheck(IkReal((((gconst128*r21*sj0))+(((-1.0)*gconst129*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2314.valid){
continue;
}
CheckValue<IkReal> x2315=IKPowWithIntegerCheck(IKsign((((gconst129*r01))+((gconst128*r00)))),-1);
if(!x2315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2314.value)+(((1.5707963267949)*(x2315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2316=IKcos(j4);
IkReal x2317=IKsin(j4);
IkReal x2318=(cj2*sj1);
IkReal x2319=((1.0)*cj1);
IkReal x2320=(gconst129*x2317);
IkReal x2321=(gconst128*x2316);
IkReal x2322=((1.0)*gconst128*x2317);
IkReal x2323=((1.0)*gconst129*x2316);
evalcond[0]=(((r21*x2321))+((r22*x2317))+(((-1.0)*r20*x2323)));
evalcond[1]=(cj0+(((-1.0)*r00*x2323))+((r01*x2321))+((r02*x2317)));
evalcond[2]=(sj0+((r11*x2321))+((r12*x2317))+(((-1.0)*r10*x2323)));
evalcond[3]=((((-1.0)*cj2*x2319))+((r22*x2316))+((sj1*sj2))+((r20*x2320))+(((-1.0)*r21*x2322)));
evalcond[4]=(((sj0*x2318))+((cj1*sj0*sj2))+((r00*x2320))+(((-1.0)*r01*x2322))+((r02*x2316)));
evalcond[5]=((((-1.0)*cj0*x2318))+((r10*x2320))+(((-1.0)*cj0*sj2*x2319))+((r12*x2316))+(((-1.0)*r11*x2322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2324=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2324;
j4eval[1]=IKsign(x2324);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2325=((1.0)*cj5);
IkReal x2326=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2325)));
j4eval[0]=x2326;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2325))))));
j4eval[2]=IKsign(x2326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2327=cj5*cj5;
IkReal x2328=r01*r01;
IkReal x2329=(r01*sj5);
IkReal x2330=(cj5*r00);
IkReal x2331=((((-1.0)*x2327*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x2329*x2330))+((x2327*x2328))+(((-1.0)*x2328)));
j4eval[0]=x2331;
j4eval[1]=IKsign(x2331);
j4eval[2]=((IKabs(r02))+(IKabs((x2329+(((-1.0)*x2330))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2332=cj5*cj5;
IkReal x2333=r01*r01;
IkReal x2334=(r01*sj5);
IkReal x2335=(cj5*r00);
CheckValue<IkReal> x2336 = IKatan2WithCheck(IkReal(r02),IkReal((x2334+(((-1.0)*x2335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2336.valid){
continue;
}
CheckValue<IkReal> x2337=IKPowWithIntegerCheck(IKsign((((x2332*x2333))+(((-1.0)*(r02*r02)))+(((2.0)*x2334*x2335))+(((-1.0)*x2333))+(((-1.0)*x2332*(r00*r00))))),-1);
if(!x2337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2336.value)+(((1.5707963267949)*(x2337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2338=IKcos(j4);
IkReal x2339=IKsin(j4);
IkReal x2340=(cj5*r00);
IkReal x2341=((1.0)*cj1);
IkReal x2342=((1.0)*x2338);
IkReal x2343=(sj5*x2338);
IkReal x2344=(cj5*x2339);
IkReal x2345=((1.0)*sj5*x2339);
evalcond[0]=(((r22*x2339))+(((-1.0)*cj5*r20*x2342))+((r21*x2343)));
evalcond[1]=(((r12*x2339))+((r11*x2343))+(((-1.0)*cj5*r10*x2342)));
evalcond[2]=(((r02*x2338))+(((-1.0)*r01*x2345))+((x2339*x2340)));
evalcond[3]=((1.0)+((r02*x2339))+((r01*x2343))+(((-1.0)*x2340*x2342)));
evalcond[4]=((((-1.0)*r21*x2345))+(((-1.0)*cj2*x2341))+((sj1*sj2))+((r22*x2338))+((r20*x2344)));
evalcond[5]=(((r10*x2344))+((r12*x2338))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2341))+(((-1.0)*r11*x2345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2346=((1.0)*cj5);
CheckValue<IkReal> x2347=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2346)))),-1);
if(!x2347.valid){
continue;
}
CheckValue<IkReal> x2348 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2346))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2347.value)))+(x2348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2349=IKcos(j4);
IkReal x2350=IKsin(j4);
IkReal x2351=(cj5*r00);
IkReal x2352=((1.0)*cj1);
IkReal x2353=((1.0)*x2349);
IkReal x2354=(sj5*x2349);
IkReal x2355=(cj5*x2350);
IkReal x2356=((1.0)*sj5*x2350);
evalcond[0]=(((r22*x2350))+(((-1.0)*cj5*r20*x2353))+((r21*x2354)));
evalcond[1]=(((r12*x2350))+((r11*x2354))+(((-1.0)*cj5*r10*x2353)));
evalcond[2]=((((-1.0)*r01*x2356))+((x2350*x2351))+((r02*x2349)));
evalcond[3]=((1.0)+((r01*x2354))+(((-1.0)*x2351*x2353))+((r02*x2350)));
evalcond[4]=((((-1.0)*r21*x2356))+((r22*x2349))+((sj1*sj2))+(((-1.0)*cj2*x2352))+((r20*x2355)));
evalcond[5]=(((r10*x2355))+((r12*x2349))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2352))+(((-1.0)*r11*x2356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2357=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2357.valid){
continue;
}
CheckValue<IkReal> x2358 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2357.value)))+(x2358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2359=IKcos(j4);
IkReal x2360=IKsin(j4);
IkReal x2361=(cj5*r00);
IkReal x2362=((1.0)*cj1);
IkReal x2363=((1.0)*x2359);
IkReal x2364=(sj5*x2359);
IkReal x2365=(cj5*x2360);
IkReal x2366=((1.0)*sj5*x2360);
evalcond[0]=(((r22*x2360))+(((-1.0)*cj5*r20*x2363))+((r21*x2364)));
evalcond[1]=(((r11*x2364))+((r12*x2360))+(((-1.0)*cj5*r10*x2363)));
evalcond[2]=((((-1.0)*r01*x2366))+((x2360*x2361))+((r02*x2359)));
evalcond[3]=((1.0)+((r02*x2360))+(((-1.0)*x2361*x2363))+((r01*x2364)));
evalcond[4]=(((r20*x2365))+(((-1.0)*cj2*x2362))+((r22*x2359))+(((-1.0)*r21*x2366))+((sj1*sj2)));
evalcond[5]=(((r12*x2359))+(((-1.0)*cj2*sj1))+((r10*x2365))+(((-1.0)*r11*x2366))+(((-1.0)*sj2*x2362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2367=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2367;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2368=((1.0)*cj5);
IkReal x2369=((((-1.0)*r21*x2368))+(((-1.0)*r20*sj5)));
j4eval[0]=x2369;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2368))+((r11*sj5))))));
j4eval[2]=IKsign(x2369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2370=cj5*cj5;
IkReal x2371=r01*r01;
IkReal x2372=(cj5*r00);
IkReal x2373=(r01*sj5);
IkReal x2374=((((-1.0)*x2370*x2371))+x2371+(((-2.0)*x2372*x2373))+((x2370*(r00*r00)))+(r02*r02));
j4eval[0]=x2374;
j4eval[1]=IKsign(x2374);
j4eval[2]=((IKabs(r02))+(IKabs((x2373+(((-1.0)*x2372))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2375=cj5*cj5;
IkReal x2376=r01*r01;
IkReal x2377=(r01*sj5);
IkReal x2378=(cj5*r00);
CheckValue<IkReal> x2379 = IKatan2WithCheck(IkReal(r02),IkReal((x2377+(((-1.0)*x2378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2379.valid){
continue;
}
CheckValue<IkReal> x2380=IKPowWithIntegerCheck(IKsign((x2376+(((-1.0)*x2375*x2376))+(((-2.0)*x2377*x2378))+((x2375*(r00*r00)))+(r02*r02))),-1);
if(!x2380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2379.value)+(((1.5707963267949)*(x2380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2381=IKcos(j4);
IkReal x2382=IKsin(j4);
IkReal x2383=(cj5*r00);
IkReal x2384=(cj5*r20);
IkReal x2385=(cj5*r10);
IkReal x2386=((1.0)*x2381);
IkReal x2387=(sj5*x2381);
IkReal x2388=((1.0)*sj5*x2382);
evalcond[0]=(((r21*x2387))+((r22*x2382))+(((-1.0)*x2384*x2386)));
evalcond[1]=(((r11*x2387))+(((-1.0)*x2385*x2386))+((r12*x2382)));
evalcond[2]=((((-1.0)*r01*x2388))+((r02*x2381))+((x2382*x2383)));
evalcond[3]=((-1.0)+((r01*x2387))+((r02*x2382))+(((-1.0)*x2383*x2386)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2382*x2385))+(((-1.0)*r11*x2388))+((r12*x2381)));
evalcond[5]=((((-1.0)*r21*x2388))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2382*x2384))+((r22*x2381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2389=((1.0)*cj5);
CheckValue<IkReal> x2390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2389))+(((-1.0)*r20*sj5)))),-1);
if(!x2390.valid){
continue;
}
CheckValue<IkReal> x2391 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2389))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2390.value)))+(x2391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2392=IKcos(j4);
IkReal x2393=IKsin(j4);
IkReal x2394=(cj5*r00);
IkReal x2395=(cj5*r20);
IkReal x2396=(cj5*r10);
IkReal x2397=((1.0)*x2392);
IkReal x2398=(sj5*x2392);
IkReal x2399=((1.0)*sj5*x2393);
evalcond[0]=(((r22*x2393))+((r21*x2398))+(((-1.0)*x2395*x2397)));
evalcond[1]=(((r12*x2393))+(((-1.0)*x2396*x2397))+((r11*x2398)));
evalcond[2]=((((-1.0)*r01*x2399))+((x2393*x2394))+((r02*x2392)));
evalcond[3]=((-1.0)+((r01*x2398))+((r02*x2393))+(((-1.0)*x2394*x2397)));
evalcond[4]=(((r12*x2392))+((cj2*sj1))+((cj1*sj2))+((x2393*x2396))+(((-1.0)*r11*x2399)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2393*x2395))+(((-1.0)*r21*x2399))+((r22*x2392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2400 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2400.valid){
continue;
}
CheckValue<IkReal> x2401=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2400.value)+(((1.5707963267949)*(x2401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2402=IKcos(j4);
IkReal x2403=IKsin(j4);
IkReal x2404=(cj5*r00);
IkReal x2405=(cj5*r20);
IkReal x2406=(cj5*r10);
IkReal x2407=((1.0)*x2402);
IkReal x2408=(sj5*x2402);
IkReal x2409=((1.0)*sj5*x2403);
evalcond[0]=((((-1.0)*x2405*x2407))+((r22*x2403))+((r21*x2408)));
evalcond[1]=(((r11*x2408))+((r12*x2403))+(((-1.0)*x2406*x2407)));
evalcond[2]=(((x2403*x2404))+((r02*x2402))+(((-1.0)*r01*x2409)));
evalcond[3]=((-1.0)+(((-1.0)*x2404*x2407))+((r01*x2408))+((r02*x2403)));
evalcond[4]=(((cj2*sj1))+((x2403*x2406))+((cj1*sj2))+((r12*x2402))+(((-1.0)*r11*x2409)));
evalcond[5]=(((x2403*x2405))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x2402))+(((-1.0)*r21*x2409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2410=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2410);
rxp1_1=(px*r21);
rxp1_2=(r11*x2410);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2411=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2411);
rxp1_1=(px*r21);
rxp1_2=(r11*x2411);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2412=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2412);
rxp1_1=(px*r21);
rxp1_2=(r11*x2412);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2415=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2415.valid){
continue;
}
IkReal x2413=x2415.value;
IkReal x2414=(cj0*x2413);
sj4array[0]=(((cj1*sj2*x2414))+((cj2*sj1*x2414)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2416=IKcos(j4);
IkReal x2417=IKsin(j4);
IkReal x2418=(r21*sj5);
IkReal x2419=((1.0)*cj5*x2416);
evalcond[0]=(r02*x2416);
evalcond[1]=(cj0+((r02*x2417)));
evalcond[2]=((((-1.0)*r20*x2419))+((x2416*x2418)));
evalcond[3]=((((-1.0)*r10*x2419))+((r11*sj5*x2416)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2417*x2418))+((cj5*r20*x2417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2421=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2421.valid){
continue;
}
IkReal x2420=x2421.value;
sj4array[0]=(((cj1*cj2*x2420))+(((-1.0)*sj1*sj2*x2420)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2422=IKcos(j4);
IkReal x2423=IKsin(j4);
IkReal x2424=(r11*sj5);
IkReal x2425=((1.0)*cj0);
IkReal x2426=((1.0)*cj5*x2422);
evalcond[0]=(r02*x2422);
evalcond[1]=(cj0+((r02*x2423)));
evalcond[2]=((((-1.0)*r20*x2426))+((r21*sj5*x2422)));
evalcond[3]=((((-1.0)*r10*x2426))+((x2422*x2424)));
evalcond[4]=((((-1.0)*cj1*sj2*x2425))+((cj5*r10*x2423))+(((-1.0)*cj2*sj1*x2425))+(((-1.0)*x2423*x2424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2427=IKPowWithIntegerCheck(r02,-1);
if(!x2427.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x2427.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2428=IKcos(j4);
IkReal x2429=IKsin(j4);
IkReal x2430=((1.0)*cj0);
IkReal x2431=(sj5*x2428);
IkReal x2432=(cj5*x2429);
IkReal x2433=((1.0)*sj5*x2429);
IkReal x2434=((1.0)*cj5*x2428);
evalcond[0]=(r02*x2428);
evalcond[1]=(((r21*x2431))+(((-1.0)*r20*x2434)));
evalcond[2]=(((r11*x2431))+(((-1.0)*r10*x2434)));
evalcond[3]=(((r20*x2432))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2433)));
evalcond[4]=((((-1.0)*cj1*sj2*x2430))+(((-1.0)*r11*x2433))+((r10*x2432))+(((-1.0)*cj2*sj1*x2430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2435=((1.0)*sj0);
IkReal x2436=((1.0)*sj5);
CheckValue<IkReal> x2437 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r00*x2435))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x2436)))),IkReal(((((-1.0)*r02*x2435))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2437.valid){
continue;
}
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2436)))),-1);
if(!x2438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2437.value)+(((1.5707963267949)*(x2438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2439=IKcos(j4);
IkReal x2440=IKsin(j4);
IkReal x2441=(cj5*r00);
IkReal x2442=(cj2*sj1);
IkReal x2443=((1.0)*cj1);
IkReal x2444=((1.0)*x2439);
IkReal x2445=(sj5*x2439);
IkReal x2446=(cj5*x2440);
IkReal x2447=((1.0)*sj5*x2440);
evalcond[0]=(((r22*x2440))+(((-1.0)*cj5*r20*x2444))+((r21*x2445)));
evalcond[1]=(((r02*x2440))+cj0+(((-1.0)*x2441*x2444))+((r01*x2445)));
evalcond[2]=(sj0+(((-1.0)*cj5*r10*x2444))+((r12*x2440))+((r11*x2445)));
evalcond[3]=((((-1.0)*r21*x2447))+((sj1*sj2))+((r22*x2439))+(((-1.0)*cj2*x2443))+((r20*x2446)));
evalcond[4]=(((sj0*x2442))+((x2440*x2441))+((r02*x2439))+((cj1*sj0*sj2))+(((-1.0)*r01*x2447)));
evalcond[5]=((((-1.0)*cj0*x2442))+((r10*x2446))+((r12*x2439))+(((-1.0)*r11*x2447))+(((-1.0)*cj0*sj2*x2443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2448=((1.0)*cj5);
CheckValue<IkReal> x2449 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2448)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2449.valid){
continue;
}
CheckValue<IkReal> x2450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2448)))),-1);
if(!x2450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2449.value)+(((1.5707963267949)*(x2450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2451=IKcos(j4);
IkReal x2452=IKsin(j4);
IkReal x2453=(cj5*r00);
IkReal x2454=(cj2*sj1);
IkReal x2455=((1.0)*cj1);
IkReal x2456=((1.0)*x2451);
IkReal x2457=(sj5*x2451);
IkReal x2458=(cj5*x2452);
IkReal x2459=((1.0)*sj5*x2452);
evalcond[0]=(((r22*x2452))+(((-1.0)*cj5*r20*x2456))+((r21*x2457)));
evalcond[1]=((((-1.0)*x2453*x2456))+((r02*x2452))+cj0+((r01*x2457)));
evalcond[2]=(sj0+(((-1.0)*cj5*r10*x2456))+((r12*x2452))+((r11*x2457)));
evalcond[3]=((((-1.0)*r21*x2459))+((r22*x2451))+((sj1*sj2))+((r20*x2458))+(((-1.0)*cj2*x2455)));
evalcond[4]=(((r02*x2451))+((sj0*x2454))+((x2452*x2453))+((cj1*sj0*sj2))+(((-1.0)*r01*x2459)));
evalcond[5]=((((-1.0)*cj0*x2454))+((r10*x2458))+(((-1.0)*r11*x2459))+((r12*x2451))+(((-1.0)*cj0*sj2*x2455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2460 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2460.valid){
continue;
}
CheckValue<IkReal> x2461=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2460.value)+(((1.5707963267949)*(x2461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2462=IKcos(j4);
IkReal x2463=IKsin(j4);
IkReal x2464=(cj5*r00);
IkReal x2465=(cj2*sj1);
IkReal x2466=((1.0)*cj1);
IkReal x2467=((1.0)*x2462);
IkReal x2468=(sj5*x2462);
IkReal x2469=(cj5*x2463);
IkReal x2470=((1.0)*sj5*x2463);
evalcond[0]=(((r21*x2468))+(((-1.0)*cj5*r20*x2467))+((r22*x2463)));
evalcond[1]=((((-1.0)*x2464*x2467))+((r01*x2468))+cj0+((r02*x2463)));
evalcond[2]=(sj0+((r12*x2463))+((r11*x2468))+(((-1.0)*cj5*r10*x2467)));
evalcond[3]=((((-1.0)*r21*x2470))+((r20*x2469))+((sj1*sj2))+((r22*x2462))+(((-1.0)*cj2*x2466)));
evalcond[4]=((((-1.0)*r01*x2470))+((cj1*sj0*sj2))+((r02*x2462))+((sj0*x2465))+((x2463*x2464)));
evalcond[5]=((((-1.0)*r11*x2470))+(((-1.0)*cj0*sj2*x2466))+((r12*x2462))+(((-1.0)*cj0*x2465))+((r10*x2469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2471=cj5*cj5;
IkReal x2472=r21*r21;
IkReal x2473=(r21*sj5);
IkReal x2474=(sj1*sj2);
IkReal x2475=(cj5*r20);
IkReal x2476=(cj1*cj2);
CheckValue<IkReal> x2477 = IKatan2WithCheck(IkReal(((((-1.0)*x2474*x2475))+(((-1.0)*x2473*x2476))+((x2473*x2474))+((x2475*x2476)))),IkReal(((((-1.0)*r22*x2474))+((r22*x2476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2477.valid){
continue;
}
CheckValue<IkReal> x2478=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2473*x2475))+x2472+(r22*r22)+(((-1.0)*x2471*x2472))+((x2471*(r20*r20))))),-1);
if(!x2478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2477.value)+(((1.5707963267949)*(x2478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2479=IKcos(j4);
IkReal x2480=IKsin(j4);
IkReal x2481=(r21*sj5);
IkReal x2482=(cj5*r20);
evalcond[0]=(((r22*x2480))+(((-1.0)*x2479*x2482))+((x2479*x2481)));
evalcond[1]=((((-1.0)*x2480*x2481))+(((-1.0)*cj1*cj2))+((x2480*x2482))+((sj1*sj2))+((r22*x2479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2483=(cj4*cj5);
IkReal x2484=((1.0)*sj4);
IkReal x2485=((1.0)*cj4*sj5);
if( IKabs(((((-1.0)*r12*x2484))+(((-1.0)*r11*x2485))+((r10*x2483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x2485))+(((-1.0)*r02*x2484))+((r00*x2483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x2484))+(((-1.0)*r11*x2485))+((r10*x2483))))+IKsqr(((((-1.0)*r01*x2485))+(((-1.0)*r02*x2484))+((r00*x2483))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x2484))+(((-1.0)*r11*x2485))+((r10*x2483))), ((((-1.0)*r01*x2485))+(((-1.0)*r02*x2484))+((r00*x2483))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2486=IKsin(j0);
IkReal x2487=IKcos(j0);
IkReal x2488=(cj5*r01);
IkReal x2489=((0.0565)*sj5);
IkReal x2490=(cj5*r00);
IkReal x2491=((1.0)*sj2);
IkReal x2492=((0.09)*sj2);
IkReal x2493=((1.0)*cj4);
IkReal x2494=((1.0)*cj2);
IkReal x2495=(cj5*r10);
IkReal x2496=(cj5*r11);
IkReal x2497=((0.09)*cj2);
IkReal x2498=(cj4*sj5);
IkReal x2499=(sj1*x2486);
IkReal x2500=(cj1*x2487);
IkReal x2501=((1.0)*sj4*sj5);
IkReal x2502=(cj1*x2486);
IkReal x2503=(sj1*x2487);
evalcond[0]=(x2487+(((-1.0)*x2490*x2493))+((r02*sj4))+((r01*x2498)));
evalcond[1]=(x2486+(((-1.0)*x2493*x2495))+((r11*x2498))+((r12*sj4)));
evalcond[2]=(((r00*sj5))+x2488+(((-1.0)*x2491*x2499))+((cj2*x2502)));
evalcond[3]=(x2496+((r10*sj5))+(((-1.0)*x2494*x2500))+((sj2*x2503)));
evalcond[4]=(((cj2*x2499))+(((-1.0)*r01*x2501))+((sj2*x2502))+((sj4*x2490))+((cj4*r02)));
evalcond[5]=((((-1.0)*r11*x2501))+(((-1.0)*x2494*x2503))+((sj4*x2495))+(((-1.0)*x2491*x2500))+((cj4*r12)));
evalcond[6]=((((-1.0)*x2497*x2499))+(((-1.0)*r00*x2489))+(((-1.0)*x2492*x2502))+(((0.0565)*x2487))+(((-1.0)*px))+(((1.0e-7)*x2502))+(((-0.09)*x2499))+(((-0.0565)*x2488)));
evalcond[7]=(((x2497*x2503))+((x2492*x2500))+(((-1.0)*r10*x2489))+(((0.09)*x2503))+(((0.0565)*x2486))+(((-1.0)*py))+(((-0.0565)*x2496))+(((-1.0e-7)*x2500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2504=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x2504.valid){
continue;
}
CheckValue<IkReal> x2505 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2505.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2504.value)))+(x2505.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2506=IKsin(j0);
IkReal x2507=IKcos(j0);
IkReal x2508=(cj5*r01);
IkReal x2509=((0.0565)*sj5);
IkReal x2510=((0.09)*sj2);
IkReal x2511=(cj5*r11);
IkReal x2512=((0.09)*cj2);
IkReal x2513=(sj1*x2506);
IkReal x2514=(cj1*x2506);
IkReal x2515=(cj1*x2507);
IkReal x2516=(sj1*x2507);
evalcond[0]=((((-1.0)*sj2*x2513))+((r00*sj5))+x2508+((cj2*x2514)));
evalcond[1]=(x2511+((r10*sj5))+(((-1.0)*cj2*x2515))+((sj2*x2516)));
evalcond[2]=((((-1.0)*x2510*x2514))+(((-1.0)*r00*x2509))+(((0.0565)*x2507))+(((-1.0)*px))+(((-0.09)*x2513))+(((-1.0)*x2512*x2513))+(((-0.0565)*x2508))+(((1.0e-7)*x2514)));
evalcond[3]=((((-1.0e-7)*x2515))+((x2512*x2516))+(((0.09)*x2516))+((x2510*x2515))+(((0.0565)*x2506))+(((-1.0)*py))+(((-1.0)*r10*x2509))+(((-0.0565)*x2511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2517=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2517;
j4eval[1]=IKsign(x2517);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2518=((1.0)*cj5);
IkReal x2519=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2518)));
j4eval[0]=x2519;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2518)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2520=((1.0)*sj0);
IkReal x2521=((1.0)*sj5);
IkReal x2522=((((-1.0)*r20*x2521))+(((-1.0)*cj5*r21)));
j4eval[0]=x2522;
j4eval[1]=((IKabs(((((-1.0)*r02*x2520))+((cj0*r12)))))+(IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x2520))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x2521))))));
j4eval[2]=IKsign(x2522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2523=((-1.0)*r20);
IkReal x2525 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2525)==0){
continue;
}
IkReal x2524=pow(x2525,-0.5);
CheckValue<IkReal> x2526 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2523),IKFAST_ATAN2_MAGTHRESH);
if(!x2526.valid){
continue;
}
IkReal gconst112=((-1.0)*(x2526.value));
IkReal gconst113=(r21*x2524);
IkReal gconst114=(x2523*x2524);
CheckValue<IkReal> x2527 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2527.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2527.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2528=((-1.0)*r20);
IkReal x2529=x2524;
CheckValue<IkReal> x2531 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2528),IKFAST_ATAN2_MAGTHRESH);
if(!x2531.valid){
continue;
}
IkReal x2530=((-1.0)*(x2531.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst113;
cj5=gconst114;
j5=x2530;
IkReal gconst112=x2530;
IkReal gconst113=(r21*x2529);
IkReal gconst114=(x2528*x2529);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2532=((-1.0)*r20);
IkReal x2533=x2524;
CheckValue<IkReal> x2535 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2532),IKFAST_ATAN2_MAGTHRESH);
if(!x2535.valid){
continue;
}
IkReal x2534=((-1.0)*(x2535.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst113;
cj5=gconst114;
j5=x2534;
IkReal gconst112=x2534;
IkReal gconst113=(r21*x2533);
IkReal gconst114=(x2532*x2533);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2536=((-1.0)*r20);
IkReal x2537=x2524;
CheckValue<IkReal> x2539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2536),IKFAST_ATAN2_MAGTHRESH);
if(!x2539.valid){
continue;
}
IkReal x2538=((-1.0)*(x2539.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst113;
cj5=gconst114;
j5=x2538;
IkReal gconst112=x2538;
IkReal gconst113=(r21*x2537);
IkReal gconst114=(x2536*x2537);
IkReal x2540=r22*r22;
CheckValue<IkReal> x2543=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2540))),-1);
if(!x2543.valid){
continue;
}
IkReal x2541=x2543.value;
IkReal x2542=(x2540+((x2541*(r21*r21*r21*r21)))+((x2541*(r20*r20*r20*r20)))+(((2.0)*x2541*(r20*r20)*(r21*r21))));
j4eval[0]=x2542;
j4eval[1]=IKsign(x2542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2544=(gconst113*r21);
IkReal x2545=(gconst114*r20);
IkReal x2546=(sj1*sj2);
IkReal x2547=(cj1*cj2);
CheckValue<IkReal> x2548=IKPowWithIntegerCheck(IKsign(((x2544*x2544)+(r22*r22)+(x2545*x2545)+(((-2.0)*x2544*x2545)))),-1);
if(!x2548.valid){
continue;
}
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal(((((-1.0)*x2545*x2546))+(((-1.0)*x2544*x2547))+((x2545*x2547))+((x2544*x2546)))),IkReal((((r22*x2547))+(((-1.0)*r22*x2546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2548.value)))+(x2549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2550=IKcos(j4);
IkReal x2551=IKsin(j4);
IkReal x2552=(cj2*sj1);
IkReal x2553=((1.0)*cj1);
IkReal x2554=(gconst113*x2550);
IkReal x2555=(gconst114*x2551);
IkReal x2556=((1.0)*gconst114*x2550);
IkReal x2557=((1.0)*gconst113*x2551);
evalcond[0]=(((r22*x2551))+(((-1.0)*r20*x2556))+((r21*x2554)));
evalcond[1]=(cj0+((r01*x2554))+(((-1.0)*r00*x2556))+((r02*x2551)));
evalcond[2]=(sj0+((r12*x2551))+((r11*x2554))+(((-1.0)*r10*x2556)));
evalcond[3]=(((r22*x2550))+((sj1*sj2))+(((-1.0)*cj2*x2553))+(((-1.0)*r21*x2557))+((r20*x2555)));
evalcond[4]=(((cj1*sj0*sj2))+(((-1.0)*r01*x2557))+((r00*x2555))+((sj0*x2552))+((r02*x2550)));
evalcond[5]=((((-1.0)*r11*x2557))+(((-1.0)*cj0*sj2*x2553))+((r12*x2550))+(((-1.0)*cj0*x2552))+((r10*x2555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2558=((1.0)*gconst114);
CheckValue<IkReal> x2559=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2558))+(((-1.0)*gconst113*r10)))),-1);
if(!x2559.valid){
continue;
}
CheckValue<IkReal> x2560 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x2558))+((cj0*gconst113*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2559.value)))+(x2560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2561=IKcos(j4);
IkReal x2562=IKsin(j4);
IkReal x2563=(cj2*sj1);
IkReal x2564=((1.0)*cj1);
IkReal x2565=(gconst113*x2561);
IkReal x2566=(gconst114*x2562);
IkReal x2567=((1.0)*gconst114*x2561);
IkReal x2568=((1.0)*gconst113*x2562);
evalcond[0]=(((r22*x2562))+(((-1.0)*r20*x2567))+((r21*x2565)));
evalcond[1]=((((-1.0)*r00*x2567))+cj0+((r01*x2565))+((r02*x2562)));
evalcond[2]=(sj0+((r12*x2562))+((r11*x2565))+(((-1.0)*r10*x2567)));
evalcond[3]=(((r22*x2561))+(((-1.0)*r21*x2568))+((sj1*sj2))+((r20*x2566))+(((-1.0)*cj2*x2564)));
evalcond[4]=(((r00*x2566))+(((-1.0)*r01*x2568))+((cj1*sj0*sj2))+((sj0*x2563))+((r02*x2561)));
evalcond[5]=((((-1.0)*cj0*x2563))+(((-1.0)*cj0*sj2*x2564))+((r10*x2566))+((r12*x2561))+(((-1.0)*r11*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2569=IKPowWithIntegerCheck(IKsign((((gconst113*r00))+((gconst114*r01)))),-1);
if(!x2569.valid){
continue;
}
CheckValue<IkReal> x2570 = IKatan2WithCheck(IkReal(((((-1.0)*gconst114*r20*sj0))+((gconst113*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2569.value)))+(x2570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2571=IKcos(j4);
IkReal x2572=IKsin(j4);
IkReal x2573=(cj2*sj1);
IkReal x2574=((1.0)*cj1);
IkReal x2575=(gconst113*x2571);
IkReal x2576=(gconst114*x2572);
IkReal x2577=((1.0)*gconst114*x2571);
IkReal x2578=((1.0)*gconst113*x2572);
evalcond[0]=(((r21*x2575))+(((-1.0)*r20*x2577))+((r22*x2572)));
evalcond[1]=(cj0+((r01*x2575))+(((-1.0)*r00*x2577))+((r02*x2572)));
evalcond[2]=((((-1.0)*r10*x2577))+sj0+((r11*x2575))+((r12*x2572)));
evalcond[3]=((((-1.0)*cj2*x2574))+((sj1*sj2))+((r20*x2576))+(((-1.0)*r21*x2578))+((r22*x2571)));
evalcond[4]=(((cj1*sj0*sj2))+(((-1.0)*r01*x2578))+((r00*x2576))+((sj0*x2573))+((r02*x2571)));
evalcond[5]=(((r10*x2576))+(((-1.0)*cj0*sj2*x2574))+((r12*x2571))+(((-1.0)*cj0*x2573))+(((-1.0)*r11*x2578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2579=((-1.0)*r21);
IkReal x2581 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2581)==0){
continue;
}
IkReal x2580=pow(x2581,-0.5);
CheckValue<IkReal> x2582 = IKatan2WithCheck(IkReal(x2579),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2582.valid){
continue;
}
IkReal gconst115=((3.14159265358979)+(((-1.0)*(x2582.value))));
IkReal gconst116=(x2579*x2580);
IkReal gconst117=((1.0)*r20*x2580);
CheckValue<IkReal> x2583 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2583.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2583.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2584=((-1.0)*r21);
CheckValue<IkReal> x2587 = IKatan2WithCheck(IkReal(x2584),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2587.valid){
continue;
}
IkReal x2585=((1.0)*(x2587.value));
IkReal x2586=x2580;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x2585)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x2585)));
IkReal gconst116=(x2584*x2586);
IkReal gconst117=((1.0)*r20*x2586);
IkReal x2588=r22*r22;
IkReal x2589=((1.0)*x2588);
CheckValue<IkReal> x2593=IKPowWithIntegerCheck(((-1.0)+x2588),-1);
if(!x2593.valid){
continue;
}
IkReal x2590=x2593.value;
if((((1.0)+(((-1.0)*x2589)))) < -0.00001)
continue;
IkReal x2591=IKsqrt(((1.0)+(((-1.0)*x2589))));
IkReal x2592=(sj0*x2590*x2591);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2592+(((-1.0)*x2589*x2592))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2594=((-1.0)*r21);
CheckValue<IkReal> x2597 = IKatan2WithCheck(IkReal(x2594),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2597.valid){
continue;
}
IkReal x2595=((1.0)*(x2597.value));
IkReal x2596=x2580;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x2595)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x2595)));
IkReal gconst116=(x2594*x2596);
IkReal gconst117=((1.0)*r20*x2596);
IkReal x2598=r22*r22;
IkReal x2599=((1.0)*x2598);
CheckValue<IkReal> x2603=IKPowWithIntegerCheck(((-1.0)+x2598),-1);
if(!x2603.valid){
continue;
}
IkReal x2600=x2603.value;
if((((1.0)+(((-1.0)*x2599)))) < -0.00001)
continue;
IkReal x2601=IKsqrt(((1.0)+(((-1.0)*x2599))));
IkReal x2602=(cj0*x2600*x2601);
j4eval[0]=((IKabs((x2602+(((-1.0)*x2599*x2602)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2604=((-1.0)*r21);
CheckValue<IkReal> x2607 = IKatan2WithCheck(IkReal(x2604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2607.valid){
continue;
}
IkReal x2605=((1.0)*(x2607.value));
IkReal x2606=x2580;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst116;
cj5=gconst117;
j5=((3.14159265)+(((-1.0)*x2605)));
IkReal gconst115=((3.14159265358979)+(((-1.0)*x2605)));
IkReal gconst116=(x2604*x2606);
IkReal gconst117=((1.0)*r20*x2606);
IkReal x2608=r22*r22;
IkReal x2609=(cj0*r12);
IkReal x2610=((1.0)*r02*sj0);
CheckValue<IkReal> x2614=IKPowWithIntegerCheck(((-1.0)+x2608),-1);
if(!x2614.valid){
continue;
}
IkReal x2611=x2614.value;
if((((1.0)+(((-1.0)*x2608)))) < -0.00001)
continue;
IkReal x2612=IKsqrt(((1.0)+(((-1.0)*x2608))));
IkReal x2613=(r22*x2611*x2612);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2610*x2613))+((x2609*x2613)))))+(IKabs(((((-1.0)*x2610))+x2609))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2615=((1.0)*sj0);
IkReal x2616=((1.0)*gconst116);
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst117*r21))+(((-1.0)*r20*x2616)))),-1);
if(!x2617.valid){
continue;
}
CheckValue<IkReal> x2618 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x2616))+(((-1.0)*gconst117*r00*x2615))+((gconst116*r01*sj0))+((cj0*gconst117*r10)))),IkReal(((((-1.0)*r02*x2615))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2617.value)))+(x2618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2619=IKcos(j4);
IkReal x2620=IKsin(j4);
IkReal x2621=(cj2*sj1);
IkReal x2622=((1.0)*cj1);
IkReal x2623=(gconst116*x2619);
IkReal x2624=(gconst117*x2620);
IkReal x2625=((1.0)*gconst117*x2619);
IkReal x2626=((1.0)*gconst116*x2620);
evalcond[0]=(((r22*x2620))+((r21*x2623))+(((-1.0)*r20*x2625)));
evalcond[1]=(((r01*x2623))+(((-1.0)*r00*x2625))+cj0+((r02*x2620)));
evalcond[2]=(sj0+(((-1.0)*r10*x2625))+((r11*x2623))+((r12*x2620)));
evalcond[3]=(((r20*x2624))+((sj1*sj2))+((r22*x2619))+(((-1.0)*cj2*x2622))+(((-1.0)*r21*x2626)));
evalcond[4]=((((-1.0)*r01*x2626))+((r00*x2624))+((cj1*sj0*sj2))+((r02*x2619))+((sj0*x2621)));
evalcond[5]=((((-1.0)*cj0*x2621))+(((-1.0)*r11*x2626))+(((-1.0)*cj0*sj2*x2622))+((r10*x2624))+((r12*x2619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2627=((1.0)*gconst117);
CheckValue<IkReal> x2628=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r10))+(((-1.0)*r11*x2627)))),-1);
if(!x2628.valid){
continue;
}
CheckValue<IkReal> x2629 = IKatan2WithCheck(IkReal((((cj0*gconst116*r21))+(((-1.0)*cj0*r20*x2627)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2628.value)))+(x2629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2630=IKcos(j4);
IkReal x2631=IKsin(j4);
IkReal x2632=(cj2*sj1);
IkReal x2633=((1.0)*cj1);
IkReal x2634=(gconst116*x2630);
IkReal x2635=(gconst117*x2631);
IkReal x2636=((1.0)*gconst117*x2630);
IkReal x2637=((1.0)*gconst116*x2631);
evalcond[0]=(((r22*x2631))+(((-1.0)*r20*x2636))+((r21*x2634)));
evalcond[1]=(cj0+(((-1.0)*r00*x2636))+((r01*x2634))+((r02*x2631)));
evalcond[2]=(sj0+(((-1.0)*r10*x2636))+((r11*x2634))+((r12*x2631)));
evalcond[3]=((((-1.0)*cj2*x2633))+((r22*x2630))+(((-1.0)*r21*x2637))+((sj1*sj2))+((r20*x2635)));
evalcond[4]=(((sj0*x2632))+(((-1.0)*r01*x2637))+((cj1*sj0*sj2))+((r00*x2635))+((r02*x2630)));
evalcond[5]=(((r10*x2635))+((r12*x2630))+(((-1.0)*r11*x2637))+(((-1.0)*cj0*x2632))+(((-1.0)*cj0*sj2*x2633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2638=IKPowWithIntegerCheck(IKsign((((gconst117*r01))+((gconst116*r00)))),-1);
if(!x2638.valid){
continue;
}
CheckValue<IkReal> x2639 = IKatan2WithCheck(IkReal((((gconst116*r21*sj0))+(((-1.0)*gconst117*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2638.value)))+(x2639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2640=IKcos(j4);
IkReal x2641=IKsin(j4);
IkReal x2642=(cj2*sj1);
IkReal x2643=((1.0)*cj1);
IkReal x2644=(gconst116*x2640);
IkReal x2645=(gconst117*x2641);
IkReal x2646=((1.0)*gconst117*x2640);
IkReal x2647=((1.0)*gconst116*x2641);
evalcond[0]=(((r21*x2644))+(((-1.0)*r20*x2646))+((r22*x2641)));
evalcond[1]=(cj0+(((-1.0)*r00*x2646))+((r02*x2641))+((r01*x2644)));
evalcond[2]=(((r12*x2641))+((r11*x2644))+sj0+(((-1.0)*r10*x2646)));
evalcond[3]=((((-1.0)*cj2*x2643))+((sj1*sj2))+(((-1.0)*r21*x2647))+((r22*x2640))+((r20*x2645)));
evalcond[4]=(((sj0*x2642))+(((-1.0)*r01*x2647))+((r02*x2640))+((cj1*sj0*sj2))+((r00*x2645)));
evalcond[5]=(((r12*x2640))+(((-1.0)*r11*x2647))+((r10*x2645))+(((-1.0)*cj0*sj2*x2643))+(((-1.0)*cj0*x2642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2648=((-1.0)*r10);
IkReal x2650 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2650)==0){
continue;
}
IkReal x2649=pow(x2650,-0.5);
CheckValue<IkReal> x2651 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2648),IKFAST_ATAN2_MAGTHRESH);
if(!x2651.valid){
continue;
}
IkReal gconst118=((-1.0)*(x2651.value));
IkReal gconst119=(r11*x2649);
IkReal gconst120=(x2648*x2649);
CheckValue<IkReal> x2652 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2652.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2652.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2653=((-1.0)*r10);
IkReal x2654=x2649;
CheckValue<IkReal> x2656 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2653),IKFAST_ATAN2_MAGTHRESH);
if(!x2656.valid){
continue;
}
IkReal x2655=((-1.0)*(x2656.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst119;
cj5=gconst120;
j5=x2655;
IkReal gconst118=x2655;
IkReal gconst119=(r11*x2654);
IkReal gconst120=(x2653*x2654);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2657=((-1.0)*r10);
IkReal x2658=x2649;
CheckValue<IkReal> x2660 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2657),IKFAST_ATAN2_MAGTHRESH);
if(!x2660.valid){
continue;
}
IkReal x2659=((-1.0)*(x2660.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst119;
cj5=gconst120;
j5=x2659;
IkReal gconst118=x2659;
IkReal gconst119=(r11*x2658);
IkReal gconst120=(x2657*x2658);
IkReal x2661=r12*r12;
IkReal x2662=(r02*sj0);
IkReal x2663=((1.0)*x2661);
CheckValue<IkReal> x2667=IKPowWithIntegerCheck(((-1.0)+x2661),-1);
if(!x2667.valid){
continue;
}
IkReal x2664=x2667.value;
if((((1.0)+(((-1.0)*x2663)))) < -0.00001)
continue;
IkReal x2665=IKsqrt(((1.0)+(((-1.0)*x2663))));
IkReal x2666=(cj0*x2664*x2665);
j4eval[0]=((IKabs(((((-1.0)*x2662))+((cj0*r12)))))+(IKabs((((r12*x2662*x2664*x2665))+(((-1.0)*x2663*x2666))+x2666))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2668=((-1.0)*r10);
IkReal x2669=x2649;
CheckValue<IkReal> x2671 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2668),IKFAST_ATAN2_MAGTHRESH);
if(!x2671.valid){
continue;
}
IkReal x2670=((-1.0)*(x2671.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst119;
cj5=gconst120;
j5=x2670;
IkReal gconst118=x2670;
IkReal gconst119=(r11*x2669);
IkReal gconst120=(x2668*x2669);
IkReal x2672=r12*r12;
IkReal x2673=(cj1*cj2);
IkReal x2674=(sj1*sj2);
CheckValue<IkReal> x2678=IKPowWithIntegerCheck(((-1.0)+x2672),-1);
if(!x2678.valid){
continue;
}
IkReal x2675=x2678.value;
if((((1.0)+(((-1.0)*x2672)))) < -0.00001)
continue;
IkReal x2676=IKsqrt(((1.0)+(((-1.0)*x2672))));
IkReal x2677=(r12*r22*x2675*x2676);
j4eval[0]=((IKabs(((((-1.0)*r22*x2674))+((r22*x2673)))))+(IKabs(((((-1.0)*x2673*x2677))+((x2674*x2677))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2679=(gconst120*r20);
IkReal x2680=(cj1*cj2);
IkReal x2681=(gconst119*r21);
IkReal x2682=((1.0)*sj1*sj2);
CheckValue<IkReal> x2683=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2681*x2681)+(x2679*x2679)+(((-2.0)*x2679*x2681)))),-1);
if(!x2683.valid){
continue;
}
CheckValue<IkReal> x2684 = IKatan2WithCheck(IkReal((((sj1*sj2*x2681))+(((-1.0)*x2679*x2682))+(((-1.0)*x2680*x2681))+((x2679*x2680)))),IkReal((((r22*x2680))+(((-1.0)*r22*x2682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2683.value)))+(x2684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2685=IKcos(j4);
IkReal x2686=IKsin(j4);
IkReal x2687=(cj2*sj1);
IkReal x2688=((1.0)*cj1);
IkReal x2689=(gconst120*r00);
IkReal x2690=(gconst119*x2685);
IkReal x2691=(gconst120*x2686);
IkReal x2692=((1.0)*gconst120*x2685);
IkReal x2693=((1.0)*gconst119*x2686);
evalcond[0]=(((r22*x2686))+((r21*x2690))+(((-1.0)*r20*x2692)));
evalcond[1]=(((r02*x2686))+cj0+((r01*x2690))+(((-1.0)*x2685*x2689)));
evalcond[2]=((((-1.0)*r10*x2692))+sj0+((r12*x2686))+((r11*x2690)));
evalcond[3]=(((r22*x2685))+((sj1*sj2))+(((-1.0)*cj2*x2688))+((r20*x2691))+(((-1.0)*r21*x2693)));
evalcond[4]=(((r02*x2685))+((sj0*x2687))+((cj1*sj0*sj2))+(((-1.0)*r01*x2693))+((x2686*x2689)));
evalcond[5]=((((-1.0)*cj0*x2687))+((r10*x2691))+(((-1.0)*cj0*sj2*x2688))+(((-1.0)*r11*x2693))+((r12*x2685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2694=((1.0)*sj0);
IkReal x2695=((1.0)*gconst119);
CheckValue<IkReal> x2696=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst120*r21))+(((-1.0)*r20*x2695)))),-1);
if(!x2696.valid){
continue;
}
CheckValue<IkReal> x2697 = IKatan2WithCheck(IkReal((((cj0*gconst120*r10))+(((-1.0)*cj0*r11*x2695))+((gconst119*r01*sj0))+(((-1.0)*gconst120*r00*x2694)))),IkReal(((((-1.0)*r02*x2694))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2696.value)))+(x2697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2698=IKcos(j4);
IkReal x2699=IKsin(j4);
IkReal x2700=(cj2*sj1);
IkReal x2701=((1.0)*cj1);
IkReal x2702=(gconst120*r00);
IkReal x2703=(gconst119*x2698);
IkReal x2704=(gconst120*x2699);
IkReal x2705=((1.0)*gconst120*x2698);
IkReal x2706=((1.0)*gconst119*x2699);
evalcond[0]=(((r22*x2699))+(((-1.0)*r20*x2705))+((r21*x2703)));
evalcond[1]=(cj0+((r01*x2703))+(((-1.0)*x2698*x2702))+((r02*x2699)));
evalcond[2]=(((r12*x2699))+sj0+(((-1.0)*r10*x2705))+((r11*x2703)));
evalcond[3]=(((r22*x2698))+((sj1*sj2))+(((-1.0)*cj2*x2701))+((r20*x2704))+(((-1.0)*r21*x2706)));
evalcond[4]=(((sj0*x2700))+((x2699*x2702))+(((-1.0)*r01*x2706))+((cj1*sj0*sj2))+((r02*x2698)));
evalcond[5]=(((r12*x2698))+(((-1.0)*cj0*x2700))+((r10*x2704))+(((-1.0)*r11*x2706))+(((-1.0)*cj0*sj2*x2701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2707=IKPowWithIntegerCheck(IKsign((((gconst120*r01))+((gconst119*r00)))),-1);
if(!x2707.valid){
continue;
}
CheckValue<IkReal> x2708 = IKatan2WithCheck(IkReal(((((-1.0)*gconst120*r20*sj0))+((gconst119*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2707.value)))+(x2708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2709=IKcos(j4);
IkReal x2710=IKsin(j4);
IkReal x2711=(cj2*sj1);
IkReal x2712=((1.0)*cj1);
IkReal x2713=(gconst120*r00);
IkReal x2714=(gconst119*x2709);
IkReal x2715=(gconst120*x2710);
IkReal x2716=((1.0)*gconst120*x2709);
IkReal x2717=((1.0)*gconst119*x2710);
evalcond[0]=((((-1.0)*r20*x2716))+((r22*x2710))+((r21*x2714)));
evalcond[1]=((((-1.0)*x2709*x2713))+cj0+((r02*x2710))+((r01*x2714)));
evalcond[2]=(((r12*x2710))+sj0+(((-1.0)*r10*x2716))+((r11*x2714)));
evalcond[3]=(((r22*x2709))+(((-1.0)*cj2*x2712))+(((-1.0)*r21*x2717))+((sj1*sj2))+((r20*x2715)));
evalcond[4]=(((sj0*x2711))+((x2710*x2713))+((cj1*sj0*sj2))+(((-1.0)*r01*x2717))+((r02*x2709)));
evalcond[5]=(((r12*x2709))+(((-1.0)*cj0*sj2*x2712))+((r10*x2715))+(((-1.0)*r11*x2717))+(((-1.0)*cj0*x2711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2718=((-1.0)*r11);
IkReal x2720 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2720)==0){
continue;
}
IkReal x2719=pow(x2720,-0.5);
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal(x2718),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
IkReal gconst121=((3.14159265358979)+(((-1.0)*(x2721.value))));
IkReal gconst122=(x2718*x2719);
IkReal gconst123=((1.0)*r10*x2719);
CheckValue<IkReal> x2722 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2722.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2722.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2723=((-1.0)*r11);
CheckValue<IkReal> x2726 = IKatan2WithCheck(IkReal(x2723),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2726.valid){
continue;
}
IkReal x2724=((1.0)*(x2726.value));
IkReal x2725=x2719;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst122;
cj5=gconst123;
j5=((3.14159265)+(((-1.0)*x2724)));
IkReal gconst121=((3.14159265358979)+(((-1.0)*x2724)));
IkReal gconst122=(x2723*x2725);
IkReal gconst123=((1.0)*r10*x2725);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2727=((-1.0)*r11);
CheckValue<IkReal> x2730 = IKatan2WithCheck(IkReal(x2727),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2730.valid){
continue;
}
IkReal x2728=((1.0)*(x2730.value));
IkReal x2729=x2719;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst122;
cj5=gconst123;
j5=((3.14159265)+(((-1.0)*x2728)));
IkReal gconst121=((3.14159265358979)+(((-1.0)*x2728)));
IkReal gconst122=(x2727*x2729);
IkReal gconst123=((1.0)*r10*x2729);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2731=((1.0)*sj0);
IkReal x2732=((1.0)*gconst122);
CheckValue<IkReal> x2733=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst123*r21))+(((-1.0)*r20*x2732)))),-1);
if(!x2733.valid){
continue;
}
CheckValue<IkReal> x2734 = IKatan2WithCheck(IkReal((((cj0*gconst123*r10))+(((-1.0)*cj0*r11*x2732))+(((-1.0)*gconst123*r00*x2731))+((gconst122*r01*sj0)))),IkReal(((((-1.0)*r02*x2731))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2733.value)))+(x2734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2735=IKcos(j4);
IkReal x2736=IKsin(j4);
IkReal x2737=(cj2*sj1);
IkReal x2738=(gconst123*r00);
IkReal x2739=((1.0)*cj1);
IkReal x2740=(gconst123*r20);
IkReal x2741=(gconst123*r10);
IkReal x2742=((1.0)*x2735);
IkReal x2743=(gconst122*x2735);
IkReal x2744=((1.0)*gconst122*x2736);
evalcond[0]=(((r21*x2743))+((r22*x2736))+(((-1.0)*x2740*x2742)));
evalcond[1]=(((r02*x2736))+cj0+(((-1.0)*x2738*x2742))+((r01*x2743)));
evalcond[2]=(sj0+((r11*x2743))+(((-1.0)*x2741*x2742))+((r12*x2736)));
evalcond[3]=((((-1.0)*cj2*x2739))+((r22*x2735))+((sj1*sj2))+(((-1.0)*r21*x2744))+((x2736*x2740)));
evalcond[4]=((((-1.0)*r01*x2744))+((r02*x2735))+((cj1*sj0*sj2))+((x2736*x2738))+((sj0*x2737)));
evalcond[5]=((((-1.0)*cj0*x2737))+(((-1.0)*cj0*sj2*x2739))+(((-1.0)*r11*x2744))+((r12*x2735))+((x2736*x2741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2745=((1.0)*gconst123);
CheckValue<IkReal> x2746=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r10))+(((-1.0)*r11*x2745)))),-1);
if(!x2746.valid){
continue;
}
CheckValue<IkReal> x2747 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x2745))+((cj0*gconst122*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2746.value)))+(x2747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2748=IKcos(j4);
IkReal x2749=IKsin(j4);
IkReal x2750=(cj2*sj1);
IkReal x2751=(gconst123*r00);
IkReal x2752=((1.0)*cj1);
IkReal x2753=(gconst123*r20);
IkReal x2754=(gconst123*r10);
IkReal x2755=((1.0)*x2748);
IkReal x2756=(gconst122*x2748);
IkReal x2757=((1.0)*gconst122*x2749);
evalcond[0]=(((r22*x2749))+((r21*x2756))+(((-1.0)*x2753*x2755)));
evalcond[1]=(cj0+((r01*x2756))+(((-1.0)*x2751*x2755))+((r02*x2749)));
evalcond[2]=(((r11*x2756))+sj0+((r12*x2749))+(((-1.0)*x2754*x2755)));
evalcond[3]=(((x2749*x2753))+((r22*x2748))+((sj1*sj2))+(((-1.0)*cj2*x2752))+(((-1.0)*r21*x2757)));
evalcond[4]=(((x2749*x2751))+(((-1.0)*r01*x2757))+((cj1*sj0*sj2))+((sj0*x2750))+((r02*x2748)));
evalcond[5]=(((x2749*x2754))+((r12*x2748))+(((-1.0)*cj0*sj2*x2752))+(((-1.0)*r11*x2757))+(((-1.0)*cj0*x2750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2758 = IKatan2WithCheck(IkReal(((((-1.0)*gconst123*r20*sj0))+((gconst122*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2758.valid){
continue;
}
CheckValue<IkReal> x2759=IKPowWithIntegerCheck(IKsign((((gconst122*r00))+((gconst123*r01)))),-1);
if(!x2759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2758.value)+(((1.5707963267949)*(x2759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2760=IKcos(j4);
IkReal x2761=IKsin(j4);
IkReal x2762=(cj2*sj1);
IkReal x2763=(gconst123*r00);
IkReal x2764=((1.0)*cj1);
IkReal x2765=(gconst123*r20);
IkReal x2766=(gconst123*r10);
IkReal x2767=((1.0)*x2760);
IkReal x2768=(gconst122*x2760);
IkReal x2769=((1.0)*gconst122*x2761);
evalcond[0]=(((r21*x2768))+((r22*x2761))+(((-1.0)*x2765*x2767)));
evalcond[1]=(cj0+((r01*x2768))+((r02*x2761))+(((-1.0)*x2763*x2767)));
evalcond[2]=(sj0+((r12*x2761))+(((-1.0)*x2766*x2767))+((r11*x2768)));
evalcond[3]=((((-1.0)*cj2*x2764))+((x2761*x2765))+((sj1*sj2))+(((-1.0)*r21*x2769))+((r22*x2760)));
evalcond[4]=(((sj0*x2762))+((x2761*x2763))+(((-1.0)*r01*x2769))+((cj1*sj0*sj2))+((r02*x2760)));
evalcond[5]=((((-1.0)*cj0*sj2*x2764))+((r12*x2760))+(((-1.0)*r11*x2769))+((x2761*x2766))+(((-1.0)*cj0*x2762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2770=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2770;
j4eval[1]=IKsign(x2770);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2771=((1.0)*cj5);
IkReal x2772=((((-1.0)*r21*x2771))+(((-1.0)*r20*sj5)));
j4eval[0]=x2772;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2771))))));
j4eval[2]=IKsign(x2772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2773=cj5*cj5;
IkReal x2774=r11*r11;
IkReal x2775=(cj5*r10);
IkReal x2776=(r11*sj5);
IkReal x2777=((((-1.0)*x2774))+(((-1.0)*x2773*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x2775*x2776))+((x2773*x2774)));
j4eval[0]=x2777;
j4eval[1]=((IKabs(r12))+(IKabs((x2776+(((-1.0)*x2775))))));
j4eval[2]=IKsign(x2777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2778=cj5*cj5;
IkReal x2779=r11*r11;
IkReal x2780=(cj5*r10);
IkReal x2781=(r11*sj5);
CheckValue<IkReal> x2782=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2779))+(((2.0)*x2780*x2781))+(((-1.0)*x2778*(r10*r10)))+((x2778*x2779))+(((-1.0)*(r12*r12))))),-1);
if(!x2782.valid){
continue;
}
CheckValue<IkReal> x2783 = IKatan2WithCheck(IkReal(r12),IkReal((x2781+(((-1.0)*x2780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2782.value)))+(x2783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2784=IKcos(j4);
IkReal x2785=IKsin(j4);
IkReal x2786=(cj5*r00);
IkReal x2787=(cj5*r20);
IkReal x2788=(cj5*r10);
IkReal x2789=((1.0)*x2784);
IkReal x2790=(sj5*x2784);
IkReal x2791=((1.0)*sj5*x2785);
evalcond[0]=((((-1.0)*x2787*x2789))+((r21*x2790))+((r22*x2785)));
evalcond[1]=((((-1.0)*x2786*x2789))+((r02*x2785))+((r01*x2790)));
evalcond[2]=(((x2785*x2788))+((r12*x2784))+(((-1.0)*r11*x2791)));
evalcond[3]=((1.0)+((r12*x2785))+((r11*x2790))+(((-1.0)*x2788*x2789)));
evalcond[4]=(((cj2*sj1))+((x2785*x2786))+((cj1*sj2))+((r02*x2784))+(((-1.0)*r01*x2791)));
evalcond[5]=(((x2785*x2787))+(((-1.0)*r21*x2791))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x2784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2792=((1.0)*cj5);
CheckValue<IkReal> x2793=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2792))+(((-1.0)*r20*sj5)))),-1);
if(!x2793.valid){
continue;
}
CheckValue<IkReal> x2794 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x2792)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2793.value)))+(x2794.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2795=IKcos(j4);
IkReal x2796=IKsin(j4);
IkReal x2797=(cj5*r00);
IkReal x2798=(cj5*r20);
IkReal x2799=(cj5*r10);
IkReal x2800=((1.0)*x2795);
IkReal x2801=(sj5*x2795);
IkReal x2802=((1.0)*sj5*x2796);
evalcond[0]=(((r22*x2796))+(((-1.0)*x2798*x2800))+((r21*x2801)));
evalcond[1]=(((r02*x2796))+(((-1.0)*x2797*x2800))+((r01*x2801)));
evalcond[2]=(((r12*x2795))+(((-1.0)*r11*x2802))+((x2796*x2799)));
evalcond[3]=((1.0)+((r12*x2796))+(((-1.0)*x2799*x2800))+((r11*x2801)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x2802))+((cj1*sj2))+((r02*x2795))+((x2796*x2797)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2802))+((r22*x2795))+((x2796*x2798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2803=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2803.valid){
continue;
}
CheckValue<IkReal> x2804 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2803.value)))+(x2804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2805=IKcos(j4);
IkReal x2806=IKsin(j4);
IkReal x2807=(cj5*r00);
IkReal x2808=(cj5*r20);
IkReal x2809=(cj5*r10);
IkReal x2810=((1.0)*x2805);
IkReal x2811=(sj5*x2805);
IkReal x2812=((1.0)*sj5*x2806);
evalcond[0]=(((r21*x2811))+(((-1.0)*x2808*x2810))+((r22*x2806)));
evalcond[1]=(((r01*x2811))+((r02*x2806))+(((-1.0)*x2807*x2810)));
evalcond[2]=(((r12*x2805))+(((-1.0)*r11*x2812))+((x2806*x2809)));
evalcond[3]=((1.0)+((r12*x2806))+(((-1.0)*x2809*x2810))+((r11*x2811)));
evalcond[4]=(((cj2*sj1))+((r02*x2805))+((cj1*sj2))+(((-1.0)*r01*x2812))+((x2806*x2807)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2812))+((x2806*x2808))+((r22*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2813=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2813;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x2813);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2814=((1.0)*cj5);
IkReal x2815=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2814)));
j4eval[0]=x2815;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2814)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2815);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2816=cj5*cj5;
IkReal x2817=r11*r11;
IkReal x2818=(r11*sj5);
IkReal x2819=(cj5*r10);
IkReal x2820=((r12*r12)+(((-1.0)*x2816*x2817))+(((-2.0)*x2818*x2819))+((x2816*(r10*r10)))+x2817);
j4eval[0]=x2820;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2819))+x2818))));
j4eval[2]=IKsign(x2820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2821=cj5*cj5;
IkReal x2822=r11*r11;
IkReal x2823=(cj5*r10);
IkReal x2824=(r11*sj5);
CheckValue<IkReal> x2825 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x2823))+x2824)),IKFAST_ATAN2_MAGTHRESH);
if(!x2825.valid){
continue;
}
CheckValue<IkReal> x2826=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x2821*x2822))+((x2821*(r10*r10)))+(((-2.0)*x2823*x2824))+x2822)),-1);
if(!x2826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2825.value)+(((1.5707963267949)*(x2826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2827=IKcos(j4);
IkReal x2828=IKsin(j4);
IkReal x2829=(cj5*r00);
IkReal x2830=((1.0)*cj1);
IkReal x2831=(cj5*r20);
IkReal x2832=(cj5*r10);
IkReal x2833=((1.0)*x2827);
IkReal x2834=(sj5*x2827);
IkReal x2835=((1.0)*sj5*x2828);
evalcond[0]=(((r22*x2828))+((r21*x2834))+(((-1.0)*x2831*x2833)));
evalcond[1]=(((r02*x2828))+(((-1.0)*x2829*x2833))+((r01*x2834)));
evalcond[2]=(((x2828*x2832))+(((-1.0)*r11*x2835))+((r12*x2827)));
evalcond[3]=((-1.0)+(((-1.0)*x2832*x2833))+((r11*x2834))+((r12*x2828)));
evalcond[4]=(((x2828*x2831))+((sj1*sj2))+(((-1.0)*r21*x2835))+((r22*x2827))+(((-1.0)*cj2*x2830)));
evalcond[5]=(((r02*x2827))+(((-1.0)*sj2*x2830))+(((-1.0)*r01*x2835))+(((-1.0)*cj2*sj1))+((x2828*x2829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2836=((1.0)*cj5);
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2836))+(((-1.0)*r00*sj5)))),-1);
if(!x2837.valid){
continue;
}
CheckValue<IkReal> x2838 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x2836)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2837.value)))+(x2838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2839=IKcos(j4);
IkReal x2840=IKsin(j4);
IkReal x2841=(cj5*r00);
IkReal x2842=((1.0)*cj1);
IkReal x2843=(cj5*r20);
IkReal x2844=(cj5*r10);
IkReal x2845=((1.0)*x2839);
IkReal x2846=(sj5*x2839);
IkReal x2847=((1.0)*sj5*x2840);
evalcond[0]=((((-1.0)*x2843*x2845))+((r21*x2846))+((r22*x2840)));
evalcond[1]=((((-1.0)*x2841*x2845))+((r01*x2846))+((r02*x2840)));
evalcond[2]=(((r12*x2839))+(((-1.0)*r11*x2847))+((x2840*x2844)));
evalcond[3]=((-1.0)+((r11*x2846))+((r12*x2840))+(((-1.0)*x2844*x2845)));
evalcond[4]=((((-1.0)*r21*x2847))+((sj1*sj2))+((x2840*x2843))+((r22*x2839))+(((-1.0)*cj2*x2842)));
evalcond[5]=(((r02*x2839))+(((-1.0)*r01*x2847))+(((-1.0)*cj2*sj1))+((x2840*x2841))+(((-1.0)*sj2*x2842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2848=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2848.valid){
continue;
}
CheckValue<IkReal> x2849 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2848.value)))+(x2849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2850=IKcos(j4);
IkReal x2851=IKsin(j4);
IkReal x2852=(cj5*r00);
IkReal x2853=((1.0)*cj1);
IkReal x2854=(cj5*r20);
IkReal x2855=(cj5*r10);
IkReal x2856=((1.0)*x2850);
IkReal x2857=(sj5*x2850);
IkReal x2858=((1.0)*sj5*x2851);
evalcond[0]=(((r21*x2857))+((r22*x2851))+(((-1.0)*x2854*x2856)));
evalcond[1]=(((r01*x2857))+(((-1.0)*x2852*x2856))+((r02*x2851)));
evalcond[2]=((((-1.0)*r11*x2858))+((r12*x2850))+((x2851*x2855)));
evalcond[3]=((-1.0)+((r11*x2857))+((r12*x2851))+(((-1.0)*x2855*x2856)));
evalcond[4]=((((-1.0)*r21*x2858))+((sj1*sj2))+((x2851*x2854))+((r22*x2850))+(((-1.0)*cj2*x2853)));
evalcond[5]=((((-1.0)*sj2*x2853))+(((-1.0)*r01*x2858))+(((-1.0)*cj2*sj1))+((x2851*x2852))+((r02*x2850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2860 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2860)==0){
continue;
}
IkReal x2859=pow(x2860,-0.5);
CheckValue<IkReal> x2861 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2861.valid){
continue;
}
IkReal gconst124=((-1.0)*(x2861.value));
IkReal gconst125=((-1.0)*r01*x2859);
IkReal gconst126=(r00*x2859);
CheckValue<IkReal> x2862 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2862.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2862.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2865 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2865.valid){
continue;
}
IkReal x2863=((-1.0)*(x2865.value));
IkReal x2864=x2859;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst125;
cj5=gconst126;
j5=x2863;
IkReal gconst124=x2863;
IkReal gconst125=((-1.0)*r01*x2864);
IkReal gconst126=(r00*x2864);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2868 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2868.valid){
continue;
}
IkReal x2866=((-1.0)*(x2868.value));
IkReal x2867=x2859;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst125;
cj5=gconst126;
j5=x2866;
IkReal gconst124=x2866;
IkReal gconst125=((-1.0)*r01*x2867);
IkReal gconst126=(r00*x2867);
IkReal x2869=r02*r02;
IkReal x2870=((1.0)*sj0);
IkReal x2871=(cj0*r12);
CheckValue<IkReal> x2875=IKPowWithIntegerCheck(((-1.0)+x2869),-1);
if(!x2875.valid){
continue;
}
IkReal x2872=x2875.value;
if((((1.0)+(((-1.0)*x2869)))) < -0.00001)
continue;
IkReal x2873=IKsqrt(((1.0)+(((-1.0)*x2869))));
IkReal x2874=(x2872*x2873);
j4eval[0]=((IKabs((((r02*x2871*x2874))+(((-1.0)*x2869*x2870*x2874))+((sj0*x2874)))))+(IKabs(((((-1.0)*r02*x2870))+x2871))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2878 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2878.valid){
continue;
}
IkReal x2876=((-1.0)*(x2878.value));
IkReal x2877=x2859;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst125;
cj5=gconst126;
j5=x2876;
IkReal gconst124=x2876;
IkReal gconst125=((-1.0)*r01*x2877);
IkReal gconst126=(r00*x2877);
IkReal x2879=r02*r02;
IkReal x2880=(cj1*cj2);
IkReal x2881=((1.0)*sj1*sj2);
CheckValue<IkReal> x2885=IKPowWithIntegerCheck(((-1.0)+x2879),-1);
if(!x2885.valid){
continue;
}
IkReal x2882=x2885.value;
if((((1.0)+(((-1.0)*x2879)))) < -0.00001)
continue;
IkReal x2883=IKsqrt(((1.0)+(((-1.0)*x2879))));
IkReal x2884=(r02*r22*x2882*x2883);
j4eval[0]=((IKabs((((x2880*x2884))+(((-1.0)*x2881*x2884)))))+(IKabs(((((-1.0)*r22*x2881))+((r22*x2880))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2886=(gconst126*r20);
IkReal x2887=(gconst125*r21);
IkReal x2888=(sj1*sj2);
IkReal x2889=(cj1*cj2);
CheckValue<IkReal> x2890=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2886*x2886)+(x2887*x2887)+(((-2.0)*x2886*x2887)))),-1);
if(!x2890.valid){
continue;
}
CheckValue<IkReal> x2891 = IKatan2WithCheck(IkReal(((((-1.0)*x2887*x2889))+(((-1.0)*x2886*x2888))+((x2887*x2888))+((x2886*x2889)))),IkReal((((r22*x2889))+(((-1.0)*r22*x2888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2890.value)))+(x2891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2892=IKcos(j4);
IkReal x2893=IKsin(j4);
IkReal x2894=(cj2*sj1);
IkReal x2895=(gconst126*r10);
IkReal x2896=((1.0)*cj1);
IkReal x2897=(gconst125*x2892);
IkReal x2898=(gconst126*x2893);
IkReal x2899=((1.0)*gconst126*x2892);
IkReal x2900=((1.0)*gconst125*x2893);
evalcond[0]=(((r21*x2897))+((r22*x2893))+(((-1.0)*r20*x2899)));
evalcond[1]=(cj0+((r01*x2897))+(((-1.0)*r00*x2899))+((r02*x2893)));
evalcond[2]=((((-1.0)*x2892*x2895))+sj0+((r11*x2897))+((r12*x2893)));
evalcond[3]=((((-1.0)*r21*x2900))+(((-1.0)*cj2*x2896))+((r22*x2892))+((sj1*sj2))+((r20*x2898)));
evalcond[4]=(((sj0*x2894))+((r00*x2898))+((cj1*sj0*sj2))+(((-1.0)*r01*x2900))+((r02*x2892)));
evalcond[5]=((((-1.0)*cj0*x2894))+((x2893*x2895))+((r12*x2892))+(((-1.0)*cj0*sj2*x2896))+(((-1.0)*r11*x2900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2901=((1.0)*gconst126);
IkReal x2902=((1.0)*gconst125);
CheckValue<IkReal> x2903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2901))+(((-1.0)*r20*x2902)))),-1);
if(!x2903.valid){
continue;
}
CheckValue<IkReal> x2904 = IKatan2WithCheck(IkReal((((gconst125*r01*sj0))+((cj0*gconst126*r10))+(((-1.0)*cj0*r11*x2902))+(((-1.0)*r00*sj0*x2901)))),IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2903.value)))+(x2904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2905=IKcos(j4);
IkReal x2906=IKsin(j4);
IkReal x2907=(cj2*sj1);
IkReal x2908=(gconst126*r10);
IkReal x2909=((1.0)*cj1);
IkReal x2910=(gconst125*x2905);
IkReal x2911=(gconst126*x2906);
IkReal x2912=((1.0)*gconst126*x2905);
IkReal x2913=((1.0)*gconst125*x2906);
evalcond[0]=(((r22*x2906))+((r21*x2910))+(((-1.0)*r20*x2912)));
evalcond[1]=(((r02*x2906))+((r01*x2910))+cj0+(((-1.0)*r00*x2912)));
evalcond[2]=(((r11*x2910))+sj0+((r12*x2906))+(((-1.0)*x2905*x2908)));
evalcond[3]=(((r22*x2905))+((r20*x2911))+((sj1*sj2))+(((-1.0)*r21*x2913))+(((-1.0)*cj2*x2909)));
evalcond[4]=(((r02*x2905))+((r00*x2911))+((cj1*sj0*sj2))+(((-1.0)*r01*x2913))+((sj0*x2907)));
evalcond[5]=((((-1.0)*cj0*sj2*x2909))+(((-1.0)*cj0*x2907))+((x2906*x2908))+(((-1.0)*r11*x2913))+((r12*x2905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2914=((1.0)*gconst126);
CheckValue<IkReal> x2915 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x2914))+((cj0*gconst125*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2915.valid){
continue;
}
CheckValue<IkReal> x2916=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2914))+(((-1.0)*gconst125*r10)))),-1);
if(!x2916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2915.value)+(((1.5707963267949)*(x2916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2917=IKcos(j4);
IkReal x2918=IKsin(j4);
IkReal x2919=(cj2*sj1);
IkReal x2920=(gconst126*r10);
IkReal x2921=((1.0)*cj1);
IkReal x2922=(gconst125*x2917);
IkReal x2923=(gconst126*x2918);
IkReal x2924=((1.0)*gconst126*x2917);
IkReal x2925=((1.0)*gconst125*x2918);
evalcond[0]=((((-1.0)*r20*x2924))+((r21*x2922))+((r22*x2918)));
evalcond[1]=(cj0+((r01*x2922))+((r02*x2918))+(((-1.0)*r00*x2924)));
evalcond[2]=(((r12*x2918))+sj0+((r11*x2922))+(((-1.0)*x2917*x2920)));
evalcond[3]=((((-1.0)*r21*x2925))+((sj1*sj2))+((r20*x2923))+(((-1.0)*cj2*x2921))+((r22*x2917)));
evalcond[4]=(((sj0*x2919))+((r00*x2923))+((cj1*sj0*sj2))+((r02*x2917))+(((-1.0)*r01*x2925)));
evalcond[5]=(((r12*x2917))+(((-1.0)*cj0*sj2*x2921))+((x2918*x2920))+(((-1.0)*r11*x2925))+(((-1.0)*cj0*x2919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2927 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2927)==0){
continue;
}
IkReal x2926=pow(x2927,-0.5);
CheckValue<IkReal> x2928 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2928.valid){
continue;
}
IkReal gconst127=((3.14159265358979)+(((-1.0)*(x2928.value))));
IkReal gconst128=((1.0)*r01*x2926);
IkReal gconst129=((-1.0)*r00*x2926);
CheckValue<IkReal> x2929 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2929.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2929.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x2932 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2932.valid){
continue;
}
IkReal x2930=((1.0)*(x2932.value));
IkReal x2931=x2926;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst128;
cj5=gconst129;
j5=((3.14159265)+(((-1.0)*x2930)));
IkReal gconst127=((3.14159265358979)+(((-1.0)*x2930)));
IkReal gconst128=((1.0)*r01*x2931);
IkReal gconst129=((-1.0)*r00*x2931);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2935 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2935.valid){
continue;
}
IkReal x2933=((1.0)*(x2935.value));
IkReal x2934=x2926;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst128;
cj5=gconst129;
j5=((3.14159265)+(((-1.0)*x2933)));
IkReal gconst127=((3.14159265358979)+(((-1.0)*x2933)));
IkReal gconst128=((1.0)*r01*x2934);
IkReal gconst129=((-1.0)*r00*x2934);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2936=((1.0)*gconst128);
IkReal x2937=((1.0)*sj0);
CheckValue<IkReal> x2938=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2936))+(((-1.0)*gconst129*r21)))),-1);
if(!x2938.valid){
continue;
}
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal((((gconst128*r01*sj0))+((cj0*gconst129*r10))+(((-1.0)*gconst129*r00*x2937))+(((-1.0)*cj0*r11*x2936)))),IkReal((((cj0*r12))+(((-1.0)*r02*x2937)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2938.value)))+(x2939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2940=IKcos(j4);
IkReal x2941=IKsin(j4);
IkReal x2942=(cj2*sj1);
IkReal x2943=((1.0)*cj1);
IkReal x2944=(gconst129*x2941);
IkReal x2945=(gconst128*x2940);
IkReal x2946=((1.0)*gconst128*x2941);
IkReal x2947=((1.0)*gconst129*x2940);
evalcond[0]=(((r21*x2945))+(((-1.0)*r20*x2947))+((r22*x2941)));
evalcond[1]=(cj0+((r02*x2941))+(((-1.0)*r00*x2947))+((r01*x2945)));
evalcond[2]=(sj0+((r12*x2941))+((r11*x2945))+(((-1.0)*r10*x2947)));
evalcond[3]=((((-1.0)*r21*x2946))+((sj1*sj2))+((r22*x2940))+(((-1.0)*cj2*x2943))+((r20*x2944)));
evalcond[4]=(((r02*x2940))+((r00*x2944))+(((-1.0)*r01*x2946))+((cj1*sj0*sj2))+((sj0*x2942)));
evalcond[5]=((((-1.0)*r11*x2946))+((r10*x2944))+(((-1.0)*cj0*x2942))+((r12*x2940))+(((-1.0)*cj0*sj2*x2943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2948=((1.0)*gconst129);
CheckValue<IkReal> x2949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2948))+(((-1.0)*gconst128*r10)))),-1);
if(!x2949.valid){
continue;
}
CheckValue<IkReal> x2950 = IKatan2WithCheck(IkReal((((cj0*gconst128*r21))+(((-1.0)*cj0*r20*x2948)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2949.value)))+(x2950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2951=IKcos(j4);
IkReal x2952=IKsin(j4);
IkReal x2953=(cj2*sj1);
IkReal x2954=((1.0)*cj1);
IkReal x2955=(gconst129*x2952);
IkReal x2956=(gconst128*x2951);
IkReal x2957=((1.0)*gconst128*x2952);
IkReal x2958=((1.0)*gconst129*x2951);
evalcond[0]=(((r22*x2952))+(((-1.0)*r20*x2958))+((r21*x2956)));
evalcond[1]=(cj0+((r01*x2956))+(((-1.0)*r00*x2958))+((r02*x2952)));
evalcond[2]=((((-1.0)*r10*x2958))+sj0+((r11*x2956))+((r12*x2952)));
evalcond[3]=((((-1.0)*r21*x2957))+((r22*x2951))+((sj1*sj2))+((r20*x2955))+(((-1.0)*cj2*x2954)));
evalcond[4]=(((sj0*x2953))+((r00*x2955))+((cj1*sj0*sj2))+(((-1.0)*r01*x2957))+((r02*x2951)));
evalcond[5]=((((-1.0)*cj0*sj2*x2954))+(((-1.0)*cj0*x2953))+((r10*x2955))+(((-1.0)*r11*x2957))+((r12*x2951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2959 = IKatan2WithCheck(IkReal((((gconst128*r21*sj0))+(((-1.0)*gconst129*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2959.valid){
continue;
}
CheckValue<IkReal> x2960=IKPowWithIntegerCheck(IKsign((((gconst129*r01))+((gconst128*r00)))),-1);
if(!x2960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2959.value)+(((1.5707963267949)*(x2960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2961=IKcos(j4);
IkReal x2962=IKsin(j4);
IkReal x2963=(cj2*sj1);
IkReal x2964=((1.0)*cj1);
IkReal x2965=(gconst129*x2962);
IkReal x2966=(gconst128*x2961);
IkReal x2967=((1.0)*gconst128*x2962);
IkReal x2968=((1.0)*gconst129*x2961);
evalcond[0]=(((r21*x2966))+((r22*x2962))+(((-1.0)*r20*x2968)));
evalcond[1]=(((r02*x2962))+cj0+(((-1.0)*r00*x2968))+((r01*x2966)));
evalcond[2]=(sj0+((r11*x2966))+((r12*x2962))+(((-1.0)*r10*x2968)));
evalcond[3]=(((r22*x2961))+((sj1*sj2))+(((-1.0)*r21*x2967))+(((-1.0)*cj2*x2964))+((r20*x2965)));
evalcond[4]=(((sj0*x2963))+((r02*x2961))+((cj1*sj0*sj2))+(((-1.0)*r01*x2967))+((r00*x2965)));
evalcond[5]=((((-1.0)*r11*x2967))+(((-1.0)*cj0*sj2*x2964))+((r10*x2965))+(((-1.0)*cj0*x2963))+((r12*x2961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2969=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2969;
j4eval[1]=IKsign(x2969);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2970=((1.0)*cj5);
IkReal x2971=((((-1.0)*r11*x2970))+(((-1.0)*r10*sj5)));
j4eval[0]=x2971;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2970)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2972=cj5*cj5;
IkReal x2973=r01*r01;
IkReal x2974=(r01*sj5);
IkReal x2975=(cj5*r00);
IkReal x2976=((((-1.0)*x2973))+(((-1.0)*(r02*r02)))+(((2.0)*x2974*x2975))+(((-1.0)*x2972*(r00*r00)))+((x2972*x2973)));
j4eval[0]=x2976;
j4eval[1]=IKsign(x2976);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2975))+x2974))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2977=cj5*cj5;
IkReal x2978=r01*r01;
IkReal x2979=(r01*sj5);
IkReal x2980=(cj5*r00);
CheckValue<IkReal> x2981 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x2980))+x2979)),IKFAST_ATAN2_MAGTHRESH);
if(!x2981.valid){
continue;
}
CheckValue<IkReal> x2982=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2977*(r00*r00)))+((x2977*x2978))+(((-1.0)*x2978))+(((-1.0)*(r02*r02)))+(((2.0)*x2979*x2980)))),-1);
if(!x2982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2981.value)+(((1.5707963267949)*(x2982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2983=IKcos(j4);
IkReal x2984=IKsin(j4);
IkReal x2985=(cj5*r00);
IkReal x2986=((1.0)*cj1);
IkReal x2987=((1.0)*x2983);
IkReal x2988=(sj5*x2983);
IkReal x2989=(cj5*x2984);
IkReal x2990=((1.0)*sj5*x2984);
evalcond[0]=((((-1.0)*cj5*r20*x2987))+((r22*x2984))+((r21*x2988)));
evalcond[1]=(((r11*x2988))+((r12*x2984))+(((-1.0)*cj5*r10*x2987)));
evalcond[2]=(((x2984*x2985))+((r02*x2983))+(((-1.0)*r01*x2990)));
evalcond[3]=((1.0)+(((-1.0)*x2985*x2987))+((r01*x2988))+((r02*x2984)));
evalcond[4]=((((-1.0)*cj2*x2986))+((sj1*sj2))+((r20*x2989))+(((-1.0)*r21*x2990))+((r22*x2983)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r12*x2983))+(((-1.0)*r11*x2990))+(((-1.0)*sj2*x2986))+((r10*x2989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2991=((1.0)*cj5);
CheckValue<IkReal> x2992 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x2991)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2992.valid){
continue;
}
CheckValue<IkReal> x2993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2991)))),-1);
if(!x2993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2992.value)+(((1.5707963267949)*(x2993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2994=IKcos(j4);
IkReal x2995=IKsin(j4);
IkReal x2996=(cj5*r00);
IkReal x2997=((1.0)*cj1);
IkReal x2998=((1.0)*x2994);
IkReal x2999=(sj5*x2994);
IkReal x3000=(cj5*x2995);
IkReal x3001=((1.0)*sj5*x2995);
evalcond[0]=((((-1.0)*cj5*r20*x2998))+((r21*x2999))+((r22*x2995)));
evalcond[1]=((((-1.0)*cj5*r10*x2998))+((r12*x2995))+((r11*x2999)));
evalcond[2]=(((x2995*x2996))+(((-1.0)*r01*x3001))+((r02*x2994)));
evalcond[3]=((1.0)+(((-1.0)*x2996*x2998))+((r01*x2999))+((r02*x2995)));
evalcond[4]=((((-1.0)*cj2*x2997))+((sj1*sj2))+((r20*x3000))+(((-1.0)*r21*x3001))+((r22*x2994)));
evalcond[5]=(((r12*x2994))+(((-1.0)*sj2*x2997))+(((-1.0)*cj2*sj1))+((r10*x3000))+(((-1.0)*r11*x3001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3002=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3002.valid){
continue;
}
CheckValue<IkReal> x3003 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3002.value)))+(x3003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3004=IKcos(j4);
IkReal x3005=IKsin(j4);
IkReal x3006=(cj5*r00);
IkReal x3007=((1.0)*cj1);
IkReal x3008=((1.0)*x3004);
IkReal x3009=(sj5*x3004);
IkReal x3010=(cj5*x3005);
IkReal x3011=((1.0)*sj5*x3005);
evalcond[0]=(((r22*x3005))+((r21*x3009))+(((-1.0)*cj5*r20*x3008)));
evalcond[1]=((((-1.0)*cj5*r10*x3008))+((r12*x3005))+((r11*x3009)));
evalcond[2]=((((-1.0)*r01*x3011))+((x3005*x3006))+((r02*x3004)));
evalcond[3]=((1.0)+((r01*x3009))+(((-1.0)*x3006*x3008))+((r02*x3005)));
evalcond[4]=(((r22*x3004))+((sj1*sj2))+(((-1.0)*cj2*x3007))+((r20*x3010))+(((-1.0)*r21*x3011)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r10*x3010))+((r12*x3004))+(((-1.0)*r11*x3011))+(((-1.0)*sj2*x3007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3012=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3012;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3013=((1.0)*cj5);
IkReal x3014=((((-1.0)*r21*x3013))+(((-1.0)*r20*sj5)));
j4eval[0]=x3014;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3013))+((r11*sj5))))));
j4eval[2]=IKsign(x3014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3015=cj5*cj5;
IkReal x3016=r01*r01;
IkReal x3017=(cj5*r00);
IkReal x3018=(r01*sj5);
IkReal x3019=(x3016+((x3015*(r00*r00)))+(((-1.0)*x3015*x3016))+(r02*r02)+(((-2.0)*x3017*x3018)));
j4eval[0]=x3019;
j4eval[1]=IKsign(x3019);
j4eval[2]=((IKabs(r02))+(IKabs((x3018+(((-1.0)*x3017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3020=cj5*cj5;
IkReal x3021=r01*r01;
IkReal x3022=(r01*sj5);
IkReal x3023=(cj5*r00);
CheckValue<IkReal> x3024=IKPowWithIntegerCheck(IKsign((x3021+(((-1.0)*x3020*x3021))+(((-2.0)*x3022*x3023))+(r02*r02)+((x3020*(r00*r00))))),-1);
if(!x3024.valid){
continue;
}
CheckValue<IkReal> x3025 = IKatan2WithCheck(IkReal(r02),IkReal((x3022+(((-1.0)*x3023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3024.value)))+(x3025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3026=IKcos(j4);
IkReal x3027=IKsin(j4);
IkReal x3028=(cj5*r00);
IkReal x3029=(cj5*r20);
IkReal x3030=(cj5*r10);
IkReal x3031=((1.0)*x3026);
IkReal x3032=(sj5*x3026);
IkReal x3033=((1.0)*sj5*x3027);
evalcond[0]=((((-1.0)*x3029*x3031))+((r21*x3032))+((r22*x3027)));
evalcond[1]=(((r12*x3027))+(((-1.0)*x3030*x3031))+((r11*x3032)));
evalcond[2]=((((-1.0)*r01*x3033))+((x3027*x3028))+((r02*x3026)));
evalcond[3]=((-1.0)+((r02*x3027))+((r01*x3032))+(((-1.0)*x3028*x3031)));
evalcond[4]=(((cj2*sj1))+((r12*x3026))+((cj1*sj2))+(((-1.0)*r11*x3033))+((x3027*x3030)));
evalcond[5]=((((-1.0)*r21*x3033))+((x3027*x3029))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3034=((1.0)*cj5);
CheckValue<IkReal> x3035 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x3034)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3035.valid){
continue;
}
CheckValue<IkReal> x3036=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3034))+(((-1.0)*r20*sj5)))),-1);
if(!x3036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3035.value)+(((1.5707963267949)*(x3036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3037=IKcos(j4);
IkReal x3038=IKsin(j4);
IkReal x3039=(cj5*r00);
IkReal x3040=(cj5*r20);
IkReal x3041=(cj5*r10);
IkReal x3042=((1.0)*x3037);
IkReal x3043=(sj5*x3037);
IkReal x3044=((1.0)*sj5*x3038);
evalcond[0]=(((r21*x3043))+((r22*x3038))+(((-1.0)*x3040*x3042)));
evalcond[1]=(((r12*x3038))+(((-1.0)*x3041*x3042))+((r11*x3043)));
evalcond[2]=(((r02*x3037))+((x3038*x3039))+(((-1.0)*r01*x3044)));
evalcond[3]=((-1.0)+((r02*x3038))+(((-1.0)*x3039*x3042))+((r01*x3043)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*x3044))+((cj1*sj2))+((r12*x3037))+((x3038*x3041)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x3044))+((r22*x3037))+((x3038*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3045 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3045.valid){
continue;
}
CheckValue<IkReal> x3046=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3045.value)+(((1.5707963267949)*(x3046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3047=IKcos(j4);
IkReal x3048=IKsin(j4);
IkReal x3049=(cj5*r00);
IkReal x3050=(cj5*r20);
IkReal x3051=(cj5*r10);
IkReal x3052=((1.0)*x3047);
IkReal x3053=(sj5*x3047);
IkReal x3054=((1.0)*sj5*x3048);
evalcond[0]=(((r22*x3048))+((r21*x3053))+(((-1.0)*x3050*x3052)));
evalcond[1]=((((-1.0)*x3051*x3052))+((r11*x3053))+((r12*x3048)));
evalcond[2]=((((-1.0)*r01*x3054))+((x3048*x3049))+((r02*x3047)));
evalcond[3]=((-1.0)+((r01*x3053))+((r02*x3048))+(((-1.0)*x3049*x3052)));
evalcond[4]=(((x3048*x3051))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x3054))+((r12*x3047)));
evalcond[5]=(((x3048*x3050))+((r22*x3047))+(((-1.0)*r21*x3054))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3055=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3055);
rxp1_1=(px*r21);
rxp1_2=(r11*x3055);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3056=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3056);
rxp1_1=(px*r21);
rxp1_2=(r11*x3056);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3057=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3057);
rxp1_1=(px*r21);
rxp1_2=(r11*x3057);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3060=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3060.valid){
continue;
}
IkReal x3058=x3060.value;
IkReal x3059=(cj0*x3058);
sj4array[0]=(((cj1*sj2*x3059))+((cj2*sj1*x3059)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3061=IKcos(j4);
IkReal x3062=IKsin(j4);
IkReal x3063=(r21*sj5);
IkReal x3064=((1.0)*cj5*x3061);
evalcond[0]=(r02*x3061);
evalcond[1]=(cj0+((r02*x3062)));
evalcond[2]=(((x3061*x3063))+(((-1.0)*r20*x3064)));
evalcond[3]=((((-1.0)*r10*x3064))+((r11*sj5*x3061)));
evalcond[4]=(((cj5*r20*x3062))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3062*x3063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3066=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3066.valid){
continue;
}
IkReal x3065=x3066.value;
sj4array[0]=((((-1.0)*sj1*sj2*x3065))+((cj1*cj2*x3065)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3067=IKcos(j4);
IkReal x3068=IKsin(j4);
IkReal x3069=(r11*sj5);
IkReal x3070=((1.0)*cj0);
IkReal x3071=((1.0)*cj5*x3067);
evalcond[0]=(r02*x3067);
evalcond[1]=(cj0+((r02*x3068)));
evalcond[2]=(((r21*sj5*x3067))+(((-1.0)*r20*x3071)));
evalcond[3]=((((-1.0)*r10*x3071))+((x3067*x3069)));
evalcond[4]=((((-1.0)*x3068*x3069))+(((-1.0)*cj1*sj2*x3070))+(((-1.0)*cj2*sj1*x3070))+((cj5*r10*x3068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3072=IKPowWithIntegerCheck(r02,-1);
if(!x3072.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x3072.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3073=IKcos(j4);
IkReal x3074=IKsin(j4);
IkReal x3075=((1.0)*cj0);
IkReal x3076=(sj5*x3073);
IkReal x3077=(cj5*x3074);
IkReal x3078=((1.0)*sj5*x3074);
IkReal x3079=((1.0)*cj5*x3073);
evalcond[0]=(r02*x3073);
evalcond[1]=(((r21*x3076))+(((-1.0)*r20*x3079)));
evalcond[2]=((((-1.0)*r10*x3079))+((r11*x3076)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3077))+(((-1.0)*r21*x3078)));
evalcond[4]=(((r10*x3077))+(((-1.0)*r11*x3078))+(((-1.0)*cj1*sj2*x3075))+(((-1.0)*cj2*sj1*x3075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3080=((1.0)*sj0);
IkReal x3081=((1.0)*sj5);
CheckValue<IkReal> x3082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3081))+(((-1.0)*cj5*r21)))),-1);
if(!x3082.valid){
continue;
}
CheckValue<IkReal> x3083 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r00*x3080))+((cj0*cj5*r10))+(((-1.0)*cj0*r11*x3081))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x3080))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3082.value)))+(x3083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3084=IKcos(j4);
IkReal x3085=IKsin(j4);
IkReal x3086=(cj5*r00);
IkReal x3087=(cj2*sj1);
IkReal x3088=((1.0)*cj1);
IkReal x3089=((1.0)*x3084);
IkReal x3090=(sj5*x3084);
IkReal x3091=(cj5*x3085);
IkReal x3092=((1.0)*sj5*x3085);
evalcond[0]=(((r21*x3090))+(((-1.0)*cj5*r20*x3089))+((r22*x3085)));
evalcond[1]=(((r01*x3090))+cj0+((r02*x3085))+(((-1.0)*x3086*x3089)));
evalcond[2]=(sj0+((r12*x3085))+(((-1.0)*cj5*r10*x3089))+((r11*x3090)));
evalcond[3]=((((-1.0)*cj2*x3088))+((r20*x3091))+((sj1*sj2))+(((-1.0)*r21*x3092))+((r22*x3084)));
evalcond[4]=(((sj0*x3087))+((r02*x3084))+((cj1*sj0*sj2))+(((-1.0)*r01*x3092))+((x3085*x3086)));
evalcond[5]=((((-1.0)*r11*x3092))+((r12*x3084))+((r10*x3091))+(((-1.0)*cj0*sj2*x3088))+(((-1.0)*cj0*x3087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3093=((1.0)*cj5);
CheckValue<IkReal> x3094 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3093)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3094.valid){
continue;
}
CheckValue<IkReal> x3095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3093))+(((-1.0)*r10*sj5)))),-1);
if(!x3095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3094.value)+(((1.5707963267949)*(x3095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3096=IKcos(j4);
IkReal x3097=IKsin(j4);
IkReal x3098=(cj5*r00);
IkReal x3099=(cj2*sj1);
IkReal x3100=((1.0)*cj1);
IkReal x3101=((1.0)*x3096);
IkReal x3102=(sj5*x3096);
IkReal x3103=(cj5*x3097);
IkReal x3104=((1.0)*sj5*x3097);
evalcond[0]=((((-1.0)*cj5*r20*x3101))+((r21*x3102))+((r22*x3097)));
evalcond[1]=(cj0+((r02*x3097))+(((-1.0)*x3098*x3101))+((r01*x3102)));
evalcond[2]=(((r11*x3102))+sj0+(((-1.0)*cj5*r10*x3101))+((r12*x3097)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x3100))+((r20*x3103))+((r22*x3096))+(((-1.0)*r21*x3104)));
evalcond[4]=((((-1.0)*r01*x3104))+((r02*x3096))+((cj1*sj0*sj2))+((sj0*x3099))+((x3097*x3098)));
evalcond[5]=((((-1.0)*r11*x3104))+(((-1.0)*cj0*sj2*x3100))+((r10*x3103))+((r12*x3096))+(((-1.0)*cj0*x3099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3105 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3105.valid){
continue;
}
CheckValue<IkReal> x3106=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3105.value)+(((1.5707963267949)*(x3106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3107=IKcos(j4);
IkReal x3108=IKsin(j4);
IkReal x3109=(cj5*r00);
IkReal x3110=(cj2*sj1);
IkReal x3111=((1.0)*cj1);
IkReal x3112=((1.0)*x3107);
IkReal x3113=(sj5*x3107);
IkReal x3114=(cj5*x3108);
IkReal x3115=((1.0)*sj5*x3108);
evalcond[0]=(((r22*x3108))+(((-1.0)*cj5*r20*x3112))+((r21*x3113)));
evalcond[1]=(cj0+(((-1.0)*x3109*x3112))+((r02*x3108))+((r01*x3113)));
evalcond[2]=(sj0+(((-1.0)*cj5*r10*x3112))+((r12*x3108))+((r11*x3113)));
evalcond[3]=((((-1.0)*r21*x3115))+((sj1*sj2))+((r22*x3107))+(((-1.0)*cj2*x3111))+((r20*x3114)));
evalcond[4]=(((sj0*x3110))+((r02*x3107))+((cj1*sj0*sj2))+(((-1.0)*r01*x3115))+((x3108*x3109)));
evalcond[5]=((((-1.0)*cj0*x3110))+(((-1.0)*r11*x3115))+((r10*x3114))+(((-1.0)*cj0*sj2*x3111))+((r12*x3107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3116=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x3116;
j0eval[1]=IKsign(x3116);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3117=r21*r21;
IkReal x3118=cj5*cj5;
IkReal x3119=(cj1*cj2);
IkReal x3120=(r21*sj5);
IkReal x3121=(sj1*sj2);
IkReal x3122=(cj5*r20);
IkReal x3123=((((2.0)*x3120*x3122))+(((-1.0)*x3117))+(((-1.0)*x3118*(r20*r20)))+(((-1.0)*(r22*r22)))+((x3117*x3118)));
j4eval[0]=x3123;
j4eval[1]=((IKabs((((r22*x3119))+(((-1.0)*r22*x3121)))))+(IKabs((((x3120*x3121))+((x3119*x3122))+(((-1.0)*x3119*x3120))+(((-1.0)*x3121*x3122))))));
j4eval[2]=IKsign(x3123);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.00343953258753)*py))+(((-7.97007181573318)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.97007181573318)*py))+(((5.00343953258753)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.00343953258753)*py))+(((-7.97007181573318)*px))))+IKsqr(((((7.97007181573318)*py))+(((5.00343953258753)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.00343953258753)*py))+(((-7.97007181573318)*px))), ((((7.97007181573318)*py))+(((5.00343953258753)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3124=IKcos(j0);
IkReal x3125=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.0899999)*x3125))+(((0.0565)*x3124)));
evalcond[1]=((((0.0899999)*x3124))+(((-1.0)*py))+(((0.0565)*x3125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3126=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3126;
j4eval[1]=IKsign(x3126);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3127=((1.0)*cj5);
IkReal x3128=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3127)));
j4eval[0]=x3128;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3127))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3128);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3129=((1.0)*sj0);
IkReal x3130=((1.0)*sj5);
IkReal x3131=((((-1.0)*r20*x3130))+(((-1.0)*cj5*r21)));
j4eval[0]=x3131;
j4eval[1]=((IKabs(((((-1.0)*cj5*r00*x3129))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x3130)))))+(IKabs(((((-1.0)*r02*x3129))+((cj0*r12))))));
j4eval[2]=IKsign(x3131);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3132=((1.0)*sj0);
IkReal x3133=((1.0)*sj5);
CheckValue<IkReal> x3134 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x3133))+(((-1.0)*cj5*r00*x3132)))),IkReal(((((-1.0)*r02*x3132))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3134.valid){
continue;
}
CheckValue<IkReal> x3135=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3133))+(((-1.0)*cj5*r21)))),-1);
if(!x3135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3134.value)+(((1.5707963267949)*(x3135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3136=IKcos(j4);
IkReal x3137=IKsin(j4);
IkReal x3138=(cj5*r00);
IkReal x3139=(cj5*r20);
IkReal x3140=(cj5*r10);
IkReal x3141=((1.0)*x3136);
IkReal x3142=((1.0)*x3137);
IkReal x3143=(sj5*x3136);
IkReal x3144=(sj5*x3137);
evalcond[0]=(((r22*x3137))+((r21*x3143))+(((-1.0)*x3139*x3141)));
evalcond[1]=(cj0+((r01*x3143))+((r02*x3137))+(((-1.0)*x3138*x3141)));
evalcond[2]=(sj0+(((-1.0)*x3140*x3141))+((r11*x3143))+((r12*x3137)));
evalcond[3]=((((-1.0)*r22*x3141))+((r21*x3144))+(((-1.0)*x3139*x3142)));
evalcond[4]=(sj0+((r01*x3144))+(((-1.0)*r02*x3141))+(((-1.0)*x3138*x3142)));
evalcond[5]=((((-1.0)*r12*x3141))+(((-1.0)*x3140*x3142))+((r11*x3144))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3145=((1.0)*cj5);
CheckValue<IkReal> x3146=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3145))+(((-1.0)*r10*sj5)))),-1);
if(!x3146.valid){
continue;
}
CheckValue<IkReal> x3147 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3145)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3146.value)))+(x3147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3148=IKcos(j4);
IkReal x3149=IKsin(j4);
IkReal x3150=(cj5*r00);
IkReal x3151=(cj5*r20);
IkReal x3152=(cj5*r10);
IkReal x3153=((1.0)*x3148);
IkReal x3154=((1.0)*x3149);
IkReal x3155=(sj5*x3148);
IkReal x3156=(sj5*x3149);
evalcond[0]=(((r22*x3149))+((r21*x3155))+(((-1.0)*x3151*x3153)));
evalcond[1]=(cj0+((r02*x3149))+(((-1.0)*x3150*x3153))+((r01*x3155)));
evalcond[2]=(sj0+((r12*x3149))+((r11*x3155))+(((-1.0)*x3152*x3153)));
evalcond[3]=((((-1.0)*r22*x3153))+((r21*x3156))+(((-1.0)*x3151*x3154)));
evalcond[4]=(sj0+(((-1.0)*x3150*x3154))+((r01*x3156))+(((-1.0)*r02*x3153)));
evalcond[5]=(((r11*x3156))+(((-1.0)*r12*x3153))+(((-1.0)*x3152*x3154))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3157 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3157.valid){
continue;
}
CheckValue<IkReal> x3158=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3157.value)+(((1.5707963267949)*(x3158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3159=IKcos(j4);
IkReal x3160=IKsin(j4);
IkReal x3161=(cj5*r00);
IkReal x3162=(cj5*r20);
IkReal x3163=(cj5*r10);
IkReal x3164=((1.0)*x3159);
IkReal x3165=((1.0)*x3160);
IkReal x3166=(sj5*x3159);
IkReal x3167=(sj5*x3160);
evalcond[0]=((((-1.0)*x3162*x3164))+((r22*x3160))+((r21*x3166)));
evalcond[1]=(((r02*x3160))+(((-1.0)*x3161*x3164))+cj0+((r01*x3166)));
evalcond[2]=(sj0+(((-1.0)*x3163*x3164))+((r11*x3166))+((r12*x3160)));
evalcond[3]=((((-1.0)*x3162*x3165))+((r21*x3167))+(((-1.0)*r22*x3164)));
evalcond[4]=((((-1.0)*x3161*x3165))+sj0+((r01*x3167))+(((-1.0)*r02*x3164)));
evalcond[5]=((((-1.0)*r12*x3164))+(((-1.0)*x3163*x3165))+((r11*x3167))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.0034235815117)*py))+(((7.97006411820197)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.0034235815117)*px))+(((-7.97006411820197)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.0034235815117)*py))+(((7.97006411820197)*px))))+IKsqr(((((5.0034235815117)*px))+(((-7.97006411820197)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.0034235815117)*py))+(((7.97006411820197)*px))), ((((5.0034235815117)*px))+(((-7.97006411820197)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3168=IKsin(j0);
IkReal x3169=IKcos(j0);
evalcond[0]=((((0.0565)*x3169))+(((-1.0)*px))+(((0.0900001)*x3168)));
evalcond[1]=((((-0.0900001)*x3169))+(((0.0565)*x3168))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3170=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3170;
j4eval[1]=IKsign(x3170);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3171=((1.0)*cj5);
IkReal x3172=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3171)));
j4eval[0]=x3172;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3171))))));
j4eval[2]=IKsign(x3172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3173=((1.0)*sj0);
IkReal x3174=((1.0)*sj5);
IkReal x3175=((((-1.0)*cj5*r21))+(((-1.0)*r20*x3174)));
j4eval[0]=x3175;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x3174))+(((-1.0)*cj5*r00*x3173))+((r01*sj0*sj5)))))+(IKabs((((cj0*r12))+(((-1.0)*r02*x3173))))));
j4eval[2]=IKsign(x3175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3176=((1.0)*sj0);
IkReal x3177=((1.0)*sj5);
CheckValue<IkReal> x3178 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x3177))+(((-1.0)*cj5*r00*x3176))+((r01*sj0*sj5)))),IkReal((((cj0*r12))+(((-1.0)*r02*x3176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3178.valid){
continue;
}
CheckValue<IkReal> x3179=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x3177)))),-1);
if(!x3179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3178.value)+(((1.5707963267949)*(x3179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3180=IKcos(j4);
IkReal x3181=IKsin(j4);
IkReal x3182=(cj5*r00);
IkReal x3183=(cj5*r20);
IkReal x3184=(cj5*r10);
IkReal x3185=((1.0)*x3180);
IkReal x3186=((1.0)*x3181);
IkReal x3187=(sj5*x3180);
IkReal x3188=(sj5*x3181);
evalcond[0]=(((r22*x3181))+(((-1.0)*x3183*x3185))+((r21*x3187)));
evalcond[1]=(cj0+((r01*x3187))+(((-1.0)*x3182*x3185))+((r02*x3181)));
evalcond[2]=((((-1.0)*x3184*x3185))+sj0+((r12*x3181))+((r11*x3187)));
evalcond[3]=((((-1.0)*x3183*x3186))+(((-1.0)*r22*x3185))+((r21*x3188)));
evalcond[4]=((((-1.0)*x3184*x3186))+cj0+((r11*x3188))+(((-1.0)*r12*x3185)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3185))+((r01*x3188))+(((-1.0)*x3182*x3186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3189=((1.0)*cj5);
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3189)))),-1);
if(!x3190.valid){
continue;
}
CheckValue<IkReal> x3191 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3189))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3190.value)))+(x3191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3192=IKcos(j4);
IkReal x3193=IKsin(j4);
IkReal x3194=(cj5*r00);
IkReal x3195=(cj5*r20);
IkReal x3196=(cj5*r10);
IkReal x3197=((1.0)*x3192);
IkReal x3198=((1.0)*x3193);
IkReal x3199=(sj5*x3192);
IkReal x3200=(sj5*x3193);
evalcond[0]=(((r21*x3199))+((r22*x3193))+(((-1.0)*x3195*x3197)));
evalcond[1]=(cj0+((r01*x3199))+((r02*x3193))+(((-1.0)*x3194*x3197)));
evalcond[2]=((((-1.0)*x3196*x3197))+sj0+((r11*x3199))+((r12*x3193)));
evalcond[3]=((((-1.0)*r22*x3197))+(((-1.0)*x3195*x3198))+((r21*x3200)));
evalcond[4]=((((-1.0)*x3196*x3198))+cj0+((r11*x3200))+(((-1.0)*r12*x3197)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3200))+(((-1.0)*r02*x3197))+(((-1.0)*x3194*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3201 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3201.valid){
continue;
}
CheckValue<IkReal> x3202=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3201.value)+(((1.5707963267949)*(x3202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3203=IKcos(j4);
IkReal x3204=IKsin(j4);
IkReal x3205=(cj5*r00);
IkReal x3206=(cj5*r20);
IkReal x3207=(cj5*r10);
IkReal x3208=((1.0)*x3203);
IkReal x3209=((1.0)*x3204);
IkReal x3210=(sj5*x3203);
IkReal x3211=(sj5*x3204);
evalcond[0]=(((r22*x3204))+((r21*x3210))+(((-1.0)*x3206*x3208)));
evalcond[1]=(cj0+((r01*x3210))+((r02*x3204))+(((-1.0)*x3205*x3208)));
evalcond[2]=((((-1.0)*x3207*x3208))+sj0+((r12*x3204))+((r11*x3210)));
evalcond[3]=((((-1.0)*r22*x3208))+((r21*x3211))+(((-1.0)*x3206*x3209)));
evalcond[4]=((((-1.0)*x3207*x3209))+cj0+(((-1.0)*r12*x3208))+((r11*x3211)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3208))+((r01*x3211))+(((-1.0)*x3205*x3209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.58742422858909)*py))+(((-5.05728072824842)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.05728072824842)*py))+(((1.58742422858909)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.58742422858909)*py))+(((-5.05728072824842)*px))))+IKsqr(((((5.05728072824842)*py))+(((1.58742422858909)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.58742422858909)*py))+(((-5.05728072824842)*px))), ((((5.05728072824842)*py))+(((1.58742422858909)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3212=IKcos(j0);
IkReal x3213=IKsin(j0);
evalcond[0]=((((0.0565)*x3212))+(((-0.18)*x3213))+(((-1.0)*px)));
evalcond[1]=((((0.0565)*x3213))+(((0.18)*x3212))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3214=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3214;
j4eval[1]=IKsign(x3214);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3215=((1.0)*cj5);
IkReal x3216=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3215)));
j4eval[0]=x3216;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3215)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3217=((1.0)*sj0);
IkReal x3218=((1.0)*sj5);
IkReal x3219=((((-1.0)*r20*x3218))+(((-1.0)*cj5*r21)));
j4eval[0]=x3219;
j4eval[1]=((IKabs(((((-1.0)*cj5*r00*x3217))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x3218)))))+(IKabs(((((-1.0)*r02*x3217))+((cj0*r12))))));
j4eval[2]=IKsign(x3219);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3220=((1.0)*sj0);
IkReal x3221=((1.0)*sj5);
CheckValue<IkReal> x3222 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x3221))+(((-1.0)*cj5*r00*x3220))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x3220))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3222.valid){
continue;
}
CheckValue<IkReal> x3223=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x3221)))),-1);
if(!x3223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3222.value)+(((1.5707963267949)*(x3223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3224=IKcos(j4);
IkReal x3225=IKsin(j4);
IkReal x3226=(cj5*r00);
IkReal x3227=(cj5*r20);
IkReal x3228=(cj5*r10);
IkReal x3229=((1.0)*x3224);
IkReal x3230=((1.0)*x3225);
IkReal x3231=(sj5*x3224);
IkReal x3232=(sj5*x3225);
evalcond[0]=((((-1.0)*x3227*x3229))+((r22*x3225))+((r21*x3231)));
evalcond[1]=(cj0+((r02*x3225))+((r01*x3231))+(((-1.0)*x3226*x3229)));
evalcond[2]=(((r12*x3225))+sj0+((r11*x3231))+(((-1.0)*x3228*x3229)));
evalcond[3]=((((-1.0)*x3227*x3230))+(((-1.0)*r22*x3229))+((r21*x3232)));
evalcond[4]=((((-1.0)*r02*x3229))+sj0+((r01*x3232))+(((-1.0)*x3226*x3230)));
evalcond[5]=((((-1.0)*x3228*x3230))+((r11*x3232))+(((-1.0)*r12*x3229))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3233=((1.0)*cj5);
CheckValue<IkReal> x3234 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3233)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3234.valid){
continue;
}
CheckValue<IkReal> x3235=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3233)))),-1);
if(!x3235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3234.value)+(((1.5707963267949)*(x3235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3236=IKcos(j4);
IkReal x3237=IKsin(j4);
IkReal x3238=(cj5*r00);
IkReal x3239=(cj5*r20);
IkReal x3240=(cj5*r10);
IkReal x3241=((1.0)*x3236);
IkReal x3242=((1.0)*x3237);
IkReal x3243=(sj5*x3236);
IkReal x3244=(sj5*x3237);
evalcond[0]=(((r21*x3243))+(((-1.0)*x3239*x3241))+((r22*x3237)));
evalcond[1]=(((r01*x3243))+cj0+(((-1.0)*x3238*x3241))+((r02*x3237)));
evalcond[2]=(sj0+(((-1.0)*x3240*x3241))+((r12*x3237))+((r11*x3243)));
evalcond[3]=(((r21*x3244))+(((-1.0)*x3239*x3242))+(((-1.0)*r22*x3241)));
evalcond[4]=(((r01*x3244))+sj0+(((-1.0)*x3238*x3242))+(((-1.0)*r02*x3241)));
evalcond[5]=((((-1.0)*x3240*x3242))+(((-1.0)*r12*x3241))+((r11*x3244))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3245 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3245.valid){
continue;
}
CheckValue<IkReal> x3246=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3245.value)+(((1.5707963267949)*(x3246.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3247=IKcos(j4);
IkReal x3248=IKsin(j4);
IkReal x3249=(cj5*r00);
IkReal x3250=(cj5*r20);
IkReal x3251=(cj5*r10);
IkReal x3252=((1.0)*x3247);
IkReal x3253=((1.0)*x3248);
IkReal x3254=(sj5*x3247);
IkReal x3255=(sj5*x3248);
evalcond[0]=(((r22*x3248))+((r21*x3254))+(((-1.0)*x3250*x3252)));
evalcond[1]=(cj0+(((-1.0)*x3249*x3252))+((r01*x3254))+((r02*x3248)));
evalcond[2]=(sj0+((r11*x3254))+((r12*x3248))+(((-1.0)*x3251*x3252)));
evalcond[3]=(((r21*x3255))+(((-1.0)*r22*x3252))+(((-1.0)*x3250*x3253)));
evalcond[4]=(sj0+(((-1.0)*r02*x3252))+(((-1.0)*x3249*x3253))+((r01*x3255)));
evalcond[5]=(((r11*x3255))+(((-1.0)*x3251*x3253))+(((-1.0)*r12*x3252))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((17.6991150442478)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((17.6991150442478)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.6991150442478)*py))+IKsqr(((17.6991150442478)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((17.6991150442478)*py), ((17.6991150442478)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.0565)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.0565)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3256=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3256;
j4eval[1]=IKsign(x3256);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3257=((1.0)*cj5);
IkReal x3258=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3257)));
j4eval[0]=x3258;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3257)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3259=((1.0)*sj0);
IkReal x3260=((1.0)*sj5);
IkReal x3261=((((-1.0)*r20*x3260))+(((-1.0)*cj5*r21)));
j4eval[0]=x3261;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x3259))+(((-1.0)*cj0*r11*x3260))+((r01*sj0*sj5)))))+(IKabs(((((-1.0)*r02*x3259))+((cj0*r12))))));
j4eval[2]=IKsign(x3261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3262=((1.0)*sj0);
IkReal x3263=((1.0)*sj5);
CheckValue<IkReal> x3264=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3263))+(((-1.0)*cj5*r21)))),-1);
if(!x3264.valid){
continue;
}
CheckValue<IkReal> x3265 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r00*x3262))+((cj0*cj5*r10))+(((-1.0)*cj0*r11*x3263))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x3262))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3264.value)))+(x3265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3266=IKcos(j4);
IkReal x3267=IKsin(j4);
IkReal x3268=(cj5*r00);
IkReal x3269=(cj5*r20);
IkReal x3270=(cj5*r10);
IkReal x3271=((1.0)*x3266);
IkReal x3272=((1.0)*x3267);
IkReal x3273=(sj5*x3266);
IkReal x3274=(sj5*x3267);
evalcond[0]=(((r21*x3273))+(((-1.0)*x3269*x3271))+((r22*x3267)));
evalcond[1]=((((-1.0)*x3268*x3271))+cj0+((r01*x3273))+((r02*x3267)));
evalcond[2]=(sj0+((r11*x3273))+((r12*x3267))+(((-1.0)*x3270*x3271)));
evalcond[3]=(((r21*x3274))+(((-1.0)*x3269*x3272))+(((-1.0)*r22*x3271)));
evalcond[4]=((((-1.0)*r12*x3271))+cj0+((r11*x3274))+(((-1.0)*x3270*x3272)));
evalcond[5]=((((-1.0)*x3268*x3272))+(((-1.0)*sj0))+((r01*x3274))+(((-1.0)*r02*x3271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3275=((1.0)*cj5);
CheckValue<IkReal> x3276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3275))+(((-1.0)*r10*sj5)))),-1);
if(!x3276.valid){
continue;
}
CheckValue<IkReal> x3277 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3275)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3276.value)))+(x3277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3278=IKcos(j4);
IkReal x3279=IKsin(j4);
IkReal x3280=(cj5*r00);
IkReal x3281=(cj5*r20);
IkReal x3282=(cj5*r10);
IkReal x3283=((1.0)*x3278);
IkReal x3284=((1.0)*x3279);
IkReal x3285=(sj5*x3278);
IkReal x3286=(sj5*x3279);
evalcond[0]=((((-1.0)*x3281*x3283))+((r21*x3285))+((r22*x3279)));
evalcond[1]=((((-1.0)*x3280*x3283))+cj0+((r02*x3279))+((r01*x3285)));
evalcond[2]=(sj0+(((-1.0)*x3282*x3283))+((r12*x3279))+((r11*x3285)));
evalcond[3]=((((-1.0)*x3281*x3284))+(((-1.0)*r22*x3283))+((r21*x3286)));
evalcond[4]=((((-1.0)*r12*x3283))+cj0+(((-1.0)*x3282*x3284))+((r11*x3286)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3280*x3284))+(((-1.0)*r02*x3283))+((r01*x3286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3287 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3287.valid){
continue;
}
CheckValue<IkReal> x3288=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3287.value)+(((1.5707963267949)*(x3288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3289=IKcos(j4);
IkReal x3290=IKsin(j4);
IkReal x3291=(cj5*r00);
IkReal x3292=(cj5*r20);
IkReal x3293=(cj5*r10);
IkReal x3294=((1.0)*x3289);
IkReal x3295=((1.0)*x3290);
IkReal x3296=(sj5*x3289);
IkReal x3297=(sj5*x3290);
evalcond[0]=((((-1.0)*x3292*x3294))+((r21*x3296))+((r22*x3290)));
evalcond[1]=(((r01*x3296))+cj0+((r02*x3290))+(((-1.0)*x3291*x3294)));
evalcond[2]=(sj0+(((-1.0)*x3293*x3294))+((r11*x3296))+((r12*x3290)));
evalcond[3]=((((-1.0)*r22*x3294))+(((-1.0)*x3292*x3295))+((r21*x3297)));
evalcond[4]=((((-1.0)*r12*x3294))+cj0+(((-1.0)*x3293*x3295))+((r11*x3297)));
evalcond[5]=(((r01*x3297))+(((-1.0)*sj0))+(((-1.0)*x3291*x3295))+(((-1.0)*r02*x3294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((7.97007181573318)*px))+(((5.00343953258753)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.00343953258753)*px))+(((-7.97007181573318)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((7.97007181573318)*px))+(((5.00343953258753)*py))))+IKsqr(((((5.00343953258753)*px))+(((-7.97007181573318)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((7.97007181573318)*px))+(((5.00343953258753)*py))), ((((5.00343953258753)*px))+(((-7.97007181573318)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3298=IKsin(j0);
IkReal x3299=IKcos(j0);
evalcond[0]=((((0.0899999)*x3298))+(((-1.0)*px))+(((0.0565)*x3299)));
evalcond[1]=((((-1.0)*py))+(((0.0565)*x3298))+(((-0.0899999)*x3299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3300=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3300;
j4eval[1]=IKsign(x3300);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3301=((1.0)*cj5);
IkReal x3302=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3301)));
j4eval[0]=x3302;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3301)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3303=((1.0)*sj0);
IkReal x3304=((1.0)*sj5);
IkReal x3305=((((-1.0)*r20*x3304))+(((-1.0)*cj5*r21)));
j4eval[0]=x3305;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x3303))+(((-1.0)*cj0*r11*x3304))+((r01*sj0*sj5)))))+(IKabs(((((-1.0)*r02*x3303))+((cj0*r12))))));
j4eval[2]=IKsign(x3305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3306=((1.0)*sj0);
IkReal x3307=((1.0)*sj5);
CheckValue<IkReal> x3308=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3307))+(((-1.0)*cj5*r21)))),-1);
if(!x3308.valid){
continue;
}
CheckValue<IkReal> x3309 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x3306))+(((-1.0)*cj0*r11*x3307))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x3306))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3308.value)))+(x3309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3310=IKcos(j4);
IkReal x3311=IKsin(j4);
IkReal x3312=(cj5*r00);
IkReal x3313=(cj5*r20);
IkReal x3314=(cj5*r10);
IkReal x3315=((1.0)*x3310);
IkReal x3316=((1.0)*x3311);
IkReal x3317=(sj5*x3310);
IkReal x3318=(sj5*x3311);
evalcond[0]=(((r21*x3317))+((r22*x3311))+(((-1.0)*x3313*x3315)));
evalcond[1]=(cj0+((r02*x3311))+(((-1.0)*x3312*x3315))+((r01*x3317)));
evalcond[2]=(sj0+(((-1.0)*x3314*x3315))+((r11*x3317))+((r12*x3311)));
evalcond[3]=(((r21*x3318))+(((-1.0)*r22*x3315))+(((-1.0)*x3313*x3316)));
evalcond[4]=(cj0+(((-1.0)*x3314*x3316))+((r11*x3318))+(((-1.0)*r12*x3315)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3312*x3316))+(((-1.0)*r02*x3315))+((r01*x3318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3319=((1.0)*cj5);
CheckValue<IkReal> x3320=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3319)))),-1);
if(!x3320.valid){
continue;
}
CheckValue<IkReal> x3321 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3319)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3320.value)))+(x3321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3322=IKcos(j4);
IkReal x3323=IKsin(j4);
IkReal x3324=(cj5*r00);
IkReal x3325=(cj5*r20);
IkReal x3326=(cj5*r10);
IkReal x3327=((1.0)*x3322);
IkReal x3328=((1.0)*x3323);
IkReal x3329=(sj5*x3322);
IkReal x3330=(sj5*x3323);
evalcond[0]=(((r22*x3323))+(((-1.0)*x3325*x3327))+((r21*x3329)));
evalcond[1]=((((-1.0)*x3324*x3327))+cj0+((r01*x3329))+((r02*x3323)));
evalcond[2]=(((r12*x3323))+sj0+(((-1.0)*x3326*x3327))+((r11*x3329)));
evalcond[3]=(((r21*x3330))+(((-1.0)*x3325*x3328))+(((-1.0)*r22*x3327)));
evalcond[4]=((((-1.0)*x3326*x3328))+cj0+((r11*x3330))+(((-1.0)*r12*x3327)));
evalcond[5]=((((-1.0)*x3324*x3328))+(((-1.0)*sj0))+(((-1.0)*r02*x3327))+((r01*x3330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3331 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3331.valid){
continue;
}
CheckValue<IkReal> x3332=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3331.value)+(((1.5707963267949)*(x3332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3333=IKcos(j4);
IkReal x3334=IKsin(j4);
IkReal x3335=(cj5*r00);
IkReal x3336=(cj5*r20);
IkReal x3337=(cj5*r10);
IkReal x3338=((1.0)*x3333);
IkReal x3339=((1.0)*x3334);
IkReal x3340=(sj5*x3333);
IkReal x3341=(sj5*x3334);
evalcond[0]=(((r21*x3340))+((r22*x3334))+(((-1.0)*x3336*x3338)));
evalcond[1]=(cj0+((r02*x3334))+(((-1.0)*x3335*x3338))+((r01*x3340)));
evalcond[2]=(sj0+((r12*x3334))+(((-1.0)*x3337*x3338))+((r11*x3340)));
evalcond[3]=((((-1.0)*r22*x3338))+((r21*x3341))+(((-1.0)*x3336*x3339)));
evalcond[4]=(cj0+(((-1.0)*x3337*x3339))+((r11*x3341))+(((-1.0)*r12*x3338)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3338))+(((-1.0)*x3335*x3339))+((r01*x3341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.0034235815117)*py))+(((-7.97006411820197)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.0034235815117)*px))+(((7.97006411820197)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.0034235815117)*py))+(((-7.97006411820197)*px))))+IKsqr(((((5.0034235815117)*px))+(((7.97006411820197)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.0034235815117)*py))+(((-7.97006411820197)*px))), ((((5.0034235815117)*px))+(((7.97006411820197)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3342=IKcos(j0);
IkReal x3343=IKsin(j0);
evalcond[0]=((((0.0565)*x3342))+(((-1.0)*px))+(((-0.0900001)*x3343)));
evalcond[1]=((((0.0565)*x3343))+(((-1.0)*py))+(((0.0900001)*x3342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3344=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3344;
j4eval[1]=IKsign(x3344);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3345=((1.0)*cj5);
IkReal x3346=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3345)));
j4eval[0]=x3346;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3345)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3346);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3347=((1.0)*sj0);
IkReal x3348=((1.0)*sj5);
IkReal x3349=((((-1.0)*r20*x3348))+(((-1.0)*cj5*r21)));
j4eval[0]=x3349;
j4eval[1]=((IKabs(((((-1.0)*r02*x3347))+((cj0*r12)))))+(IKabs(((((-1.0)*cj0*r11*x3348))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*cj5*r00*x3347))))));
j4eval[2]=IKsign(x3349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3350=((1.0)*sj0);
IkReal x3351=((1.0)*sj5);
CheckValue<IkReal> x3352 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r00*x3350))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x3351)))),IkReal(((((-1.0)*r02*x3350))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3352.valid){
continue;
}
CheckValue<IkReal> x3353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3351))+(((-1.0)*cj5*r21)))),-1);
if(!x3353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3352.value)+(((1.5707963267949)*(x3353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3354=IKcos(j4);
IkReal x3355=IKsin(j4);
IkReal x3356=(cj5*r00);
IkReal x3357=(cj5*r20);
IkReal x3358=(cj5*r10);
IkReal x3359=((1.0)*x3354);
IkReal x3360=((1.0)*x3355);
IkReal x3361=(sj5*x3354);
IkReal x3362=(sj5*x3355);
evalcond[0]=(((r21*x3361))+(((-1.0)*x3357*x3359))+((r22*x3355)));
evalcond[1]=(cj0+((r01*x3361))+(((-1.0)*x3356*x3359))+((r02*x3355)));
evalcond[2]=(((r12*x3355))+sj0+(((-1.0)*x3358*x3359))+((r11*x3361)));
evalcond[3]=(((r21*x3362))+(((-1.0)*x3357*x3360))+(((-1.0)*r22*x3359)));
evalcond[4]=(sj0+(((-1.0)*r02*x3359))+((r01*x3362))+(((-1.0)*x3356*x3360)));
evalcond[5]=((((-1.0)*r12*x3359))+(((-1.0)*cj0))+((r11*x3362))+(((-1.0)*x3358*x3360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3363=((1.0)*cj5);
CheckValue<IkReal> x3364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3363)))),-1);
if(!x3364.valid){
continue;
}
CheckValue<IkReal> x3365 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3363)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3364.value)))+(x3365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3366=IKcos(j4);
IkReal x3367=IKsin(j4);
IkReal x3368=(cj5*r00);
IkReal x3369=(cj5*r20);
IkReal x3370=(cj5*r10);
IkReal x3371=((1.0)*x3366);
IkReal x3372=((1.0)*x3367);
IkReal x3373=(sj5*x3366);
IkReal x3374=(sj5*x3367);
evalcond[0]=(((r22*x3367))+((r21*x3373))+(((-1.0)*x3369*x3371)));
evalcond[1]=(((r01*x3373))+((r02*x3367))+cj0+(((-1.0)*x3368*x3371)));
evalcond[2]=(sj0+(((-1.0)*x3370*x3371))+((r12*x3367))+((r11*x3373)));
evalcond[3]=((((-1.0)*r22*x3371))+((r21*x3374))+(((-1.0)*x3369*x3372)));
evalcond[4]=(((r01*x3374))+sj0+(((-1.0)*r02*x3371))+(((-1.0)*x3368*x3372)));
evalcond[5]=((((-1.0)*x3370*x3372))+(((-1.0)*r12*x3371))+((r11*x3374))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3375 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3375.valid){
continue;
}
CheckValue<IkReal> x3376=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3375.value)+(((1.5707963267949)*(x3376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3377=IKcos(j4);
IkReal x3378=IKsin(j4);
IkReal x3379=(cj5*r00);
IkReal x3380=(cj5*r20);
IkReal x3381=(cj5*r10);
IkReal x3382=((1.0)*x3377);
IkReal x3383=((1.0)*x3378);
IkReal x3384=(sj5*x3377);
IkReal x3385=(sj5*x3378);
evalcond[0]=(((r22*x3378))+(((-1.0)*x3380*x3382))+((r21*x3384)));
evalcond[1]=(((r01*x3384))+cj0+((r02*x3378))+(((-1.0)*x3379*x3382)));
evalcond[2]=(((r12*x3378))+sj0+(((-1.0)*x3381*x3382))+((r11*x3384)));
evalcond[3]=((((-1.0)*r22*x3382))+(((-1.0)*x3380*x3383))+((r21*x3385)));
evalcond[4]=(((r01*x3385))+sj0+(((-1.0)*r02*x3382))+(((-1.0)*x3379*x3383)));
evalcond[5]=((((-1.0)*x3381*x3383))+((r11*x3385))+(((-1.0)*r12*x3382))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.05728072824842)*px))+(((1.58742422858909)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.58742422858909)*px))+(((-5.05728072824842)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.05728072824842)*px))+(((1.58742422858909)*py))))+IKsqr(((((1.58742422858909)*px))+(((-5.05728072824842)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.05728072824842)*px))+(((1.58742422858909)*py))), ((((1.58742422858909)*px))+(((-5.05728072824842)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3386=IKsin(j0);
IkReal x3387=IKcos(j0);
evalcond[0]=((((0.0565)*x3387))+(((-1.0)*px))+(((0.18)*x3386)));
evalcond[1]=((((-0.18)*x3387))+(((0.0565)*x3386))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3388=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3388;
j4eval[1]=IKsign(x3388);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3389=((1.0)*cj5);
IkReal x3390=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3389)));
j4eval[0]=x3390;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3389))))));
j4eval[2]=IKsign(x3390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3391=((1.0)*sj0);
IkReal x3392=((1.0)*sj5);
IkReal x3393=((((-1.0)*cj5*r21))+(((-1.0)*r20*x3392)));
j4eval[0]=x3393;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x3391))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x3392)))))+(IKabs(((((-1.0)*r02*x3391))+((cj0*r12))))));
j4eval[2]=IKsign(x3393);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3394=((1.0)*sj0);
IkReal x3395=((1.0)*sj5);
CheckValue<IkReal> x3396=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x3395)))),-1);
if(!x3396.valid){
continue;
}
CheckValue<IkReal> x3397 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x3394))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x3395)))),IkReal(((((-1.0)*r02*x3394))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3396.value)))+(x3397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3398=IKcos(j4);
IkReal x3399=IKsin(j4);
IkReal x3400=(cj5*r00);
IkReal x3401=(cj5*r20);
IkReal x3402=(cj5*r10);
IkReal x3403=((1.0)*x3398);
IkReal x3404=((1.0)*x3399);
IkReal x3405=(sj5*x3398);
IkReal x3406=(sj5*x3399);
evalcond[0]=((((-1.0)*x3401*x3403))+((r21*x3405))+((r22*x3399)));
evalcond[1]=((((-1.0)*x3400*x3403))+cj0+((r02*x3399))+((r01*x3405)));
evalcond[2]=(sj0+((r11*x3405))+(((-1.0)*x3402*x3403))+((r12*x3399)));
evalcond[3]=((((-1.0)*x3401*x3404))+((r21*x3406))+(((-1.0)*r22*x3403)));
evalcond[4]=(cj0+((r11*x3406))+(((-1.0)*x3402*x3404))+(((-1.0)*r12*x3403)));
evalcond[5]=((((-1.0)*x3400*x3404))+(((-1.0)*sj0))+(((-1.0)*r02*x3403))+((r01*x3406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3407=((1.0)*cj5);
CheckValue<IkReal> x3408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3407)))),-1);
if(!x3408.valid){
continue;
}
CheckValue<IkReal> x3409 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3407)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3408.value)))+(x3409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3410=IKcos(j4);
IkReal x3411=IKsin(j4);
IkReal x3412=(cj5*r00);
IkReal x3413=(cj5*r20);
IkReal x3414=(cj5*r10);
IkReal x3415=((1.0)*x3410);
IkReal x3416=((1.0)*x3411);
IkReal x3417=(sj5*x3410);
IkReal x3418=(sj5*x3411);
evalcond[0]=(((r22*x3411))+((r21*x3417))+(((-1.0)*x3413*x3415)));
evalcond[1]=((((-1.0)*x3412*x3415))+cj0+((r02*x3411))+((r01*x3417)));
evalcond[2]=(sj0+((r12*x3411))+(((-1.0)*x3414*x3415))+((r11*x3417)));
evalcond[3]=((((-1.0)*r22*x3415))+((r21*x3418))+(((-1.0)*x3413*x3416)));
evalcond[4]=(cj0+(((-1.0)*x3414*x3416))+((r11*x3418))+(((-1.0)*r12*x3415)));
evalcond[5]=((((-1.0)*x3412*x3416))+(((-1.0)*sj0))+(((-1.0)*r02*x3415))+((r01*x3418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3419 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3419.valid){
continue;
}
CheckValue<IkReal> x3420=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3419.value)+(((1.5707963267949)*(x3420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3421=IKcos(j4);
IkReal x3422=IKsin(j4);
IkReal x3423=(cj5*r00);
IkReal x3424=(cj5*r20);
IkReal x3425=(cj5*r10);
IkReal x3426=((1.0)*x3421);
IkReal x3427=((1.0)*x3422);
IkReal x3428=(sj5*x3421);
IkReal x3429=(sj5*x3422);
evalcond[0]=((((-1.0)*x3424*x3426))+((r21*x3428))+((r22*x3422)));
evalcond[1]=(cj0+((r02*x3422))+(((-1.0)*x3423*x3426))+((r01*x3428)));
evalcond[2]=(sj0+(((-1.0)*x3425*x3426))+((r12*x3422))+((r11*x3428)));
evalcond[3]=((((-1.0)*x3424*x3427))+(((-1.0)*r22*x3426))+((r21*x3429)));
evalcond[4]=((((-1.0)*r12*x3426))+cj0+(((-1.0)*x3425*x3427))+((r11*x3429)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3423*x3427))+(((-1.0)*r02*x3426))+((r01*x3429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((17.6991150442478)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((17.6991150442478)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((17.6991150442478)*py))+IKsqr(((17.6991150442478)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((17.6991150442478)*py), ((17.6991150442478)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.0565)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.0565)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3430=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3430;
j4eval[1]=IKsign(x3430);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3431=((1.0)*cj5);
IkReal x3432=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3431)));
j4eval[0]=x3432;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3431)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3433=((1.0)*sj0);
IkReal x3434=((1.0)*sj5);
IkReal x3435=((((-1.0)*cj5*r21))+(((-1.0)*r20*x3434)));
j4eval[0]=x3435;
j4eval[1]=((IKabs(((((-1.0)*cj0*r11*x3434))+((cj0*cj5*r10))+(((-1.0)*cj5*r00*x3433))+((r01*sj0*sj5)))))+(IKabs((((cj0*r12))+(((-1.0)*r02*x3433))))));
j4eval[2]=IKsign(x3435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3436=((1.0)*sj0);
IkReal x3437=((1.0)*sj5);
CheckValue<IkReal> x3438 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x3437))+((cj0*cj5*r10))+(((-1.0)*cj5*r00*x3436))+((r01*sj0*sj5)))),IkReal((((cj0*r12))+(((-1.0)*r02*x3436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3438.valid){
continue;
}
CheckValue<IkReal> x3439=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x3437)))),-1);
if(!x3439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3438.value)+(((1.5707963267949)*(x3439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3440=IKcos(j4);
IkReal x3441=IKsin(j4);
IkReal x3442=(cj5*r00);
IkReal x3443=(cj5*r20);
IkReal x3444=(cj5*r10);
IkReal x3445=((1.0)*x3440);
IkReal x3446=((1.0)*x3441);
IkReal x3447=(sj5*x3440);
IkReal x3448=(sj5*x3441);
evalcond[0]=(((r21*x3447))+((r22*x3441))+(((-1.0)*x3443*x3445)));
evalcond[1]=(cj0+((r02*x3441))+(((-1.0)*x3442*x3445))+((r01*x3447)));
evalcond[2]=(((r11*x3447))+sj0+((r12*x3441))+(((-1.0)*x3444*x3445)));
evalcond[3]=(((r21*x3448))+(((-1.0)*x3443*x3446))+(((-1.0)*r22*x3445)));
evalcond[4]=(sj0+(((-1.0)*r02*x3445))+(((-1.0)*x3442*x3446))+((r01*x3448)));
evalcond[5]=(((r11*x3448))+(((-1.0)*x3444*x3446))+(((-1.0)*r12*x3445))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3449=((1.0)*cj5);
CheckValue<IkReal> x3450 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3449))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3450.valid){
continue;
}
CheckValue<IkReal> x3451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3449)))),-1);
if(!x3451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3450.value)+(((1.5707963267949)*(x3451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3452=IKcos(j4);
IkReal x3453=IKsin(j4);
IkReal x3454=(cj5*r00);
IkReal x3455=(cj5*r20);
IkReal x3456=(cj5*r10);
IkReal x3457=((1.0)*x3452);
IkReal x3458=((1.0)*x3453);
IkReal x3459=(sj5*x3452);
IkReal x3460=(sj5*x3453);
evalcond[0]=(((r21*x3459))+((r22*x3453))+(((-1.0)*x3455*x3457)));
evalcond[1]=(cj0+((r02*x3453))+(((-1.0)*x3454*x3457))+((r01*x3459)));
evalcond[2]=(sj0+((r12*x3453))+(((-1.0)*x3456*x3457))+((r11*x3459)));
evalcond[3]=(((r21*x3460))+(((-1.0)*x3455*x3458))+(((-1.0)*r22*x3457)));
evalcond[4]=(sj0+((r01*x3460))+(((-1.0)*x3454*x3458))+(((-1.0)*r02*x3457)));
evalcond[5]=(((r11*x3460))+(((-1.0)*r12*x3457))+(((-1.0)*cj0))+(((-1.0)*x3456*x3458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3461 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3461.valid){
continue;
}
CheckValue<IkReal> x3462=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3461.value)+(((1.5707963267949)*(x3462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3463=IKcos(j4);
IkReal x3464=IKsin(j4);
IkReal x3465=(cj5*r00);
IkReal x3466=(cj5*r20);
IkReal x3467=(cj5*r10);
IkReal x3468=((1.0)*x3463);
IkReal x3469=((1.0)*x3464);
IkReal x3470=(sj5*x3463);
IkReal x3471=(sj5*x3464);
evalcond[0]=(((r21*x3470))+((r22*x3464))+(((-1.0)*x3466*x3468)));
evalcond[1]=((((-1.0)*x3465*x3468))+cj0+((r01*x3470))+((r02*x3464)));
evalcond[2]=(sj0+(((-1.0)*x3467*x3468))+((r12*x3464))+((r11*x3470)));
evalcond[3]=((((-1.0)*r22*x3468))+((r21*x3471))+(((-1.0)*x3466*x3469)));
evalcond[4]=(sj0+(((-1.0)*x3465*x3469))+(((-1.0)*r02*x3468))+((r01*x3471)));
evalcond[5]=((((-1.0)*x3467*x3469))+(((-1.0)*r12*x3468))+((r11*x3471))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3472=(cj5*r01);
IkReal x3473=(sj1*sj2);
IkReal x3474=((0.0002)*cj1);
IkReal x3475=(r00*sj5);
IkReal x3476=((180.0)*sj1);
IkReal x3477=(cj1*cj2);
IkReal x3478=((2000.0)*px);
IkReal x3479=((113.0)*x3477);
IkReal x3480=((180.0)*cj1*sj2);
CheckValue<IkReal> x3481=IKPowWithIntegerCheck((x3477+(((-1.0)*x3473))),-1);
if(!x3481.valid){
continue;
}
CheckValue<IkReal> x3482=IKPowWithIntegerCheck(((((-113.0)*x3473))+x3479),-1);
if(!x3482.valid){
continue;
}
if( IKabs(((x3481.value)*((x3475+x3472)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3482.value)*((((x3475*x3479))+((x3475*x3476))+(((-113.0)*x3473*x3475))+((x3475*x3480))+((x3477*x3478))+(((-1.0)*x3472*x3474))+((cj2*x3475*x3476))+((cj2*x3472*x3476))+(((-1.0)*x3473*x3478))+(((-1.0)*x3474*x3475))+(((-113.0)*x3472*x3473))+((x3472*x3476))+((x3472*x3479))+((x3472*x3480)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3481.value)*((x3475+x3472))))+IKsqr(((x3482.value)*((((x3475*x3479))+((x3475*x3476))+(((-113.0)*x3473*x3475))+((x3475*x3480))+((x3477*x3478))+(((-1.0)*x3472*x3474))+((cj2*x3475*x3476))+((cj2*x3472*x3476))+(((-1.0)*x3473*x3478))+(((-1.0)*x3474*x3475))+(((-113.0)*x3472*x3473))+((x3472*x3476))+((x3472*x3479))+((x3472*x3480))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3481.value)*((x3475+x3472))), ((x3482.value)*((((x3475*x3479))+((x3475*x3476))+(((-113.0)*x3473*x3475))+((x3475*x3480))+((x3477*x3478))+(((-1.0)*x3472*x3474))+((cj2*x3475*x3476))+((cj2*x3472*x3476))+(((-1.0)*x3473*x3478))+(((-1.0)*x3474*x3475))+(((-113.0)*x3472*x3473))+((x3472*x3476))+((x3472*x3479))+((x3472*x3480))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3483=IKsin(j0);
IkReal x3484=IKcos(j0);
IkReal x3485=((0.0565)*cj5);
IkReal x3486=(r10*sj5);
IkReal x3487=((0.09)*sj2);
IkReal x3488=((1.0)*cj5);
IkReal x3489=(r00*sj5);
IkReal x3490=((0.09)*cj2);
IkReal x3491=(sj1*x3483);
IkReal x3492=(cj1*x3483);
IkReal x3493=(cj1*x3484);
IkReal x3494=(sj1*x3484);
evalcond[0]=((((-1.0)*r01*x3488))+(((-1.0)*sj2*x3491))+(((-1.0)*x3489))+((cj2*x3492)));
evalcond[1]=((((-1.0)*r11*x3488))+(((-1.0)*cj2*x3493))+(((-1.0)*x3486))+((sj2*x3494)));
evalcond[2]=((((-1.0)*r01*x3485))+(((-0.09)*x3491))+(((1.0e-7)*x3492))+(((-1.0)*x3487*x3492))+(((-1.0)*px))+(((-1.0)*x3490*x3491))+(((0.0565)*x3484))+(((-0.0565)*x3489)));
evalcond[3]=((((-1.0e-7)*x3493))+(((0.09)*x3494))+(((-1.0)*py))+(((-1.0)*r11*x3485))+(((0.0565)*x3483))+((x3490*x3494))+((x3487*x3493))+(((-0.0565)*x3486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3495=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3495;
j4eval[1]=IKsign(x3495);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3496=((1.0)*cj5);
IkReal x3497=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3496)));
j4eval[0]=x3497;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3496))))));
j4eval[2]=IKsign(x3497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3498=((1.0)*sj0);
IkReal x3499=((1.0)*sj5);
IkReal x3500=((((-1.0)*cj5*r21))+(((-1.0)*r20*x3499)));
j4eval[0]=x3500;
j4eval[1]=((IKabs(((((-1.0)*r02*x3498))+((cj0*r12)))))+(IKabs((((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*cj5*r00*x3498))+(((-1.0)*cj0*r11*x3499))))));
j4eval[2]=IKsign(x3500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3501=((-1.0)*r20);
IkReal x3503 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3503)==0){
continue;
}
IkReal x3502=pow(x3503,-0.5);
CheckValue<IkReal> x3504 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3501),IKFAST_ATAN2_MAGTHRESH);
if(!x3504.valid){
continue;
}
IkReal gconst130=((-1.0)*(x3504.value));
IkReal gconst131=(r21*x3502);
IkReal gconst132=(x3501*x3502);
CheckValue<IkReal> x3505 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3505.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3505.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3506=((-1.0)*r20);
IkReal x3507=x3502;
CheckValue<IkReal> x3509 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3506),IKFAST_ATAN2_MAGTHRESH);
if(!x3509.valid){
continue;
}
IkReal x3508=((-1.0)*(x3509.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst131;
cj5=gconst132;
j5=x3508;
IkReal gconst130=x3508;
IkReal gconst131=(r21*x3507);
IkReal gconst132=(x3506*x3507);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3510=((-1.0)*r20);
IkReal x3511=x3502;
CheckValue<IkReal> x3513 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3510),IKFAST_ATAN2_MAGTHRESH);
if(!x3513.valid){
continue;
}
IkReal x3512=((-1.0)*(x3513.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst131;
cj5=gconst132;
j5=x3512;
IkReal gconst130=x3512;
IkReal gconst131=(r21*x3511);
IkReal gconst132=(x3510*x3511);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3514=((-1.0)*r20);
IkReal x3515=x3502;
CheckValue<IkReal> x3517 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3514),IKFAST_ATAN2_MAGTHRESH);
if(!x3517.valid){
continue;
}
IkReal x3516=((-1.0)*(x3517.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst131;
cj5=gconst132;
j5=x3516;
IkReal gconst130=x3516;
IkReal gconst131=(r21*x3515);
IkReal gconst132=(x3514*x3515);
IkReal x3518=((1.0)*(r22*r22));
CheckValue<IkReal> x3522=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3518))),-1);
if(!x3522.valid){
continue;
}
IkReal x3519=x3522.value;
IkReal x3520=((1.0)*x3519);
IkReal x3521=((((-2.0)*x3519*(r20*r20)*(r21*r21)))+(((-1.0)*x3520*(r21*r21*r21*r21)))+(((-1.0)*x3518))+(((-1.0)*x3520*(r20*r20*r20*r20))));
j4eval[0]=x3521;
j4eval[1]=IKsign(x3521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3523=(gconst131*r21);
IkReal x3524=(sj1*sj2);
IkReal x3525=(cj1*cj2);
IkReal x3526=(gconst132*r20);
CheckValue<IkReal> x3527=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3523*x3523)))+(((-1.0)*(x3526*x3526)))+(((-1.0)*(r22*r22)))+(((2.0)*x3523*x3526)))),-1);
if(!x3527.valid){
continue;
}
CheckValue<IkReal> x3528 = IKatan2WithCheck(IkReal((((x3525*x3526))+(((-1.0)*x3524*x3526))+(((-1.0)*x3523*x3525))+((x3523*x3524)))),IkReal((((r22*x3525))+(((-1.0)*r22*x3524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3527.value)))+(x3528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3529=IKcos(j4);
IkReal x3530=IKsin(j4);
IkReal x3531=(gconst131*r01);
IkReal x3532=(gconst132*r00);
IkReal x3533=(gconst132*r10);
IkReal x3534=(cj2*sj1);
IkReal x3535=((1.0)*cj1);
IkReal x3536=(gconst131*r21);
IkReal x3537=(gconst131*r11);
IkReal x3538=(gconst132*r20);
IkReal x3539=((1.0)*x3529);
IkReal x3540=((1.0)*x3530);
evalcond[0]=(((r22*x3530))+(((-1.0)*x3538*x3539))+((x3529*x3536)));
evalcond[1]=(((r02*x3530))+cj0+((x3529*x3531))+(((-1.0)*x3532*x3539)));
evalcond[2]=(((r12*x3530))+sj0+(((-1.0)*x3533*x3539))+((x3529*x3537)));
evalcond[3]=((((-1.0)*x3538*x3540))+((sj1*sj2))+(((-1.0)*cj2*x3535))+((x3530*x3536))+(((-1.0)*r22*x3539)));
evalcond[4]=(((sj0*x3534))+(((-1.0)*r02*x3539))+((cj1*sj0*sj2))+(((-1.0)*x3532*x3540))+((x3530*x3531)));
evalcond[5]=((((-1.0)*r12*x3539))+(((-1.0)*x3533*x3540))+((x3530*x3537))+(((-1.0)*cj0*x3534))+(((-1.0)*cj0*sj2*x3535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3541=((1.0)*gconst132);
CheckValue<IkReal> x3542 = IKatan2WithCheck(IkReal((((cj0*gconst131*r21))+(((-1.0)*cj0*r20*x3541)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3542.valid){
continue;
}
CheckValue<IkReal> x3543=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r10))+(((-1.0)*r11*x3541)))),-1);
if(!x3543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3542.value)+(((1.5707963267949)*(x3543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3544=IKcos(j4);
IkReal x3545=IKsin(j4);
IkReal x3546=(gconst131*r01);
IkReal x3547=(gconst132*r00);
IkReal x3548=(gconst132*r10);
IkReal x3549=(cj2*sj1);
IkReal x3550=((1.0)*cj1);
IkReal x3551=(gconst131*r21);
IkReal x3552=(gconst131*r11);
IkReal x3553=(gconst132*r20);
IkReal x3554=((1.0)*x3544);
IkReal x3555=((1.0)*x3545);
evalcond[0]=((((-1.0)*x3553*x3554))+((x3544*x3551))+((r22*x3545)));
evalcond[1]=(((r02*x3545))+cj0+((x3544*x3546))+(((-1.0)*x3547*x3554)));
evalcond[2]=(sj0+(((-1.0)*x3548*x3554))+((r12*x3545))+((x3544*x3552)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x3550))+(((-1.0)*x3553*x3555))+(((-1.0)*r22*x3554))+((x3545*x3551)));
evalcond[4]=(((sj0*x3549))+((cj1*sj0*sj2))+((x3545*x3546))+(((-1.0)*x3547*x3555))+(((-1.0)*r02*x3554)));
evalcond[5]=((((-1.0)*x3548*x3555))+(((-1.0)*r12*x3554))+((x3545*x3552))+(((-1.0)*cj0*sj2*x3550))+(((-1.0)*cj0*x3549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3556=IKPowWithIntegerCheck(IKsign((((gconst132*r01))+((gconst131*r00)))),-1);
if(!x3556.valid){
continue;
}
CheckValue<IkReal> x3557 = IKatan2WithCheck(IkReal(((((-1.0)*gconst132*r20*sj0))+((gconst131*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3556.value)))+(x3557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3558=IKcos(j4);
IkReal x3559=IKsin(j4);
IkReal x3560=(gconst131*r01);
IkReal x3561=(gconst132*r00);
IkReal x3562=(gconst132*r10);
IkReal x3563=(cj2*sj1);
IkReal x3564=((1.0)*cj1);
IkReal x3565=(gconst131*r21);
IkReal x3566=(gconst131*r11);
IkReal x3567=(gconst132*r20);
IkReal x3568=((1.0)*x3558);
IkReal x3569=((1.0)*x3559);
evalcond[0]=((((-1.0)*x3567*x3568))+((r22*x3559))+((x3558*x3565)));
evalcond[1]=(cj0+(((-1.0)*x3561*x3568))+((r02*x3559))+((x3558*x3560)));
evalcond[2]=(sj0+((r12*x3559))+(((-1.0)*x3562*x3568))+((x3558*x3566)));
evalcond[3]=(((x3559*x3565))+(((-1.0)*cj2*x3564))+((sj1*sj2))+(((-1.0)*r22*x3568))+(((-1.0)*x3567*x3569)));
evalcond[4]=(((x3559*x3560))+(((-1.0)*r02*x3568))+((sj0*x3563))+(((-1.0)*x3561*x3569))+((cj1*sj0*sj2)));
evalcond[5]=(((x3559*x3566))+(((-1.0)*r12*x3568))+(((-1.0)*x3562*x3569))+(((-1.0)*cj0*x3563))+(((-1.0)*cj0*sj2*x3564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3570=((-1.0)*r21);
IkReal x3572 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3572)==0){
continue;
}
IkReal x3571=pow(x3572,-0.5);
CheckValue<IkReal> x3573 = IKatan2WithCheck(IkReal(x3570),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3573.valid){
continue;
}
IkReal gconst133=((3.14159265358979)+(((-1.0)*(x3573.value))));
IkReal gconst134=(x3570*x3571);
IkReal gconst135=((1.0)*r20*x3571);
CheckValue<IkReal> x3574 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3574.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3574.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3575=((-1.0)*r21);
CheckValue<IkReal> x3578 = IKatan2WithCheck(IkReal(x3575),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3578.valid){
continue;
}
IkReal x3576=((1.0)*(x3578.value));
IkReal x3577=x3571;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x3576)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x3576)));
IkReal gconst134=(x3575*x3577);
IkReal gconst135=((1.0)*r20*x3577);
IkReal x3579=r22*r22;
IkReal x3580=((1.0)*x3579);
CheckValue<IkReal> x3584=IKPowWithIntegerCheck(((-1.0)+x3579),-1);
if(!x3584.valid){
continue;
}
IkReal x3581=x3584.value;
if((((1.0)+(((-1.0)*x3580)))) < -0.00001)
continue;
IkReal x3582=IKsqrt(((1.0)+(((-1.0)*x3580))));
IkReal x3583=(sj0*x3581*x3582);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3583+(((-1.0)*x3580*x3583))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3585=((-1.0)*r21);
CheckValue<IkReal> x3588 = IKatan2WithCheck(IkReal(x3585),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3588.valid){
continue;
}
IkReal x3586=((1.0)*(x3588.value));
IkReal x3587=x3571;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x3586)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x3586)));
IkReal gconst134=(x3585*x3587);
IkReal gconst135=((1.0)*r20*x3587);
IkReal x3589=r22*r22;
IkReal x3590=((1.0)*x3589);
CheckValue<IkReal> x3594=IKPowWithIntegerCheck(((-1.0)+x3589),-1);
if(!x3594.valid){
continue;
}
IkReal x3591=x3594.value;
if((((1.0)+(((-1.0)*x3590)))) < -0.00001)
continue;
IkReal x3592=IKsqrt(((1.0)+(((-1.0)*x3590))));
IkReal x3593=(cj0*x3591*x3592);
j4eval[0]=((IKabs(((((-1.0)*x3590*x3593))+x3593)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3595=((-1.0)*r21);
CheckValue<IkReal> x3598 = IKatan2WithCheck(IkReal(x3595),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3598.valid){
continue;
}
IkReal x3596=((1.0)*(x3598.value));
IkReal x3597=x3571;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x3596)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x3596)));
IkReal gconst134=(x3595*x3597);
IkReal gconst135=((1.0)*r20*x3597);
IkReal x3599=r22*r22;
IkReal x3600=(cj0*r12);
IkReal x3601=((1.0)*r02*sj0);
CheckValue<IkReal> x3605=IKPowWithIntegerCheck(((-1.0)+x3599),-1);
if(!x3605.valid){
continue;
}
IkReal x3602=x3605.value;
if((((1.0)+(((-1.0)*x3599)))) < -0.00001)
continue;
IkReal x3603=IKsqrt(((1.0)+(((-1.0)*x3599))));
IkReal x3604=(r22*x3602*x3603);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x3601*x3604))+((x3600*x3604)))))+(IKabs((x3600+(((-1.0)*x3601))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3606=((1.0)*gconst135);
IkReal x3607=((1.0)*gconst134);
CheckValue<IkReal> x3608 = IKatan2WithCheck(IkReal((((cj0*gconst135*r10))+((gconst134*r01*sj0))+(((-1.0)*r00*sj0*x3606))+(((-1.0)*cj0*r11*x3607)))),IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3608.valid){
continue;
}
CheckValue<IkReal> x3609=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3606))+(((-1.0)*r20*x3607)))),-1);
if(!x3609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3608.value)+(((1.5707963267949)*(x3609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3610=IKcos(j4);
IkReal x3611=IKsin(j4);
IkReal x3612=(cj2*sj1);
IkReal x3613=(gconst135*r10);
IkReal x3614=(gconst135*r00);
IkReal x3615=(gconst135*r20);
IkReal x3616=(gconst134*r11);
IkReal x3617=((1.0)*cj1);
IkReal x3618=((1.0)*x3610);
IkReal x3619=((1.0)*x3611);
IkReal x3620=(gconst134*x3611);
IkReal x3621=(gconst134*x3610);
evalcond[0]=(((r21*x3621))+((r22*x3611))+(((-1.0)*x3615*x3618)));
evalcond[1]=(cj0+((r02*x3611))+((r01*x3621))+(((-1.0)*x3614*x3618)));
evalcond[2]=(sj0+(((-1.0)*x3613*x3618))+((x3610*x3616))+((r12*x3611)));
evalcond[3]=(((r21*x3620))+(((-1.0)*cj2*x3617))+((sj1*sj2))+(((-1.0)*x3615*x3619))+(((-1.0)*r22*x3618)));
evalcond[4]=(((r01*x3620))+(((-1.0)*r02*x3618))+((cj1*sj0*sj2))+(((-1.0)*x3614*x3619))+((sj0*x3612)));
evalcond[5]=((((-1.0)*cj0*sj2*x3617))+(((-1.0)*r12*x3618))+(((-1.0)*x3613*x3619))+((x3611*x3616))+(((-1.0)*cj0*x3612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3622=((1.0)*gconst135);
CheckValue<IkReal> x3623 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3622))+((cj0*gconst134*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3623.valid){
continue;
}
CheckValue<IkReal> x3624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3622))+(((-1.0)*gconst134*r10)))),-1);
if(!x3624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3623.value)+(((1.5707963267949)*(x3624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3625=IKcos(j4);
IkReal x3626=IKsin(j4);
IkReal x3627=(cj2*sj1);
IkReal x3628=(gconst135*r10);
IkReal x3629=(gconst135*r00);
IkReal x3630=(gconst135*r20);
IkReal x3631=(gconst134*r11);
IkReal x3632=((1.0)*cj1);
IkReal x3633=((1.0)*x3625);
IkReal x3634=((1.0)*x3626);
IkReal x3635=(gconst134*x3626);
IkReal x3636=(gconst134*x3625);
evalcond[0]=((((-1.0)*x3630*x3633))+((r21*x3636))+((r22*x3626)));
evalcond[1]=(cj0+((r02*x3626))+((r01*x3636))+(((-1.0)*x3629*x3633)));
evalcond[2]=(((x3625*x3631))+(((-1.0)*x3628*x3633))+sj0+((r12*x3626)));
evalcond[3]=((((-1.0)*cj2*x3632))+(((-1.0)*x3630*x3634))+((sj1*sj2))+(((-1.0)*r22*x3633))+((r21*x3635)));
evalcond[4]=(((sj0*x3627))+((cj1*sj0*sj2))+(((-1.0)*r02*x3633))+((r01*x3635))+(((-1.0)*x3629*x3634)));
evalcond[5]=((((-1.0)*x3628*x3634))+(((-1.0)*r12*x3633))+(((-1.0)*cj0*sj2*x3632))+(((-1.0)*cj0*x3627))+((x3626*x3631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3637 = IKatan2WithCheck(IkReal(((((-1.0)*gconst135*r20*sj0))+((gconst134*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3637.valid){
continue;
}
CheckValue<IkReal> x3638=IKPowWithIntegerCheck(IKsign((((gconst135*r01))+((gconst134*r00)))),-1);
if(!x3638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3637.value)+(((1.5707963267949)*(x3638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3639=IKcos(j4);
IkReal x3640=IKsin(j4);
IkReal x3641=(cj2*sj1);
IkReal x3642=(gconst135*r10);
IkReal x3643=(gconst135*r00);
IkReal x3644=(gconst135*r20);
IkReal x3645=(gconst134*r11);
IkReal x3646=((1.0)*cj1);
IkReal x3647=((1.0)*x3639);
IkReal x3648=((1.0)*x3640);
IkReal x3649=(gconst134*x3640);
IkReal x3650=(gconst134*x3639);
evalcond[0]=(((r21*x3650))+(((-1.0)*x3644*x3647))+((r22*x3640)));
evalcond[1]=(cj0+(((-1.0)*x3643*x3647))+((r02*x3640))+((r01*x3650)));
evalcond[2]=(sj0+((r12*x3640))+((x3639*x3645))+(((-1.0)*x3642*x3647)));
evalcond[3]=((((-1.0)*cj2*x3646))+((sj1*sj2))+(((-1.0)*x3644*x3648))+((r21*x3649))+(((-1.0)*r22*x3647)));
evalcond[4]=(((r01*x3649))+(((-1.0)*x3643*x3648))+((cj1*sj0*sj2))+((sj0*x3641))+(((-1.0)*r02*x3647)));
evalcond[5]=((((-1.0)*cj0*sj2*x3646))+(((-1.0)*cj0*x3641))+(((-1.0)*r12*x3647))+(((-1.0)*x3642*x3648))+((x3640*x3645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3651=((-1.0)*r10);
IkReal x3653 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3653)==0){
continue;
}
IkReal x3652=pow(x3653,-0.5);
CheckValue<IkReal> x3654 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3651),IKFAST_ATAN2_MAGTHRESH);
if(!x3654.valid){
continue;
}
IkReal gconst136=((-1.0)*(x3654.value));
IkReal gconst137=(r11*x3652);
IkReal gconst138=(x3651*x3652);
CheckValue<IkReal> x3655 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3655.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3655.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3656=((-1.0)*r10);
IkReal x3657=x3652;
CheckValue<IkReal> x3659 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3656),IKFAST_ATAN2_MAGTHRESH);
if(!x3659.valid){
continue;
}
IkReal x3658=((-1.0)*(x3659.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst137;
cj5=gconst138;
j5=x3658;
IkReal gconst136=x3658;
IkReal gconst137=(r11*x3657);
IkReal gconst138=(x3656*x3657);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3660=((-1.0)*r10);
IkReal x3661=x3652;
CheckValue<IkReal> x3663 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3660),IKFAST_ATAN2_MAGTHRESH);
if(!x3663.valid){
continue;
}
IkReal x3662=((-1.0)*(x3663.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst137;
cj5=gconst138;
j5=x3662;
IkReal gconst136=x3662;
IkReal gconst137=(r11*x3661);
IkReal gconst138=(x3660*x3661);
IkReal x3664=r12*r12;
IkReal x3665=(r02*sj0);
IkReal x3666=((1.0)*x3664);
CheckValue<IkReal> x3670=IKPowWithIntegerCheck(((-1.0)+x3664),-1);
if(!x3670.valid){
continue;
}
IkReal x3667=x3670.value;
if((((1.0)+(((-1.0)*x3666)))) < -0.00001)
continue;
IkReal x3668=IKsqrt(((1.0)+(((-1.0)*x3666))));
IkReal x3669=(cj0*x3667*x3668);
j4eval[0]=((IKabs(((((-1.0)*x3665))+((cj0*r12)))))+(IKabs(((((-1.0)*x3666*x3669))+((r12*x3665*x3667*x3668))+x3669))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3671=((-1.0)*r10);
IkReal x3672=x3652;
CheckValue<IkReal> x3674 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3671),IKFAST_ATAN2_MAGTHRESH);
if(!x3674.valid){
continue;
}
IkReal x3673=((-1.0)*(x3674.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst137;
cj5=gconst138;
j5=x3673;
IkReal gconst136=x3673;
IkReal gconst137=(r11*x3672);
IkReal gconst138=(x3671*x3672);
IkReal x3675=r12*r12;
IkReal x3676=((1.0)+(((-1.0)*x3675)));
IkReal x3677=(cj1*cj2*r22);
IkReal x3678=(r22*sj1*sj2);
CheckValue<IkReal> x3685=IKPowWithIntegerCheck(x3676,-1);
if(!x3685.valid){
continue;
}
IkReal x3679=x3685.value;
CheckValue<IkReal> x3686=IKPowWithIntegerCheck(((-1.0)+x3675),-1);
if(!x3686.valid){
continue;
}
IkReal x3680=x3686.value;
IkReal x3681=((1.0)*x3679);
if((x3676) < -0.00001)
continue;
IkReal x3682=IKsqrt(x3676);
IkReal x3683=(r12*x3680*x3682);
IkReal x3684=((((-1.0)*x3681*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x3679))+(((-1.0)*x3681*(r11*r11)*(r21*r21))));
j4eval[0]=x3684;
j4eval[1]=((IKabs((x3677+(((-1.0)*x3678)))))+(IKabs((((x3678*x3683))+(((-1.0)*x3677*x3683))))));
j4eval[2]=IKsign(x3684);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3687=(gconst138*r20);
IkReal x3688=(gconst137*r21);
IkReal x3689=(cj1*cj2);
IkReal x3690=((1.0)*sj1*sj2);
CheckValue<IkReal> x3691=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x3688*x3688)))+(((-1.0)*(x3687*x3687)))+(((2.0)*x3687*x3688)))),-1);
if(!x3691.valid){
continue;
}
CheckValue<IkReal> x3692 = IKatan2WithCheck(IkReal(((((-1.0)*x3687*x3690))+((x3687*x3689))+((sj1*sj2*x3688))+(((-1.0)*x3688*x3689)))),IkReal(((((-1.0)*r22*x3690))+((r22*x3689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3691.value)))+(x3692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3693=IKcos(j4);
IkReal x3694=IKsin(j4);
IkReal x3695=(cj2*sj1);
IkReal x3696=((1.0)*cj1);
IkReal x3697=((1.0)*x3693);
IkReal x3698=(gconst137*x3693);
IkReal x3699=(gconst137*x3694);
IkReal x3700=((1.0)*gconst138*x3694);
evalcond[0]=(((r21*x3698))+((r22*x3694))+(((-1.0)*gconst138*r20*x3697)));
evalcond[1]=(((r01*x3698))+cj0+((r02*x3694))+(((-1.0)*gconst138*r00*x3697)));
evalcond[2]=(sj0+((r11*x3698))+(((-1.0)*gconst138*r10*x3697))+((r12*x3694)));
evalcond[3]=((((-1.0)*r22*x3697))+((sj1*sj2))+((r21*x3699))+(((-1.0)*r20*x3700))+(((-1.0)*cj2*x3696)));
evalcond[4]=(((r01*x3699))+(((-1.0)*r00*x3700))+((cj1*sj0*sj2))+(((-1.0)*r02*x3697))+((sj0*x3695)));
evalcond[5]=((((-1.0)*cj0*x3695))+(((-1.0)*r10*x3700))+(((-1.0)*r12*x3697))+((r11*x3699))+(((-1.0)*cj0*sj2*x3696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3701=((1.0)*sj0);
IkReal x3702=((1.0)*gconst137);
CheckValue<IkReal> x3703 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x3702))+((gconst137*r01*sj0))+((cj0*gconst138*r10))+(((-1.0)*gconst138*r00*x3701)))),IkReal(((((-1.0)*r02*x3701))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3703.valid){
continue;
}
CheckValue<IkReal> x3704=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst138*r21))+(((-1.0)*r20*x3702)))),-1);
if(!x3704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3703.value)+(((1.5707963267949)*(x3704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3705=IKcos(j4);
IkReal x3706=IKsin(j4);
IkReal x3707=(cj2*sj1);
IkReal x3708=((1.0)*cj1);
IkReal x3709=((1.0)*x3705);
IkReal x3710=(gconst137*x3705);
IkReal x3711=(gconst137*x3706);
IkReal x3712=((1.0)*gconst138*x3706);
evalcond[0]=(((r21*x3710))+(((-1.0)*gconst138*r20*x3709))+((r22*x3706)));
evalcond[1]=(cj0+(((-1.0)*gconst138*r00*x3709))+((r01*x3710))+((r02*x3706)));
evalcond[2]=(((r11*x3710))+((r12*x3706))+sj0+(((-1.0)*gconst138*r10*x3709)));
evalcond[3]=((((-1.0)*cj2*x3708))+((sj1*sj2))+(((-1.0)*r20*x3712))+((r21*x3711))+(((-1.0)*r22*x3709)));
evalcond[4]=(((sj0*x3707))+(((-1.0)*r02*x3709))+(((-1.0)*r00*x3712))+((r01*x3711))+((cj1*sj0*sj2)));
evalcond[5]=(((r11*x3711))+(((-1.0)*cj0*x3707))+(((-1.0)*cj0*sj2*x3708))+(((-1.0)*r10*x3712))+(((-1.0)*r12*x3709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3713=IKPowWithIntegerCheck(IKsign((((gconst138*r01))+((gconst137*r00)))),-1);
if(!x3713.valid){
continue;
}
CheckValue<IkReal> x3714 = IKatan2WithCheck(IkReal(((((-1.0)*gconst138*r20*sj0))+((gconst137*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3713.value)))+(x3714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3715=IKcos(j4);
IkReal x3716=IKsin(j4);
IkReal x3717=(cj2*sj1);
IkReal x3718=((1.0)*cj1);
IkReal x3719=((1.0)*x3715);
IkReal x3720=(gconst137*x3715);
IkReal x3721=(gconst137*x3716);
IkReal x3722=((1.0)*gconst138*x3716);
evalcond[0]=((((-1.0)*gconst138*r20*x3719))+((r22*x3716))+((r21*x3720)));
evalcond[1]=(cj0+((r01*x3720))+(((-1.0)*gconst138*r00*x3719))+((r02*x3716)));
evalcond[2]=(sj0+(((-1.0)*gconst138*r10*x3719))+((r12*x3716))+((r11*x3720)));
evalcond[3]=((((-1.0)*cj2*x3718))+(((-1.0)*r20*x3722))+((sj1*sj2))+(((-1.0)*r22*x3719))+((r21*x3721)));
evalcond[4]=(((sj0*x3717))+(((-1.0)*r02*x3719))+((r01*x3721))+(((-1.0)*r00*x3722))+((cj1*sj0*sj2)));
evalcond[5]=((((-1.0)*cj0*x3717))+((r11*x3721))+(((-1.0)*cj0*sj2*x3718))+(((-1.0)*r12*x3719))+(((-1.0)*r10*x3722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3723=((-1.0)*r11);
IkReal x3725 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3725)==0){
continue;
}
IkReal x3724=pow(x3725,-0.5);
CheckValue<IkReal> x3726 = IKatan2WithCheck(IkReal(x3723),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3726.valid){
continue;
}
IkReal gconst139=((3.14159265358979)+(((-1.0)*(x3726.value))));
IkReal gconst140=(x3723*x3724);
IkReal gconst141=((1.0)*r10*x3724);
CheckValue<IkReal> x3727 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3727.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3727.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3728=((-1.0)*r11);
CheckValue<IkReal> x3731 = IKatan2WithCheck(IkReal(x3728),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3731.valid){
continue;
}
IkReal x3729=((1.0)*(x3731.value));
IkReal x3730=x3724;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst140;
cj5=gconst141;
j5=((3.14159265)+(((-1.0)*x3729)));
IkReal gconst139=((3.14159265358979)+(((-1.0)*x3729)));
IkReal gconst140=(x3728*x3730);
IkReal gconst141=((1.0)*r10*x3730);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x3732=((-1.0)*r11);
CheckValue<IkReal> x3735 = IKatan2WithCheck(IkReal(x3732),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3735.valid){
continue;
}
IkReal x3733=((1.0)*(x3735.value));
IkReal x3734=x3724;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst140;
cj5=gconst141;
j5=((3.14159265)+(((-1.0)*x3733)));
IkReal gconst139=((3.14159265358979)+(((-1.0)*x3733)));
IkReal gconst140=(x3732*x3734);
IkReal gconst141=((1.0)*r10*x3734);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3736=((1.0)*sj0);
IkReal x3737=((1.0)*gconst140);
CheckValue<IkReal> x3738=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst141*r21))+(((-1.0)*r20*x3737)))),-1);
if(!x3738.valid){
continue;
}
CheckValue<IkReal> x3739 = IKatan2WithCheck(IkReal((((cj0*gconst141*r10))+(((-1.0)*cj0*r11*x3737))+(((-1.0)*gconst141*r00*x3736))+((gconst140*r01*sj0)))),IkReal((((cj0*r12))+(((-1.0)*r02*x3736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3738.value)))+(x3739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3740=IKcos(j4);
IkReal x3741=IKsin(j4);
IkReal x3742=(cj2*sj1);
IkReal x3743=((1.0)*cj1);
IkReal x3744=(gconst140*x3741);
IkReal x3745=(gconst140*x3740);
IkReal x3746=((1.0)*x3740);
IkReal x3747=(gconst141*x3746);
IkReal x3748=((1.0)*gconst141*x3741);
evalcond[0]=((((-1.0)*r20*x3747))+((r22*x3741))+((r21*x3745)));
evalcond[1]=(((r01*x3745))+(((-1.0)*r00*x3747))+cj0+((r02*x3741)));
evalcond[2]=(sj0+((r12*x3741))+((r11*x3745))+(((-1.0)*r10*x3747)));
evalcond[3]=((((-1.0)*r22*x3746))+(((-1.0)*r20*x3748))+(((-1.0)*cj2*x3743))+((sj1*sj2))+((r21*x3744)));
evalcond[4]=(((r01*x3744))+(((-1.0)*r00*x3748))+((sj0*x3742))+((cj1*sj0*sj2))+(((-1.0)*r02*x3746)));
evalcond[5]=((((-1.0)*cj0*x3742))+(((-1.0)*cj0*sj2*x3743))+(((-1.0)*r12*x3746))+((r11*x3744))+(((-1.0)*r10*x3748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3749=((1.0)*gconst141);
CheckValue<IkReal> x3750 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3749))+((cj0*gconst140*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3750.valid){
continue;
}
CheckValue<IkReal> x3751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3749))+(((-1.0)*gconst140*r10)))),-1);
if(!x3751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3750.value)+(((1.5707963267949)*(x3751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3752=IKcos(j4);
IkReal x3753=IKsin(j4);
IkReal x3754=(cj2*sj1);
IkReal x3755=((1.0)*cj1);
IkReal x3756=(gconst140*x3753);
IkReal x3757=(gconst140*x3752);
IkReal x3758=((1.0)*x3752);
IkReal x3759=(gconst141*x3758);
IkReal x3760=((1.0)*gconst141*x3753);
evalcond[0]=((((-1.0)*r20*x3759))+((r22*x3753))+((r21*x3757)));
evalcond[1]=(((r01*x3757))+(((-1.0)*r00*x3759))+cj0+((r02*x3753)));
evalcond[2]=(sj0+((r12*x3753))+((r11*x3757))+(((-1.0)*r10*x3759)));
evalcond[3]=((((-1.0)*r20*x3760))+(((-1.0)*r22*x3758))+(((-1.0)*cj2*x3755))+((sj1*sj2))+((r21*x3756)));
evalcond[4]=(((r01*x3756))+((sj0*x3754))+((cj1*sj0*sj2))+(((-1.0)*r00*x3760))+(((-1.0)*r02*x3758)));
evalcond[5]=((((-1.0)*r10*x3760))+(((-1.0)*cj0*x3754))+(((-1.0)*cj0*sj2*x3755))+(((-1.0)*r12*x3758))+((r11*x3756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3761=IKPowWithIntegerCheck(IKsign((((gconst140*r00))+((gconst141*r01)))),-1);
if(!x3761.valid){
continue;
}
CheckValue<IkReal> x3762 = IKatan2WithCheck(IkReal((((gconst140*r21*sj0))+(((-1.0)*gconst141*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3761.value)))+(x3762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3763=IKcos(j4);
IkReal x3764=IKsin(j4);
IkReal x3765=(cj2*sj1);
IkReal x3766=((1.0)*cj1);
IkReal x3767=(gconst140*x3764);
IkReal x3768=(gconst140*x3763);
IkReal x3769=((1.0)*x3763);
IkReal x3770=(gconst141*x3769);
IkReal x3771=((1.0)*gconst141*x3764);
evalcond[0]=(((r22*x3764))+(((-1.0)*r20*x3770))+((r21*x3768)));
evalcond[1]=(((r02*x3764))+cj0+(((-1.0)*r00*x3770))+((r01*x3768)));
evalcond[2]=(sj0+((r11*x3768))+((r12*x3764))+(((-1.0)*r10*x3770)));
evalcond[3]=((((-1.0)*r20*x3771))+((r21*x3767))+(((-1.0)*r22*x3769))+((sj1*sj2))+(((-1.0)*cj2*x3766)));
evalcond[4]=(((cj1*sj0*sj2))+((sj0*x3765))+(((-1.0)*r00*x3771))+(((-1.0)*r02*x3769))+((r01*x3767)));
evalcond[5]=(((r11*x3767))+(((-1.0)*cj0*sj2*x3766))+(((-1.0)*r12*x3769))+(((-1.0)*cj0*x3765))+(((-1.0)*r10*x3771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3772=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3772;
j4eval[1]=IKsign(x3772);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3773=((1.0)*cj5);
IkReal x3774=((((-1.0)*r21*x3773))+(((-1.0)*r20*sj5)));
j4eval[0]=x3774;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3773))))));
j4eval[2]=IKsign(x3774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3775=cj5*cj5;
IkReal x3776=r11*r11;
IkReal x3777=(cj5*r10);
IkReal x3778=(r11*sj5);
IkReal x3779=((((2.0)*x3777*x3778))+((x3775*x3776))+(((-1.0)*x3776))+(((-1.0)*(r12*r12)))+(((-1.0)*x3775*(r10*r10))));
j4eval[0]=x3779;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x3777))+x3778))));
j4eval[2]=IKsign(x3779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3780=cj5*cj5;
IkReal x3781=r11*r11;
IkReal x3782=(cj5*r10);
IkReal x3783=(r11*sj5);
CheckValue<IkReal> x3784 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x3782))+x3783)),IKFAST_ATAN2_MAGTHRESH);
if(!x3784.valid){
continue;
}
CheckValue<IkReal> x3785=IKPowWithIntegerCheck(IKsign(((((2.0)*x3782*x3783))+(((-1.0)*x3781))+(((-1.0)*x3780*(r10*r10)))+(((-1.0)*(r12*r12)))+((x3780*x3781)))),-1);
if(!x3785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3784.value)+(((1.5707963267949)*(x3785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3786=IKcos(j4);
IkReal x3787=IKsin(j4);
IkReal x3788=(cj5*r00);
IkReal x3789=(cj5*r10);
IkReal x3790=(cj5*r20);
IkReal x3791=((1.0)*x3786);
IkReal x3792=((1.0)*x3787);
IkReal x3793=(sj5*x3786);
IkReal x3794=(sj5*x3787);
evalcond[0]=(((r21*x3793))+((r22*x3787))+(((-1.0)*x3790*x3791)));
evalcond[1]=(((r02*x3787))+((r01*x3793))+(((-1.0)*x3788*x3791)));
evalcond[2]=((1.0)+((r12*x3787))+(((-1.0)*x3789*x3791))+((r11*x3793)));
evalcond[3]=((((-1.0)*r12*x3791))+(((-1.0)*x3789*x3792))+((r11*x3794)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x3791))+((r01*x3794))+(((-1.0)*x3788*x3792)));
evalcond[5]=(((r21*x3794))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x3791))+(((-1.0)*x3790*x3792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3795=((1.0)*cj5);
CheckValue<IkReal> x3796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3795))+(((-1.0)*r20*sj5)))),-1);
if(!x3796.valid){
continue;
}
CheckValue<IkReal> x3797 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x3795)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3796.value)))+(x3797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3798=IKcos(j4);
IkReal x3799=IKsin(j4);
IkReal x3800=(cj5*r00);
IkReal x3801=(cj5*r10);
IkReal x3802=(cj5*r20);
IkReal x3803=((1.0)*x3798);
IkReal x3804=((1.0)*x3799);
IkReal x3805=(sj5*x3798);
IkReal x3806=(sj5*x3799);
evalcond[0]=(((r22*x3799))+((r21*x3805))+(((-1.0)*x3802*x3803)));
evalcond[1]=(((r01*x3805))+((r02*x3799))+(((-1.0)*x3800*x3803)));
evalcond[2]=((1.0)+((r11*x3805))+(((-1.0)*x3801*x3803))+((r12*x3799)));
evalcond[3]=(((r11*x3806))+(((-1.0)*x3801*x3804))+(((-1.0)*r12*x3803)));
evalcond[4]=(((cj2*sj1))+((r01*x3806))+((cj1*sj2))+(((-1.0)*x3800*x3804))+(((-1.0)*r02*x3803)));
evalcond[5]=(((r21*x3806))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3802*x3804))+(((-1.0)*r22*x3803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3807=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3807.valid){
continue;
}
CheckValue<IkReal> x3808 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3807.value)))+(x3808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3809=IKcos(j4);
IkReal x3810=IKsin(j4);
IkReal x3811=(cj5*r00);
IkReal x3812=(cj5*r10);
IkReal x3813=(cj5*r20);
IkReal x3814=((1.0)*x3809);
IkReal x3815=((1.0)*x3810);
IkReal x3816=(sj5*x3809);
IkReal x3817=(sj5*x3810);
evalcond[0]=(((r21*x3816))+(((-1.0)*x3813*x3814))+((r22*x3810)));
evalcond[1]=(((r02*x3810))+(((-1.0)*x3811*x3814))+((r01*x3816)));
evalcond[2]=((1.0)+((r12*x3810))+((r11*x3816))+(((-1.0)*x3812*x3814)));
evalcond[3]=((((-1.0)*r12*x3814))+((r11*x3817))+(((-1.0)*x3812*x3815)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x3814))+((cj1*sj2))+(((-1.0)*x3811*x3815))+((r01*x3817)));
evalcond[5]=((((-1.0)*r22*x3814))+((r21*x3817))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3813*x3815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3818=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3818;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x3818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3819=((1.0)*cj5);
IkReal x3820=((((-1.0)*r01*x3819))+(((-1.0)*r00*sj5)));
j4eval[0]=x3820;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3819)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3821=cj5*cj5;
IkReal x3822=r11*r11;
IkReal x3823=(r11*sj5);
IkReal x3824=(cj5*r10);
IkReal x3825=((r12*r12)+(((-1.0)*x3821*x3822))+((x3821*(r10*r10)))+x3822+(((-2.0)*x3823*x3824)));
j4eval[0]=x3825;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x3824))+x3823))));
j4eval[2]=IKsign(x3825);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3826=cj5*cj5;
IkReal x3827=r11*r11;
IkReal x3828=(cj5*r10);
IkReal x3829=(r11*sj5);
CheckValue<IkReal> x3830 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x3828))+x3829)),IKFAST_ATAN2_MAGTHRESH);
if(!x3830.valid){
continue;
}
CheckValue<IkReal> x3831=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3828*x3829))+(r12*r12)+((x3826*(r10*r10)))+x3827+(((-1.0)*x3826*x3827)))),-1);
if(!x3831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3830.value)+(((1.5707963267949)*(x3831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3832=IKcos(j4);
IkReal x3833=IKsin(j4);
IkReal x3834=(cj5*r00);
IkReal x3835=(cj5*r10);
IkReal x3836=((1.0)*cj2);
IkReal x3837=(cj5*r20);
IkReal x3838=((1.0)*x3832);
IkReal x3839=((1.0)*x3833);
IkReal x3840=(sj5*x3832);
IkReal x3841=(sj5*x3833);
evalcond[0]=(((r21*x3840))+(((-1.0)*x3837*x3838))+((r22*x3833)));
evalcond[1]=(((r02*x3833))+((r01*x3840))+(((-1.0)*x3834*x3838)));
evalcond[2]=((-1.0)+((r12*x3833))+(((-1.0)*x3835*x3838))+((r11*x3840)));
evalcond[3]=((((-1.0)*r12*x3838))+(((-1.0)*x3835*x3839))+((r11*x3841)));
evalcond[4]=(((r21*x3841))+((sj1*sj2))+(((-1.0)*r22*x3838))+(((-1.0)*cj1*x3836))+(((-1.0)*x3837*x3839)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x3841))+(((-1.0)*x3834*x3839))+(((-1.0)*sj1*x3836))+(((-1.0)*r02*x3838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3842=((1.0)*cj5);
CheckValue<IkReal> x3843 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x3842))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3843.valid){
continue;
}
CheckValue<IkReal> x3844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3842)))),-1);
if(!x3844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3843.value)+(((1.5707963267949)*(x3844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3845=IKcos(j4);
IkReal x3846=IKsin(j4);
IkReal x3847=(cj5*r00);
IkReal x3848=(cj5*r10);
IkReal x3849=((1.0)*cj2);
IkReal x3850=(cj5*r20);
IkReal x3851=((1.0)*x3845);
IkReal x3852=((1.0)*x3846);
IkReal x3853=(sj5*x3845);
IkReal x3854=(sj5*x3846);
evalcond[0]=(((r21*x3853))+(((-1.0)*x3850*x3851))+((r22*x3846)));
evalcond[1]=(((r01*x3853))+(((-1.0)*x3847*x3851))+((r02*x3846)));
evalcond[2]=((-1.0)+((r12*x3846))+((r11*x3853))+(((-1.0)*x3848*x3851)));
evalcond[3]=(((r11*x3854))+(((-1.0)*x3848*x3852))+(((-1.0)*r12*x3851)));
evalcond[4]=(((r21*x3854))+(((-1.0)*x3850*x3852))+((sj1*sj2))+(((-1.0)*cj1*x3849))+(((-1.0)*r22*x3851)));
evalcond[5]=((((-1.0)*sj1*x3849))+(((-1.0)*cj1*sj2))+((r01*x3854))+(((-1.0)*x3847*x3852))+(((-1.0)*r02*x3851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3855=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3855.valid){
continue;
}
CheckValue<IkReal> x3856 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3855.value)))+(x3856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3857=IKcos(j4);
IkReal x3858=IKsin(j4);
IkReal x3859=(cj5*r00);
IkReal x3860=(cj5*r10);
IkReal x3861=((1.0)*cj2);
IkReal x3862=(cj5*r20);
IkReal x3863=((1.0)*x3857);
IkReal x3864=((1.0)*x3858);
IkReal x3865=(sj5*x3857);
IkReal x3866=(sj5*x3858);
evalcond[0]=(((r21*x3865))+(((-1.0)*x3862*x3863))+((r22*x3858)));
evalcond[1]=(((r02*x3858))+(((-1.0)*x3859*x3863))+((r01*x3865)));
evalcond[2]=((-1.0)+((r11*x3865))+(((-1.0)*x3860*x3863))+((r12*x3858)));
evalcond[3]=(((r11*x3866))+(((-1.0)*x3860*x3864))+(((-1.0)*r12*x3863)));
evalcond[4]=(((r21*x3866))+((sj1*sj2))+(((-1.0)*cj1*x3861))+(((-1.0)*x3862*x3864))+(((-1.0)*r22*x3863)));
evalcond[5]=((((-1.0)*r02*x3863))+(((-1.0)*x3859*x3864))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3861))+((r01*x3866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3868 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3868)==0){
continue;
}
IkReal x3867=pow(x3868,-0.5);
CheckValue<IkReal> x3869 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3869.valid){
continue;
}
IkReal gconst142=((-1.0)*(x3869.value));
IkReal gconst143=((-1.0)*r01*x3867);
IkReal gconst144=(r00*x3867);
CheckValue<IkReal> x3870 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3870.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3870.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3873 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3873.valid){
continue;
}
IkReal x3871=((-1.0)*(x3873.value));
IkReal x3872=x3867;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst143;
cj5=gconst144;
j5=x3871;
IkReal gconst142=x3871;
IkReal gconst143=((-1.0)*r01*x3872);
IkReal gconst144=(r00*x3872);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3876 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3876.valid){
continue;
}
IkReal x3874=((-1.0)*(x3876.value));
IkReal x3875=x3867;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst143;
cj5=gconst144;
j5=x3874;
IkReal gconst142=x3874;
IkReal gconst143=((-1.0)*r01*x3875);
IkReal gconst144=(r00*x3875);
IkReal x3877=r02*r02;
IkReal x3878=((1.0)*sj0);
IkReal x3879=(cj0*r12);
CheckValue<IkReal> x3883=IKPowWithIntegerCheck(((-1.0)+x3877),-1);
if(!x3883.valid){
continue;
}
IkReal x3880=x3883.value;
if((((1.0)+(((-1.0)*x3877)))) < -0.00001)
continue;
IkReal x3881=IKsqrt(((1.0)+(((-1.0)*x3877))));
IkReal x3882=(x3880*x3881);
j4eval[0]=((IKabs((((sj0*x3882))+((r02*x3879*x3882))+(((-1.0)*x3877*x3878*x3882)))))+(IKabs(((((-1.0)*r02*x3878))+x3879))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3886 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3886.valid){
continue;
}
IkReal x3884=((-1.0)*(x3886.value));
IkReal x3885=x3867;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst143;
cj5=gconst144;
j5=x3884;
IkReal gconst142=x3884;
IkReal gconst143=((-1.0)*r01*x3885);
IkReal gconst144=(r00*x3885);
IkReal x3887=r02*r02;
IkReal x3888=(cj1*cj2);
IkReal x3889=((1.0)+(((-1.0)*x3887)));
IkReal x3890=((1.0)*sj1*sj2);
CheckValue<IkReal> x3897=IKPowWithIntegerCheck(x3889,-1);
if(!x3897.valid){
continue;
}
IkReal x3891=x3897.value;
CheckValue<IkReal> x3898=IKPowWithIntegerCheck(((-1.0)+x3887),-1);
if(!x3898.valid){
continue;
}
IkReal x3892=x3898.value;
IkReal x3893=((1.0)*x3891);
if((x3889) < -0.00001)
continue;
IkReal x3894=IKsqrt(x3889);
IkReal x3895=(r02*r22*x3892*x3894);
IkReal x3896=((((-1.0)*(r22*r22)))+(((-2.0)*r00*r01*r20*r21*x3891))+(((-1.0)*x3893*(r01*r01)*(r21*r21)))+(((-1.0)*x3893*(r00*r00)*(r20*r20))));
j4eval[0]=x3896;
j4eval[1]=((IKabs((((r22*x3888))+(((-1.0)*r22*x3890)))))+(IKabs((((x3888*x3895))+(((-1.0)*x3890*x3895))))));
j4eval[2]=IKsign(x3896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3899=(gconst144*r20);
IkReal x3900=(cj1*cj2);
IkReal x3901=(sj1*sj2);
IkReal x3902=(gconst143*r21);
CheckValue<IkReal> x3903=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3899*x3899)))+(((-1.0)*(x3902*x3902)))+(((-1.0)*(r22*r22)))+(((2.0)*x3899*x3902)))),-1);
if(!x3903.valid){
continue;
}
CheckValue<IkReal> x3904 = IKatan2WithCheck(IkReal((((x3901*x3902))+(((-1.0)*x3900*x3902))+((x3899*x3900))+(((-1.0)*x3899*x3901)))),IkReal((((r22*x3900))+(((-1.0)*r22*x3901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3903.value)))+(x3904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3905=IKcos(j4);
IkReal x3906=IKsin(j4);
IkReal x3907=(cj2*sj1);
IkReal x3908=(gconst144*r00);
IkReal x3909=(gconst143*r11);
IkReal x3910=((1.0)*cj1);
IkReal x3911=(gconst144*r10);
IkReal x3912=(gconst144*r20);
IkReal x3913=((1.0)*x3905);
IkReal x3914=((1.0)*x3906);
IkReal x3915=(gconst143*x3905);
IkReal x3916=(gconst143*x3906);
evalcond[0]=((((-1.0)*x3912*x3913))+((r21*x3915))+((r22*x3906)));
evalcond[1]=(cj0+(((-1.0)*x3908*x3913))+((r01*x3915))+((r02*x3906)));
evalcond[2]=((((-1.0)*x3911*x3913))+sj0+((x3905*x3909))+((r12*x3906)));
evalcond[3]=((((-1.0)*x3912*x3914))+((r21*x3916))+(((-1.0)*r22*x3913))+((sj1*sj2))+(((-1.0)*cj2*x3910)));
evalcond[4]=((((-1.0)*r02*x3913))+((sj0*x3907))+(((-1.0)*x3908*x3914))+((cj1*sj0*sj2))+((r01*x3916)));
evalcond[5]=((((-1.0)*x3911*x3914))+((x3906*x3909))+(((-1.0)*cj0*x3907))+(((-1.0)*r12*x3913))+(((-1.0)*cj0*sj2*x3910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3917=((1.0)*sj0);
IkReal x3918=((1.0)*gconst143);
CheckValue<IkReal> x3919 = IKatan2WithCheck(IkReal((((gconst143*r01*sj0))+(((-1.0)*gconst144*r00*x3917))+(((-1.0)*cj0*r11*x3918))+((cj0*gconst144*r10)))),IkReal(((((-1.0)*r02*x3917))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3919.valid){
continue;
}
CheckValue<IkReal> x3920=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3918))+(((-1.0)*gconst144*r21)))),-1);
if(!x3920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3919.value)+(((1.5707963267949)*(x3920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3921=IKcos(j4);
IkReal x3922=IKsin(j4);
IkReal x3923=(cj2*sj1);
IkReal x3924=(gconst144*r00);
IkReal x3925=(gconst143*r11);
IkReal x3926=((1.0)*cj1);
IkReal x3927=(gconst144*r10);
IkReal x3928=(gconst144*r20);
IkReal x3929=((1.0)*x3921);
IkReal x3930=((1.0)*x3922);
IkReal x3931=(gconst143*x3921);
IkReal x3932=(gconst143*x3922);
evalcond[0]=(((r21*x3931))+(((-1.0)*x3928*x3929))+((r22*x3922)));
evalcond[1]=(((r01*x3931))+cj0+(((-1.0)*x3924*x3929))+((r02*x3922)));
evalcond[2]=(((x3921*x3925))+sj0+((r12*x3922))+(((-1.0)*x3927*x3929)));
evalcond[3]=(((r21*x3932))+((sj1*sj2))+(((-1.0)*r22*x3929))+(((-1.0)*x3928*x3930))+(((-1.0)*cj2*x3926)));
evalcond[4]=(((r01*x3932))+(((-1.0)*r02*x3929))+((cj1*sj0*sj2))+((sj0*x3923))+(((-1.0)*x3924*x3930)));
evalcond[5]=((((-1.0)*cj0*x3923))+(((-1.0)*cj0*sj2*x3926))+(((-1.0)*r12*x3929))+(((-1.0)*x3927*x3930))+((x3922*x3925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3933=((1.0)*gconst144);
CheckValue<IkReal> x3934=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r10))+(((-1.0)*r11*x3933)))),-1);
if(!x3934.valid){
continue;
}
CheckValue<IkReal> x3935 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3933))+((cj0*gconst143*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3934.value)))+(x3935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3936=IKcos(j4);
IkReal x3937=IKsin(j4);
IkReal x3938=(cj2*sj1);
IkReal x3939=(gconst144*r00);
IkReal x3940=(gconst143*r11);
IkReal x3941=((1.0)*cj1);
IkReal x3942=(gconst144*r10);
IkReal x3943=(gconst144*r20);
IkReal x3944=((1.0)*x3936);
IkReal x3945=((1.0)*x3937);
IkReal x3946=(gconst143*x3936);
IkReal x3947=(gconst143*x3937);
evalcond[0]=(((r22*x3937))+(((-1.0)*x3943*x3944))+((r21*x3946)));
evalcond[1]=(((r01*x3946))+cj0+(((-1.0)*x3939*x3944))+((r02*x3937)));
evalcond[2]=(sj0+(((-1.0)*x3942*x3944))+((r12*x3937))+((x3936*x3940)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x3944))+(((-1.0)*cj2*x3941))+(((-1.0)*x3943*x3945))+((r21*x3947)));
evalcond[4]=(((r01*x3947))+((sj0*x3938))+((cj1*sj0*sj2))+(((-1.0)*r02*x3944))+(((-1.0)*x3939*x3945)));
evalcond[5]=((((-1.0)*cj0*x3938))+(((-1.0)*x3942*x3945))+((x3937*x3940))+(((-1.0)*r12*x3944))+(((-1.0)*cj0*sj2*x3941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3949 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3949)==0){
continue;
}
IkReal x3948=pow(x3949,-0.5);
CheckValue<IkReal> x3950 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3950.valid){
continue;
}
IkReal gconst145=((3.14159265358979)+(((-1.0)*(x3950.value))));
IkReal gconst146=((1.0)*r01*x3948);
IkReal gconst147=((-1.0)*r00*x3948);
CheckValue<IkReal> x3951 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3951.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3951.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x3954 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3954.valid){
continue;
}
IkReal x3952=((1.0)*(x3954.value));
IkReal x3953=x3948;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst146;
cj5=gconst147;
j5=((3.14159265)+(((-1.0)*x3952)));
IkReal gconst145=((3.14159265358979)+(((-1.0)*x3952)));
IkReal gconst146=((1.0)*r01*x3953);
IkReal gconst147=((-1.0)*r00*x3953);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3957 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3957.valid){
continue;
}
IkReal x3955=((1.0)*(x3957.value));
IkReal x3956=x3948;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst146;
cj5=gconst147;
j5=((3.14159265)+(((-1.0)*x3955)));
IkReal gconst145=((3.14159265358979)+(((-1.0)*x3955)));
IkReal gconst146=((1.0)*r01*x3956);
IkReal gconst147=((-1.0)*r00*x3956);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3958=((1.0)*sj0);
IkReal x3959=((1.0)*gconst146);
CheckValue<IkReal> x3960=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst147*r21))+(((-1.0)*r20*x3959)))),-1);
if(!x3960.valid){
continue;
}
CheckValue<IkReal> x3961 = IKatan2WithCheck(IkReal(((((-1.0)*gconst147*r00*x3958))+((gconst146*r01*sj0))+((cj0*gconst147*r10))+(((-1.0)*cj0*r11*x3959)))),IkReal(((((-1.0)*r02*x3958))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3960.value)))+(x3961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3962=IKcos(j4);
IkReal x3963=IKsin(j4);
IkReal x3964=(cj2*sj1);
IkReal x3965=(gconst147*r10);
IkReal x3966=((1.0)*cj1);
IkReal x3967=(gconst147*r20);
IkReal x3968=(gconst147*r00);
IkReal x3969=((1.0)*x3962);
IkReal x3970=(gconst146*x3963);
IkReal x3971=(gconst146*x3962);
IkReal x3972=((1.0)*x3963);
evalcond[0]=(((r22*x3963))+((r21*x3971))+(((-1.0)*x3967*x3969)));
evalcond[1]=(cj0+((r02*x3963))+(((-1.0)*x3968*x3969))+((r01*x3971)));
evalcond[2]=(sj0+(((-1.0)*x3965*x3969))+((r11*x3971))+((r12*x3963)));
evalcond[3]=((((-1.0)*cj2*x3966))+((sj1*sj2))+((r21*x3970))+(((-1.0)*r22*x3969))+(((-1.0)*x3967*x3972)));
evalcond[4]=((((-1.0)*r02*x3969))+(((-1.0)*x3968*x3972))+((cj1*sj0*sj2))+((r01*x3970))+((sj0*x3964)));
evalcond[5]=((((-1.0)*cj0*x3964))+(((-1.0)*x3965*x3972))+(((-1.0)*cj0*sj2*x3966))+((r11*x3970))+(((-1.0)*r12*x3969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3973=((1.0)*gconst147);
CheckValue<IkReal> x3974=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r10))+(((-1.0)*r11*x3973)))),-1);
if(!x3974.valid){
continue;
}
CheckValue<IkReal> x3975 = IKatan2WithCheck(IkReal((((cj0*gconst146*r21))+(((-1.0)*cj0*r20*x3973)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3974.value)))+(x3975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3976=IKcos(j4);
IkReal x3977=IKsin(j4);
IkReal x3978=(cj2*sj1);
IkReal x3979=(gconst147*r10);
IkReal x3980=((1.0)*cj1);
IkReal x3981=(gconst147*r20);
IkReal x3982=(gconst147*r00);
IkReal x3983=((1.0)*x3976);
IkReal x3984=(gconst146*x3977);
IkReal x3985=(gconst146*x3976);
IkReal x3986=((1.0)*x3977);
evalcond[0]=(((r21*x3985))+(((-1.0)*x3981*x3983))+((r22*x3977)));
evalcond[1]=(cj0+((r02*x3977))+((r01*x3985))+(((-1.0)*x3982*x3983)));
evalcond[2]=(((r11*x3985))+sj0+((r12*x3977))+(((-1.0)*x3979*x3983)));
evalcond[3]=((((-1.0)*cj2*x3980))+((r21*x3984))+(((-1.0)*x3981*x3986))+(((-1.0)*r22*x3983))+((sj1*sj2)));
evalcond[4]=(((r01*x3984))+(((-1.0)*x3982*x3986))+((cj1*sj0*sj2))+((sj0*x3978))+(((-1.0)*r02*x3983)));
evalcond[5]=((((-1.0)*r12*x3983))+((r11*x3984))+(((-1.0)*x3979*x3986))+(((-1.0)*cj0*sj2*x3980))+(((-1.0)*cj0*x3978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3987=IKPowWithIntegerCheck(IKsign((((gconst147*r01))+((gconst146*r00)))),-1);
if(!x3987.valid){
continue;
}
CheckValue<IkReal> x3988 = IKatan2WithCheck(IkReal(((((-1.0)*gconst147*r20*sj0))+((gconst146*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3987.value)))+(x3988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3989=IKcos(j4);
IkReal x3990=IKsin(j4);
IkReal x3991=(cj2*sj1);
IkReal x3992=(gconst147*r10);
IkReal x3993=((1.0)*cj1);
IkReal x3994=(gconst147*r20);
IkReal x3995=(gconst147*r00);
IkReal x3996=((1.0)*x3989);
IkReal x3997=(gconst146*x3990);
IkReal x3998=(gconst146*x3989);
IkReal x3999=((1.0)*x3990);
evalcond[0]=(((r21*x3998))+((r22*x3990))+(((-1.0)*x3994*x3996)));
evalcond[1]=(cj0+(((-1.0)*x3995*x3996))+((r02*x3990))+((r01*x3998)));
evalcond[2]=(sj0+(((-1.0)*x3992*x3996))+((r12*x3990))+((r11*x3998)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x3993))+((r21*x3997))+(((-1.0)*r22*x3996))+(((-1.0)*x3994*x3999)));
evalcond[4]=((((-1.0)*x3995*x3999))+(((-1.0)*r02*x3996))+((cj1*sj0*sj2))+((r01*x3997))+((sj0*x3991)));
evalcond[5]=((((-1.0)*cj0*sj2*x3993))+(((-1.0)*r12*x3996))+(((-1.0)*x3992*x3999))+((r11*x3997))+(((-1.0)*cj0*x3991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4000=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4000;
j4eval[1]=IKsign(x4000);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4001=((1.0)*cj5);
IkReal x4002=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4001)));
j4eval[0]=x4002;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4001))))));
j4eval[2]=IKsign(x4002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4003=cj5*cj5;
IkReal x4004=r01*r01;
IkReal x4005=(r01*sj5);
IkReal x4006=(cj5*r00);
IkReal x4007=((((-1.0)*x4003*(r00*r00)))+(((-1.0)*x4004))+(((-1.0)*(r02*r02)))+(((2.0)*x4005*x4006))+((x4003*x4004)));
j4eval[0]=x4007;
j4eval[1]=IKsign(x4007);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4006))+x4005))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4008=cj5*cj5;
IkReal x4009=r01*r01;
IkReal x4010=(r01*sj5);
IkReal x4011=(cj5*r00);
CheckValue<IkReal> x4012=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4009))+(((-1.0)*(r02*r02)))+(((-1.0)*x4008*(r00*r00)))+((x4008*x4009))+(((2.0)*x4010*x4011)))),-1);
if(!x4012.valid){
continue;
}
CheckValue<IkReal> x4013 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4011))+x4010)),IKFAST_ATAN2_MAGTHRESH);
if(!x4013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4012.value)))+(x4013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4014=IKcos(j4);
IkReal x4015=IKsin(j4);
IkReal x4016=(cj5*r00);
IkReal x4017=(cj5*r10);
IkReal x4018=((1.0)*cj2);
IkReal x4019=(cj5*r20);
IkReal x4020=((1.0)*x4014);
IkReal x4021=((1.0)*x4015);
IkReal x4022=(sj5*x4014);
IkReal x4023=(sj5*x4015);
evalcond[0]=(((r21*x4022))+((r22*x4015))+(((-1.0)*x4019*x4020)));
evalcond[1]=(((r12*x4015))+((r11*x4022))+(((-1.0)*x4017*x4020)));
evalcond[2]=((1.0)+((r02*x4015))+((r01*x4022))+(((-1.0)*x4016*x4020)));
evalcond[3]=((((-1.0)*r02*x4020))+((r01*x4023))+(((-1.0)*x4016*x4021)));
evalcond[4]=((((-1.0)*r22*x4020))+(((-1.0)*cj1*x4018))+((sj1*sj2))+((r21*x4023))+(((-1.0)*x4019*x4021)));
evalcond[5]=((((-1.0)*r12*x4020))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4018))+((r11*x4023))+(((-1.0)*x4017*x4021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4024=((1.0)*cj5);
CheckValue<IkReal> x4025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4024))+(((-1.0)*r10*sj5)))),-1);
if(!x4025.valid){
continue;
}
CheckValue<IkReal> x4026 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x4024)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4025.value)))+(x4026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4027=IKcos(j4);
IkReal x4028=IKsin(j4);
IkReal x4029=(cj5*r00);
IkReal x4030=(cj5*r10);
IkReal x4031=((1.0)*cj2);
IkReal x4032=(cj5*r20);
IkReal x4033=((1.0)*x4027);
IkReal x4034=((1.0)*x4028);
IkReal x4035=(sj5*x4027);
IkReal x4036=(sj5*x4028);
evalcond[0]=(((r21*x4035))+((r22*x4028))+(((-1.0)*x4032*x4033)));
evalcond[1]=((((-1.0)*x4030*x4033))+((r12*x4028))+((r11*x4035)));
evalcond[2]=((1.0)+((r01*x4035))+(((-1.0)*x4029*x4033))+((r02*x4028)));
evalcond[3]=(((r01*x4036))+(((-1.0)*x4029*x4034))+(((-1.0)*r02*x4033)));
evalcond[4]=(((r21*x4036))+(((-1.0)*r22*x4033))+(((-1.0)*cj1*x4031))+((sj1*sj2))+(((-1.0)*x4032*x4034)));
evalcond[5]=((((-1.0)*x4030*x4034))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x4033))+((r11*x4036))+(((-1.0)*sj1*x4031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4037=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4037.valid){
continue;
}
CheckValue<IkReal> x4038 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4037.value)))+(x4038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4039=IKcos(j4);
IkReal x4040=IKsin(j4);
IkReal x4041=(cj5*r00);
IkReal x4042=(cj5*r10);
IkReal x4043=((1.0)*cj2);
IkReal x4044=(cj5*r20);
IkReal x4045=((1.0)*x4039);
IkReal x4046=((1.0)*x4040);
IkReal x4047=(sj5*x4039);
IkReal x4048=(sj5*x4040);
evalcond[0]=(((r22*x4040))+((r21*x4047))+(((-1.0)*x4044*x4045)));
evalcond[1]=(((r12*x4040))+((r11*x4047))+(((-1.0)*x4042*x4045)));
evalcond[2]=((1.0)+((r02*x4040))+(((-1.0)*x4041*x4045))+((r01*x4047)));
evalcond[3]=((((-1.0)*x4041*x4046))+(((-1.0)*r02*x4045))+((r01*x4048)));
evalcond[4]=(((r21*x4048))+(((-1.0)*x4044*x4046))+((sj1*sj2))+(((-1.0)*cj1*x4043))+(((-1.0)*r22*x4045)));
evalcond[5]=((((-1.0)*sj1*x4043))+(((-1.0)*r12*x4045))+(((-1.0)*cj1*sj2))+((r11*x4048))+(((-1.0)*x4042*x4046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4049=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4049;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4050=((1.0)*cj5);
IkReal x4051=((((-1.0)*r21*x4050))+(((-1.0)*r20*sj5)));
j4eval[0]=x4051;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4050))))));
j4eval[2]=IKsign(x4051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4052=cj5*cj5;
IkReal x4053=r01*r01;
IkReal x4054=(cj5*r00);
IkReal x4055=(r01*sj5);
IkReal x4056=((((-1.0)*x4052*x4053))+((x4052*(r00*r00)))+x4053+(r02*r02)+(((-2.0)*x4054*x4055)));
j4eval[0]=x4056;
j4eval[1]=IKsign(x4056);
j4eval[2]=((IKabs(r02))+(IKabs((x4055+(((-1.0)*x4054))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4057=cj5*cj5;
IkReal x4058=r01*r01;
IkReal x4059=(r01*sj5);
IkReal x4060=(cj5*r00);
CheckValue<IkReal> x4061=IKPowWithIntegerCheck(IKsign((x4058+(((-2.0)*x4059*x4060))+((x4057*(r00*r00)))+(r02*r02)+(((-1.0)*x4057*x4058)))),-1);
if(!x4061.valid){
continue;
}
CheckValue<IkReal> x4062 = IKatan2WithCheck(IkReal(r02),IkReal((x4059+(((-1.0)*x4060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4061.value)))+(x4062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4063=IKcos(j4);
IkReal x4064=IKsin(j4);
IkReal x4065=(cj5*r00);
IkReal x4066=(cj5*r10);
IkReal x4067=(cj5*r20);
IkReal x4068=((1.0)*x4063);
IkReal x4069=((1.0)*x4064);
IkReal x4070=(sj5*x4063);
IkReal x4071=(sj5*x4064);
evalcond[0]=((((-1.0)*x4067*x4068))+((r22*x4064))+((r21*x4070)));
evalcond[1]=((((-1.0)*x4066*x4068))+((r12*x4064))+((r11*x4070)));
evalcond[2]=((-1.0)+(((-1.0)*x4065*x4068))+((r02*x4064))+((r01*x4070)));
evalcond[3]=((((-1.0)*x4065*x4069))+((r01*x4071))+(((-1.0)*r02*x4068)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x4068))+(((-1.0)*x4066*x4069))+((cj1*sj2))+((r11*x4071)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4067*x4069))+(((-1.0)*r22*x4068))+((r21*x4071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4072=((1.0)*cj5);
CheckValue<IkReal> x4073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4072))+(((-1.0)*r20*sj5)))),-1);
if(!x4073.valid){
continue;
}
CheckValue<IkReal> x4074 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4072))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4073.value)))+(x4074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4075=IKcos(j4);
IkReal x4076=IKsin(j4);
IkReal x4077=(cj5*r00);
IkReal x4078=(cj5*r10);
IkReal x4079=(cj5*r20);
IkReal x4080=((1.0)*x4075);
IkReal x4081=((1.0)*x4076);
IkReal x4082=(sj5*x4075);
IkReal x4083=(sj5*x4076);
evalcond[0]=(((r21*x4082))+((r22*x4076))+(((-1.0)*x4079*x4080)));
evalcond[1]=(((r12*x4076))+((r11*x4082))+(((-1.0)*x4078*x4080)));
evalcond[2]=((-1.0)+((r01*x4082))+((r02*x4076))+(((-1.0)*x4077*x4080)));
evalcond[3]=(((r01*x4083))+(((-1.0)*r02*x4080))+(((-1.0)*x4077*x4081)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x4080))+((cj1*sj2))+((r11*x4083))+(((-1.0)*x4078*x4081)));
evalcond[5]=(((r21*x4083))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x4080))+(((-1.0)*x4079*x4081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4084 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4084.valid){
continue;
}
CheckValue<IkReal> x4085=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4084.value)+(((1.5707963267949)*(x4085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4086=IKcos(j4);
IkReal x4087=IKsin(j4);
IkReal x4088=(cj5*r00);
IkReal x4089=(cj5*r10);
IkReal x4090=(cj5*r20);
IkReal x4091=((1.0)*x4086);
IkReal x4092=((1.0)*x4087);
IkReal x4093=(sj5*x4086);
IkReal x4094=(sj5*x4087);
evalcond[0]=((((-1.0)*x4090*x4091))+((r21*x4093))+((r22*x4087)));
evalcond[1]=((((-1.0)*x4089*x4091))+((r11*x4093))+((r12*x4087)));
evalcond[2]=((-1.0)+((r01*x4093))+((r02*x4087))+(((-1.0)*x4088*x4091)));
evalcond[3]=(((r01*x4094))+(((-1.0)*r02*x4091))+(((-1.0)*x4088*x4092)));
evalcond[4]=((((-1.0)*r12*x4091))+((cj2*sj1))+(((-1.0)*x4089*x4092))+((cj1*sj2))+((r11*x4094)));
evalcond[5]=((((-1.0)*x4090*x4092))+(((-1.0)*r22*x4091))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x4094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4095=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4095);
rxp1_1=(px*r21);
rxp1_2=(r11*x4095);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4096=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4096);
rxp1_1=(px*r21);
rxp1_2=(r11*x4096);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4097=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4097);
rxp1_1=(px*r21);
rxp1_2=(r11*x4097);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4100=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4100.valid){
continue;
}
IkReal x4098=x4100.value;
IkReal x4099=(cj0*x4098);
sj4array[0]=(((cj1*sj2*x4099))+((cj2*sj1*x4099)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4101=IKcos(j4);
IkReal x4102=IKsin(j4);
IkReal x4103=(r21*sj5);
IkReal x4104=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x4101);
evalcond[1]=(cj0+((r02*x4102)));
evalcond[2]=(((x4101*x4103))+(((-1.0)*x4101*x4104)));
evalcond[3]=((((-1.0)*cj5*r10*x4101))+((r11*sj5*x4101)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4102*x4104))+((x4102*x4103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4106=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4106.valid){
continue;
}
IkReal x4105=x4106.value;
sj4array[0]=((((-1.0)*sj1*sj2*x4105))+((cj1*cj2*x4105)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4107=IKcos(j4);
IkReal x4108=IKsin(j4);
IkReal x4109=((1.0)*cj5);
IkReal x4110=((1.0)*cj0);
IkReal x4111=(sj5*x4107);
evalcond[0]=((-1.0)*r02*x4107);
evalcond[1]=(cj0+((r02*x4108)));
evalcond[2]=(((r21*x4111))+(((-1.0)*r20*x4107*x4109)));
evalcond[3]=((((-1.0)*r10*x4107*x4109))+((r11*x4111)));
evalcond[4]=((((-1.0)*cj2*sj1*x4110))+((r11*sj5*x4108))+(((-1.0)*r10*x4108*x4109))+(((-1.0)*cj1*sj2*x4110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4112=IKPowWithIntegerCheck(r02,-1);
if(!x4112.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x4112.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4113=IKcos(j4);
IkReal x4114=IKsin(j4);
IkReal x4115=(r21*sj5);
IkReal x4116=((1.0)*cj0);
IkReal x4117=(r11*sj5);
IkReal x4118=((1.0)*cj5*x4114);
IkReal x4119=((1.0)*cj5*x4113);
evalcond[0]=((-1.0)*r02*x4113);
evalcond[1]=((((-1.0)*r20*x4119))+((x4113*x4115)));
evalcond[2]=((((-1.0)*r10*x4119))+((x4113*x4117)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x4118))+((x4114*x4115)));
evalcond[4]=((((-1.0)*cj2*sj1*x4116))+(((-1.0)*r10*x4118))+((x4114*x4117))+(((-1.0)*cj1*sj2*x4116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4120=((1.0)*sj0);
IkReal x4121=((1.0)*sj5);
CheckValue<IkReal> x4122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4121))+(((-1.0)*cj5*r21)))),-1);
if(!x4122.valid){
continue;
}
CheckValue<IkReal> x4123 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r00*x4120))+((cj0*cj5*r10))+(((-1.0)*cj0*r11*x4121))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x4120))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4122.value)))+(x4123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4124=IKcos(j4);
IkReal x4125=IKsin(j4);
IkReal x4126=(cj5*r00);
IkReal x4127=(cj5*r10);
IkReal x4128=(cj2*sj1);
IkReal x4129=((1.0)*cj1);
IkReal x4130=(cj5*r20);
IkReal x4131=((1.0)*x4124);
IkReal x4132=((1.0)*x4125);
IkReal x4133=(sj5*x4124);
IkReal x4134=(sj5*x4125);
evalcond[0]=((((-1.0)*x4130*x4131))+((r21*x4133))+((r22*x4125)));
evalcond[1]=((((-1.0)*x4126*x4131))+cj0+((r02*x4125))+((r01*x4133)));
evalcond[2]=(((r12*x4125))+(((-1.0)*x4127*x4131))+sj0+((r11*x4133)));
evalcond[3]=((((-1.0)*x4130*x4132))+(((-1.0)*cj2*x4129))+((sj1*sj2))+((r21*x4134))+(((-1.0)*r22*x4131)));
evalcond[4]=(((sj0*x4128))+(((-1.0)*x4126*x4132))+((r01*x4134))+(((-1.0)*r02*x4131))+((cj1*sj0*sj2)));
evalcond[5]=((((-1.0)*x4127*x4132))+((r11*x4134))+(((-1.0)*r12*x4131))+(((-1.0)*cj0*x4128))+(((-1.0)*cj0*sj2*x4129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4135=((1.0)*cj5);
CheckValue<IkReal> x4136=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4135)))),-1);
if(!x4136.valid){
continue;
}
CheckValue<IkReal> x4137 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4135)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4136.value)))+(x4137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4138=IKcos(j4);
IkReal x4139=IKsin(j4);
IkReal x4140=(cj5*r00);
IkReal x4141=(cj5*r10);
IkReal x4142=(cj2*sj1);
IkReal x4143=((1.0)*cj1);
IkReal x4144=(cj5*r20);
IkReal x4145=((1.0)*x4138);
IkReal x4146=((1.0)*x4139);
IkReal x4147=(sj5*x4138);
IkReal x4148=(sj5*x4139);
evalcond[0]=(((r22*x4139))+(((-1.0)*x4144*x4145))+((r21*x4147)));
evalcond[1]=(cj0+((r01*x4147))+(((-1.0)*x4140*x4145))+((r02*x4139)));
evalcond[2]=(sj0+(((-1.0)*x4141*x4145))+((r11*x4147))+((r12*x4139)));
evalcond[3]=((((-1.0)*x4144*x4146))+((r21*x4148))+((sj1*sj2))+(((-1.0)*r22*x4145))+(((-1.0)*cj2*x4143)));
evalcond[4]=(((r01*x4148))+(((-1.0)*r02*x4145))+(((-1.0)*x4140*x4146))+((sj0*x4142))+((cj1*sj0*sj2)));
evalcond[5]=((((-1.0)*x4141*x4146))+(((-1.0)*cj0*sj2*x4143))+((r11*x4148))+(((-1.0)*cj0*x4142))+(((-1.0)*r12*x4145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4149 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4149.valid){
continue;
}
CheckValue<IkReal> x4150=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4149.value)+(((1.5707963267949)*(x4150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4151=IKcos(j4);
IkReal x4152=IKsin(j4);
IkReal x4153=(cj5*r00);
IkReal x4154=(cj5*r10);
IkReal x4155=(cj2*sj1);
IkReal x4156=((1.0)*cj1);
IkReal x4157=(cj5*r20);
IkReal x4158=((1.0)*x4151);
IkReal x4159=((1.0)*x4152);
IkReal x4160=(sj5*x4151);
IkReal x4161=(sj5*x4152);
evalcond[0]=(((r22*x4152))+(((-1.0)*x4157*x4158))+((r21*x4160)));
evalcond[1]=(((r01*x4160))+((r02*x4152))+cj0+(((-1.0)*x4153*x4158)));
evalcond[2]=(sj0+((r12*x4152))+(((-1.0)*x4154*x4158))+((r11*x4160)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4157*x4159))+((r21*x4161))+(((-1.0)*r22*x4158))+(((-1.0)*cj2*x4156)));
evalcond[4]=(((r01*x4161))+(((-1.0)*r02*x4158))+(((-1.0)*x4153*x4159))+((sj0*x4155))+((cj1*sj0*sj2)));
evalcond[5]=((((-1.0)*cj0*sj2*x4156))+(((-1.0)*x4154*x4159))+((r11*x4161))+(((-1.0)*r12*x4158))+(((-1.0)*cj0*x4155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4162=r21*r21;
IkReal x4163=cj5*cj5;
IkReal x4164=(cj1*cj2);
IkReal x4165=(r21*sj5);
IkReal x4166=(sj1*sj2);
IkReal x4167=(cj5*r20);
CheckValue<IkReal> x4168 = IKatan2WithCheck(IkReal((((x4165*x4166))+(((-1.0)*x4164*x4165))+(((-1.0)*x4166*x4167))+((x4164*x4167)))),IkReal((((r22*x4164))+(((-1.0)*r22*x4166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4168.valid){
continue;
}
CheckValue<IkReal> x4169=IKPowWithIntegerCheck(IKsign(((((2.0)*x4165*x4167))+(((-1.0)*x4162))+(((-1.0)*(r22*r22)))+(((-1.0)*x4163*(r20*r20)))+((x4162*x4163)))),-1);
if(!x4169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4168.value)+(((1.5707963267949)*(x4169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4170=IKcos(j4);
IkReal x4171=IKsin(j4);
IkReal x4172=(r21*sj5);
IkReal x4173=(cj5*r20);
IkReal x4174=((1.0)*x4170);
evalcond[0]=(((r22*x4171))+((x4170*x4172))+(((-1.0)*x4173*x4174)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x4174))+((x4171*x4172))+(((-1.0)*x4171*x4173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4175=(cj4*cj5);
IkReal x4176=((1.0)*sj4);
IkReal x4177=((1.0)*cj4*sj5);
if( IKabs((((r10*x4175))+(((-1.0)*r12*x4176))+(((-1.0)*r11*x4177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4177))+((r00*x4175))+(((-1.0)*r02*x4176)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x4175))+(((-1.0)*r12*x4176))+(((-1.0)*r11*x4177))))+IKsqr(((((-1.0)*r01*x4177))+((r00*x4175))+(((-1.0)*r02*x4176))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x4175))+(((-1.0)*r12*x4176))+(((-1.0)*r11*x4177))), ((((-1.0)*r01*x4177))+((r00*x4175))+(((-1.0)*r02*x4176))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4178=IKsin(j0);
IkReal x4179=IKcos(j0);
IkReal x4180=((0.0565)*cj5);
IkReal x4181=(r10*sj5);
IkReal x4182=((1.0)*sj2);
IkReal x4183=(r11*sj5);
IkReal x4184=((0.09)*sj2);
IkReal x4185=((1.0)*cj5);
IkReal x4186=((1.0)*cj2);
IkReal x4187=(r00*sj5);
IkReal x4188=((0.09)*cj2);
IkReal x4189=((1.0)*cj4);
IkReal x4190=(r01*sj5);
IkReal x4191=(sj1*x4178);
IkReal x4192=(cj1*x4179);
IkReal x4193=(cj1*x4178);
IkReal x4194=(sj1*x4179);
evalcond[0]=((((-1.0)*cj4*r00*x4185))+((r02*sj4))+x4179+((cj4*x4190)));
evalcond[1]=(x4178+((r12*sj4))+((cj4*x4183))+(((-1.0)*cj4*r10*x4185)));
evalcond[2]=((((-1.0)*r01*x4185))+(((-1.0)*x4187))+((cj2*x4193))+(((-1.0)*x4182*x4191)));
evalcond[3]=((((-1.0)*r11*x4185))+((sj2*x4194))+(((-1.0)*x4181))+(((-1.0)*x4186*x4192)));
evalcond[4]=(((sj2*x4193))+(((-1.0)*r00*sj4*x4185))+((cj2*x4191))+(((-1.0)*r02*x4189))+((sj4*x4190)));
evalcond[5]=((((-1.0)*r12*x4189))+(((-1.0)*x4186*x4194))+((sj4*x4183))+(((-1.0)*x4182*x4192))+(((-1.0)*r10*sj4*x4185)));
evalcond[6]=((((-1.0)*r01*x4180))+(((1.0e-7)*x4193))+(((-0.0565)*x4187))+(((0.0565)*x4179))+(((-1.0)*px))+(((-1.0)*x4184*x4193))+(((-1.0)*x4188*x4191))+(((-0.09)*x4191)));
evalcond[7]=((((-1.0)*r11*x4180))+(((-0.0565)*x4181))+(((0.0565)*x4178))+(((0.09)*x4194))+(((-1.0)*py))+((x4188*x4194))+((x4184*x4192))+(((-1.0e-7)*x4192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4195 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4195.valid){
continue;
}
CheckValue<IkReal> x4196=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x4196.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4195.value)+(((1.5707963267949)*(x4196.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4197=IKsin(j0);
IkReal x4198=IKcos(j0);
IkReal x4199=((0.0565)*cj5);
IkReal x4200=(r10*sj5);
IkReal x4201=((0.09)*sj2);
IkReal x4202=((1.0)*cj5);
IkReal x4203=(r00*sj5);
IkReal x4204=((0.09)*cj2);
IkReal x4205=(sj1*x4197);
IkReal x4206=(cj1*x4197);
IkReal x4207=(cj1*x4198);
IkReal x4208=(sj1*x4198);
evalcond[0]=((((-1.0)*sj2*x4205))+(((-1.0)*r01*x4202))+((cj2*x4206))+(((-1.0)*x4203)));
evalcond[1]=(((sj2*x4208))+(((-1.0)*r11*x4202))+(((-1.0)*x4200))+(((-1.0)*cj2*x4207)));
evalcond[2]=((((-1.0)*r01*x4199))+(((0.0565)*x4198))+(((-1.0)*x4201*x4206))+(((-1.0)*px))+(((-0.0565)*x4203))+(((1.0e-7)*x4206))+(((-1.0)*x4204*x4205))+(((-0.09)*x4205)));
evalcond[3]=((((0.09)*x4208))+(((-1.0)*r11*x4199))+((x4204*x4208))+(((0.0565)*x4197))+(((-1.0e-7)*x4207))+(((-1.0)*py))+((x4201*x4207))+(((-0.0565)*x4200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4209=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4209;
j4eval[1]=IKsign(x4209);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4210=((1.0)*cj5);
IkReal x4211=((((-1.0)*r11*x4210))+(((-1.0)*r10*sj5)));
j4eval[0]=x4211;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4210)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4211);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4212=((1.0)*sj0);
IkReal x4213=((1.0)*sj5);
IkReal x4214=((((-1.0)*r20*x4213))+(((-1.0)*cj5*r21)));
j4eval[0]=x4214;
j4eval[1]=((IKabs(((((-1.0)*cj5*r00*x4212))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x4213)))))+(IKabs(((((-1.0)*r02*x4212))+((cj0*r12))))));
j4eval[2]=IKsign(x4214);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4215=((-1.0)*r20);
IkReal x4217 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4217)==0){
continue;
}
IkReal x4216=pow(x4217,-0.5);
CheckValue<IkReal> x4218 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4215),IKFAST_ATAN2_MAGTHRESH);
if(!x4218.valid){
continue;
}
IkReal gconst130=((-1.0)*(x4218.value));
IkReal gconst131=(r21*x4216);
IkReal gconst132=(x4215*x4216);
CheckValue<IkReal> x4219 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4219.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4219.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4220=((-1.0)*r20);
IkReal x4221=x4216;
CheckValue<IkReal> x4223 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4220),IKFAST_ATAN2_MAGTHRESH);
if(!x4223.valid){
continue;
}
IkReal x4222=((-1.0)*(x4223.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst131;
cj5=gconst132;
j5=x4222;
IkReal gconst130=x4222;
IkReal gconst131=(r21*x4221);
IkReal gconst132=(x4220*x4221);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4224=((-1.0)*r20);
IkReal x4225=x4216;
CheckValue<IkReal> x4227 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4224),IKFAST_ATAN2_MAGTHRESH);
if(!x4227.valid){
continue;
}
IkReal x4226=((-1.0)*(x4227.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst131;
cj5=gconst132;
j5=x4226;
IkReal gconst130=x4226;
IkReal gconst131=(r21*x4225);
IkReal gconst132=(x4224*x4225);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4228=((-1.0)*r20);
IkReal x4229=x4216;
CheckValue<IkReal> x4231 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4228),IKFAST_ATAN2_MAGTHRESH);
if(!x4231.valid){
continue;
}
IkReal x4230=((-1.0)*(x4231.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst131;
cj5=gconst132;
j5=x4230;
IkReal gconst130=x4230;
IkReal gconst131=(r21*x4229);
IkReal gconst132=(x4228*x4229);
IkReal x4232=((1.0)*(r22*r22));
CheckValue<IkReal> x4236=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4232))),-1);
if(!x4236.valid){
continue;
}
IkReal x4233=x4236.value;
IkReal x4234=((1.0)*x4233);
IkReal x4235=((((-1.0)*x4232))+(((-1.0)*x4234*(r20*r20*r20*r20)))+(((-2.0)*x4233*(r20*r20)*(r21*r21)))+(((-1.0)*x4234*(r21*r21*r21*r21))));
j4eval[0]=x4235;
j4eval[1]=IKsign(x4235);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4237=(gconst131*r21);
IkReal x4238=(sj1*sj2);
IkReal x4239=(cj1*cj2);
IkReal x4240=(gconst132*r20);
CheckValue<IkReal> x4241 = IKatan2WithCheck(IkReal((((x4239*x4240))+((x4237*x4238))+(((-1.0)*x4238*x4240))+(((-1.0)*x4237*x4239)))),IkReal(((((-1.0)*r22*x4238))+((r22*x4239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4241.valid){
continue;
}
CheckValue<IkReal> x4242=IKPowWithIntegerCheck(IKsign(((((2.0)*x4237*x4240))+(((-1.0)*(x4240*x4240)))+(((-1.0)*(x4237*x4237)))+(((-1.0)*(r22*r22))))),-1);
if(!x4242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4241.value)+(((1.5707963267949)*(x4242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4243=IKcos(j4);
IkReal x4244=IKsin(j4);
IkReal x4245=(gconst131*r01);
IkReal x4246=(gconst132*r00);
IkReal x4247=(gconst132*r10);
IkReal x4248=(cj2*sj1);
IkReal x4249=((1.0)*cj1);
IkReal x4250=(gconst131*r21);
IkReal x4251=(gconst131*r11);
IkReal x4252=(gconst132*r20);
IkReal x4253=((1.0)*x4243);
IkReal x4254=((1.0)*x4244);
evalcond[0]=((((-1.0)*x4252*x4253))+((r22*x4244))+((x4243*x4250)));
evalcond[1]=(cj0+((x4243*x4245))+(((-1.0)*x4246*x4253))+((r02*x4244)));
evalcond[2]=(sj0+(((-1.0)*x4247*x4253))+((x4243*x4251))+((r12*x4244)));
evalcond[3]=((((-1.0)*x4252*x4254))+((x4244*x4250))+((sj1*sj2))+(((-1.0)*cj2*x4249))+(((-1.0)*r22*x4253)));
evalcond[4]=(((sj0*x4248))+(((-1.0)*x4246*x4254))+((cj1*sj0*sj2))+((x4244*x4245))+(((-1.0)*r02*x4253)));
evalcond[5]=(((x4244*x4251))+(((-1.0)*cj0*x4248))+(((-1.0)*x4247*x4254))+(((-1.0)*cj0*sj2*x4249))+(((-1.0)*r12*x4253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4255=((1.0)*gconst132);
CheckValue<IkReal> x4256 = IKatan2WithCheck(IkReal((((cj0*gconst131*r21))+(((-1.0)*cj0*r20*x4255)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4256.valid){
continue;
}
CheckValue<IkReal> x4257=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r10))+(((-1.0)*r11*x4255)))),-1);
if(!x4257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4256.value)+(((1.5707963267949)*(x4257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4258=IKcos(j4);
IkReal x4259=IKsin(j4);
IkReal x4260=(gconst131*r01);
IkReal x4261=(gconst132*r00);
IkReal x4262=(gconst132*r10);
IkReal x4263=(cj2*sj1);
IkReal x4264=((1.0)*cj1);
IkReal x4265=(gconst131*r21);
IkReal x4266=(gconst131*r11);
IkReal x4267=(gconst132*r20);
IkReal x4268=((1.0)*x4258);
IkReal x4269=((1.0)*x4259);
evalcond[0]=(((r22*x4259))+((x4258*x4265))+(((-1.0)*x4267*x4268)));
evalcond[1]=(cj0+((r02*x4259))+(((-1.0)*x4261*x4268))+((x4258*x4260)));
evalcond[2]=(sj0+((r12*x4259))+((x4258*x4266))+(((-1.0)*x4262*x4268)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x4268))+((x4259*x4265))+(((-1.0)*cj2*x4264))+(((-1.0)*x4267*x4269)));
evalcond[4]=(((cj1*sj0*sj2))+(((-1.0)*r02*x4268))+((x4259*x4260))+(((-1.0)*x4261*x4269))+((sj0*x4263)));
evalcond[5]=((((-1.0)*r12*x4268))+(((-1.0)*cj0*sj2*x4264))+(((-1.0)*cj0*x4263))+((x4259*x4266))+(((-1.0)*x4262*x4269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4270=IKPowWithIntegerCheck(IKsign((((gconst132*r01))+((gconst131*r00)))),-1);
if(!x4270.valid){
continue;
}
CheckValue<IkReal> x4271 = IKatan2WithCheck(IkReal(((((-1.0)*gconst132*r20*sj0))+((gconst131*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4270.value)))+(x4271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4272=IKcos(j4);
IkReal x4273=IKsin(j4);
IkReal x4274=(gconst131*r01);
IkReal x4275=(gconst132*r00);
IkReal x4276=(gconst132*r10);
IkReal x4277=(cj2*sj1);
IkReal x4278=((1.0)*cj1);
IkReal x4279=(gconst131*r21);
IkReal x4280=(gconst131*r11);
IkReal x4281=(gconst132*r20);
IkReal x4282=((1.0)*x4272);
IkReal x4283=((1.0)*x4273);
evalcond[0]=(((x4272*x4279))+(((-1.0)*x4281*x4282))+((r22*x4273)));
evalcond[1]=((((-1.0)*x4275*x4282))+((r02*x4273))+cj0+((x4272*x4274)));
evalcond[2]=(sj0+((r12*x4273))+(((-1.0)*x4276*x4282))+((x4272*x4280)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x4278))+(((-1.0)*r22*x4282))+((x4273*x4279))+(((-1.0)*x4281*x4283)));
evalcond[4]=((((-1.0)*x4275*x4283))+(((-1.0)*r02*x4282))+((cj1*sj0*sj2))+((sj0*x4277))+((x4273*x4274)));
evalcond[5]=((((-1.0)*cj0*sj2*x4278))+(((-1.0)*r12*x4282))+(((-1.0)*cj0*x4277))+(((-1.0)*x4276*x4283))+((x4273*x4280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4284=((-1.0)*r21);
IkReal x4286 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4286)==0){
continue;
}
IkReal x4285=pow(x4286,-0.5);
CheckValue<IkReal> x4287 = IKatan2WithCheck(IkReal(x4284),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4287.valid){
continue;
}
IkReal gconst133=((3.14159265358979)+(((-1.0)*(x4287.value))));
IkReal gconst134=(x4284*x4285);
IkReal gconst135=((1.0)*r20*x4285);
CheckValue<IkReal> x4288 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4288.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4288.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4289=((-1.0)*r21);
CheckValue<IkReal> x4292 = IKatan2WithCheck(IkReal(x4289),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4292.valid){
continue;
}
IkReal x4290=((1.0)*(x4292.value));
IkReal x4291=x4285;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x4290)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x4290)));
IkReal gconst134=(x4289*x4291);
IkReal gconst135=((1.0)*r20*x4291);
IkReal x4293=r22*r22;
IkReal x4294=((1.0)*x4293);
CheckValue<IkReal> x4298=IKPowWithIntegerCheck(((-1.0)+x4293),-1);
if(!x4298.valid){
continue;
}
IkReal x4295=x4298.value;
if((((1.0)+(((-1.0)*x4294)))) < -0.00001)
continue;
IkReal x4296=IKsqrt(((1.0)+(((-1.0)*x4294))));
IkReal x4297=(sj0*x4295*x4296);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4294*x4297))+x4297))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4299=((-1.0)*r21);
CheckValue<IkReal> x4302 = IKatan2WithCheck(IkReal(x4299),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4302.valid){
continue;
}
IkReal x4300=((1.0)*(x4302.value));
IkReal x4301=x4285;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x4300)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x4300)));
IkReal gconst134=(x4299*x4301);
IkReal gconst135=((1.0)*r20*x4301);
IkReal x4303=r22*r22;
IkReal x4304=((1.0)*x4303);
CheckValue<IkReal> x4308=IKPowWithIntegerCheck(((-1.0)+x4303),-1);
if(!x4308.valid){
continue;
}
IkReal x4305=x4308.value;
if((((1.0)+(((-1.0)*x4304)))) < -0.00001)
continue;
IkReal x4306=IKsqrt(((1.0)+(((-1.0)*x4304))));
IkReal x4307=(cj0*x4305*x4306);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x4307+(((-1.0)*x4304*x4307))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4309=((-1.0)*r21);
CheckValue<IkReal> x4312 = IKatan2WithCheck(IkReal(x4309),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4312.valid){
continue;
}
IkReal x4310=((1.0)*(x4312.value));
IkReal x4311=x4285;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst134;
cj5=gconst135;
j5=((3.14159265)+(((-1.0)*x4310)));
IkReal gconst133=((3.14159265358979)+(((-1.0)*x4310)));
IkReal gconst134=(x4309*x4311);
IkReal gconst135=((1.0)*r20*x4311);
IkReal x4313=r22*r22;
IkReal x4314=(cj0*r12);
IkReal x4315=((1.0)*r02*sj0);
CheckValue<IkReal> x4319=IKPowWithIntegerCheck(((-1.0)+x4313),-1);
if(!x4319.valid){
continue;
}
IkReal x4316=x4319.value;
if((((1.0)+(((-1.0)*x4313)))) < -0.00001)
continue;
IkReal x4317=IKsqrt(((1.0)+(((-1.0)*x4313))));
IkReal x4318=(r22*x4316*x4317);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x4315))+x4314)))+(IKabs(((((-1.0)*x4315*x4318))+((x4314*x4318))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4320=((1.0)*gconst135);
IkReal x4321=((1.0)*gconst134);
CheckValue<IkReal> x4322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4320))+(((-1.0)*r20*x4321)))),-1);
if(!x4322.valid){
continue;
}
CheckValue<IkReal> x4323 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj0*x4320))+(((-1.0)*cj0*r11*x4321))+((cj0*gconst135*r10))+((gconst134*r01*sj0)))),IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4322.value)))+(x4323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4324=IKcos(j4);
IkReal x4325=IKsin(j4);
IkReal x4326=(cj2*sj1);
IkReal x4327=(gconst135*r10);
IkReal x4328=(gconst135*r00);
IkReal x4329=(gconst135*r20);
IkReal x4330=(gconst134*r11);
IkReal x4331=((1.0)*cj1);
IkReal x4332=((1.0)*x4324);
IkReal x4333=((1.0)*x4325);
IkReal x4334=(gconst134*x4325);
IkReal x4335=(gconst134*x4324);
evalcond[0]=(((r21*x4335))+((r22*x4325))+(((-1.0)*x4329*x4332)));
evalcond[1]=(((r01*x4335))+cj0+((r02*x4325))+(((-1.0)*x4328*x4332)));
evalcond[2]=(sj0+((x4324*x4330))+(((-1.0)*x4327*x4332))+((r12*x4325)));
evalcond[3]=(((r21*x4334))+((sj1*sj2))+(((-1.0)*r22*x4332))+(((-1.0)*cj2*x4331))+(((-1.0)*x4329*x4333)));
evalcond[4]=(((r01*x4334))+(((-1.0)*r02*x4332))+((sj0*x4326))+((cj1*sj0*sj2))+(((-1.0)*x4328*x4333)));
evalcond[5]=((((-1.0)*x4327*x4333))+((x4325*x4330))+(((-1.0)*r12*x4332))+(((-1.0)*cj0*x4326))+(((-1.0)*cj0*sj2*x4331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4336=((1.0)*gconst135);
CheckValue<IkReal> x4337 = IKatan2WithCheck(IkReal((((cj0*gconst134*r21))+(((-1.0)*cj0*r20*x4336)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4337.valid){
continue;
}
CheckValue<IkReal> x4338=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4336))+(((-1.0)*gconst134*r10)))),-1);
if(!x4338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4337.value)+(((1.5707963267949)*(x4338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4339=IKcos(j4);
IkReal x4340=IKsin(j4);
IkReal x4341=(cj2*sj1);
IkReal x4342=(gconst135*r10);
IkReal x4343=(gconst135*r00);
IkReal x4344=(gconst135*r20);
IkReal x4345=(gconst134*r11);
IkReal x4346=((1.0)*cj1);
IkReal x4347=((1.0)*x4339);
IkReal x4348=((1.0)*x4340);
IkReal x4349=(gconst134*x4340);
IkReal x4350=(gconst134*x4339);
evalcond[0]=((((-1.0)*x4344*x4347))+((r22*x4340))+((r21*x4350)));
evalcond[1]=(cj0+(((-1.0)*x4343*x4347))+((r02*x4340))+((r01*x4350)));
evalcond[2]=(sj0+((x4339*x4345))+(((-1.0)*x4342*x4347))+((r12*x4340)));
evalcond[3]=((((-1.0)*x4344*x4348))+((sj1*sj2))+((r21*x4349))+(((-1.0)*r22*x4347))+(((-1.0)*cj2*x4346)));
evalcond[4]=((((-1.0)*r02*x4347))+(((-1.0)*x4343*x4348))+((cj1*sj0*sj2))+((sj0*x4341))+((r01*x4349)));
evalcond[5]=((((-1.0)*cj0*sj2*x4346))+(((-1.0)*x4342*x4348))+(((-1.0)*r12*x4347))+((x4340*x4345))+(((-1.0)*cj0*x4341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4351 = IKatan2WithCheck(IkReal(((((-1.0)*gconst135*r20*sj0))+((gconst134*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4351.valid){
continue;
}
CheckValue<IkReal> x4352=IKPowWithIntegerCheck(IKsign((((gconst135*r01))+((gconst134*r00)))),-1);
if(!x4352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4351.value)+(((1.5707963267949)*(x4352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4353=IKcos(j4);
IkReal x4354=IKsin(j4);
IkReal x4355=(cj2*sj1);
IkReal x4356=(gconst135*r10);
IkReal x4357=(gconst135*r00);
IkReal x4358=(gconst135*r20);
IkReal x4359=(gconst134*r11);
IkReal x4360=((1.0)*cj1);
IkReal x4361=((1.0)*x4353);
IkReal x4362=((1.0)*x4354);
IkReal x4363=(gconst134*x4354);
IkReal x4364=(gconst134*x4353);
evalcond[0]=(((r21*x4364))+((r22*x4354))+(((-1.0)*x4358*x4361)));
evalcond[1]=((((-1.0)*x4357*x4361))+cj0+((r01*x4364))+((r02*x4354)));
evalcond[2]=(sj0+((x4353*x4359))+((r12*x4354))+(((-1.0)*x4356*x4361)));
evalcond[3]=((((-1.0)*r22*x4361))+((r21*x4363))+(((-1.0)*cj2*x4360))+((sj1*sj2))+(((-1.0)*x4358*x4362)));
evalcond[4]=((((-1.0)*x4357*x4362))+((r01*x4363))+((cj1*sj0*sj2))+(((-1.0)*r02*x4361))+((sj0*x4355)));
evalcond[5]=((((-1.0)*r12*x4361))+(((-1.0)*cj0*sj2*x4360))+((x4354*x4359))+(((-1.0)*cj0*x4355))+(((-1.0)*x4356*x4362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4365=((-1.0)*r10);
IkReal x4367 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4367)==0){
continue;
}
IkReal x4366=pow(x4367,-0.5);
CheckValue<IkReal> x4368 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4365),IKFAST_ATAN2_MAGTHRESH);
if(!x4368.valid){
continue;
}
IkReal gconst136=((-1.0)*(x4368.value));
IkReal gconst137=(r11*x4366);
IkReal gconst138=(x4365*x4366);
CheckValue<IkReal> x4369 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4369.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4369.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4370=((-1.0)*r10);
IkReal x4371=x4366;
CheckValue<IkReal> x4373 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4370),IKFAST_ATAN2_MAGTHRESH);
if(!x4373.valid){
continue;
}
IkReal x4372=((-1.0)*(x4373.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst137;
cj5=gconst138;
j5=x4372;
IkReal gconst136=x4372;
IkReal gconst137=(r11*x4371);
IkReal gconst138=(x4370*x4371);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4374=((-1.0)*r10);
IkReal x4375=x4366;
CheckValue<IkReal> x4377 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4374),IKFAST_ATAN2_MAGTHRESH);
if(!x4377.valid){
continue;
}
IkReal x4376=((-1.0)*(x4377.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst137;
cj5=gconst138;
j5=x4376;
IkReal gconst136=x4376;
IkReal gconst137=(r11*x4375);
IkReal gconst138=(x4374*x4375);
IkReal x4378=r12*r12;
IkReal x4379=(r02*sj0);
IkReal x4380=((1.0)*x4378);
CheckValue<IkReal> x4384=IKPowWithIntegerCheck(((-1.0)+x4378),-1);
if(!x4384.valid){
continue;
}
IkReal x4381=x4384.value;
if((((1.0)+(((-1.0)*x4380)))) < -0.00001)
continue;
IkReal x4382=IKsqrt(((1.0)+(((-1.0)*x4380))));
IkReal x4383=(cj0*x4381*x4382);
j4eval[0]=((IKabs(((((-1.0)*x4380*x4383))+((r12*x4379*x4381*x4382))+x4383)))+(IKabs(((((-1.0)*x4379))+((cj0*r12))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4385=((-1.0)*r10);
IkReal x4386=x4366;
CheckValue<IkReal> x4388 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4385),IKFAST_ATAN2_MAGTHRESH);
if(!x4388.valid){
continue;
}
IkReal x4387=((-1.0)*(x4388.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst137;
cj5=gconst138;
j5=x4387;
IkReal gconst136=x4387;
IkReal gconst137=(r11*x4386);
IkReal gconst138=(x4385*x4386);
IkReal x4389=r12*r12;
IkReal x4390=((1.0)+(((-1.0)*x4389)));
IkReal x4391=(cj1*cj2*r22);
IkReal x4392=(r22*sj1*sj2);
CheckValue<IkReal> x4399=IKPowWithIntegerCheck(x4390,-1);
if(!x4399.valid){
continue;
}
IkReal x4393=x4399.value;
CheckValue<IkReal> x4400=IKPowWithIntegerCheck(((-1.0)+x4389),-1);
if(!x4400.valid){
continue;
}
IkReal x4394=x4400.value;
IkReal x4395=((1.0)*x4393);
if((x4390) < -0.00001)
continue;
IkReal x4396=IKsqrt(x4390);
IkReal x4397=(r12*x4394*x4396);
IkReal x4398=((((-2.0)*r10*r11*r20*r21*x4393))+(((-1.0)*x4395*(r11*r11)*(r21*r21)))+(((-1.0)*x4395*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x4398;
j4eval[1]=((IKabs(((((-1.0)*x4392))+x4391)))+(IKabs((((x4392*x4397))+(((-1.0)*x4391*x4397))))));
j4eval[2]=IKsign(x4398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4401=(gconst138*r20);
IkReal x4402=(gconst137*r21);
IkReal x4403=(cj1*cj2);
IkReal x4404=((1.0)*sj1*sj2);
CheckValue<IkReal> x4405=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4402*x4402)))+(((-1.0)*(x4401*x4401)))+(((-1.0)*(r22*r22)))+(((2.0)*x4401*x4402)))),-1);
if(!x4405.valid){
continue;
}
CheckValue<IkReal> x4406 = IKatan2WithCheck(IkReal((((x4401*x4403))+((sj1*sj2*x4402))+(((-1.0)*x4401*x4404))+(((-1.0)*x4402*x4403)))),IkReal((((r22*x4403))+(((-1.0)*r22*x4404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4405.value)))+(x4406.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4407=IKcos(j4);
IkReal x4408=IKsin(j4);
IkReal x4409=(cj2*sj1);
IkReal x4410=((1.0)*cj1);
IkReal x4411=((1.0)*x4407);
IkReal x4412=(gconst137*x4407);
IkReal x4413=(gconst137*x4408);
IkReal x4414=((1.0)*gconst138*x4408);
evalcond[0]=(((r21*x4412))+((r22*x4408))+(((-1.0)*gconst138*r20*x4411)));
evalcond[1]=(cj0+((r01*x4412))+(((-1.0)*gconst138*r00*x4411))+((r02*x4408)));
evalcond[2]=(((r11*x4412))+sj0+((r12*x4408))+(((-1.0)*gconst138*r10*x4411)));
evalcond[3]=(((r21*x4413))+((sj1*sj2))+(((-1.0)*cj2*x4410))+(((-1.0)*r20*x4414))+(((-1.0)*r22*x4411)));
evalcond[4]=(((r01*x4413))+(((-1.0)*r02*x4411))+(((-1.0)*r00*x4414))+((cj1*sj0*sj2))+((sj0*x4409)));
evalcond[5]=(((r11*x4413))+(((-1.0)*cj0*x4409))+(((-1.0)*r10*x4414))+(((-1.0)*cj0*sj2*x4410))+(((-1.0)*r12*x4411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4415=((1.0)*sj0);
IkReal x4416=((1.0)*gconst137);
CheckValue<IkReal> x4417 = IKatan2WithCheck(IkReal((((gconst137*r01*sj0))+((cj0*gconst138*r10))+(((-1.0)*cj0*r11*x4416))+(((-1.0)*gconst138*r00*x4415)))),IkReal(((((-1.0)*r02*x4415))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4417.valid){
continue;
}
CheckValue<IkReal> x4418=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst138*r21))+(((-1.0)*r20*x4416)))),-1);
if(!x4418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4417.value)+(((1.5707963267949)*(x4418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4419=IKcos(j4);
IkReal x4420=IKsin(j4);
IkReal x4421=(cj2*sj1);
IkReal x4422=((1.0)*cj1);
IkReal x4423=((1.0)*x4419);
IkReal x4424=(gconst137*x4419);
IkReal x4425=(gconst137*x4420);
IkReal x4426=((1.0)*gconst138*x4420);
evalcond[0]=((((-1.0)*gconst138*r20*x4423))+((r22*x4420))+((r21*x4424)));
evalcond[1]=(cj0+((r02*x4420))+((r01*x4424))+(((-1.0)*gconst138*r00*x4423)));
evalcond[2]=(sj0+(((-1.0)*gconst138*r10*x4423))+((r12*x4420))+((r11*x4424)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x4422))+(((-1.0)*r22*x4423))+(((-1.0)*r20*x4426))+((r21*x4425)));
evalcond[4]=(((cj1*sj0*sj2))+((sj0*x4421))+((r01*x4425))+(((-1.0)*r02*x4423))+(((-1.0)*r00*x4426)));
evalcond[5]=((((-1.0)*cj0*x4421))+(((-1.0)*r12*x4423))+(((-1.0)*r10*x4426))+((r11*x4425))+(((-1.0)*cj0*sj2*x4422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4427=IKPowWithIntegerCheck(IKsign((((gconst138*r01))+((gconst137*r00)))),-1);
if(!x4427.valid){
continue;
}
CheckValue<IkReal> x4428 = IKatan2WithCheck(IkReal(((((-1.0)*gconst138*r20*sj0))+((gconst137*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4427.value)))+(x4428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4429=IKcos(j4);
IkReal x4430=IKsin(j4);
IkReal x4431=(cj2*sj1);
IkReal x4432=((1.0)*cj1);
IkReal x4433=((1.0)*x4429);
IkReal x4434=(gconst137*x4429);
IkReal x4435=(gconst137*x4430);
IkReal x4436=((1.0)*gconst138*x4430);
evalcond[0]=(((r22*x4430))+(((-1.0)*gconst138*r20*x4433))+((r21*x4434)));
evalcond[1]=(cj0+(((-1.0)*gconst138*r00*x4433))+((r02*x4430))+((r01*x4434)));
evalcond[2]=(sj0+(((-1.0)*gconst138*r10*x4433))+((r12*x4430))+((r11*x4434)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x4433))+(((-1.0)*r20*x4436))+(((-1.0)*cj2*x4432))+((r21*x4435)));
evalcond[4]=((((-1.0)*r02*x4433))+(((-1.0)*r00*x4436))+((cj1*sj0*sj2))+((sj0*x4431))+((r01*x4435)));
evalcond[5]=((((-1.0)*r10*x4436))+(((-1.0)*cj0*x4431))+(((-1.0)*r12*x4433))+((r11*x4435))+(((-1.0)*cj0*sj2*x4432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4437=((-1.0)*r11);
IkReal x4439 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4439)==0){
continue;
}
IkReal x4438=pow(x4439,-0.5);
CheckValue<IkReal> x4440 = IKatan2WithCheck(IkReal(x4437),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4440.valid){
continue;
}
IkReal gconst139=((3.14159265358979)+(((-1.0)*(x4440.value))));
IkReal gconst140=(x4437*x4438);
IkReal gconst141=((1.0)*r10*x4438);
CheckValue<IkReal> x4441 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4441.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4441.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4442=((-1.0)*r11);
CheckValue<IkReal> x4445 = IKatan2WithCheck(IkReal(x4442),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4445.valid){
continue;
}
IkReal x4443=((1.0)*(x4445.value));
IkReal x4444=x4438;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst140;
cj5=gconst141;
j5=((3.14159265)+(((-1.0)*x4443)));
IkReal gconst139=((3.14159265358979)+(((-1.0)*x4443)));
IkReal gconst140=(x4442*x4444);
IkReal gconst141=((1.0)*r10*x4444);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x4446=((-1.0)*r11);
CheckValue<IkReal> x4449 = IKatan2WithCheck(IkReal(x4446),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4449.valid){
continue;
}
IkReal x4447=((1.0)*(x4449.value));
IkReal x4448=x4438;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst140;
cj5=gconst141;
j5=((3.14159265)+(((-1.0)*x4447)));
IkReal gconst139=((3.14159265358979)+(((-1.0)*x4447)));
IkReal gconst140=(x4446*x4448);
IkReal gconst141=((1.0)*r10*x4448);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4450=((1.0)*sj0);
IkReal x4451=((1.0)*gconst140);
CheckValue<IkReal> x4452=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst141*r21))+(((-1.0)*r20*x4451)))),-1);
if(!x4452.valid){
continue;
}
CheckValue<IkReal> x4453 = IKatan2WithCheck(IkReal(((((-1.0)*gconst141*r00*x4450))+((cj0*gconst141*r10))+(((-1.0)*cj0*r11*x4451))+((gconst140*r01*sj0)))),IkReal(((((-1.0)*r02*x4450))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4452.value)))+(x4453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4454=IKcos(j4);
IkReal x4455=IKsin(j4);
IkReal x4456=(cj2*sj1);
IkReal x4457=((1.0)*cj1);
IkReal x4458=(gconst140*x4455);
IkReal x4459=(gconst140*x4454);
IkReal x4460=((1.0)*x4454);
IkReal x4461=(gconst141*x4460);
IkReal x4462=((1.0)*gconst141*x4455);
evalcond[0]=(((r21*x4459))+((r22*x4455))+(((-1.0)*r20*x4461)));
evalcond[1]=(((r01*x4459))+cj0+((r02*x4455))+(((-1.0)*r00*x4461)));
evalcond[2]=(sj0+(((-1.0)*r10*x4461))+((r11*x4459))+((r12*x4455)));
evalcond[3]=(((r21*x4458))+((sj1*sj2))+(((-1.0)*r22*x4460))+(((-1.0)*cj2*x4457))+(((-1.0)*r20*x4462)));
evalcond[4]=(((r01*x4458))+(((-1.0)*r02*x4460))+((cj1*sj0*sj2))+((sj0*x4456))+(((-1.0)*r00*x4462)));
evalcond[5]=((((-1.0)*cj0*sj2*x4457))+(((-1.0)*cj0*x4456))+(((-1.0)*r10*x4462))+((r11*x4458))+(((-1.0)*r12*x4460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4463=((1.0)*gconst141);
CheckValue<IkReal> x4464=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r10))+(((-1.0)*r11*x4463)))),-1);
if(!x4464.valid){
continue;
}
CheckValue<IkReal> x4465 = IKatan2WithCheck(IkReal((((cj0*gconst140*r21))+(((-1.0)*cj0*r20*x4463)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4464.value)))+(x4465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4466=IKcos(j4);
IkReal x4467=IKsin(j4);
IkReal x4468=(cj2*sj1);
IkReal x4469=((1.0)*cj1);
IkReal x4470=(gconst140*x4467);
IkReal x4471=(gconst140*x4466);
IkReal x4472=((1.0)*x4466);
IkReal x4473=(gconst141*x4472);
IkReal x4474=((1.0)*gconst141*x4467);
evalcond[0]=(((r22*x4467))+((r21*x4471))+(((-1.0)*r20*x4473)));
evalcond[1]=(cj0+(((-1.0)*r00*x4473))+((r01*x4471))+((r02*x4467)));
evalcond[2]=(sj0+((r12*x4467))+(((-1.0)*r10*x4473))+((r11*x4471)));
evalcond[3]=(((r21*x4470))+((sj1*sj2))+(((-1.0)*r20*x4474))+(((-1.0)*cj2*x4469))+(((-1.0)*r22*x4472)));
evalcond[4]=(((cj1*sj0*sj2))+((sj0*x4468))+(((-1.0)*r00*x4474))+((r01*x4470))+(((-1.0)*r02*x4472)));
evalcond[5]=((((-1.0)*r12*x4472))+(((-1.0)*r10*x4474))+(((-1.0)*cj0*x4468))+(((-1.0)*cj0*sj2*x4469))+((r11*x4470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4475=IKPowWithIntegerCheck(IKsign((((gconst140*r00))+((gconst141*r01)))),-1);
if(!x4475.valid){
continue;
}
CheckValue<IkReal> x4476 = IKatan2WithCheck(IkReal((((gconst140*r21*sj0))+(((-1.0)*gconst141*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4475.value)))+(x4476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4477=IKcos(j4);
IkReal x4478=IKsin(j4);
IkReal x4479=(cj2*sj1);
IkReal x4480=((1.0)*cj1);
IkReal x4481=(gconst140*x4478);
IkReal x4482=(gconst140*x4477);
IkReal x4483=((1.0)*x4477);
IkReal x4484=(gconst141*x4483);
IkReal x4485=((1.0)*gconst141*x4478);
evalcond[0]=(((r21*x4482))+(((-1.0)*r20*x4484))+((r22*x4478)));
evalcond[1]=(cj0+((r02*x4478))+((r01*x4482))+(((-1.0)*r00*x4484)));
evalcond[2]=(((r11*x4482))+sj0+(((-1.0)*r10*x4484))+((r12*x4478)));
evalcond[3]=((((-1.0)*cj2*x4480))+((r21*x4481))+((sj1*sj2))+(((-1.0)*r20*x4485))+(((-1.0)*r22*x4483)));
evalcond[4]=(((sj0*x4479))+((cj1*sj0*sj2))+((r01*x4481))+(((-1.0)*r00*x4485))+(((-1.0)*r02*x4483)));
evalcond[5]=(((r11*x4481))+(((-1.0)*r12*x4483))+(((-1.0)*cj0*x4479))+(((-1.0)*cj0*sj2*x4480))+(((-1.0)*r10*x4485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4486=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4486;
j4eval[1]=IKsign(x4486);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4487=((1.0)*cj5);
IkReal x4488=((((-1.0)*r21*x4487))+(((-1.0)*r20*sj5)));
j4eval[0]=x4488;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4487))))));
j4eval[2]=IKsign(x4488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4489=cj5*cj5;
IkReal x4490=r11*r11;
IkReal x4491=(cj5*r10);
IkReal x4492=(r11*sj5);
IkReal x4493=((((2.0)*x4491*x4492))+(((-1.0)*x4490))+(((-1.0)*(r12*r12)))+(((-1.0)*x4489*(r10*r10)))+((x4489*x4490)));
j4eval[0]=x4493;
j4eval[1]=((IKabs(((((-1.0)*x4491))+x4492)))+(IKabs(r12)));
j4eval[2]=IKsign(x4493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4494=cj5*cj5;
IkReal x4495=r11*r11;
IkReal x4496=(cj5*r10);
IkReal x4497=(r11*sj5);
CheckValue<IkReal> x4498=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4495))+(((-1.0)*x4494*(r10*r10)))+((x4494*x4495))+(((-1.0)*(r12*r12)))+(((2.0)*x4496*x4497)))),-1);
if(!x4498.valid){
continue;
}
CheckValue<IkReal> x4499 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x4496))+x4497)),IKFAST_ATAN2_MAGTHRESH);
if(!x4499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4498.value)))+(x4499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4500=IKcos(j4);
IkReal x4501=IKsin(j4);
IkReal x4502=(cj5*r00);
IkReal x4503=(cj5*r10);
IkReal x4504=(cj5*r20);
IkReal x4505=((1.0)*x4500);
IkReal x4506=((1.0)*x4501);
IkReal x4507=(sj5*x4500);
IkReal x4508=(sj5*x4501);
evalcond[0]=(((r22*x4501))+((r21*x4507))+(((-1.0)*x4504*x4505)));
evalcond[1]=(((r02*x4501))+((r01*x4507))+(((-1.0)*x4502*x4505)));
evalcond[2]=((1.0)+((r12*x4501))+((r11*x4507))+(((-1.0)*x4503*x4505)));
evalcond[3]=(((r11*x4508))+(((-1.0)*x4503*x4506))+(((-1.0)*r12*x4505)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x4505))+((r01*x4508))+(((-1.0)*x4502*x4506)));
evalcond[5]=(((r21*x4508))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x4505))+(((-1.0)*x4504*x4506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4509=((1.0)*cj5);
CheckValue<IkReal> x4510=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4509))+(((-1.0)*r20*sj5)))),-1);
if(!x4510.valid){
continue;
}
CheckValue<IkReal> x4511 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4509))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4510.value)))+(x4511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4512=IKcos(j4);
IkReal x4513=IKsin(j4);
IkReal x4514=(cj5*r00);
IkReal x4515=(cj5*r10);
IkReal x4516=(cj5*r20);
IkReal x4517=((1.0)*x4512);
IkReal x4518=((1.0)*x4513);
IkReal x4519=(sj5*x4512);
IkReal x4520=(sj5*x4513);
evalcond[0]=((((-1.0)*x4516*x4517))+((r21*x4519))+((r22*x4513)));
evalcond[1]=(((r02*x4513))+((r01*x4519))+(((-1.0)*x4514*x4517)));
evalcond[2]=((1.0)+(((-1.0)*x4515*x4517))+((r11*x4519))+((r12*x4513)));
evalcond[3]=(((r11*x4520))+(((-1.0)*r12*x4517))+(((-1.0)*x4515*x4518)));
evalcond[4]=(((r01*x4520))+((cj2*sj1))+(((-1.0)*r02*x4517))+((cj1*sj2))+(((-1.0)*x4514*x4518)));
evalcond[5]=((((-1.0)*x4516*x4518))+((r21*x4520))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x4517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4521=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4521.valid){
continue;
}
CheckValue<IkReal> x4522 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4521.value)))+(x4522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4523=IKcos(j4);
IkReal x4524=IKsin(j4);
IkReal x4525=(cj5*r00);
IkReal x4526=(cj5*r10);
IkReal x4527=(cj5*r20);
IkReal x4528=((1.0)*x4523);
IkReal x4529=((1.0)*x4524);
IkReal x4530=(sj5*x4523);
IkReal x4531=(sj5*x4524);
evalcond[0]=(((r21*x4530))+((r22*x4524))+(((-1.0)*x4527*x4528)));
evalcond[1]=(((r01*x4530))+(((-1.0)*x4525*x4528))+((r02*x4524)));
evalcond[2]=((1.0)+((r12*x4524))+(((-1.0)*x4526*x4528))+((r11*x4530)));
evalcond[3]=((((-1.0)*r12*x4528))+(((-1.0)*x4526*x4529))+((r11*x4531)));
evalcond[4]=(((cj2*sj1))+((r01*x4531))+((cj1*sj2))+(((-1.0)*x4525*x4529))+(((-1.0)*r02*x4528)));
evalcond[5]=(((r21*x4531))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x4528))+(((-1.0)*x4527*x4529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4532=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4532;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4533=((1.0)*cj5);
IkReal x4534=((((-1.0)*r01*x4533))+(((-1.0)*r00*sj5)));
j4eval[0]=x4534;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4533)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4534);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4535=cj5*cj5;
IkReal x4536=r11*r11;
IkReal x4537=(r11*sj5);
IkReal x4538=(cj5*r10);
IkReal x4539=((r12*r12)+(((-1.0)*x4535*x4536))+x4536+((x4535*(r10*r10)))+(((-2.0)*x4537*x4538)));
j4eval[0]=x4539;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x4538))+x4537))));
j4eval[2]=IKsign(x4539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4540=cj5*cj5;
IkReal x4541=r11*r11;
IkReal x4542=(cj5*r10);
IkReal x4543=(r11*sj5);
CheckValue<IkReal> x4544 = IKatan2WithCheck(IkReal(r12),IkReal((x4543+(((-1.0)*x4542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4544.valid){
continue;
}
CheckValue<IkReal> x4545=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4542*x4543))+x4541+((x4540*(r10*r10)))+(((-1.0)*x4540*x4541)))),-1);
if(!x4545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4544.value)+(((1.5707963267949)*(x4545.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4546=IKcos(j4);
IkReal x4547=IKsin(j4);
IkReal x4548=(cj5*r00);
IkReal x4549=(cj5*r10);
IkReal x4550=((1.0)*cj2);
IkReal x4551=(cj5*r20);
IkReal x4552=((1.0)*x4546);
IkReal x4553=((1.0)*x4547);
IkReal x4554=(sj5*x4546);
IkReal x4555=(sj5*x4547);
evalcond[0]=(((r22*x4547))+(((-1.0)*x4551*x4552))+((r21*x4554)));
evalcond[1]=(((r01*x4554))+((r02*x4547))+(((-1.0)*x4548*x4552)));
evalcond[2]=((-1.0)+((r11*x4554))+(((-1.0)*x4549*x4552))+((r12*x4547)));
evalcond[3]=((((-1.0)*r12*x4552))+((r11*x4555))+(((-1.0)*x4549*x4553)));
evalcond[4]=((((-1.0)*cj1*x4550))+((sj1*sj2))+(((-1.0)*x4551*x4553))+((r21*x4555))+(((-1.0)*r22*x4552)));
evalcond[5]=(((r01*x4555))+(((-1.0)*cj1*sj2))+(((-1.0)*x4548*x4553))+(((-1.0)*r02*x4552))+(((-1.0)*sj1*x4550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4556=((1.0)*cj5);
CheckValue<IkReal> x4557 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x4556)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4557.valid){
continue;
}
CheckValue<IkReal> x4558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4556))+(((-1.0)*r00*sj5)))),-1);
if(!x4558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4557.value)+(((1.5707963267949)*(x4558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4559=IKcos(j4);
IkReal x4560=IKsin(j4);
IkReal x4561=(cj5*r00);
IkReal x4562=(cj5*r10);
IkReal x4563=((1.0)*cj2);
IkReal x4564=(cj5*r20);
IkReal x4565=((1.0)*x4559);
IkReal x4566=((1.0)*x4560);
IkReal x4567=(sj5*x4559);
IkReal x4568=(sj5*x4560);
evalcond[0]=(((r22*x4560))+((r21*x4567))+(((-1.0)*x4564*x4565)));
evalcond[1]=(((r02*x4560))+(((-1.0)*x4561*x4565))+((r01*x4567)));
evalcond[2]=((-1.0)+((r11*x4567))+((r12*x4560))+(((-1.0)*x4562*x4565)));
evalcond[3]=(((r11*x4568))+(((-1.0)*r12*x4565))+(((-1.0)*x4562*x4566)));
evalcond[4]=((((-1.0)*cj1*x4563))+((sj1*sj2))+((r21*x4568))+(((-1.0)*x4564*x4566))+(((-1.0)*r22*x4565)));
evalcond[5]=((((-1.0)*sj1*x4563))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x4565))+(((-1.0)*x4561*x4566))+((r01*x4568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4569=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4569.valid){
continue;
}
CheckValue<IkReal> x4570 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4569.value)))+(x4570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4571=IKcos(j4);
IkReal x4572=IKsin(j4);
IkReal x4573=(cj5*r00);
IkReal x4574=(cj5*r10);
IkReal x4575=((1.0)*cj2);
IkReal x4576=(cj5*r20);
IkReal x4577=((1.0)*x4571);
IkReal x4578=((1.0)*x4572);
IkReal x4579=(sj5*x4571);
IkReal x4580=(sj5*x4572);
evalcond[0]=((((-1.0)*x4576*x4577))+((r22*x4572))+((r21*x4579)));
evalcond[1]=(((r02*x4572))+((r01*x4579))+(((-1.0)*x4573*x4577)));
evalcond[2]=((-1.0)+((r12*x4572))+((r11*x4579))+(((-1.0)*x4574*x4577)));
evalcond[3]=(((r11*x4580))+(((-1.0)*x4574*x4578))+(((-1.0)*r12*x4577)));
evalcond[4]=(((r21*x4580))+(((-1.0)*cj1*x4575))+(((-1.0)*x4576*x4578))+((sj1*sj2))+(((-1.0)*r22*x4577)));
evalcond[5]=((((-1.0)*sj1*x4575))+(((-1.0)*r02*x4577))+(((-1.0)*cj1*sj2))+(((-1.0)*x4573*x4578))+((r01*x4580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4582 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4582)==0){
continue;
}
IkReal x4581=pow(x4582,-0.5);
CheckValue<IkReal> x4583 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4583.valid){
continue;
}
IkReal gconst142=((-1.0)*(x4583.value));
IkReal gconst143=((-1.0)*r01*x4581);
IkReal gconst144=(r00*x4581);
CheckValue<IkReal> x4584 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4584.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4584.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4587 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4587.valid){
continue;
}
IkReal x4585=((-1.0)*(x4587.value));
IkReal x4586=x4581;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst143;
cj5=gconst144;
j5=x4585;
IkReal gconst142=x4585;
IkReal gconst143=((-1.0)*r01*x4586);
IkReal gconst144=(r00*x4586);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4590 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4590.valid){
continue;
}
IkReal x4588=((-1.0)*(x4590.value));
IkReal x4589=x4581;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst143;
cj5=gconst144;
j5=x4588;
IkReal gconst142=x4588;
IkReal gconst143=((-1.0)*r01*x4589);
IkReal gconst144=(r00*x4589);
IkReal x4591=r02*r02;
IkReal x4592=((1.0)*sj0);
IkReal x4593=(cj0*r12);
CheckValue<IkReal> x4597=IKPowWithIntegerCheck(((-1.0)+x4591),-1);
if(!x4597.valid){
continue;
}
IkReal x4594=x4597.value;
if((((1.0)+(((-1.0)*x4591)))) < -0.00001)
continue;
IkReal x4595=IKsqrt(((1.0)+(((-1.0)*x4591))));
IkReal x4596=(x4594*x4595);
j4eval[0]=((IKabs((x4593+(((-1.0)*r02*x4592)))))+(IKabs(((((-1.0)*x4591*x4592*x4596))+((sj0*x4596))+((r02*x4593*x4596))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4600 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4600.valid){
continue;
}
IkReal x4598=((-1.0)*(x4600.value));
IkReal x4599=x4581;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst143;
cj5=gconst144;
j5=x4598;
IkReal gconst142=x4598;
IkReal gconst143=((-1.0)*r01*x4599);
IkReal gconst144=(r00*x4599);
IkReal x4601=r02*r02;
IkReal x4602=(cj1*cj2);
IkReal x4603=((1.0)+(((-1.0)*x4601)));
IkReal x4604=((1.0)*sj1*sj2);
CheckValue<IkReal> x4611=IKPowWithIntegerCheck(x4603,-1);
if(!x4611.valid){
continue;
}
IkReal x4605=x4611.value;
CheckValue<IkReal> x4612=IKPowWithIntegerCheck(((-1.0)+x4601),-1);
if(!x4612.valid){
continue;
}
IkReal x4606=x4612.value;
IkReal x4607=((1.0)*x4605);
if((x4603) < -0.00001)
continue;
IkReal x4608=IKsqrt(x4603);
IkReal x4609=(r02*r22*x4606*x4608);
IkReal x4610=((((-1.0)*x4607*(r01*r01)*(r21*r21)))+(((-1.0)*x4607*(r00*r00)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r00*r01*r20*r21*x4605)));
j4eval[0]=x4610;
j4eval[1]=((IKabs((((x4602*x4609))+(((-1.0)*x4604*x4609)))))+(IKabs((((r22*x4602))+(((-1.0)*r22*x4604))))));
j4eval[2]=IKsign(x4610);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4613=(gconst144*r20);
IkReal x4614=(cj1*cj2);
IkReal x4615=(sj1*sj2);
IkReal x4616=(gconst143*r21);
CheckValue<IkReal> x4617=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4613*x4613)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4616*x4616)))+(((2.0)*x4613*x4616)))),-1);
if(!x4617.valid){
continue;
}
CheckValue<IkReal> x4618 = IKatan2WithCheck(IkReal(((((-1.0)*x4613*x4615))+((x4615*x4616))+(((-1.0)*x4614*x4616))+((x4613*x4614)))),IkReal(((((-1.0)*r22*x4615))+((r22*x4614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4617.value)))+(x4618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4619=IKcos(j4);
IkReal x4620=IKsin(j4);
IkReal x4621=(cj2*sj1);
IkReal x4622=(gconst144*r00);
IkReal x4623=(gconst143*r11);
IkReal x4624=((1.0)*cj1);
IkReal x4625=(gconst144*r10);
IkReal x4626=(gconst144*r20);
IkReal x4627=((1.0)*x4619);
IkReal x4628=((1.0)*x4620);
IkReal x4629=(gconst143*x4619);
IkReal x4630=(gconst143*x4620);
evalcond[0]=((((-1.0)*x4626*x4627))+((r22*x4620))+((r21*x4629)));
evalcond[1]=(cj0+((r02*x4620))+((r01*x4629))+(((-1.0)*x4622*x4627)));
evalcond[2]=(((r12*x4620))+sj0+(((-1.0)*x4625*x4627))+((x4619*x4623)));
evalcond[3]=(((r21*x4630))+(((-1.0)*x4626*x4628))+(((-1.0)*r22*x4627))+(((-1.0)*cj2*x4624))+((sj1*sj2)));
evalcond[4]=(((r01*x4630))+(((-1.0)*r02*x4627))+((cj1*sj0*sj2))+((sj0*x4621))+(((-1.0)*x4622*x4628)));
evalcond[5]=(((x4620*x4623))+(((-1.0)*cj0*sj2*x4624))+(((-1.0)*x4625*x4628))+(((-1.0)*cj0*x4621))+(((-1.0)*r12*x4627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4631=((1.0)*sj0);
IkReal x4632=((1.0)*gconst143);
CheckValue<IkReal> x4633 = IKatan2WithCheck(IkReal((((gconst143*r01*sj0))+(((-1.0)*cj0*r11*x4632))+(((-1.0)*gconst144*r00*x4631))+((cj0*gconst144*r10)))),IkReal(((((-1.0)*r02*x4631))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4633.valid){
continue;
}
CheckValue<IkReal> x4634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4632))+(((-1.0)*gconst144*r21)))),-1);
if(!x4634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4633.value)+(((1.5707963267949)*(x4634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4635=IKcos(j4);
IkReal x4636=IKsin(j4);
IkReal x4637=(cj2*sj1);
IkReal x4638=(gconst144*r00);
IkReal x4639=(gconst143*r11);
IkReal x4640=((1.0)*cj1);
IkReal x4641=(gconst144*r10);
IkReal x4642=(gconst144*r20);
IkReal x4643=((1.0)*x4635);
IkReal x4644=((1.0)*x4636);
IkReal x4645=(gconst143*x4635);
IkReal x4646=(gconst143*x4636);
evalcond[0]=(((r21*x4645))+((r22*x4636))+(((-1.0)*x4642*x4643)));
evalcond[1]=(cj0+((r01*x4645))+((r02*x4636))+(((-1.0)*x4638*x4643)));
evalcond[2]=(((r12*x4636))+sj0+((x4635*x4639))+(((-1.0)*x4641*x4643)));
evalcond[3]=(((r21*x4646))+((sj1*sj2))+(((-1.0)*r22*x4643))+(((-1.0)*cj2*x4640))+(((-1.0)*x4642*x4644)));
evalcond[4]=((((-1.0)*r02*x4643))+((sj0*x4637))+((cj1*sj0*sj2))+((r01*x4646))+(((-1.0)*x4638*x4644)));
evalcond[5]=(((x4636*x4639))+(((-1.0)*r12*x4643))+(((-1.0)*cj0*x4637))+(((-1.0)*x4641*x4644))+(((-1.0)*cj0*sj2*x4640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4647=((1.0)*gconst144);
CheckValue<IkReal> x4648 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x4647))+((cj0*gconst143*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4648.valid){
continue;
}
CheckValue<IkReal> x4649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4647))+(((-1.0)*gconst143*r10)))),-1);
if(!x4649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4648.value)+(((1.5707963267949)*(x4649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4650=IKcos(j4);
IkReal x4651=IKsin(j4);
IkReal x4652=(cj2*sj1);
IkReal x4653=(gconst144*r00);
IkReal x4654=(gconst143*r11);
IkReal x4655=((1.0)*cj1);
IkReal x4656=(gconst144*r10);
IkReal x4657=(gconst144*r20);
IkReal x4658=((1.0)*x4650);
IkReal x4659=((1.0)*x4651);
IkReal x4660=(gconst143*x4650);
IkReal x4661=(gconst143*x4651);
evalcond[0]=(((r21*x4660))+(((-1.0)*x4657*x4658))+((r22*x4651)));
evalcond[1]=(cj0+((r01*x4660))+((r02*x4651))+(((-1.0)*x4653*x4658)));
evalcond[2]=(((x4650*x4654))+((r12*x4651))+sj0+(((-1.0)*x4656*x4658)));
evalcond[3]=(((r21*x4661))+(((-1.0)*x4657*x4659))+(((-1.0)*r22*x4658))+((sj1*sj2))+(((-1.0)*cj2*x4655)));
evalcond[4]=(((sj0*x4652))+(((-1.0)*r02*x4658))+((r01*x4661))+((cj1*sj0*sj2))+(((-1.0)*x4653*x4659)));
evalcond[5]=((((-1.0)*cj0*sj2*x4655))+(((-1.0)*cj0*x4652))+(((-1.0)*x4656*x4659))+(((-1.0)*r12*x4658))+((x4651*x4654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4663 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4663)==0){
continue;
}
IkReal x4662=pow(x4663,-0.5);
CheckValue<IkReal> x4664 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4664.valid){
continue;
}
IkReal gconst145=((3.14159265358979)+(((-1.0)*(x4664.value))));
IkReal gconst146=((1.0)*r01*x4662);
IkReal gconst147=((-1.0)*r00*x4662);
CheckValue<IkReal> x4665 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4665.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4665.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x4668 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4668.valid){
continue;
}
IkReal x4666=((1.0)*(x4668.value));
IkReal x4667=x4662;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst146;
cj5=gconst147;
j5=((3.14159265)+(((-1.0)*x4666)));
IkReal gconst145=((3.14159265358979)+(((-1.0)*x4666)));
IkReal gconst146=((1.0)*r01*x4667);
IkReal gconst147=((-1.0)*r00*x4667);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4671 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4671.valid){
continue;
}
IkReal x4669=((1.0)*(x4671.value));
IkReal x4670=x4662;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst146;
cj5=gconst147;
j5=((3.14159265)+(((-1.0)*x4669)));
IkReal gconst145=((3.14159265358979)+(((-1.0)*x4669)));
IkReal gconst146=((1.0)*r01*x4670);
IkReal gconst147=((-1.0)*r00*x4670);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4672=((1.0)*sj0);
IkReal x4673=((1.0)*gconst146);
CheckValue<IkReal> x4674=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst147*r21))+(((-1.0)*r20*x4673)))),-1);
if(!x4674.valid){
continue;
}
CheckValue<IkReal> x4675 = IKatan2WithCheck(IkReal(((((-1.0)*gconst147*r00*x4672))+(((-1.0)*cj0*r11*x4673))+((gconst146*r01*sj0))+((cj0*gconst147*r10)))),IkReal(((((-1.0)*r02*x4672))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4674.value)))+(x4675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4676=IKcos(j4);
IkReal x4677=IKsin(j4);
IkReal x4678=(cj2*sj1);
IkReal x4679=(gconst147*r10);
IkReal x4680=((1.0)*cj1);
IkReal x4681=(gconst147*r20);
IkReal x4682=(gconst147*r00);
IkReal x4683=((1.0)*x4676);
IkReal x4684=(gconst146*x4677);
IkReal x4685=(gconst146*x4676);
IkReal x4686=((1.0)*x4677);
evalcond[0]=((((-1.0)*x4681*x4683))+((r22*x4677))+((r21*x4685)));
evalcond[1]=(((r02*x4677))+cj0+(((-1.0)*x4682*x4683))+((r01*x4685)));
evalcond[2]=((((-1.0)*x4679*x4683))+sj0+((r12*x4677))+((r11*x4685)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4681*x4686))+((r21*x4684))+(((-1.0)*r22*x4683))+(((-1.0)*cj2*x4680)));
evalcond[4]=(((sj0*x4678))+(((-1.0)*x4682*x4686))+((cj1*sj0*sj2))+(((-1.0)*r02*x4683))+((r01*x4684)));
evalcond[5]=((((-1.0)*x4679*x4686))+(((-1.0)*cj0*x4678))+((r11*x4684))+(((-1.0)*cj0*sj2*x4680))+(((-1.0)*r12*x4683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4687=((1.0)*gconst147);
CheckValue<IkReal> x4688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4687))+(((-1.0)*gconst146*r10)))),-1);
if(!x4688.valid){
continue;
}
CheckValue<IkReal> x4689 = IKatan2WithCheck(IkReal((((cj0*gconst146*r21))+(((-1.0)*cj0*r20*x4687)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4688.value)))+(x4689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4690=IKcos(j4);
IkReal x4691=IKsin(j4);
IkReal x4692=(cj2*sj1);
IkReal x4693=(gconst147*r10);
IkReal x4694=((1.0)*cj1);
IkReal x4695=(gconst147*r20);
IkReal x4696=(gconst147*r00);
IkReal x4697=((1.0)*x4690);
IkReal x4698=(gconst146*x4691);
IkReal x4699=(gconst146*x4690);
IkReal x4700=((1.0)*x4691);
evalcond[0]=(((r22*x4691))+((r21*x4699))+(((-1.0)*x4695*x4697)));
evalcond[1]=(((r02*x4691))+cj0+(((-1.0)*x4696*x4697))+((r01*x4699)));
evalcond[2]=(sj0+((r12*x4691))+(((-1.0)*x4693*x4697))+((r11*x4699)));
evalcond[3]=((((-1.0)*x4695*x4700))+((sj1*sj2))+((r21*x4698))+(((-1.0)*r22*x4697))+(((-1.0)*cj2*x4694)));
evalcond[4]=((((-1.0)*x4696*x4700))+(((-1.0)*r02*x4697))+((cj1*sj0*sj2))+((r01*x4698))+((sj0*x4692)));
evalcond[5]=((((-1.0)*r12*x4697))+(((-1.0)*x4693*x4700))+(((-1.0)*cj0*x4692))+(((-1.0)*cj0*sj2*x4694))+((r11*x4698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4701=IKPowWithIntegerCheck(IKsign((((gconst147*r01))+((gconst146*r00)))),-1);
if(!x4701.valid){
continue;
}
CheckValue<IkReal> x4702 = IKatan2WithCheck(IkReal(((((-1.0)*gconst147*r20*sj0))+((gconst146*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4701.value)))+(x4702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4703=IKcos(j4);
IkReal x4704=IKsin(j4);
IkReal x4705=(cj2*sj1);
IkReal x4706=(gconst147*r10);
IkReal x4707=((1.0)*cj1);
IkReal x4708=(gconst147*r20);
IkReal x4709=(gconst147*r00);
IkReal x4710=((1.0)*x4703);
IkReal x4711=(gconst146*x4704);
IkReal x4712=(gconst146*x4703);
IkReal x4713=((1.0)*x4704);
evalcond[0]=(((r21*x4712))+(((-1.0)*x4708*x4710))+((r22*x4704)));
evalcond[1]=((((-1.0)*x4709*x4710))+cj0+((r01*x4712))+((r02*x4704)));
evalcond[2]=(sj0+(((-1.0)*x4706*x4710))+((r11*x4712))+((r12*x4704)));
evalcond[3]=((((-1.0)*r22*x4710))+((r21*x4711))+((sj1*sj2))+(((-1.0)*x4708*x4713))+(((-1.0)*cj2*x4707)));
evalcond[4]=((((-1.0)*r02*x4710))+(((-1.0)*x4709*x4713))+((r01*x4711))+((cj1*sj0*sj2))+((sj0*x4705)));
evalcond[5]=((((-1.0)*cj0*sj2*x4707))+(((-1.0)*cj0*x4705))+(((-1.0)*r12*x4710))+(((-1.0)*x4706*x4713))+((r11*x4711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4714=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4714;
j4eval[1]=IKsign(x4714);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4715=((1.0)*cj5);
IkReal x4716=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4715)));
j4eval[0]=x4716;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4715)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4717=cj5*cj5;
IkReal x4718=r01*r01;
IkReal x4719=(r01*sj5);
IkReal x4720=(cj5*r00);
IkReal x4721=(((x4717*x4718))+(((-1.0)*x4718))+(((-1.0)*x4717*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4719*x4720)));
j4eval[0]=x4721;
j4eval[1]=IKsign(x4721);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4720))+x4719))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4722=cj5*cj5;
IkReal x4723=r01*r01;
IkReal x4724=(r01*sj5);
IkReal x4725=(cj5*r00);
CheckValue<IkReal> x4726 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4725))+x4724)),IKFAST_ATAN2_MAGTHRESH);
if(!x4726.valid){
continue;
}
CheckValue<IkReal> x4727=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4723))+(((-1.0)*(r02*r02)))+((x4722*x4723))+(((-1.0)*x4722*(r00*r00)))+(((2.0)*x4724*x4725)))),-1);
if(!x4727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4726.value)+(((1.5707963267949)*(x4727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4728=IKcos(j4);
IkReal x4729=IKsin(j4);
IkReal x4730=(cj5*r00);
IkReal x4731=(cj5*r10);
IkReal x4732=((1.0)*cj2);
IkReal x4733=(cj5*r20);
IkReal x4734=((1.0)*x4728);
IkReal x4735=((1.0)*x4729);
IkReal x4736=(sj5*x4728);
IkReal x4737=(sj5*x4729);
evalcond[0]=(((r21*x4736))+(((-1.0)*x4733*x4734))+((r22*x4729)));
evalcond[1]=(((r11*x4736))+(((-1.0)*x4731*x4734))+((r12*x4729)));
evalcond[2]=((1.0)+(((-1.0)*x4730*x4734))+((r02*x4729))+((r01*x4736)));
evalcond[3]=((((-1.0)*x4730*x4735))+((r01*x4737))+(((-1.0)*r02*x4734)));
evalcond[4]=((((-1.0)*cj1*x4732))+((r21*x4737))+((sj1*sj2))+(((-1.0)*x4733*x4735))+(((-1.0)*r22*x4734)));
evalcond[5]=(((r11*x4737))+(((-1.0)*sj1*x4732))+(((-1.0)*x4731*x4735))+(((-1.0)*r12*x4734))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4738=((1.0)*cj5);
CheckValue<IkReal> x4739 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x4738)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4739.valid){
continue;
}
CheckValue<IkReal> x4740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4738)))),-1);
if(!x4740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4739.value)+(((1.5707963267949)*(x4740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4741=IKcos(j4);
IkReal x4742=IKsin(j4);
IkReal x4743=(cj5*r00);
IkReal x4744=(cj5*r10);
IkReal x4745=((1.0)*cj2);
IkReal x4746=(cj5*r20);
IkReal x4747=((1.0)*x4741);
IkReal x4748=((1.0)*x4742);
IkReal x4749=(sj5*x4741);
IkReal x4750=(sj5*x4742);
evalcond[0]=((((-1.0)*x4746*x4747))+((r22*x4742))+((r21*x4749)));
evalcond[1]=(((r11*x4749))+((r12*x4742))+(((-1.0)*x4744*x4747)));
evalcond[2]=((1.0)+((r01*x4749))+((r02*x4742))+(((-1.0)*x4743*x4747)));
evalcond[3]=(((r01*x4750))+(((-1.0)*x4743*x4748))+(((-1.0)*r02*x4747)));
evalcond[4]=((((-1.0)*cj1*x4745))+(((-1.0)*x4746*x4748))+((sj1*sj2))+(((-1.0)*r22*x4747))+((r21*x4750)));
evalcond[5]=((((-1.0)*r12*x4747))+(((-1.0)*sj1*x4745))+((r11*x4750))+(((-1.0)*x4744*x4748))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4751=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4751.valid){
continue;
}
CheckValue<IkReal> x4752 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4751.value)))+(x4752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4753=IKcos(j4);
IkReal x4754=IKsin(j4);
IkReal x4755=(cj5*r00);
IkReal x4756=(cj5*r10);
IkReal x4757=((1.0)*cj2);
IkReal x4758=(cj5*r20);
IkReal x4759=((1.0)*x4753);
IkReal x4760=((1.0)*x4754);
IkReal x4761=(sj5*x4753);
IkReal x4762=(sj5*x4754);
evalcond[0]=(((r21*x4761))+(((-1.0)*x4758*x4759))+((r22*x4754)));
evalcond[1]=(((r12*x4754))+(((-1.0)*x4756*x4759))+((r11*x4761)));
evalcond[2]=((1.0)+(((-1.0)*x4755*x4759))+((r01*x4761))+((r02*x4754)));
evalcond[3]=((((-1.0)*x4755*x4760))+((r01*x4762))+(((-1.0)*r02*x4759)));
evalcond[4]=((((-1.0)*x4758*x4760))+(((-1.0)*cj1*x4757))+((r21*x4762))+((sj1*sj2))+(((-1.0)*r22*x4759)));
evalcond[5]=((((-1.0)*sj1*x4757))+(((-1.0)*r12*x4759))+(((-1.0)*cj1*sj2))+(((-1.0)*x4756*x4760))+((r11*x4762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4763=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4763;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4763);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4764=((1.0)*cj5);
IkReal x4765=((((-1.0)*r21*x4764))+(((-1.0)*r20*sj5)));
j4eval[0]=x4765;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x4764)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4766=cj5*cj5;
IkReal x4767=r01*r01;
IkReal x4768=(cj5*r00);
IkReal x4769=(r01*sj5);
IkReal x4770=(x4767+(r02*r02)+((x4766*(r00*r00)))+(((-1.0)*x4766*x4767))+(((-2.0)*x4768*x4769)));
j4eval[0]=x4770;
j4eval[1]=IKsign(x4770);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4768))+x4769))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4771=cj5*cj5;
IkReal x4772=r01*r01;
IkReal x4773=(r01*sj5);
IkReal x4774=(cj5*r00);
CheckValue<IkReal> x4775=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4771*x4772))+x4772+((x4771*(r00*r00)))+(r02*r02)+(((-2.0)*x4773*x4774)))),-1);
if(!x4775.valid){
continue;
}
CheckValue<IkReal> x4776 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4774))+x4773)),IKFAST_ATAN2_MAGTHRESH);
if(!x4776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4775.value)))+(x4776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4777=IKcos(j4);
IkReal x4778=IKsin(j4);
IkReal x4779=(cj5*r00);
IkReal x4780=(cj5*r10);
IkReal x4781=(cj5*r20);
IkReal x4782=((1.0)*x4777);
IkReal x4783=((1.0)*x4778);
IkReal x4784=(sj5*x4777);
IkReal x4785=(sj5*x4778);
evalcond[0]=((((-1.0)*x4781*x4782))+((r22*x4778))+((r21*x4784)));
evalcond[1]=(((r12*x4778))+((r11*x4784))+(((-1.0)*x4780*x4782)));
evalcond[2]=((-1.0)+(((-1.0)*x4779*x4782))+((r01*x4784))+((r02*x4778)));
evalcond[3]=((((-1.0)*x4779*x4783))+((r01*x4785))+(((-1.0)*r02*x4782)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4785))+(((-1.0)*x4780*x4783))+(((-1.0)*r12*x4782)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4781*x4783))+(((-1.0)*r22*x4782))+((r21*x4785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4786=((1.0)*cj5);
CheckValue<IkReal> x4787=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4786))+(((-1.0)*r20*sj5)))),-1);
if(!x4787.valid){
continue;
}
CheckValue<IkReal> x4788 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x4786)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4787.value)))+(x4788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4789=IKcos(j4);
IkReal x4790=IKsin(j4);
IkReal x4791=(cj5*r00);
IkReal x4792=(cj5*r10);
IkReal x4793=(cj5*r20);
IkReal x4794=((1.0)*x4789);
IkReal x4795=((1.0)*x4790);
IkReal x4796=(sj5*x4789);
IkReal x4797=(sj5*x4790);
evalcond[0]=(((r21*x4796))+(((-1.0)*x4793*x4794))+((r22*x4790)));
evalcond[1]=(((r11*x4796))+((r12*x4790))+(((-1.0)*x4792*x4794)));
evalcond[2]=((-1.0)+((r01*x4796))+((r02*x4790))+(((-1.0)*x4791*x4794)));
evalcond[3]=(((r01*x4797))+(((-1.0)*r02*x4794))+(((-1.0)*x4791*x4795)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x4794))+((r11*x4797))+(((-1.0)*x4792*x4795)));
evalcond[5]=(((r21*x4797))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x4794))+(((-1.0)*x4793*x4795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4798 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4798.valid){
continue;
}
CheckValue<IkReal> x4799=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4798.value)+(((1.5707963267949)*(x4799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4800=IKcos(j4);
IkReal x4801=IKsin(j4);
IkReal x4802=(cj5*r00);
IkReal x4803=(cj5*r10);
IkReal x4804=(cj5*r20);
IkReal x4805=((1.0)*x4800);
IkReal x4806=((1.0)*x4801);
IkReal x4807=(sj5*x4800);
IkReal x4808=(sj5*x4801);
evalcond[0]=((((-1.0)*x4804*x4805))+((r21*x4807))+((r22*x4801)));
evalcond[1]=((((-1.0)*x4803*x4805))+((r12*x4801))+((r11*x4807)));
evalcond[2]=((-1.0)+((r02*x4801))+((r01*x4807))+(((-1.0)*x4802*x4805)));
evalcond[3]=(((r01*x4808))+(((-1.0)*x4802*x4806))+(((-1.0)*r02*x4805)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4803*x4806))+(((-1.0)*r12*x4805))+((r11*x4808)));
evalcond[5]=((((-1.0)*r22*x4805))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4804*x4806))+((r21*x4808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4809=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4809);
rxp1_1=(px*r21);
rxp1_2=(r11*x4809);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4810=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4810);
rxp1_1=(px*r21);
rxp1_2=(r11*x4810);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4811=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4811);
rxp1_1=(px*r21);
rxp1_2=(r11*x4811);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4814=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4814.valid){
continue;
}
IkReal x4812=x4814.value;
IkReal x4813=(cj0*x4812);
sj4array[0]=(((cj1*sj2*x4813))+((cj2*sj1*x4813)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4815=IKcos(j4);
IkReal x4816=IKsin(j4);
IkReal x4817=(r21*sj5);
IkReal x4818=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x4815);
evalcond[1]=(cj0+((r02*x4816)));
evalcond[2]=(((x4815*x4817))+(((-1.0)*x4815*x4818)));
evalcond[3]=((((-1.0)*cj5*r10*x4815))+((r11*sj5*x4815)));
evalcond[4]=(((x4816*x4817))+(((-1.0)*x4816*x4818))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4820=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4820.valid){
continue;
}
IkReal x4819=x4820.value;
sj4array[0]=((((-1.0)*sj1*sj2*x4819))+((cj1*cj2*x4819)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4821=IKcos(j4);
IkReal x4822=IKsin(j4);
IkReal x4823=((1.0)*cj5);
IkReal x4824=((1.0)*cj0);
IkReal x4825=(sj5*x4821);
evalcond[0]=((-1.0)*r02*x4821);
evalcond[1]=(cj0+((r02*x4822)));
evalcond[2]=(((r21*x4825))+(((-1.0)*r20*x4821*x4823)));
evalcond[3]=(((r11*x4825))+(((-1.0)*r10*x4821*x4823)));
evalcond[4]=((((-1.0)*r10*x4822*x4823))+(((-1.0)*cj2*sj1*x4824))+(((-1.0)*cj1*sj2*x4824))+((r11*sj5*x4822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4826=IKPowWithIntegerCheck(r02,-1);
if(!x4826.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x4826.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4827=IKcos(j4);
IkReal x4828=IKsin(j4);
IkReal x4829=(r21*sj5);
IkReal x4830=((1.0)*cj0);
IkReal x4831=(r11*sj5);
IkReal x4832=((1.0)*cj5*x4828);
IkReal x4833=((1.0)*cj5*x4827);
evalcond[0]=((-1.0)*r02*x4827);
evalcond[1]=(((x4827*x4829))+(((-1.0)*r20*x4833)));
evalcond[2]=((((-1.0)*r10*x4833))+((x4827*x4831)));
evalcond[3]=(((x4828*x4829))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x4832)));
evalcond[4]=((((-1.0)*r10*x4832))+(((-1.0)*cj2*sj1*x4830))+(((-1.0)*cj1*sj2*x4830))+((x4828*x4831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4834=((1.0)*sj0);
IkReal x4835=((1.0)*sj5);
CheckValue<IkReal> x4836 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r00*x4834))+((cj0*cj5*r10))+(((-1.0)*cj0*r11*x4835))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x4834))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4836.valid){
continue;
}
CheckValue<IkReal> x4837=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x4835)))),-1);
if(!x4837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4836.value)+(((1.5707963267949)*(x4837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4838=IKcos(j4);
IkReal x4839=IKsin(j4);
IkReal x4840=(cj5*r00);
IkReal x4841=(cj5*r10);
IkReal x4842=(cj2*sj1);
IkReal x4843=((1.0)*cj1);
IkReal x4844=(cj5*r20);
IkReal x4845=((1.0)*x4838);
IkReal x4846=((1.0)*x4839);
IkReal x4847=(sj5*x4838);
IkReal x4848=(sj5*x4839);
evalcond[0]=((((-1.0)*x4844*x4845))+((r22*x4839))+((r21*x4847)));
evalcond[1]=(cj0+(((-1.0)*x4840*x4845))+((r01*x4847))+((r02*x4839)));
evalcond[2]=(((r12*x4839))+sj0+(((-1.0)*x4841*x4845))+((r11*x4847)));
evalcond[3]=((((-1.0)*cj2*x4843))+(((-1.0)*x4844*x4846))+((sj1*sj2))+((r21*x4848))+(((-1.0)*r22*x4845)));
evalcond[4]=((((-1.0)*r02*x4845))+(((-1.0)*x4840*x4846))+((sj0*x4842))+((cj1*sj0*sj2))+((r01*x4848)));
evalcond[5]=((((-1.0)*x4841*x4846))+(((-1.0)*cj0*sj2*x4843))+((r11*x4848))+(((-1.0)*cj0*x4842))+(((-1.0)*r12*x4845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4849=((1.0)*cj5);
CheckValue<IkReal> x4850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4849)))),-1);
if(!x4850.valid){
continue;
}
CheckValue<IkReal> x4851 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4849)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4850.value)))+(x4851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4852=IKcos(j4);
IkReal x4853=IKsin(j4);
IkReal x4854=(cj5*r00);
IkReal x4855=(cj5*r10);
IkReal x4856=(cj2*sj1);
IkReal x4857=((1.0)*cj1);
IkReal x4858=(cj5*r20);
IkReal x4859=((1.0)*x4852);
IkReal x4860=((1.0)*x4853);
IkReal x4861=(sj5*x4852);
IkReal x4862=(sj5*x4853);
evalcond[0]=((((-1.0)*x4858*x4859))+((r22*x4853))+((r21*x4861)));
evalcond[1]=(((r01*x4861))+cj0+((r02*x4853))+(((-1.0)*x4854*x4859)));
evalcond[2]=(((r11*x4861))+sj0+((r12*x4853))+(((-1.0)*x4855*x4859)));
evalcond[3]=((((-1.0)*x4858*x4860))+(((-1.0)*r22*x4859))+((sj1*sj2))+(((-1.0)*cj2*x4857))+((r21*x4862)));
evalcond[4]=((((-1.0)*x4854*x4860))+((r01*x4862))+((cj1*sj0*sj2))+(((-1.0)*r02*x4859))+((sj0*x4856)));
evalcond[5]=((((-1.0)*x4855*x4860))+((r11*x4862))+(((-1.0)*r12*x4859))+(((-1.0)*cj0*sj2*x4857))+(((-1.0)*cj0*x4856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4863 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4863.valid){
continue;
}
CheckValue<IkReal> x4864=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4863.value)+(((1.5707963267949)*(x4864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4865=IKcos(j4);
IkReal x4866=IKsin(j4);
IkReal x4867=(cj5*r00);
IkReal x4868=(cj5*r10);
IkReal x4869=(cj2*sj1);
IkReal x4870=((1.0)*cj1);
IkReal x4871=(cj5*r20);
IkReal x4872=((1.0)*x4865);
IkReal x4873=((1.0)*x4866);
IkReal x4874=(sj5*x4865);
IkReal x4875=(sj5*x4866);
evalcond[0]=(((r22*x4866))+(((-1.0)*x4871*x4872))+((r21*x4874)));
evalcond[1]=(cj0+((r01*x4874))+((r02*x4866))+(((-1.0)*x4867*x4872)));
evalcond[2]=((((-1.0)*x4868*x4872))+((r12*x4866))+sj0+((r11*x4874)));
evalcond[3]=((((-1.0)*r22*x4872))+(((-1.0)*cj2*x4870))+((sj1*sj2))+(((-1.0)*x4871*x4873))+((r21*x4875)));
evalcond[4]=(((r01*x4875))+((cj1*sj0*sj2))+((sj0*x4869))+(((-1.0)*r02*x4872))+(((-1.0)*x4867*x4873)));
evalcond[5]=((((-1.0)*x4868*x4873))+(((-1.0)*cj0*sj2*x4870))+(((-1.0)*r12*x4872))+(((-1.0)*cj0*x4869))+((r11*x4875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4876=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x4876;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x4876);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4877=r21*r21;
IkReal x4878=cj5*cj5;
IkReal x4879=(cj2*sj1);
IkReal x4880=(cj1*sj2);
IkReal x4881=((1.0)*r22);
IkReal x4882=(r21*sj5);
IkReal x4883=((1.0)*cj5*r20);
IkReal x4884=((((-1.0)*x4878*(r20*r20)))+((x4877*x4878))+(((-1.0)*x4877))+(((2.0)*cj5*r20*x4882))+(((-1.0)*r22*x4881)));
j4eval[0]=x4884;
j4eval[1]=((IKabs(((((-1.0)*x4880*x4883))+(((-1.0)*x4879*x4883))+((x4879*x4882))+((x4880*x4882)))))+(IKabs(((((-1.0)*x4880*x4881))+(((-1.0)*x4879*x4881))))));
j4eval[2]=IKsign(x4884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px))))+IKsqr(((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px))), ((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4885=IKsin(j0);
IkReal x4886=IKcos(j0);
evalcond[0]=((((1.0e-7)*x4885))+(((0.0565)*x4886))+(((-1.0)*px)));
evalcond[1]=((((0.0565)*x4885))+(((-1.0)*py))+(((-1.0e-7)*x4886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4887=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4887;
j4eval[1]=IKsign(x4887);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4888=((1.0)*cj5);
IkReal x4889=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4888)));
j4eval[0]=x4889;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4888)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4889);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4890=((1.0)*sj0);
IkReal x4891=((1.0)*sj5);
IkReal x4892=((((-1.0)*r20*x4891))+(((-1.0)*cj5*r21)));
j4eval[0]=x4892;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x4890))+(((-1.0)*cj0*r11*x4891))+((r01*sj0*sj5)))))+(IKabs(((((-1.0)*r02*x4890))+((cj0*r12))))));
j4eval[2]=IKsign(x4892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4893=((1.0)*sj0);
IkReal x4894=((1.0)*sj5);
CheckValue<IkReal> x4895 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x4893))+(((-1.0)*cj0*r11*x4894))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x4893))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4895.valid){
continue;
}
CheckValue<IkReal> x4896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4894))+(((-1.0)*cj5*r21)))),-1);
if(!x4896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4895.value)+(((1.5707963267949)*(x4896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4897=IKcos(j4);
IkReal x4898=IKsin(j4);
IkReal x4899=(cj5*r00);
IkReal x4900=(cj5*r20);
IkReal x4901=(cj5*r10);
IkReal x4902=((1.0)*x4897);
IkReal x4903=((1.0)*x4898);
IkReal x4904=(sj5*x4897);
IkReal x4905=(sj5*x4898);
evalcond[0]=(((r21*x4904))+(((-1.0)*x4900*x4902))+((r22*x4898)));
evalcond[1]=((((-1.0)*x4899*x4902))+cj0+((r02*x4898))+((r01*x4904)));
evalcond[2]=(sj0+((r12*x4898))+((r11*x4904))+(((-1.0)*x4901*x4902)));
evalcond[3]=(((r21*x4905))+(((-1.0)*r22*x4902))+(((-1.0)*x4900*x4903)));
evalcond[4]=((((-1.0)*x4899*x4903))+sj0+(((-1.0)*r02*x4902))+((r01*x4905)));
evalcond[5]=((((-1.0)*r12*x4902))+((r11*x4905))+(((-1.0)*x4901*x4903))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4906=((1.0)*cj5);
CheckValue<IkReal> x4907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4906))+(((-1.0)*r10*sj5)))),-1);
if(!x4907.valid){
continue;
}
CheckValue<IkReal> x4908 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4906)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4907.value)))+(x4908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4909=IKcos(j4);
IkReal x4910=IKsin(j4);
IkReal x4911=(cj5*r00);
IkReal x4912=(cj5*r20);
IkReal x4913=(cj5*r10);
IkReal x4914=((1.0)*x4909);
IkReal x4915=((1.0)*x4910);
IkReal x4916=(sj5*x4909);
IkReal x4917=(sj5*x4910);
evalcond[0]=((((-1.0)*x4912*x4914))+((r21*x4916))+((r22*x4910)));
evalcond[1]=(cj0+((r02*x4910))+(((-1.0)*x4911*x4914))+((r01*x4916)));
evalcond[2]=(sj0+(((-1.0)*x4913*x4914))+((r12*x4910))+((r11*x4916)));
evalcond[3]=((((-1.0)*x4912*x4915))+((r21*x4917))+(((-1.0)*r22*x4914)));
evalcond[4]=(sj0+(((-1.0)*r02*x4914))+(((-1.0)*x4911*x4915))+((r01*x4917)));
evalcond[5]=((((-1.0)*r12*x4914))+(((-1.0)*x4913*x4915))+((r11*x4917))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4918 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4918.valid){
continue;
}
CheckValue<IkReal> x4919=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4918.value)+(((1.5707963267949)*(x4919.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4920=IKcos(j4);
IkReal x4921=IKsin(j4);
IkReal x4922=(cj5*r00);
IkReal x4923=(cj5*r20);
IkReal x4924=(cj5*r10);
IkReal x4925=((1.0)*x4920);
IkReal x4926=((1.0)*x4921);
IkReal x4927=(sj5*x4920);
IkReal x4928=(sj5*x4921);
evalcond[0]=(((r22*x4921))+((r21*x4927))+(((-1.0)*x4923*x4925)));
evalcond[1]=(cj0+((r01*x4927))+(((-1.0)*x4922*x4925))+((r02*x4921)));
evalcond[2]=(sj0+(((-1.0)*x4924*x4925))+((r11*x4927))+((r12*x4921)));
evalcond[3]=(((r21*x4928))+(((-1.0)*r22*x4925))+(((-1.0)*x4923*x4926)));
evalcond[4]=((((-1.0)*r02*x4925))+sj0+((r01*x4928))+(((-1.0)*x4922*x4926)));
evalcond[5]=((((-1.0)*x4924*x4926))+(((-1.0)*r12*x4925))+((r11*x4928))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px))))+IKsqr(((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px))), ((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4929=IKsin(j0);
IkReal x4930=IKcos(j0);
evalcond[0]=((((1.0e-7)*x4929))+(((-1.0)*px))+(((0.0565)*x4930)));
evalcond[1]=((((-1.0e-7)*x4930))+(((0.0565)*x4929))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4931=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4931;
j4eval[1]=IKsign(x4931);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4932=((1.0)*cj5);
IkReal x4933=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4932)));
j4eval[0]=x4933;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4932)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4934=((1.0)*sj0);
IkReal x4935=((1.0)*sj5);
IkReal x4936=((((-1.0)*r20*x4935))+(((-1.0)*cj5*r21)));
j4eval[0]=x4936;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x4935))+((r01*sj0*sj5))+(((-1.0)*cj5*r00*x4934)))))+(IKabs(((((-1.0)*r02*x4934))+((cj0*r12))))));
j4eval[2]=IKsign(x4936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4937=((1.0)*sj0);
IkReal x4938=((1.0)*sj5);
CheckValue<IkReal> x4939 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x4938))+((r01*sj0*sj5))+(((-1.0)*cj5*r00*x4937)))),IkReal(((((-1.0)*r02*x4937))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4939.valid){
continue;
}
CheckValue<IkReal> x4940=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4938))+(((-1.0)*cj5*r21)))),-1);
if(!x4940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4939.value)+(((1.5707963267949)*(x4940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4941=IKcos(j4);
IkReal x4942=IKsin(j4);
IkReal x4943=(cj5*r00);
IkReal x4944=(cj5*r20);
IkReal x4945=(cj5*r10);
IkReal x4946=((1.0)*x4941);
IkReal x4947=((1.0)*x4942);
IkReal x4948=(sj5*x4941);
IkReal x4949=(sj5*x4942);
evalcond[0]=(((r21*x4948))+(((-1.0)*x4944*x4946))+((r22*x4942)));
evalcond[1]=((((-1.0)*x4943*x4946))+((r01*x4948))+cj0+((r02*x4942)));
evalcond[2]=(sj0+((r11*x4948))+(((-1.0)*x4945*x4946))+((r12*x4942)));
evalcond[3]=(((r21*x4949))+(((-1.0)*r22*x4946))+(((-1.0)*x4944*x4947)));
evalcond[4]=(cj0+((r11*x4949))+(((-1.0)*r12*x4946))+(((-1.0)*x4945*x4947)));
evalcond[5]=((((-1.0)*x4943*x4947))+((r01*x4949))+(((-1.0)*sj0))+(((-1.0)*r02*x4946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4950=((1.0)*cj5);
CheckValue<IkReal> x4951=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4950)))),-1);
if(!x4951.valid){
continue;
}
CheckValue<IkReal> x4952 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4950)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4951.value)))+(x4952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4953=IKcos(j4);
IkReal x4954=IKsin(j4);
IkReal x4955=(cj5*r00);
IkReal x4956=(cj5*r20);
IkReal x4957=(cj5*r10);
IkReal x4958=((1.0)*x4953);
IkReal x4959=((1.0)*x4954);
IkReal x4960=(sj5*x4953);
IkReal x4961=(sj5*x4954);
evalcond[0]=(((r22*x4954))+(((-1.0)*x4956*x4958))+((r21*x4960)));
evalcond[1]=(cj0+(((-1.0)*x4955*x4958))+((r02*x4954))+((r01*x4960)));
evalcond[2]=(sj0+((r12*x4954))+(((-1.0)*x4957*x4958))+((r11*x4960)));
evalcond[3]=((((-1.0)*x4956*x4959))+(((-1.0)*r22*x4958))+((r21*x4961)));
evalcond[4]=(cj0+(((-1.0)*x4957*x4959))+((r11*x4961))+(((-1.0)*r12*x4958)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4955*x4959))+(((-1.0)*r02*x4958))+((r01*x4961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4962 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4962.valid){
continue;
}
CheckValue<IkReal> x4963=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4962.value)+(((1.5707963267949)*(x4963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4964=IKcos(j4);
IkReal x4965=IKsin(j4);
IkReal x4966=(cj5*r00);
IkReal x4967=(cj5*r20);
IkReal x4968=(cj5*r10);
IkReal x4969=((1.0)*x4964);
IkReal x4970=((1.0)*x4965);
IkReal x4971=(sj5*x4964);
IkReal x4972=(sj5*x4965);
evalcond[0]=(((r22*x4965))+(((-1.0)*x4967*x4969))+((r21*x4971)));
evalcond[1]=(cj0+((r02*x4965))+(((-1.0)*x4966*x4969))+((r01*x4971)));
evalcond[2]=(sj0+(((-1.0)*x4968*x4969))+((r12*x4965))+((r11*x4971)));
evalcond[3]=((((-1.0)*r22*x4969))+(((-1.0)*x4967*x4970))+((r21*x4972)));
evalcond[4]=((((-1.0)*x4968*x4970))+cj0+((r11*x4972))+(((-1.0)*r12*x4969)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4969))+(((-1.0)*x4966*x4970))+((r01*x4972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.00343155704133)*py))+(((-7.9700679669685)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.00343155704133)*px))+(((7.9700679669685)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.00343155704133)*py))+(((-7.9700679669685)*px))))+IKsqr(((((5.00343155704133)*px))+(((7.9700679669685)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.00343155704133)*py))+(((-7.9700679669685)*px))), ((((5.00343155704133)*px))+(((7.9700679669685)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4973=IKcos(j0);
IkReal x4974=IKsin(j0);
evalcond[0]=((((0.0565)*x4973))+(((-0.09)*x4974))+(((-1.0)*px)));
evalcond[1]=((((0.0565)*x4974))+(((-1.0)*py))+(((0.09)*x4973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4975=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4975;
j4eval[1]=IKsign(x4975);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4976=((1.0)*cj5);
IkReal x4977=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4976)));
j4eval[0]=x4977;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4976)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4978=((1.0)*sj0);
IkReal x4979=((1.0)*sj5);
IkReal x4980=((((-1.0)*cj5*r21))+(((-1.0)*r20*x4979)));
j4eval[0]=x4980;
j4eval[1]=((IKabs(((((-1.0)*r02*x4978))+((cj0*r12)))))+(IKabs(((((-1.0)*cj5*r00*x4978))+((cj0*cj5*r10))+(((-1.0)*cj0*r11*x4979))+((r01*sj0*sj5))))));
j4eval[2]=IKsign(x4980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4981=((1.0)*sj0);
IkReal x4982=((1.0)*sj5);
CheckValue<IkReal> x4983 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r00*x4981))+((cj0*cj5*r10))+(((-1.0)*cj0*r11*x4982))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x4981))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4983.valid){
continue;
}
CheckValue<IkReal> x4984=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4982))+(((-1.0)*cj5*r21)))),-1);
if(!x4984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4983.value)+(((1.5707963267949)*(x4984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4985=IKcos(j4);
IkReal x4986=IKsin(j4);
IkReal x4987=(cj5*r00);
IkReal x4988=(cj5*r20);
IkReal x4989=(cj5*r10);
IkReal x4990=((1.0)*x4985);
IkReal x4991=((1.0)*x4986);
IkReal x4992=(sj5*x4985);
IkReal x4993=(sj5*x4986);
evalcond[0]=(((r22*x4986))+(((-1.0)*x4988*x4990))+((r21*x4992)));
evalcond[1]=(cj0+(((-1.0)*x4987*x4990))+((r01*x4992))+((r02*x4986)));
evalcond[2]=(sj0+((r12*x4986))+((r11*x4992))+(((-1.0)*x4989*x4990)));
evalcond[3]=((((-1.0)*r22*x4990))+(((-1.0)*x4988*x4991))+((r21*x4993)));
evalcond[4]=(cj0+(((-1.0)*r12*x4990))+((r11*x4993))+(((-1.0)*x4989*x4991)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4990))+(((-1.0)*x4987*x4991))+((r01*x4993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4994=((1.0)*cj5);
CheckValue<IkReal> x4995=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4994))+(((-1.0)*r10*sj5)))),-1);
if(!x4995.valid){
continue;
}
CheckValue<IkReal> x4996 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4994)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4995.value)))+(x4996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4997=IKcos(j4);
IkReal x4998=IKsin(j4);
IkReal x4999=(cj5*r00);
IkReal x5000=(cj5*r20);
IkReal x5001=(cj5*r10);
IkReal x5002=((1.0)*x4997);
IkReal x5003=((1.0)*x4998);
IkReal x5004=(sj5*x4997);
IkReal x5005=(sj5*x4998);
evalcond[0]=(((r22*x4998))+(((-1.0)*x5000*x5002))+((r21*x5004)));
evalcond[1]=(cj0+((r02*x4998))+((r01*x5004))+(((-1.0)*x4999*x5002)));
evalcond[2]=(sj0+((r11*x5004))+(((-1.0)*x5001*x5002))+((r12*x4998)));
evalcond[3]=((((-1.0)*x5000*x5003))+((r21*x5005))+(((-1.0)*r22*x5002)));
evalcond[4]=(((r11*x5005))+cj0+(((-1.0)*x5001*x5003))+(((-1.0)*r12*x5002)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5005))+(((-1.0)*x4999*x5003))+(((-1.0)*r02*x5002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5006 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5006.valid){
continue;
}
CheckValue<IkReal> x5007=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5006.value)+(((1.5707963267949)*(x5007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5008=IKcos(j4);
IkReal x5009=IKsin(j4);
IkReal x5010=(cj5*r00);
IkReal x5011=(cj5*r20);
IkReal x5012=(cj5*r10);
IkReal x5013=((1.0)*x5008);
IkReal x5014=((1.0)*x5009);
IkReal x5015=(sj5*x5008);
IkReal x5016=(sj5*x5009);
evalcond[0]=(((r21*x5015))+(((-1.0)*x5011*x5013))+((r22*x5009)));
evalcond[1]=(cj0+((r02*x5009))+(((-1.0)*x5010*x5013))+((r01*x5015)));
evalcond[2]=(((r12*x5009))+sj0+(((-1.0)*x5012*x5013))+((r11*x5015)));
evalcond[3]=((((-1.0)*r22*x5013))+((r21*x5016))+(((-1.0)*x5011*x5014)));
evalcond[4]=(cj0+(((-1.0)*x5012*x5014))+(((-1.0)*r12*x5013))+((r11*x5016)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5013))+(((-1.0)*x5010*x5014))+((r01*x5016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.00343155704133)*py))+(((-7.9700679669685)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.00343155704133)*px))+(((7.9700679669685)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.00343155704133)*py))+(((-7.9700679669685)*px))))+IKsqr(((((5.00343155704133)*px))+(((7.9700679669685)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.00343155704133)*py))+(((-7.9700679669685)*px))), ((((5.00343155704133)*px))+(((7.9700679669685)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5017=IKcos(j0);
IkReal x5018=IKsin(j0);
evalcond[0]=((((-0.09)*x5018))+(((-1.0)*px))+(((0.0565)*x5017)));
evalcond[1]=((((-1.0)*py))+(((0.0565)*x5018))+(((0.09)*x5017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5019=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5019;
j4eval[1]=IKsign(x5019);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5020=((1.0)*cj5);
IkReal x5021=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5020)));
j4eval[0]=x5021;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5020)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5021);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5022=((1.0)*sj0);
IkReal x5023=((1.0)*sj5);
IkReal x5024=((((-1.0)*r20*x5023))+(((-1.0)*cj5*r21)));
j4eval[0]=x5024;
j4eval[1]=((IKabs(((((-1.0)*cj0*r11*x5023))+((cj0*cj5*r10))+(((-1.0)*cj5*r00*x5022))+((r01*sj0*sj5)))))+(IKabs(((((-1.0)*r02*x5022))+((cj0*r12))))));
j4eval[2]=IKsign(x5024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5025=((1.0)*sj0);
IkReal x5026=((1.0)*sj5);
CheckValue<IkReal> x5027 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x5026))+((cj0*cj5*r10))+(((-1.0)*cj5*r00*x5025))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x5025))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5027.valid){
continue;
}
CheckValue<IkReal> x5028=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5026))+(((-1.0)*cj5*r21)))),-1);
if(!x5028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5027.value)+(((1.5707963267949)*(x5028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5029=IKcos(j4);
IkReal x5030=IKsin(j4);
IkReal x5031=(cj5*r00);
IkReal x5032=(cj5*r20);
IkReal x5033=(cj5*r10);
IkReal x5034=((1.0)*x5029);
IkReal x5035=((1.0)*x5030);
IkReal x5036=(sj5*x5029);
IkReal x5037=(sj5*x5030);
evalcond[0]=((((-1.0)*x5032*x5034))+((r21*x5036))+((r22*x5030)));
evalcond[1]=(cj0+((r02*x5030))+(((-1.0)*x5031*x5034))+((r01*x5036)));
evalcond[2]=(((r12*x5030))+sj0+((r11*x5036))+(((-1.0)*x5033*x5034)));
evalcond[3]=((((-1.0)*x5032*x5035))+((r21*x5037))+(((-1.0)*r22*x5034)));
evalcond[4]=(sj0+(((-1.0)*x5031*x5035))+((r01*x5037))+(((-1.0)*r02*x5034)));
evalcond[5]=(((r11*x5037))+(((-1.0)*x5033*x5035))+(((-1.0)*r12*x5034))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5038=((1.0)*cj5);
CheckValue<IkReal> x5039 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5038)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5039.valid){
continue;
}
CheckValue<IkReal> x5040=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5038)))),-1);
if(!x5040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5039.value)+(((1.5707963267949)*(x5040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5041=IKcos(j4);
IkReal x5042=IKsin(j4);
IkReal x5043=(cj5*r00);
IkReal x5044=(cj5*r20);
IkReal x5045=(cj5*r10);
IkReal x5046=((1.0)*x5041);
IkReal x5047=((1.0)*x5042);
IkReal x5048=(sj5*x5041);
IkReal x5049=(sj5*x5042);
evalcond[0]=(((r21*x5048))+(((-1.0)*x5044*x5046))+((r22*x5042)));
evalcond[1]=((((-1.0)*x5043*x5046))+cj0+((r02*x5042))+((r01*x5048)));
evalcond[2]=(sj0+(((-1.0)*x5045*x5046))+((r12*x5042))+((r11*x5048)));
evalcond[3]=(((r21*x5049))+(((-1.0)*r22*x5046))+(((-1.0)*x5044*x5047)));
evalcond[4]=((((-1.0)*x5043*x5047))+sj0+(((-1.0)*r02*x5046))+((r01*x5049)));
evalcond[5]=((((-1.0)*r12*x5046))+(((-1.0)*x5045*x5047))+((r11*x5049))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5050 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5050.valid){
continue;
}
CheckValue<IkReal> x5051=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5050.value)+(((1.5707963267949)*(x5051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5052=IKcos(j4);
IkReal x5053=IKsin(j4);
IkReal x5054=(cj5*r00);
IkReal x5055=(cj5*r20);
IkReal x5056=(cj5*r10);
IkReal x5057=((1.0)*x5052);
IkReal x5058=((1.0)*x5053);
IkReal x5059=(sj5*x5052);
IkReal x5060=(sj5*x5053);
evalcond[0]=(((r21*x5059))+((r22*x5053))+(((-1.0)*x5055*x5057)));
evalcond[1]=(cj0+(((-1.0)*x5054*x5057))+((r01*x5059))+((r02*x5053)));
evalcond[2]=(sj0+((r12*x5053))+((r11*x5059))+(((-1.0)*x5056*x5057)));
evalcond[3]=((((-1.0)*x5055*x5058))+(((-1.0)*r22*x5057))+((r21*x5060)));
evalcond[4]=(sj0+(((-1.0)*x5054*x5058))+(((-1.0)*r02*x5057))+((r01*x5060)));
evalcond[5]=((((-1.0)*r12*x5057))+((r11*x5060))+(((-1.0)*x5056*x5058))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((17.6991150441923)*px))+(((3.13258673348537e-5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py))))+IKsqr(((((17.6991150441923)*px))+(((3.13258673348537e-5)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py))), ((((17.6991150441923)*px))+(((3.13258673348537e-5)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5061=IKcos(j0);
IkReal x5062=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.0565)*x5061))+(((-1.0e-7)*x5062)));
evalcond[1]=((((-1.0)*py))+(((0.0565)*x5062))+(((1.0e-7)*x5061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5063=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5063;
j4eval[1]=IKsign(x5063);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5064=((1.0)*cj5);
IkReal x5065=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5064)));
j4eval[0]=x5065;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5064)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5066=((1.0)*sj0);
IkReal x5067=((1.0)*sj5);
IkReal x5068=((((-1.0)*r20*x5067))+(((-1.0)*cj5*r21)));
j4eval[0]=x5068;
j4eval[1]=((IKabs(((((-1.0)*cj0*r11*x5067))+((cj0*cj5*r10))+(((-1.0)*cj5*r00*x5066))+((r01*sj0*sj5)))))+(IKabs(((((-1.0)*r02*x5066))+((cj0*r12))))));
j4eval[2]=IKsign(x5068);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5069=((1.0)*sj0);
IkReal x5070=((1.0)*sj5);
CheckValue<IkReal> x5071 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x5070))+((cj0*cj5*r10))+(((-1.0)*cj5*r00*x5069))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x5069))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5071.valid){
continue;
}
CheckValue<IkReal> x5072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5070))+(((-1.0)*cj5*r21)))),-1);
if(!x5072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5071.value)+(((1.5707963267949)*(x5072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5073=IKcos(j4);
IkReal x5074=IKsin(j4);
IkReal x5075=(cj5*r00);
IkReal x5076=(cj5*r20);
IkReal x5077=(cj5*r10);
IkReal x5078=((1.0)*x5073);
IkReal x5079=((1.0)*x5074);
IkReal x5080=(sj5*x5073);
IkReal x5081=(sj5*x5074);
evalcond[0]=(((r21*x5080))+(((-1.0)*x5076*x5078))+((r22*x5074)));
evalcond[1]=(cj0+((r01*x5080))+((r02*x5074))+(((-1.0)*x5075*x5078)));
evalcond[2]=(sj0+((r11*x5080))+(((-1.0)*x5077*x5078))+((r12*x5074)));
evalcond[3]=(((r21*x5081))+(((-1.0)*x5076*x5079))+(((-1.0)*r22*x5078)));
evalcond[4]=(cj0+((r11*x5081))+(((-1.0)*x5077*x5079))+(((-1.0)*r12*x5078)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5078))+((r01*x5081))+(((-1.0)*x5075*x5079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5082=((1.0)*cj5);
CheckValue<IkReal> x5083=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5082))+(((-1.0)*r10*sj5)))),-1);
if(!x5083.valid){
continue;
}
CheckValue<IkReal> x5084 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5082)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5083.value)))+(x5084.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5085=IKcos(j4);
IkReal x5086=IKsin(j4);
IkReal x5087=(cj5*r00);
IkReal x5088=(cj5*r20);
IkReal x5089=(cj5*r10);
IkReal x5090=((1.0)*x5085);
IkReal x5091=((1.0)*x5086);
IkReal x5092=(sj5*x5085);
IkReal x5093=(sj5*x5086);
evalcond[0]=((((-1.0)*x5088*x5090))+((r21*x5092))+((r22*x5086)));
evalcond[1]=(cj0+((r01*x5092))+((r02*x5086))+(((-1.0)*x5087*x5090)));
evalcond[2]=(sj0+((r11*x5092))+((r12*x5086))+(((-1.0)*x5089*x5090)));
evalcond[3]=((((-1.0)*r22*x5090))+(((-1.0)*x5088*x5091))+((r21*x5093)));
evalcond[4]=(cj0+((r11*x5093))+(((-1.0)*x5089*x5091))+(((-1.0)*r12*x5090)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5093))+(((-1.0)*r02*x5090))+(((-1.0)*x5087*x5091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5094 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5094.valid){
continue;
}
CheckValue<IkReal> x5095=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5094.value)+(((1.5707963267949)*(x5095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5096=IKcos(j4);
IkReal x5097=IKsin(j4);
IkReal x5098=(cj5*r00);
IkReal x5099=(cj5*r20);
IkReal x5100=(cj5*r10);
IkReal x5101=((1.0)*x5096);
IkReal x5102=((1.0)*x5097);
IkReal x5103=(sj5*x5096);
IkReal x5104=(sj5*x5097);
evalcond[0]=(((r22*x5097))+((r21*x5103))+(((-1.0)*x5099*x5101)));
evalcond[1]=(((r01*x5103))+cj0+(((-1.0)*x5098*x5101))+((r02*x5097)));
evalcond[2]=(sj0+(((-1.0)*x5100*x5101))+((r12*x5097))+((r11*x5103)));
evalcond[3]=((((-1.0)*r22*x5101))+((r21*x5104))+(((-1.0)*x5099*x5102)));
evalcond[4]=(cj0+(((-1.0)*x5100*x5102))+((r11*x5104))+(((-1.0)*r12*x5101)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5104))+(((-1.0)*r02*x5101))+(((-1.0)*x5098*x5102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((17.6991150441923)*px))+(((3.13258673348537e-5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py))))+IKsqr(((((17.6991150441923)*px))+(((3.13258673348537e-5)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py))), ((((17.6991150441923)*px))+(((3.13258673348537e-5)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5105=IKcos(j0);
IkReal x5106=IKsin(j0);
evalcond[0]=((((-1.0e-7)*x5106))+(((0.0565)*x5105))+(((-1.0)*px)));
evalcond[1]=((((0.0565)*x5106))+(((-1.0)*py))+(((1.0e-7)*x5105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5107=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5107;
j4eval[1]=IKsign(x5107);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5108=((1.0)*cj5);
IkReal x5109=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5108)));
j4eval[0]=x5109;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5108))))));
j4eval[2]=IKsign(x5109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5110=((1.0)*sj0);
IkReal x5111=((1.0)*sj5);
IkReal x5112=((((-1.0)*r20*x5111))+(((-1.0)*cj5*r21)));
j4eval[0]=x5112;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x5110))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x5111)))))+(IKabs(((((-1.0)*r02*x5110))+((cj0*r12))))));
j4eval[2]=IKsign(x5112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5113=((1.0)*sj0);
IkReal x5114=((1.0)*sj5);
CheckValue<IkReal> x5115 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x5113))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x5114)))),IkReal(((((-1.0)*r02*x5113))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5115.valid){
continue;
}
CheckValue<IkReal> x5116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5114))+(((-1.0)*cj5*r21)))),-1);
if(!x5116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5115.value)+(((1.5707963267949)*(x5116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5117=IKcos(j4);
IkReal x5118=IKsin(j4);
IkReal x5119=(cj5*r00);
IkReal x5120=(cj5*r20);
IkReal x5121=(cj5*r10);
IkReal x5122=((1.0)*x5117);
IkReal x5123=((1.0)*x5118);
IkReal x5124=(sj5*x5117);
IkReal x5125=(sj5*x5118);
evalcond[0]=(((r22*x5118))+((r21*x5124))+(((-1.0)*x5120*x5122)));
evalcond[1]=(cj0+((r02*x5118))+((r01*x5124))+(((-1.0)*x5119*x5122)));
evalcond[2]=(sj0+((r11*x5124))+(((-1.0)*x5121*x5122))+((r12*x5118)));
evalcond[3]=(((r21*x5125))+(((-1.0)*x5120*x5123))+(((-1.0)*r22*x5122)));
evalcond[4]=(sj0+((r01*x5125))+(((-1.0)*r02*x5122))+(((-1.0)*x5119*x5123)));
evalcond[5]=(((r11*x5125))+(((-1.0)*x5121*x5123))+(((-1.0)*r12*x5122))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5126=((1.0)*cj5);
CheckValue<IkReal> x5127 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5126))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5127.valid){
continue;
}
CheckValue<IkReal> x5128=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5126)))),-1);
if(!x5128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5127.value)+(((1.5707963267949)*(x5128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5129=IKcos(j4);
IkReal x5130=IKsin(j4);
IkReal x5131=(cj5*r00);
IkReal x5132=(cj5*r20);
IkReal x5133=(cj5*r10);
IkReal x5134=((1.0)*x5129);
IkReal x5135=((1.0)*x5130);
IkReal x5136=(sj5*x5129);
IkReal x5137=(sj5*x5130);
evalcond[0]=(((r22*x5130))+(((-1.0)*x5132*x5134))+((r21*x5136)));
evalcond[1]=((((-1.0)*x5131*x5134))+cj0+((r01*x5136))+((r02*x5130)));
evalcond[2]=(sj0+((r12*x5130))+((r11*x5136))+(((-1.0)*x5133*x5134)));
evalcond[3]=((((-1.0)*x5132*x5135))+((r21*x5137))+(((-1.0)*r22*x5134)));
evalcond[4]=((((-1.0)*x5131*x5135))+sj0+((r01*x5137))+(((-1.0)*r02*x5134)));
evalcond[5]=(((r11*x5137))+(((-1.0)*r12*x5134))+(((-1.0)*cj0))+(((-1.0)*x5133*x5135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5138 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5138.valid){
continue;
}
CheckValue<IkReal> x5139=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5138.value)+(((1.5707963267949)*(x5139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5140=IKcos(j4);
IkReal x5141=IKsin(j4);
IkReal x5142=(cj5*r00);
IkReal x5143=(cj5*r20);
IkReal x5144=(cj5*r10);
IkReal x5145=((1.0)*x5140);
IkReal x5146=((1.0)*x5141);
IkReal x5147=(sj5*x5140);
IkReal x5148=(sj5*x5141);
evalcond[0]=(((r21*x5147))+(((-1.0)*x5143*x5145))+((r22*x5141)));
evalcond[1]=(((r01*x5147))+(((-1.0)*x5142*x5145))+cj0+((r02*x5141)));
evalcond[2]=(sj0+((r12*x5141))+((r11*x5147))+(((-1.0)*x5144*x5145)));
evalcond[3]=(((r21*x5148))+(((-1.0)*x5143*x5146))+(((-1.0)*r22*x5145)));
evalcond[4]=(sj0+((r01*x5148))+(((-1.0)*x5142*x5146))+(((-1.0)*r02*x5145)));
evalcond[5]=((((-1.0)*r12*x5145))+((r11*x5148))+(((-1.0)*cj0))+(((-1.0)*x5144*x5146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.00343155704133)*py))+(((7.9700679669685)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.00343155704133)*px))+(((-7.9700679669685)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.00343155704133)*py))+(((7.9700679669685)*px))))+IKsqr(((((5.00343155704133)*px))+(((-7.9700679669685)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.00343155704133)*py))+(((7.9700679669685)*px))), ((((5.00343155704133)*px))+(((-7.9700679669685)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5149=IKsin(j0);
IkReal x5150=IKcos(j0);
evalcond[0]=((((0.0565)*x5150))+(((-1.0)*px))+(((0.09)*x5149)));
evalcond[1]=((((0.0565)*x5149))+(((-1.0)*py))+(((-0.09)*x5150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5151=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5151;
j4eval[1]=IKsign(x5151);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5152=((1.0)*cj5);
IkReal x5153=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5152)));
j4eval[0]=x5153;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5152))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5154=((1.0)*sj0);
IkReal x5155=((1.0)*sj5);
IkReal x5156=((((-1.0)*r20*x5155))+(((-1.0)*cj5*r21)));
j4eval[0]=x5156;
j4eval[1]=((IKabs((((cj0*r12))+(((-1.0)*r02*x5154)))))+(IKabs(((((-1.0)*cj0*r11*x5155))+((cj0*cj5*r10))+(((-1.0)*cj5*r00*x5154))+((r01*sj0*sj5))))));
j4eval[2]=IKsign(x5156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5157=((1.0)*sj0);
IkReal x5158=((1.0)*sj5);
CheckValue<IkReal> x5159 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x5158))+((cj0*cj5*r10))+(((-1.0)*cj5*r00*x5157))+((r01*sj0*sj5)))),IkReal((((cj0*r12))+(((-1.0)*r02*x5157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5159.valid){
continue;
}
CheckValue<IkReal> x5160=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5158))+(((-1.0)*cj5*r21)))),-1);
if(!x5160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5159.value)+(((1.5707963267949)*(x5160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5161=IKcos(j4);
IkReal x5162=IKsin(j4);
IkReal x5163=(cj5*r00);
IkReal x5164=(cj5*r20);
IkReal x5165=(cj5*r10);
IkReal x5166=((1.0)*x5161);
IkReal x5167=((1.0)*x5162);
IkReal x5168=(sj5*x5161);
IkReal x5169=(sj5*x5162);
evalcond[0]=(((r21*x5168))+(((-1.0)*x5164*x5166))+((r22*x5162)));
evalcond[1]=(cj0+((r01*x5168))+(((-1.0)*x5163*x5166))+((r02*x5162)));
evalcond[2]=(sj0+((r12*x5162))+((r11*x5168))+(((-1.0)*x5165*x5166)));
evalcond[3]=((((-1.0)*r22*x5166))+((r21*x5169))+(((-1.0)*x5164*x5167)));
evalcond[4]=(sj0+((r01*x5169))+(((-1.0)*r02*x5166))+(((-1.0)*x5163*x5167)));
evalcond[5]=((((-1.0)*r12*x5166))+((r11*x5169))+(((-1.0)*x5165*x5167))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5170=((1.0)*cj5);
CheckValue<IkReal> x5171 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5170)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5171.valid){
continue;
}
CheckValue<IkReal> x5172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5170)))),-1);
if(!x5172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5171.value)+(((1.5707963267949)*(x5172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5173=IKcos(j4);
IkReal x5174=IKsin(j4);
IkReal x5175=(cj5*r00);
IkReal x5176=(cj5*r20);
IkReal x5177=(cj5*r10);
IkReal x5178=((1.0)*x5173);
IkReal x5179=((1.0)*x5174);
IkReal x5180=(sj5*x5173);
IkReal x5181=(sj5*x5174);
evalcond[0]=((((-1.0)*x5176*x5178))+((r21*x5180))+((r22*x5174)));
evalcond[1]=((((-1.0)*x5175*x5178))+cj0+((r01*x5180))+((r02*x5174)));
evalcond[2]=(sj0+((r12*x5174))+(((-1.0)*x5177*x5178))+((r11*x5180)));
evalcond[3]=((((-1.0)*x5176*x5179))+((r21*x5181))+(((-1.0)*r22*x5178)));
evalcond[4]=((((-1.0)*x5175*x5179))+sj0+((r01*x5181))+(((-1.0)*r02*x5178)));
evalcond[5]=((((-1.0)*r12*x5178))+(((-1.0)*x5177*x5179))+((r11*x5181))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5182 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5182.valid){
continue;
}
CheckValue<IkReal> x5183=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5182.value)+(((1.5707963267949)*(x5183.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5184=IKcos(j4);
IkReal x5185=IKsin(j4);
IkReal x5186=(cj5*r00);
IkReal x5187=(cj5*r20);
IkReal x5188=(cj5*r10);
IkReal x5189=((1.0)*x5184);
IkReal x5190=((1.0)*x5185);
IkReal x5191=(sj5*x5184);
IkReal x5192=(sj5*x5185);
evalcond[0]=(((r22*x5185))+((r21*x5191))+(((-1.0)*x5187*x5189)));
evalcond[1]=(cj0+((r02*x5185))+((r01*x5191))+(((-1.0)*x5186*x5189)));
evalcond[2]=(sj0+(((-1.0)*x5188*x5189))+((r11*x5191))+((r12*x5185)));
evalcond[3]=((((-1.0)*r22*x5189))+((r21*x5192))+(((-1.0)*x5187*x5190)));
evalcond[4]=(sj0+(((-1.0)*r02*x5189))+(((-1.0)*x5186*x5190))+((r01*x5192)));
evalcond[5]=(((r11*x5192))+(((-1.0)*r12*x5189))+(((-1.0)*x5188*x5190))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.00343155704133)*py))+(((7.9700679669685)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.00343155704133)*px))+(((-7.9700679669685)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.00343155704133)*py))+(((7.9700679669685)*px))))+IKsqr(((((5.00343155704133)*px))+(((-7.9700679669685)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.00343155704133)*py))+(((7.9700679669685)*px))), ((((5.00343155704133)*px))+(((-7.9700679669685)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5193=IKsin(j0);
IkReal x5194=IKcos(j0);
evalcond[0]=((((0.0565)*x5194))+(((-1.0)*px))+(((0.09)*x5193)));
evalcond[1]=((((-0.09)*x5194))+(((0.0565)*x5193))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5195=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5195;
j4eval[1]=IKsign(x5195);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5196=((1.0)*cj5);
IkReal x5197=((((-1.0)*r11*x5196))+(((-1.0)*r10*sj5)));
j4eval[0]=x5197;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5196))))));
j4eval[2]=IKsign(x5197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5198=((1.0)*sj0);
IkReal x5199=((1.0)*sj5);
IkReal x5200=((((-1.0)*r20*x5199))+(((-1.0)*cj5*r21)));
j4eval[0]=x5200;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x5198))+(((-1.0)*cj0*r11*x5199))+((r01*sj0*sj5)))))+(IKabs(((((-1.0)*r02*x5198))+((cj0*r12))))));
j4eval[2]=IKsign(x5200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5201=((1.0)*sj0);
IkReal x5202=((1.0)*sj5);
CheckValue<IkReal> x5203 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x5202))+((r01*sj0*sj5))+(((-1.0)*cj5*r00*x5201)))),IkReal(((((-1.0)*r02*x5201))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5203.valid){
continue;
}
CheckValue<IkReal> x5204=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x5202)))),-1);
if(!x5204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5203.value)+(((1.5707963267949)*(x5204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5205=IKcos(j4);
IkReal x5206=IKsin(j4);
IkReal x5207=(cj5*r00);
IkReal x5208=(cj5*r20);
IkReal x5209=(cj5*r10);
IkReal x5210=((1.0)*x5205);
IkReal x5211=((1.0)*x5206);
IkReal x5212=(sj5*x5205);
IkReal x5213=(sj5*x5206);
evalcond[0]=(((r22*x5206))+((r21*x5212))+(((-1.0)*x5208*x5210)));
evalcond[1]=(((r01*x5212))+cj0+((r02*x5206))+(((-1.0)*x5207*x5210)));
evalcond[2]=(sj0+((r11*x5212))+((r12*x5206))+(((-1.0)*x5209*x5210)));
evalcond[3]=((((-1.0)*r22*x5210))+((r21*x5213))+(((-1.0)*x5208*x5211)));
evalcond[4]=(cj0+((r11*x5213))+(((-1.0)*x5209*x5211))+(((-1.0)*r12*x5210)));
evalcond[5]=(((r01*x5213))+(((-1.0)*sj0))+(((-1.0)*x5207*x5211))+(((-1.0)*r02*x5210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5214=((1.0)*cj5);
CheckValue<IkReal> x5215 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5214)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5215.valid){
continue;
}
CheckValue<IkReal> x5216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5214))+(((-1.0)*r10*sj5)))),-1);
if(!x5216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5215.value)+(((1.5707963267949)*(x5216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5217=IKcos(j4);
IkReal x5218=IKsin(j4);
IkReal x5219=(cj5*r00);
IkReal x5220=(cj5*r20);
IkReal x5221=(cj5*r10);
IkReal x5222=((1.0)*x5217);
IkReal x5223=((1.0)*x5218);
IkReal x5224=(sj5*x5217);
IkReal x5225=(sj5*x5218);
evalcond[0]=(((r21*x5224))+((r22*x5218))+(((-1.0)*x5220*x5222)));
evalcond[1]=(cj0+(((-1.0)*x5219*x5222))+((r02*x5218))+((r01*x5224)));
evalcond[2]=(sj0+(((-1.0)*x5221*x5222))+((r12*x5218))+((r11*x5224)));
evalcond[3]=(((r21*x5225))+(((-1.0)*r22*x5222))+(((-1.0)*x5220*x5223)));
evalcond[4]=(cj0+(((-1.0)*x5221*x5223))+(((-1.0)*r12*x5222))+((r11*x5225)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5219*x5223))+(((-1.0)*r02*x5222))+((r01*x5225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5226 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5226.valid){
continue;
}
CheckValue<IkReal> x5227=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5226.value)+(((1.5707963267949)*(x5227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5228=IKcos(j4);
IkReal x5229=IKsin(j4);
IkReal x5230=(cj5*r00);
IkReal x5231=(cj5*r20);
IkReal x5232=(cj5*r10);
IkReal x5233=((1.0)*x5228);
IkReal x5234=((1.0)*x5229);
IkReal x5235=(sj5*x5228);
IkReal x5236=(sj5*x5229);
evalcond[0]=(((r22*x5229))+(((-1.0)*x5231*x5233))+((r21*x5235)));
evalcond[1]=(cj0+((r02*x5229))+((r01*x5235))+(((-1.0)*x5230*x5233)));
evalcond[2]=(sj0+((r11*x5235))+(((-1.0)*x5232*x5233))+((r12*x5229)));
evalcond[3]=((((-1.0)*r22*x5233))+(((-1.0)*x5231*x5234))+((r21*x5236)));
evalcond[4]=(cj0+((r11*x5236))+(((-1.0)*r12*x5233))+(((-1.0)*x5232*x5234)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5233))+((r01*x5236))+(((-1.0)*x5230*x5234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5237=(cj2*sj1);
IkReal x5238=(r00*sj5);
IkReal x5239=(cj1*sj2);
IkReal x5240=(cj5*r01);
IkReal x5241=((180.0)*sj1);
IkReal x5242=((2000.0)*px);
IkReal x5243=((0.0002)*cj1);
CheckValue<IkReal> x5244=IKPowWithIntegerCheck((x5239+x5237),-1);
if(!x5244.valid){
continue;
}
CheckValue<IkReal> x5245=IKPowWithIntegerCheck(((((113.0)*x5237))+(((113.0)*x5239))),-1);
if(!x5245.valid){
continue;
}
if( IKabs(((x5244.value)*(((((-1.0)*x5240))+(((-1.0)*x5238)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5245.value)*((((x5239*x5242))+((x5240*x5243))+(((-67.0)*x5237*x5238))+((x5237*x5242))+(((-67.0)*x5239*x5240))+(((-67.0)*x5237*x5240))+((x5238*x5243))+(((-67.0)*x5238*x5239))+(((-1.0)*x5240*x5241))+(((-1.0)*x5238*x5241)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5244.value)*(((((-1.0)*x5240))+(((-1.0)*x5238))))))+IKsqr(((x5245.value)*((((x5239*x5242))+((x5240*x5243))+(((-67.0)*x5237*x5238))+((x5237*x5242))+(((-67.0)*x5239*x5240))+(((-67.0)*x5237*x5240))+((x5238*x5243))+(((-67.0)*x5238*x5239))+(((-1.0)*x5240*x5241))+(((-1.0)*x5238*x5241))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5244.value)*(((((-1.0)*x5240))+(((-1.0)*x5238))))), ((x5245.value)*((((x5239*x5242))+((x5240*x5243))+(((-67.0)*x5237*x5238))+((x5237*x5242))+(((-67.0)*x5239*x5240))+(((-67.0)*x5237*x5240))+((x5238*x5243))+(((-67.0)*x5238*x5239))+(((-1.0)*x5240*x5241))+(((-1.0)*x5238*x5241))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5246=IKsin(j0);
IkReal x5247=IKcos(j0);
IkReal x5248=(cj5*r01);
IkReal x5249=((0.0565)*sj5);
IkReal x5250=(cj1*sj2);
IkReal x5251=(cj5*r11);
IkReal x5252=(cj2*sj1);
IkReal x5253=((1.0e-7)*cj1);
IkReal x5254=((1.0)*x5247);
IkReal x5255=((0.09)*x5246);
IkReal x5256=((0.09)*x5247);
evalcond[0]=(((r00*sj5))+((x5246*x5250))+((x5246*x5252))+x5248);
evalcond[1]=(((r10*sj5))+x5251+(((-1.0)*x5250*x5254))+(((-1.0)*x5252*x5254)));
evalcond[2]=(((x5246*x5253))+(((-1.0)*sj1*x5255))+(((0.0565)*x5247))+(((-1.0)*x5250*x5255))+(((-1.0)*r00*x5249))+(((-1.0)*px))+(((-1.0)*x5252*x5255))+(((-0.0565)*x5248)));
evalcond[3]=((((-1.0)*r10*x5249))+(((-0.0565)*x5251))+(((0.0565)*x5246))+((sj1*x5256))+((x5250*x5256))+(((-1.0)*py))+((x5252*x5256))+(((-1.0)*x5247*x5253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5257=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5257;
j4eval[1]=IKsign(x5257);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5258=((1.0)*cj5);
IkReal x5259=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5258)));
j4eval[0]=x5259;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5258)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5260=((1.0)*sj0);
IkReal x5261=((1.0)*sj5);
IkReal x5262=((((-1.0)*cj5*r21))+(((-1.0)*r20*x5261)));
j4eval[0]=x5262;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x5261))+((r01*sj0*sj5))+(((-1.0)*cj5*r00*x5260)))))+(IKabs(((((-1.0)*r02*x5260))+((cj0*r12))))));
j4eval[2]=IKsign(x5262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5263=((-1.0)*r20);
IkReal x5265 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5265)==0){
continue;
}
IkReal x5264=pow(x5265,-0.5);
CheckValue<IkReal> x5266 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5263),IKFAST_ATAN2_MAGTHRESH);
if(!x5266.valid){
continue;
}
IkReal gconst148=((-1.0)*(x5266.value));
IkReal gconst149=(r21*x5264);
IkReal gconst150=(x5263*x5264);
CheckValue<IkReal> x5267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5267.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5267.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5268=((-1.0)*r20);
IkReal x5269=x5264;
CheckValue<IkReal> x5271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5268),IKFAST_ATAN2_MAGTHRESH);
if(!x5271.valid){
continue;
}
IkReal x5270=((-1.0)*(x5271.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst149;
cj5=gconst150;
j5=x5270;
IkReal gconst148=x5270;
IkReal gconst149=(r21*x5269);
IkReal gconst150=(x5268*x5269);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5272=((-1.0)*r20);
IkReal x5273=x5264;
CheckValue<IkReal> x5275 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5272),IKFAST_ATAN2_MAGTHRESH);
if(!x5275.valid){
continue;
}
IkReal x5274=((-1.0)*(x5275.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst149;
cj5=gconst150;
j5=x5274;
IkReal gconst148=x5274;
IkReal gconst149=(r21*x5273);
IkReal gconst150=(x5272*x5273);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5276=((-1.0)*r20);
IkReal x5277=x5264;
CheckValue<IkReal> x5279 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5276),IKFAST_ATAN2_MAGTHRESH);
if(!x5279.valid){
continue;
}
IkReal x5278=((-1.0)*(x5279.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst149;
cj5=gconst150;
j5=x5278;
IkReal gconst148=x5278;
IkReal gconst149=(r21*x5277);
IkReal gconst150=(x5276*x5277);
IkReal x5280=((1.0)*(r22*r22));
CheckValue<IkReal> x5284=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5280))),-1);
if(!x5284.valid){
continue;
}
IkReal x5281=x5284.value;
IkReal x5282=((1.0)*x5281);
IkReal x5283=((((-1.0)*x5282*(r20*r20*r20*r20)))+(((-1.0)*x5282*(r21*r21*r21*r21)))+(((-1.0)*x5280))+(((-2.0)*x5281*(r20*r20)*(r21*r21))));
j4eval[0]=x5283;
j4eval[1]=IKsign(x5283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5285=(cj1*sj2);
IkReal x5286=((1.0)*r22);
IkReal x5287=(gconst149*r21);
IkReal x5288=(gconst150*r20);
IkReal x5289=(cj2*sj1);
CheckValue<IkReal> x5290=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x5286))+(((-1.0)*(x5288*x5288)))+(((-1.0)*(x5287*x5287)))+(((2.0)*x5287*x5288)))),-1);
if(!x5290.valid){
continue;
}
CheckValue<IkReal> x5291 = IKatan2WithCheck(IkReal(((((-1.0)*x5285*x5288))+((x5287*x5289))+(((-1.0)*x5288*x5289))+((x5285*x5287)))),IkReal(((((-1.0)*x5286*x5289))+(((-1.0)*x5285*x5286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5290.value)))+(x5291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5292=IKcos(j4);
IkReal x5293=IKsin(j4);
IkReal x5294=(gconst149*r01);
IkReal x5295=(gconst150*r10);
IkReal x5296=(cj1*cj2);
IkReal x5297=(gconst150*r00);
IkReal x5298=(sj1*sj2);
IkReal x5299=(gconst150*r20);
IkReal x5300=((1.0)*x5292);
IkReal x5301=((1.0)*x5293);
IkReal x5302=(gconst149*x5293);
IkReal x5303=(gconst149*x5292);
evalcond[0]=(((r21*x5303))+((r22*x5293))+(((-1.0)*x5299*x5300)));
evalcond[1]=((((-1.0)*x5297*x5300))+cj0+((r02*x5293))+((x5292*x5294)));
evalcond[2]=(((r12*x5293))+sj0+(((-1.0)*x5295*x5300))+((r11*x5303)));
evalcond[3]=((((-1.0)*r22*x5300))+((r21*x5302))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5299*x5301)));
evalcond[4]=((((-1.0)*x5297*x5301))+((sj0*x5296))+(((-1.0)*sj0*x5298))+(((-1.0)*r02*x5300))+((x5293*x5294)));
evalcond[5]=((((-1.0)*x5295*x5301))+(((-1.0)*r12*x5300))+((cj0*x5298))+((r11*x5302))+(((-1.0)*cj0*x5296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5304=((1.0)*gconst150);
CheckValue<IkReal> x5305 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5304))+((cj0*gconst149*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5305.valid){
continue;
}
CheckValue<IkReal> x5306=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r10))+(((-1.0)*r11*x5304)))),-1);
if(!x5306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5305.value)+(((1.5707963267949)*(x5306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5307=IKcos(j4);
IkReal x5308=IKsin(j4);
IkReal x5309=(gconst149*r01);
IkReal x5310=(gconst150*r10);
IkReal x5311=(cj1*cj2);
IkReal x5312=(gconst150*r00);
IkReal x5313=(sj1*sj2);
IkReal x5314=(gconst150*r20);
IkReal x5315=((1.0)*x5307);
IkReal x5316=((1.0)*x5308);
IkReal x5317=(gconst149*x5308);
IkReal x5318=(gconst149*x5307);
evalcond[0]=((((-1.0)*x5314*x5315))+((r21*x5318))+((r22*x5308)));
evalcond[1]=((((-1.0)*x5312*x5315))+cj0+((r02*x5308))+((x5307*x5309)));
evalcond[2]=((((-1.0)*x5310*x5315))+sj0+((r12*x5308))+((r11*x5318)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5314*x5316))+((r21*x5317))+((cj1*sj2))+(((-1.0)*r22*x5315)));
evalcond[4]=((((-1.0)*x5312*x5316))+((x5308*x5309))+(((-1.0)*sj0*x5313))+((sj0*x5311))+(((-1.0)*r02*x5315)));
evalcond[5]=((((-1.0)*x5310*x5316))+(((-1.0)*r12*x5315))+((cj0*x5313))+(((-1.0)*cj0*x5311))+((r11*x5317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5319=IKPowWithIntegerCheck(IKsign((((gconst150*r01))+((gconst149*r00)))),-1);
if(!x5319.valid){
continue;
}
CheckValue<IkReal> x5320 = IKatan2WithCheck(IkReal((((gconst149*r21*sj0))+(((-1.0)*gconst150*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5319.value)))+(x5320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5321=IKcos(j4);
IkReal x5322=IKsin(j4);
IkReal x5323=(gconst149*r01);
IkReal x5324=(gconst150*r10);
IkReal x5325=(cj1*cj2);
IkReal x5326=(gconst150*r00);
IkReal x5327=(sj1*sj2);
IkReal x5328=(gconst150*r20);
IkReal x5329=((1.0)*x5321);
IkReal x5330=((1.0)*x5322);
IkReal x5331=(gconst149*x5322);
IkReal x5332=(gconst149*x5321);
evalcond[0]=((((-1.0)*x5328*x5329))+((r22*x5322))+((r21*x5332)));
evalcond[1]=(cj0+(((-1.0)*x5326*x5329))+((x5321*x5323))+((r02*x5322)));
evalcond[2]=(sj0+((r11*x5332))+((r12*x5322))+(((-1.0)*x5324*x5329)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x5329))+(((-1.0)*x5328*x5330))+((r21*x5331)));
evalcond[4]=(((x5322*x5323))+(((-1.0)*r02*x5329))+(((-1.0)*x5326*x5330))+(((-1.0)*sj0*x5327))+((sj0*x5325)));
evalcond[5]=(((r11*x5331))+(((-1.0)*r12*x5329))+((cj0*x5327))+(((-1.0)*x5324*x5330))+(((-1.0)*cj0*x5325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5333=((-1.0)*r21);
IkReal x5335 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5335)==0){
continue;
}
IkReal x5334=pow(x5335,-0.5);
CheckValue<IkReal> x5336 = IKatan2WithCheck(IkReal(x5333),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5336.valid){
continue;
}
IkReal gconst151=((3.14159265358979)+(((-1.0)*(x5336.value))));
IkReal gconst152=(x5333*x5334);
IkReal gconst153=((1.0)*r20*x5334);
CheckValue<IkReal> x5337 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5337.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5337.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5338=((-1.0)*r21);
CheckValue<IkReal> x5341 = IKatan2WithCheck(IkReal(x5338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5341.valid){
continue;
}
IkReal x5339=((1.0)*(x5341.value));
IkReal x5340=x5334;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x5339)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x5339)));
IkReal gconst152=(x5338*x5340);
IkReal gconst153=((1.0)*r20*x5340);
IkReal x5342=r22*r22;
IkReal x5343=((1.0)*x5342);
CheckValue<IkReal> x5347=IKPowWithIntegerCheck(((-1.0)+x5342),-1);
if(!x5347.valid){
continue;
}
IkReal x5344=x5347.value;
if((((1.0)+(((-1.0)*x5343)))) < -0.00001)
continue;
IkReal x5345=IKsqrt(((1.0)+(((-1.0)*x5343))));
IkReal x5346=(sj0*x5344*x5345);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5346+(((-1.0)*x5343*x5346))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5348=((-1.0)*r21);
CheckValue<IkReal> x5351 = IKatan2WithCheck(IkReal(x5348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5351.valid){
continue;
}
IkReal x5349=((1.0)*(x5351.value));
IkReal x5350=x5334;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x5349)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x5349)));
IkReal gconst152=(x5348*x5350);
IkReal gconst153=((1.0)*r20*x5350);
IkReal x5352=r22*r22;
IkReal x5353=((1.0)*x5352);
CheckValue<IkReal> x5357=IKPowWithIntegerCheck(((-1.0)+x5352),-1);
if(!x5357.valid){
continue;
}
IkReal x5354=x5357.value;
if((((1.0)+(((-1.0)*x5353)))) < -0.00001)
continue;
IkReal x5355=IKsqrt(((1.0)+(((-1.0)*x5353))));
IkReal x5356=(cj0*x5354*x5355);
j4eval[0]=((IKabs(((((-1.0)*x5353*x5356))+x5356)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5358=((-1.0)*r21);
CheckValue<IkReal> x5361 = IKatan2WithCheck(IkReal(x5358),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5361.valid){
continue;
}
IkReal x5359=((1.0)*(x5361.value));
IkReal x5360=x5334;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x5359)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x5359)));
IkReal gconst152=(x5358*x5360);
IkReal gconst153=((1.0)*r20*x5360);
IkReal x5362=r22*r22;
IkReal x5363=(cj0*r12);
IkReal x5364=((1.0)*r02*sj0);
CheckValue<IkReal> x5368=IKPowWithIntegerCheck(((-1.0)+x5362),-1);
if(!x5368.valid){
continue;
}
IkReal x5365=x5368.value;
if((((1.0)+(((-1.0)*x5362)))) < -0.00001)
continue;
IkReal x5366=IKsqrt(((1.0)+(((-1.0)*x5362))));
IkReal x5367=(r22*x5365*x5366);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x5363+(((-1.0)*x5364)))))+(IKabs(((((-1.0)*x5364*x5367))+((x5363*x5367))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5369=((1.0)*sj0);
IkReal x5370=((1.0)*gconst152);
CheckValue<IkReal> x5371=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst153*r21))+(((-1.0)*r20*x5370)))),-1);
if(!x5371.valid){
continue;
}
CheckValue<IkReal> x5372 = IKatan2WithCheck(IkReal((((gconst152*r01*sj0))+(((-1.0)*cj0*r11*x5370))+(((-1.0)*gconst153*r00*x5369))+((cj0*gconst153*r10)))),IkReal(((((-1.0)*r02*x5369))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5371.value)))+(x5372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5373=IKcos(j4);
IkReal x5374=IKsin(j4);
IkReal x5375=(cj1*cj2);
IkReal x5376=(sj1*sj2);
IkReal x5377=((1.0)*x5373);
IkReal x5378=(gconst152*x5373);
IkReal x5379=(gconst152*x5374);
IkReal x5380=((1.0)*gconst153*x5374);
evalcond[0]=(((r21*x5378))+((r22*x5374))+(((-1.0)*gconst153*r20*x5377)));
evalcond[1]=(cj0+((r02*x5374))+(((-1.0)*gconst153*r00*x5377))+((r01*x5378)));
evalcond[2]=((((-1.0)*gconst153*r10*x5377))+sj0+((r12*x5374))+((r11*x5378)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x5377))+((r21*x5379))+((cj1*sj2))+(((-1.0)*r20*x5380)));
evalcond[4]=((((-1.0)*sj0*x5376))+((sj0*x5375))+(((-1.0)*r02*x5377))+(((-1.0)*r00*x5380))+((r01*x5379)));
evalcond[5]=(((cj0*x5376))+(((-1.0)*cj0*x5375))+(((-1.0)*r12*x5377))+((r11*x5379))+(((-1.0)*r10*x5380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5381=((1.0)*gconst153);
CheckValue<IkReal> x5382 = IKatan2WithCheck(IkReal((((cj0*gconst152*r21))+(((-1.0)*cj0*r20*x5381)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5382.valid){
continue;
}
CheckValue<IkReal> x5383=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst152*r10))+(((-1.0)*r11*x5381)))),-1);
if(!x5383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5382.value)+(((1.5707963267949)*(x5383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5384=IKcos(j4);
IkReal x5385=IKsin(j4);
IkReal x5386=(cj1*cj2);
IkReal x5387=(sj1*sj2);
IkReal x5388=((1.0)*x5384);
IkReal x5389=(gconst152*x5384);
IkReal x5390=(gconst152*x5385);
IkReal x5391=((1.0)*gconst153*x5385);
evalcond[0]=((((-1.0)*gconst153*r20*x5388))+((r21*x5389))+((r22*x5385)));
evalcond[1]=(cj0+((r02*x5385))+(((-1.0)*gconst153*r00*x5388))+((r01*x5389)));
evalcond[2]=(sj0+(((-1.0)*gconst153*r10*x5388))+((r11*x5389))+((r12*x5385)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x5391))+((r21*x5390))+(((-1.0)*r22*x5388)));
evalcond[4]=(((sj0*x5386))+(((-1.0)*sj0*x5387))+(((-1.0)*r02*x5388))+((r01*x5390))+(((-1.0)*r00*x5391)));
evalcond[5]=((((-1.0)*cj0*x5386))+((cj0*x5387))+((r11*x5390))+(((-1.0)*r12*x5388))+(((-1.0)*r10*x5391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5392 = IKatan2WithCheck(IkReal((((gconst152*r21*sj0))+(((-1.0)*gconst153*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5392.valid){
continue;
}
CheckValue<IkReal> x5393=IKPowWithIntegerCheck(IKsign((((gconst153*r01))+((gconst152*r00)))),-1);
if(!x5393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5392.value)+(((1.5707963267949)*(x5393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5394=IKcos(j4);
IkReal x5395=IKsin(j4);
IkReal x5396=(cj1*cj2);
IkReal x5397=(sj1*sj2);
IkReal x5398=((1.0)*x5394);
IkReal x5399=(gconst152*x5394);
IkReal x5400=(gconst152*x5395);
IkReal x5401=((1.0)*gconst153*x5395);
evalcond[0]=(((r22*x5395))+(((-1.0)*gconst153*r20*x5398))+((r21*x5399)));
evalcond[1]=(((r02*x5395))+cj0+(((-1.0)*gconst153*r00*x5398))+((r01*x5399)));
evalcond[2]=(sj0+(((-1.0)*gconst153*r10*x5398))+((r11*x5399))+((r12*x5395)));
evalcond[3]=(((r21*x5400))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x5401))+(((-1.0)*r22*x5398)));
evalcond[4]=((((-1.0)*r00*x5401))+(((-1.0)*r02*x5398))+(((-1.0)*sj0*x5397))+((r01*x5400))+((sj0*x5396)));
evalcond[5]=((((-1.0)*cj0*x5396))+((cj0*x5397))+(((-1.0)*r10*x5401))+(((-1.0)*r12*x5398))+((r11*x5400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5402=((-1.0)*r10);
IkReal x5404 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5404)==0){
continue;
}
IkReal x5403=pow(x5404,-0.5);
CheckValue<IkReal> x5405 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5402),IKFAST_ATAN2_MAGTHRESH);
if(!x5405.valid){
continue;
}
IkReal gconst154=((-1.0)*(x5405.value));
IkReal gconst155=(r11*x5403);
IkReal gconst156=(x5402*x5403);
CheckValue<IkReal> x5406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5406.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5406.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5407=((-1.0)*r10);
IkReal x5408=x5403;
CheckValue<IkReal> x5410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5407),IKFAST_ATAN2_MAGTHRESH);
if(!x5410.valid){
continue;
}
IkReal x5409=((-1.0)*(x5410.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst155;
cj5=gconst156;
j5=x5409;
IkReal gconst154=x5409;
IkReal gconst155=(r11*x5408);
IkReal gconst156=(x5407*x5408);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5411=((-1.0)*r10);
IkReal x5412=x5403;
CheckValue<IkReal> x5414 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5411),IKFAST_ATAN2_MAGTHRESH);
if(!x5414.valid){
continue;
}
IkReal x5413=((-1.0)*(x5414.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst155;
cj5=gconst156;
j5=x5413;
IkReal gconst154=x5413;
IkReal gconst155=(r11*x5412);
IkReal gconst156=(x5411*x5412);
IkReal x5415=r12*r12;
IkReal x5416=(r02*sj0);
IkReal x5417=((1.0)*x5415);
CheckValue<IkReal> x5421=IKPowWithIntegerCheck(((-1.0)+x5415),-1);
if(!x5421.valid){
continue;
}
IkReal x5418=x5421.value;
if((((1.0)+(((-1.0)*x5417)))) < -0.00001)
continue;
IkReal x5419=IKsqrt(((1.0)+(((-1.0)*x5417))));
IkReal x5420=(cj0*x5418*x5419);
j4eval[0]=((IKabs(((((-1.0)*x5417*x5420))+x5420+((r12*x5416*x5418*x5419)))))+(IKabs(((((-1.0)*x5416))+((cj0*r12))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5422=((-1.0)*r10);
IkReal x5423=x5403;
CheckValue<IkReal> x5425 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5422),IKFAST_ATAN2_MAGTHRESH);
if(!x5425.valid){
continue;
}
IkReal x5424=((-1.0)*(x5425.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst155;
cj5=gconst156;
j5=x5424;
IkReal gconst154=x5424;
IkReal gconst155=(r11*x5423);
IkReal gconst156=(x5422*x5423);
IkReal x5426=((1.0)+(((-1.0)*(r12*r12))));
IkReal x5427=(cj1*r22*sj2);
IkReal x5428=(cj2*r22*sj1);
CheckValue<IkReal> x5434=IKPowWithIntegerCheck(x5426,-1);
if(!x5434.valid){
continue;
}
IkReal x5429=x5434.value;
IkReal x5430=((1.0)*x5429);
IkReal x5431=x5403;
IkReal x5432=(r12*x5431);
IkReal x5433=((((-1.0)*x5430*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x5429))+(((-1.0)*x5430*(r11*r11)*(r21*r21))));
j4eval[0]=x5433;
j4eval[1]=((IKabs(((((-1.0)*x5427))+(((-1.0)*x5428)))))+(IKabs((((x5427*x5432))+((x5428*x5432))))));
j4eval[2]=IKsign(x5433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5435=(cj1*sj2);
IkReal x5436=((1.0)*r22);
IkReal x5437=(cj2*sj1);
IkReal x5438=(gconst156*r20);
IkReal x5439=(gconst155*r21);
CheckValue<IkReal> x5440 = IKatan2WithCheck(IkReal(((((-1.0)*x5437*x5438))+((x5435*x5439))+(((-1.0)*x5435*x5438))+((x5437*x5439)))),IkReal(((((-1.0)*x5436*x5437))+(((-1.0)*x5435*x5436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5440.valid){
continue;
}
CheckValue<IkReal> x5441=IKPowWithIntegerCheck(IKsign(((((2.0)*x5438*x5439))+(((-1.0)*(x5439*x5439)))+(((-1.0)*(x5438*x5438)))+(((-1.0)*r22*x5436)))),-1);
if(!x5441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5440.value)+(((1.5707963267949)*(x5441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5442=IKcos(j4);
IkReal x5443=IKsin(j4);
IkReal x5444=(cj1*cj2);
IkReal x5445=(gconst155*r11);
IkReal x5446=(sj1*sj2);
IkReal x5447=(gconst155*r21);
IkReal x5448=(gconst155*r01);
IkReal x5449=((1.0)*x5442);
IkReal x5450=((1.0)*gconst156*x5443);
evalcond[0]=((((-1.0)*gconst156*r20*x5449))+((r22*x5443))+((x5442*x5447)));
evalcond[1]=(cj0+(((-1.0)*gconst156*r00*x5449))+((x5442*x5448))+((r02*x5443)));
evalcond[2]=(sj0+(((-1.0)*gconst156*r10*x5449))+((r12*x5443))+((x5442*x5445)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x5449))+(((-1.0)*r20*x5450))+((x5443*x5447)));
evalcond[4]=(((sj0*x5444))+(((-1.0)*r02*x5449))+(((-1.0)*sj0*x5446))+(((-1.0)*r00*x5450))+((x5443*x5448)));
evalcond[5]=((((-1.0)*cj0*x5444))+(((-1.0)*r12*x5449))+((cj0*x5446))+(((-1.0)*r10*x5450))+((x5443*x5445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5451=((1.0)*sj0);
IkReal x5452=((1.0)*gconst155);
CheckValue<IkReal> x5453=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst156*r21))+(((-1.0)*r20*x5452)))),-1);
if(!x5453.valid){
continue;
}
CheckValue<IkReal> x5454 = IKatan2WithCheck(IkReal((((gconst155*r01*sj0))+(((-1.0)*cj0*r11*x5452))+(((-1.0)*gconst156*r00*x5451))+((cj0*gconst156*r10)))),IkReal(((((-1.0)*r02*x5451))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5453.value)))+(x5454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5455=IKcos(j4);
IkReal x5456=IKsin(j4);
IkReal x5457=(cj1*cj2);
IkReal x5458=(gconst155*r11);
IkReal x5459=(sj1*sj2);
IkReal x5460=(gconst155*r21);
IkReal x5461=(gconst155*r01);
IkReal x5462=((1.0)*x5455);
IkReal x5463=((1.0)*gconst156*x5456);
evalcond[0]=((((-1.0)*gconst156*r20*x5462))+((x5455*x5460))+((r22*x5456)));
evalcond[1]=(cj0+(((-1.0)*gconst156*r00*x5462))+((x5455*x5461))+((r02*x5456)));
evalcond[2]=(((r12*x5456))+((x5455*x5458))+sj0+(((-1.0)*gconst156*r10*x5462)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x5463))+((x5456*x5460))+(((-1.0)*r22*x5462)));
evalcond[4]=((((-1.0)*sj0*x5459))+(((-1.0)*r02*x5462))+((x5456*x5461))+((sj0*x5457))+(((-1.0)*r00*x5463)));
evalcond[5]=(((x5456*x5458))+(((-1.0)*r10*x5463))+(((-1.0)*cj0*x5457))+((cj0*x5459))+(((-1.0)*r12*x5462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5464=IKPowWithIntegerCheck(IKsign((((gconst156*r01))+((gconst155*r00)))),-1);
if(!x5464.valid){
continue;
}
CheckValue<IkReal> x5465 = IKatan2WithCheck(IkReal((((gconst155*r21*sj0))+(((-1.0)*gconst156*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5464.value)))+(x5465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5466=IKcos(j4);
IkReal x5467=IKsin(j4);
IkReal x5468=(cj1*cj2);
IkReal x5469=(gconst155*r11);
IkReal x5470=(sj1*sj2);
IkReal x5471=(gconst155*r21);
IkReal x5472=(gconst155*r01);
IkReal x5473=((1.0)*x5466);
IkReal x5474=((1.0)*gconst156*x5467);
evalcond[0]=(((r22*x5467))+((x5466*x5471))+(((-1.0)*gconst156*r20*x5473)));
evalcond[1]=(cj0+((r02*x5467))+((x5466*x5472))+(((-1.0)*gconst156*r00*x5473)));
evalcond[2]=(((x5466*x5469))+sj0+(((-1.0)*gconst156*r10*x5473))+((r12*x5467)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5467*x5471))+(((-1.0)*r22*x5473))+(((-1.0)*r20*x5474)));
evalcond[4]=(((x5467*x5472))+(((-1.0)*r00*x5474))+(((-1.0)*r02*x5473))+(((-1.0)*sj0*x5470))+((sj0*x5468)));
evalcond[5]=(((x5467*x5469))+(((-1.0)*cj0*x5468))+(((-1.0)*r10*x5474))+(((-1.0)*r12*x5473))+((cj0*x5470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5475=((-1.0)*r11);
IkReal x5477 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5477)==0){
continue;
}
IkReal x5476=pow(x5477,-0.5);
CheckValue<IkReal> x5478 = IKatan2WithCheck(IkReal(x5475),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5478.valid){
continue;
}
IkReal gconst157=((3.14159265358979)+(((-1.0)*(x5478.value))));
IkReal gconst158=(x5475*x5476);
IkReal gconst159=((1.0)*r10*x5476);
CheckValue<IkReal> x5479 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5479.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5479.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5480=((-1.0)*r11);
CheckValue<IkReal> x5483 = IKatan2WithCheck(IkReal(x5480),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5483.valid){
continue;
}
IkReal x5481=((1.0)*(x5483.value));
IkReal x5482=x5476;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst158;
cj5=gconst159;
j5=((3.14159265)+(((-1.0)*x5481)));
IkReal gconst157=((3.14159265358979)+(((-1.0)*x5481)));
IkReal gconst158=(x5480*x5482);
IkReal gconst159=((1.0)*r10*x5482);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5484=((-1.0)*r11);
CheckValue<IkReal> x5487 = IKatan2WithCheck(IkReal(x5484),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5487.valid){
continue;
}
IkReal x5485=((1.0)*(x5487.value));
IkReal x5486=x5476;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst158;
cj5=gconst159;
j5=((3.14159265)+(((-1.0)*x5485)));
IkReal gconst157=((3.14159265358979)+(((-1.0)*x5485)));
IkReal gconst158=(x5484*x5486);
IkReal gconst159=((1.0)*r10*x5486);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5488=((1.0)*sj0);
IkReal x5489=((1.0)*gconst158);
CheckValue<IkReal> x5490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5489))+(((-1.0)*gconst159*r21)))),-1);
if(!x5490.valid){
continue;
}
CheckValue<IkReal> x5491 = IKatan2WithCheck(IkReal(((((-1.0)*gconst159*r00*x5488))+((gconst158*r01*sj0))+((cj0*gconst159*r10))+(((-1.0)*cj0*r11*x5489)))),IkReal(((((-1.0)*r02*x5488))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5490.value)))+(x5491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5492=IKcos(j4);
IkReal x5493=IKsin(j4);
IkReal x5494=(cj1*cj2);
IkReal x5495=(sj1*sj2);
IkReal x5496=(gconst159*r00);
IkReal x5497=(gconst159*r10);
IkReal x5498=(gconst159*r20);
IkReal x5499=((1.0)*x5492);
IkReal x5500=(gconst158*x5492);
IkReal x5501=((1.0)*x5493);
IkReal x5502=(gconst158*x5493);
evalcond[0]=(((r21*x5500))+(((-1.0)*x5498*x5499))+((r22*x5493)));
evalcond[1]=(cj0+(((-1.0)*x5496*x5499))+((r01*x5500))+((r02*x5493)));
evalcond[2]=(sj0+((r12*x5493))+(((-1.0)*x5497*x5499))+((r11*x5500)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5498*x5501))+((cj1*sj2))+(((-1.0)*r22*x5499))+((r21*x5502)));
evalcond[4]=((((-1.0)*x5496*x5501))+(((-1.0)*sj0*x5495))+((sj0*x5494))+(((-1.0)*r02*x5499))+((r01*x5502)));
evalcond[5]=(((cj0*x5495))+(((-1.0)*x5497*x5501))+(((-1.0)*cj0*x5494))+(((-1.0)*r12*x5499))+((r11*x5502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5503=((1.0)*gconst159);
CheckValue<IkReal> x5504 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5503))+((cj0*gconst158*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5504.valid){
continue;
}
CheckValue<IkReal> x5505=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst158*r10))+(((-1.0)*r11*x5503)))),-1);
if(!x5505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5504.value)+(((1.5707963267949)*(x5505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5506=IKcos(j4);
IkReal x5507=IKsin(j4);
IkReal x5508=(cj1*cj2);
IkReal x5509=(sj1*sj2);
IkReal x5510=(gconst159*r00);
IkReal x5511=(gconst159*r10);
IkReal x5512=(gconst159*r20);
IkReal x5513=((1.0)*x5506);
IkReal x5514=(gconst158*x5506);
IkReal x5515=((1.0)*x5507);
IkReal x5516=(gconst158*x5507);
evalcond[0]=((((-1.0)*x5512*x5513))+((r21*x5514))+((r22*x5507)));
evalcond[1]=((((-1.0)*x5510*x5513))+cj0+((r02*x5507))+((r01*x5514)));
evalcond[2]=(sj0+(((-1.0)*x5511*x5513))+((r12*x5507))+((r11*x5514)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x5513))+(((-1.0)*x5512*x5515))+((r21*x5516))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x5510*x5515))+(((-1.0)*r02*x5513))+(((-1.0)*sj0*x5509))+((sj0*x5508))+((r01*x5516)));
evalcond[5]=((((-1.0)*x5511*x5515))+(((-1.0)*r12*x5513))+((r11*x5516))+(((-1.0)*cj0*x5508))+((cj0*x5509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5517 = IKatan2WithCheck(IkReal((((gconst158*r21*sj0))+(((-1.0)*gconst159*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5517.valid){
continue;
}
CheckValue<IkReal> x5518=IKPowWithIntegerCheck(IKsign((((gconst158*r00))+((gconst159*r01)))),-1);
if(!x5518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5517.value)+(((1.5707963267949)*(x5518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5519=IKcos(j4);
IkReal x5520=IKsin(j4);
IkReal x5521=(cj1*cj2);
IkReal x5522=(sj1*sj2);
IkReal x5523=(gconst159*r00);
IkReal x5524=(gconst159*r10);
IkReal x5525=(gconst159*r20);
IkReal x5526=((1.0)*x5519);
IkReal x5527=(gconst158*x5519);
IkReal x5528=((1.0)*x5520);
IkReal x5529=(gconst158*x5520);
evalcond[0]=(((r22*x5520))+((r21*x5527))+(((-1.0)*x5525*x5526)));
evalcond[1]=(((r02*x5520))+(((-1.0)*x5523*x5526))+cj0+((r01*x5527)));
evalcond[2]=(sj0+((r11*x5527))+(((-1.0)*x5524*x5526))+((r12*x5520)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x5526))+((cj1*sj2))+((r21*x5529))+(((-1.0)*x5525*x5528)));
evalcond[4]=((((-1.0)*sj0*x5522))+(((-1.0)*x5523*x5528))+(((-1.0)*r02*x5526))+((r01*x5529))+((sj0*x5521)));
evalcond[5]=((((-1.0)*cj0*x5521))+((r11*x5529))+((cj0*x5522))+(((-1.0)*x5524*x5528))+(((-1.0)*r12*x5526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5530=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5530;
j4eval[1]=IKsign(x5530);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5531=((1.0)*cj5);
IkReal x5532=((((-1.0)*r21*x5531))+(((-1.0)*r20*sj5)));
j4eval[0]=x5532;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x5531)))))+(IKabs(r02)));
j4eval[2]=IKsign(x5532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5533=cj5*cj5;
IkReal x5534=r11*r11;
IkReal x5535=(cj5*r10);
IkReal x5536=(r11*sj5);
IkReal x5537=((((-1.0)*x5533*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x5534))+(((2.0)*x5535*x5536))+((x5533*x5534)));
j4eval[0]=x5537;
j4eval[1]=((IKabs(r12))+(IKabs((x5536+(((-1.0)*x5535))))));
j4eval[2]=IKsign(x5537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5538=cj5*cj5;
IkReal x5539=r11*r11;
IkReal x5540=(cj5*r10);
IkReal x5541=(r11*sj5);
CheckValue<IkReal> x5542 = IKatan2WithCheck(IkReal(r12),IkReal((x5541+(((-1.0)*x5540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5542.valid){
continue;
}
CheckValue<IkReal> x5543=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5538*(r10*r10)))+(((2.0)*x5540*x5541))+(((-1.0)*(r12*r12)))+((x5538*x5539))+(((-1.0)*x5539)))),-1);
if(!x5543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5542.value)+(((1.5707963267949)*(x5543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5544=IKcos(j4);
IkReal x5545=IKsin(j4);
IkReal x5546=(cj5*r00);
IkReal x5547=(cj5*r10);
IkReal x5548=(cj5*r20);
IkReal x5549=((1.0)*x5544);
IkReal x5550=((1.0)*x5545);
IkReal x5551=(sj5*x5544);
IkReal x5552=(sj5*x5545);
evalcond[0]=(((r21*x5551))+(((-1.0)*x5548*x5549))+((r22*x5545)));
evalcond[1]=(((r01*x5551))+((r02*x5545))+(((-1.0)*x5546*x5549)));
evalcond[2]=((1.0)+((r12*x5545))+((r11*x5551))+(((-1.0)*x5547*x5549)));
evalcond[3]=(((r11*x5552))+(((-1.0)*r12*x5549))+(((-1.0)*x5547*x5550)));
evalcond[4]=(((cj2*sj1))+((r21*x5552))+((cj1*sj2))+(((-1.0)*x5548*x5550))+(((-1.0)*r22*x5549)));
evalcond[5]=(((r01*x5552))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x5549))+((cj1*cj2))+(((-1.0)*x5546*x5550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5553=((1.0)*cj5);
CheckValue<IkReal> x5554 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x5553))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5554.valid){
continue;
}
CheckValue<IkReal> x5555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5553))+(((-1.0)*r20*sj5)))),-1);
if(!x5555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5554.value)+(((1.5707963267949)*(x5555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5556=IKcos(j4);
IkReal x5557=IKsin(j4);
IkReal x5558=(cj5*r00);
IkReal x5559=(cj5*r10);
IkReal x5560=(cj5*r20);
IkReal x5561=((1.0)*x5556);
IkReal x5562=((1.0)*x5557);
IkReal x5563=(sj5*x5556);
IkReal x5564=(sj5*x5557);
evalcond[0]=(((r21*x5563))+((r22*x5557))+(((-1.0)*x5560*x5561)));
evalcond[1]=(((r02*x5557))+(((-1.0)*x5558*x5561))+((r01*x5563)));
evalcond[2]=((1.0)+((r12*x5557))+((r11*x5563))+(((-1.0)*x5559*x5561)));
evalcond[3]=((((-1.0)*r12*x5561))+((r11*x5564))+(((-1.0)*x5559*x5562)));
evalcond[4]=((((-1.0)*r22*x5561))+((cj2*sj1))+((cj1*sj2))+((r21*x5564))+(((-1.0)*x5560*x5562)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x5561))+((cj1*cj2))+(((-1.0)*x5558*x5562))+((r01*x5564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5565=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5565.valid){
continue;
}
CheckValue<IkReal> x5566 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5565.value)))+(x5566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5567=IKcos(j4);
IkReal x5568=IKsin(j4);
IkReal x5569=(cj5*r00);
IkReal x5570=(cj5*r10);
IkReal x5571=(cj5*r20);
IkReal x5572=((1.0)*x5567);
IkReal x5573=((1.0)*x5568);
IkReal x5574=(sj5*x5567);
IkReal x5575=(sj5*x5568);
evalcond[0]=(((r22*x5568))+((r21*x5574))+(((-1.0)*x5571*x5572)));
evalcond[1]=(((r02*x5568))+(((-1.0)*x5569*x5572))+((r01*x5574)));
evalcond[2]=((1.0)+(((-1.0)*x5570*x5572))+((r11*x5574))+((r12*x5568)));
evalcond[3]=((((-1.0)*x5570*x5573))+(((-1.0)*r12*x5572))+((r11*x5575)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x5575))+(((-1.0)*x5571*x5573))+(((-1.0)*r22*x5572)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x5572))+(((-1.0)*x5569*x5573))+((cj1*cj2))+((r01*x5575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5576=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5576;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5577=((1.0)*cj5);
IkReal x5578=((((-1.0)*r01*x5577))+(((-1.0)*r00*sj5)));
j4eval[0]=x5578;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5577))))));
j4eval[2]=IKsign(x5578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5579=cj5*cj5;
IkReal x5580=r11*r11;
IkReal x5581=(r11*sj5);
IkReal x5582=(cj5*r10);
IkReal x5583=((((-1.0)*x5579*x5580))+(r12*r12)+x5580+(((-2.0)*x5581*x5582))+((x5579*(r10*r10))));
j4eval[0]=x5583;
j4eval[1]=((IKabs(r12))+(IKabs((x5581+(((-1.0)*x5582))))));
j4eval[2]=IKsign(x5583);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5584=cj5*cj5;
IkReal x5585=r11*r11;
IkReal x5586=(cj5*r10);
IkReal x5587=(r11*sj5);
CheckValue<IkReal> x5588=IKPowWithIntegerCheck(IKsign((((x5584*(r10*r10)))+(r12*r12)+x5585+(((-2.0)*x5586*x5587))+(((-1.0)*x5584*x5585)))),-1);
if(!x5588.valid){
continue;
}
CheckValue<IkReal> x5589 = IKatan2WithCheck(IkReal(r12),IkReal((x5587+(((-1.0)*x5586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5588.value)))+(x5589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5590=IKcos(j4);
IkReal x5591=IKsin(j4);
IkReal x5592=(cj5*r00);
IkReal x5593=(cj5*r10);
IkReal x5594=(cj5*r20);
IkReal x5595=((1.0)*x5590);
IkReal x5596=((1.0)*x5591);
IkReal x5597=(sj5*x5590);
IkReal x5598=(sj5*x5591);
evalcond[0]=(((r21*x5597))+(((-1.0)*x5594*x5595))+((r22*x5591)));
evalcond[1]=((((-1.0)*x5592*x5595))+((r02*x5591))+((r01*x5597)));
evalcond[2]=((-1.0)+(((-1.0)*x5593*x5595))+((r11*x5597))+((r12*x5591)));
evalcond[3]=((((-1.0)*r12*x5595))+(((-1.0)*x5593*x5596))+((r11*x5598)));
evalcond[4]=(((r21*x5598))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5594*x5596))+(((-1.0)*r22*x5595)));
evalcond[5]=((((-1.0)*x5592*x5596))+(((-1.0)*r02*x5595))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5599=((1.0)*cj5);
CheckValue<IkReal> x5600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5599)))),-1);
if(!x5600.valid){
continue;
}
CheckValue<IkReal> x5601 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5599)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5600.value)))+(x5601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5602=IKcos(j4);
IkReal x5603=IKsin(j4);
IkReal x5604=(cj5*r00);
IkReal x5605=(cj5*r10);
IkReal x5606=(cj5*r20);
IkReal x5607=((1.0)*x5602);
IkReal x5608=((1.0)*x5603);
IkReal x5609=(sj5*x5602);
IkReal x5610=(sj5*x5603);
evalcond[0]=(((r21*x5609))+(((-1.0)*x5606*x5607))+((r22*x5603)));
evalcond[1]=(((r02*x5603))+((r01*x5609))+(((-1.0)*x5604*x5607)));
evalcond[2]=((-1.0)+((r12*x5603))+((r11*x5609))+(((-1.0)*x5605*x5607)));
evalcond[3]=((((-1.0)*r12*x5607))+((r11*x5610))+(((-1.0)*x5605*x5608)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x5607))+((cj1*sj2))+((r21*x5610))+(((-1.0)*x5606*x5608)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5610))+(((-1.0)*r02*x5607))+(((-1.0)*x5604*x5608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5611=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5611.valid){
continue;
}
CheckValue<IkReal> x5612 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5611.value)))+(x5612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5613=IKcos(j4);
IkReal x5614=IKsin(j4);
IkReal x5615=(cj5*r00);
IkReal x5616=(cj5*r10);
IkReal x5617=(cj5*r20);
IkReal x5618=((1.0)*x5613);
IkReal x5619=((1.0)*x5614);
IkReal x5620=(sj5*x5613);
IkReal x5621=(sj5*x5614);
evalcond[0]=((((-1.0)*x5617*x5618))+((r21*x5620))+((r22*x5614)));
evalcond[1]=(((r02*x5614))+((r01*x5620))+(((-1.0)*x5615*x5618)));
evalcond[2]=((-1.0)+((r12*x5614))+((r11*x5620))+(((-1.0)*x5616*x5618)));
evalcond[3]=((((-1.0)*r12*x5618))+((r11*x5621))+(((-1.0)*x5616*x5619)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x5618))+((cj1*sj2))+(((-1.0)*x5617*x5619))+((r21*x5621)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5621))+(((-1.0)*r02*x5618))+(((-1.0)*x5615*x5619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5623 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5623)==0){
continue;
}
IkReal x5622=pow(x5623,-0.5);
CheckValue<IkReal> x5624 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5624.valid){
continue;
}
IkReal gconst160=((-1.0)*(x5624.value));
IkReal gconst161=((-1.0)*r01*x5622);
IkReal gconst162=(r00*x5622);
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5625.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5628 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5628.valid){
continue;
}
IkReal x5626=((-1.0)*(x5628.value));
IkReal x5627=x5622;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst161;
cj5=gconst162;
j5=x5626;
IkReal gconst160=x5626;
IkReal gconst161=((-1.0)*r01*x5627);
IkReal gconst162=(r00*x5627);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5631 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5631.valid){
continue;
}
IkReal x5629=((-1.0)*(x5631.value));
IkReal x5630=x5622;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst161;
cj5=gconst162;
j5=x5629;
IkReal gconst160=x5629;
IkReal gconst161=((-1.0)*r01*x5630);
IkReal gconst162=(r00*x5630);
IkReal x5632=r02*r02;
IkReal x5633=((1.0)*sj0);
IkReal x5634=(cj0*r12);
CheckValue<IkReal> x5638=IKPowWithIntegerCheck(((-1.0)+x5632),-1);
if(!x5638.valid){
continue;
}
IkReal x5635=x5638.value;
if((((1.0)+(((-1.0)*x5632)))) < -0.00001)
continue;
IkReal x5636=IKsqrt(((1.0)+(((-1.0)*x5632))));
IkReal x5637=(x5635*x5636);
j4eval[0]=((IKabs((((r02*x5634*x5637))+(((-1.0)*x5632*x5633*x5637))+((sj0*x5637)))))+(IKabs((x5634+(((-1.0)*r02*x5633))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5641 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5641.valid){
continue;
}
IkReal x5639=((-1.0)*(x5641.value));
IkReal x5640=x5622;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst161;
cj5=gconst162;
j5=x5639;
IkReal gconst160=x5639;
IkReal gconst161=((-1.0)*r01*x5640);
IkReal gconst162=(r00*x5640);
IkReal x5642=r02*r02;
IkReal x5643=((1.0)*r22);
IkReal x5644=(cj1*sj2);
IkReal x5645=(cj2*sj1);
IkReal x5646=((1.0)+(((-1.0)*x5642)));
CheckValue<IkReal> x5653=IKPowWithIntegerCheck(x5646,-1);
if(!x5653.valid){
continue;
}
IkReal x5647=x5653.value;
CheckValue<IkReal> x5654=IKPowWithIntegerCheck(((-1.0)+x5642),-1);
if(!x5654.valid){
continue;
}
IkReal x5648=x5654.value;
IkReal x5649=((1.0)*x5647);
if((x5646) < -0.00001)
continue;
IkReal x5650=IKsqrt(x5646);
IkReal x5651=(r02*x5648*x5650);
IkReal x5652=((((-1.0)*r22*x5643))+(((-1.0)*x5649*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x5647))+(((-1.0)*x5649*(r00*r00)*(r20*r20))));
j4eval[0]=x5652;
j4eval[1]=((IKabs(((((-1.0)*x5643*x5644))+(((-1.0)*x5643*x5645)))))+(IKabs(((((-1.0)*x5643*x5644*x5651))+(((-1.0)*x5643*x5645*x5651))))));
j4eval[2]=IKsign(x5652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5655=(cj2*sj1);
IkReal x5656=(gconst161*r21);
IkReal x5657=(gconst162*r20);
IkReal x5658=((1.0)*cj1*sj2);
CheckValue<IkReal> x5659=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5656*x5656)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5657*x5657)))+(((2.0)*x5656*x5657)))),-1);
if(!x5659.valid){
continue;
}
CheckValue<IkReal> x5660 = IKatan2WithCheck(IkReal((((x5655*x5656))+(((-1.0)*x5657*x5658))+((cj1*sj2*x5656))+(((-1.0)*x5655*x5657)))),IkReal(((((-1.0)*r22*x5658))+(((-1.0)*r22*x5655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5659.value)))+(x5660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5661=IKcos(j4);
IkReal x5662=IKsin(j4);
IkReal x5663=(cj1*cj2);
IkReal x5664=(sj1*sj2);
IkReal x5665=(gconst162*r10);
IkReal x5666=(gconst162*r20);
IkReal x5667=(gconst162*r00);
IkReal x5668=((1.0)*x5661);
IkReal x5669=((1.0)*x5662);
IkReal x5670=(gconst161*x5662);
IkReal x5671=(gconst161*x5661);
evalcond[0]=(((r22*x5662))+(((-1.0)*x5666*x5668))+((r21*x5671)));
evalcond[1]=(cj0+((r02*x5662))+(((-1.0)*x5667*x5668))+((r01*x5671)));
evalcond[2]=(sj0+((r11*x5671))+(((-1.0)*x5665*x5668))+((r12*x5662)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5666*x5669))+(((-1.0)*r22*x5668))+((cj1*sj2))+((r21*x5670)));
evalcond[4]=((((-1.0)*sj0*x5664))+(((-1.0)*r02*x5668))+(((-1.0)*x5667*x5669))+((r01*x5670))+((sj0*x5663)));
evalcond[5]=(((r11*x5670))+(((-1.0)*x5665*x5669))+(((-1.0)*r12*x5668))+(((-1.0)*cj0*x5663))+((cj0*x5664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5672=((1.0)*sj0);
IkReal x5673=((1.0)*gconst161);
CheckValue<IkReal> x5674=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst162*r21))+(((-1.0)*r20*x5673)))),-1);
if(!x5674.valid){
continue;
}
CheckValue<IkReal> x5675 = IKatan2WithCheck(IkReal(((((-1.0)*gconst162*r00*x5672))+(((-1.0)*cj0*r11*x5673))+((cj0*gconst162*r10))+((gconst161*r01*sj0)))),IkReal((((cj0*r12))+(((-1.0)*r02*x5672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5674.value)))+(x5675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5676=IKcos(j4);
IkReal x5677=IKsin(j4);
IkReal x5678=(cj1*cj2);
IkReal x5679=(sj1*sj2);
IkReal x5680=(gconst162*r10);
IkReal x5681=(gconst162*r20);
IkReal x5682=(gconst162*r00);
IkReal x5683=((1.0)*x5676);
IkReal x5684=((1.0)*x5677);
IkReal x5685=(gconst161*x5677);
IkReal x5686=(gconst161*x5676);
evalcond[0]=((((-1.0)*x5681*x5683))+((r22*x5677))+((r21*x5686)));
evalcond[1]=(((r02*x5677))+cj0+(((-1.0)*x5682*x5683))+((r01*x5686)));
evalcond[2]=(sj0+(((-1.0)*x5680*x5683))+((r12*x5677))+((r11*x5686)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5681*x5684))+((cj1*sj2))+(((-1.0)*r22*x5683))+((r21*x5685)));
evalcond[4]=((((-1.0)*r02*x5683))+((sj0*x5678))+(((-1.0)*x5682*x5684))+((r01*x5685))+(((-1.0)*sj0*x5679)));
evalcond[5]=(((cj0*x5679))+(((-1.0)*x5680*x5684))+(((-1.0)*cj0*x5678))+((r11*x5685))+(((-1.0)*r12*x5683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5687=((1.0)*gconst162);
CheckValue<IkReal> x5688 = IKatan2WithCheck(IkReal((((cj0*gconst161*r21))+(((-1.0)*cj0*r20*x5687)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5688.valid){
continue;
}
CheckValue<IkReal> x5689=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst161*r10))+(((-1.0)*r11*x5687)))),-1);
if(!x5689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5688.value)+(((1.5707963267949)*(x5689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5690=IKcos(j4);
IkReal x5691=IKsin(j4);
IkReal x5692=(cj1*cj2);
IkReal x5693=(sj1*sj2);
IkReal x5694=(gconst162*r10);
IkReal x5695=(gconst162*r20);
IkReal x5696=(gconst162*r00);
IkReal x5697=((1.0)*x5690);
IkReal x5698=((1.0)*x5691);
IkReal x5699=(gconst161*x5691);
IkReal x5700=(gconst161*x5690);
evalcond[0]=(((r22*x5691))+((r21*x5700))+(((-1.0)*x5695*x5697)));
evalcond[1]=(cj0+(((-1.0)*x5696*x5697))+((r02*x5691))+((r01*x5700)));
evalcond[2]=(sj0+((r11*x5700))+((r12*x5691))+(((-1.0)*x5694*x5697)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x5697))+((r21*x5699))+(((-1.0)*x5695*x5698)));
evalcond[4]=((((-1.0)*r02*x5697))+(((-1.0)*x5696*x5698))+((sj0*x5692))+(((-1.0)*sj0*x5693))+((r01*x5699)));
evalcond[5]=(((r11*x5699))+(((-1.0)*r12*x5697))+(((-1.0)*x5694*x5698))+(((-1.0)*cj0*x5692))+((cj0*x5693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5702 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5702)==0){
continue;
}
IkReal x5701=pow(x5702,-0.5);
CheckValue<IkReal> x5703 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5703.valid){
continue;
}
IkReal gconst163=((3.14159265358979)+(((-1.0)*(x5703.value))));
IkReal gconst164=((1.0)*r01*x5701);
IkReal gconst165=((-1.0)*r00*x5701);
CheckValue<IkReal> x5704 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5704.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5704.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
IkReal x5705=((1.0)*(x5707.value));
IkReal x5706=x5701;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst164;
cj5=gconst165;
j5=((3.14159265)+(((-1.0)*x5705)));
IkReal gconst163=((3.14159265358979)+(((-1.0)*x5705)));
IkReal gconst164=((1.0)*r01*x5706);
IkReal gconst165=((-1.0)*r00*x5706);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5710 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5710.valid){
continue;
}
IkReal x5708=((1.0)*(x5710.value));
IkReal x5709=x5701;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst164;
cj5=gconst165;
j5=((3.14159265)+(((-1.0)*x5708)));
IkReal gconst163=((3.14159265358979)+(((-1.0)*x5708)));
IkReal gconst164=((1.0)*r01*x5709);
IkReal gconst165=((-1.0)*r00*x5709);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5711=((1.0)*gconst165);
IkReal x5712=((1.0)*gconst164);
CheckValue<IkReal> x5713 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x5712))+((cj0*gconst165*r10))+((gconst164*r01*sj0))+(((-1.0)*r00*sj0*x5711)))),IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5713.valid){
continue;
}
CheckValue<IkReal> x5714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5712))+(((-1.0)*r21*x5711)))),-1);
if(!x5714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5713.value)+(((1.5707963267949)*(x5714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5715=IKcos(j4);
IkReal x5716=IKsin(j4);
IkReal x5717=(gconst165*r10);
IkReal x5718=(cj1*cj2);
IkReal x5719=(sj1*sj2);
IkReal x5720=(gconst164*r01);
IkReal x5721=(gconst165*r20);
IkReal x5722=(gconst164*r21);
IkReal x5723=(gconst164*r11);
IkReal x5724=(gconst165*r00);
IkReal x5725=((1.0)*x5715);
IkReal x5726=((1.0)*x5716);
evalcond[0]=(((r22*x5716))+((x5715*x5722))+(((-1.0)*x5721*x5725)));
evalcond[1]=(((r02*x5716))+cj0+(((-1.0)*x5724*x5725))+((x5715*x5720)));
evalcond[2]=(sj0+(((-1.0)*x5717*x5725))+((x5715*x5723))+((r12*x5716)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5716*x5722))+(((-1.0)*r22*x5725))+(((-1.0)*x5721*x5726)));
evalcond[4]=((((-1.0)*x5724*x5726))+(((-1.0)*r02*x5725))+((x5716*x5720))+((sj0*x5718))+(((-1.0)*sj0*x5719)));
evalcond[5]=(((cj0*x5719))+(((-1.0)*r12*x5725))+(((-1.0)*x5717*x5726))+((x5716*x5723))+(((-1.0)*cj0*x5718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5727=((1.0)*gconst165);
CheckValue<IkReal> x5728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5727))+(((-1.0)*gconst164*r10)))),-1);
if(!x5728.valid){
continue;
}
CheckValue<IkReal> x5729 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5727))+((cj0*gconst164*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5728.value)))+(x5729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5730=IKcos(j4);
IkReal x5731=IKsin(j4);
IkReal x5732=(gconst165*r10);
IkReal x5733=(cj1*cj2);
IkReal x5734=(sj1*sj2);
IkReal x5735=(gconst164*r01);
IkReal x5736=(gconst165*r20);
IkReal x5737=(gconst164*r21);
IkReal x5738=(gconst164*r11);
IkReal x5739=(gconst165*r00);
IkReal x5740=((1.0)*x5730);
IkReal x5741=((1.0)*x5731);
evalcond[0]=(((x5730*x5737))+(((-1.0)*x5736*x5740))+((r22*x5731)));
evalcond[1]=(cj0+((x5730*x5735))+((r02*x5731))+(((-1.0)*x5739*x5740)));
evalcond[2]=(sj0+(((-1.0)*x5732*x5740))+((r12*x5731))+((x5730*x5738)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5731*x5737))+(((-1.0)*r22*x5740))+(((-1.0)*x5736*x5741)));
evalcond[4]=((((-1.0)*r02*x5740))+((x5731*x5735))+(((-1.0)*sj0*x5734))+(((-1.0)*x5739*x5741))+((sj0*x5733)));
evalcond[5]=((((-1.0)*x5732*x5741))+((x5731*x5738))+((cj0*x5734))+(((-1.0)*r12*x5740))+(((-1.0)*cj0*x5733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5742 = IKatan2WithCheck(IkReal(((((-1.0)*gconst165*r20*sj0))+((gconst164*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5742.valid){
continue;
}
CheckValue<IkReal> x5743=IKPowWithIntegerCheck(IKsign((((gconst164*r00))+((gconst165*r01)))),-1);
if(!x5743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5742.value)+(((1.5707963267949)*(x5743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5744=IKcos(j4);
IkReal x5745=IKsin(j4);
IkReal x5746=(gconst165*r10);
IkReal x5747=(cj1*cj2);
IkReal x5748=(sj1*sj2);
IkReal x5749=(gconst164*r01);
IkReal x5750=(gconst165*r20);
IkReal x5751=(gconst164*r21);
IkReal x5752=(gconst164*r11);
IkReal x5753=(gconst165*r00);
IkReal x5754=((1.0)*x5744);
IkReal x5755=((1.0)*x5745);
evalcond[0]=(((r22*x5745))+((x5744*x5751))+(((-1.0)*x5750*x5754)));
evalcond[1]=(cj0+((x5744*x5749))+(((-1.0)*x5753*x5754))+((r02*x5745)));
evalcond[2]=(sj0+(((-1.0)*x5746*x5754))+((x5744*x5752))+((r12*x5745)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x5754))+((x5745*x5751))+(((-1.0)*x5750*x5755)));
evalcond[4]=(((sj0*x5747))+(((-1.0)*r02*x5754))+(((-1.0)*x5753*x5755))+((x5745*x5749))+(((-1.0)*sj0*x5748)));
evalcond[5]=((((-1.0)*cj0*x5747))+(((-1.0)*x5746*x5755))+(((-1.0)*r12*x5754))+((cj0*x5748))+((x5745*x5752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5756=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5756;
j4eval[1]=IKsign(x5756);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5757=((1.0)*cj5);
IkReal x5758=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5757)));
j4eval[0]=x5758;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5757))))));
j4eval[2]=IKsign(x5758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5759=cj5*cj5;
IkReal x5760=r01*r01;
IkReal x5761=(r01*sj5);
IkReal x5762=(cj5*r00);
IkReal x5763=((((2.0)*x5761*x5762))+(((-1.0)*(r02*r02)))+(((-1.0)*x5760))+((x5759*x5760))+(((-1.0)*x5759*(r00*r00))));
j4eval[0]=x5763;
j4eval[1]=IKsign(x5763);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5762))+x5761))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5764=cj5*cj5;
IkReal x5765=r01*r01;
IkReal x5766=(r01*sj5);
IkReal x5767=(cj5*r00);
CheckValue<IkReal> x5768 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5767))+x5766)),IKFAST_ATAN2_MAGTHRESH);
if(!x5768.valid){
continue;
}
CheckValue<IkReal> x5769=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x5764*(r00*r00)))+((x5764*x5765))+(((-1.0)*x5765))+(((2.0)*x5766*x5767)))),-1);
if(!x5769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5768.value)+(((1.5707963267949)*(x5769.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5770=IKcos(j4);
IkReal x5771=IKsin(j4);
IkReal x5772=(cj5*r00);
IkReal x5773=(cj5*r10);
IkReal x5774=(cj5*r20);
IkReal x5775=((1.0)*x5770);
IkReal x5776=((1.0)*x5771);
IkReal x5777=(sj5*x5770);
IkReal x5778=(sj5*x5771);
evalcond[0]=((((-1.0)*x5774*x5775))+((r22*x5771))+((r21*x5777)));
evalcond[1]=(((r11*x5777))+((r12*x5771))+(((-1.0)*x5773*x5775)));
evalcond[2]=((1.0)+((r01*x5777))+((r02*x5771))+(((-1.0)*x5772*x5775)));
evalcond[3]=(((r01*x5778))+(((-1.0)*r02*x5775))+(((-1.0)*x5772*x5776)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5774*x5776))+((r21*x5778))+(((-1.0)*r22*x5775)));
evalcond[5]=((((-1.0)*r12*x5775))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x5778))+(((-1.0)*x5773*x5776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5779=((1.0)*cj5);
CheckValue<IkReal> x5780=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5779)))),-1);
if(!x5780.valid){
continue;
}
CheckValue<IkReal> x5781 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5779))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5780.value)))+(x5781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5782=IKcos(j4);
IkReal x5783=IKsin(j4);
IkReal x5784=(cj5*r00);
IkReal x5785=(cj5*r10);
IkReal x5786=(cj5*r20);
IkReal x5787=((1.0)*x5782);
IkReal x5788=((1.0)*x5783);
IkReal x5789=(sj5*x5782);
IkReal x5790=(sj5*x5783);
evalcond[0]=(((r21*x5789))+(((-1.0)*x5786*x5787))+((r22*x5783)));
evalcond[1]=((((-1.0)*x5785*x5787))+((r12*x5783))+((r11*x5789)));
evalcond[2]=((1.0)+(((-1.0)*x5784*x5787))+((r01*x5789))+((r02*x5783)));
evalcond[3]=((((-1.0)*x5784*x5788))+((r01*x5790))+(((-1.0)*r02*x5787)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x5790))+(((-1.0)*x5786*x5788))+(((-1.0)*r22*x5787)));
evalcond[5]=((((-1.0)*x5785*x5788))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x5790))+(((-1.0)*r12*x5787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5791=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5791.valid){
continue;
}
CheckValue<IkReal> x5792 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5791.value)))+(x5792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5793=IKcos(j4);
IkReal x5794=IKsin(j4);
IkReal x5795=(cj5*r00);
IkReal x5796=(cj5*r10);
IkReal x5797=(cj5*r20);
IkReal x5798=((1.0)*x5793);
IkReal x5799=((1.0)*x5794);
IkReal x5800=(sj5*x5793);
IkReal x5801=(sj5*x5794);
evalcond[0]=(((r21*x5800))+(((-1.0)*x5797*x5798))+((r22*x5794)));
evalcond[1]=(((r12*x5794))+((r11*x5800))+(((-1.0)*x5796*x5798)));
evalcond[2]=((1.0)+((r01*x5800))+(((-1.0)*x5795*x5798))+((r02*x5794)));
evalcond[3]=(((r01*x5801))+(((-1.0)*x5795*x5799))+(((-1.0)*r02*x5798)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x5801))+(((-1.0)*x5797*x5799))+(((-1.0)*r22*x5798)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x5801))+(((-1.0)*x5796*x5799))+(((-1.0)*r12*x5798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5802=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5802;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5803=((1.0)*cj5);
IkReal x5804=((((-1.0)*r21*x5803))+(((-1.0)*r20*sj5)));
j4eval[0]=x5804;
j4eval[1]=((IKabs(((((-1.0)*r10*x5803))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5805=cj5*cj5;
IkReal x5806=r01*r01;
IkReal x5807=(cj5*r00);
IkReal x5808=(r01*sj5);
IkReal x5809=((((-1.0)*x5805*x5806))+((x5805*(r00*r00)))+(r02*r02)+(((-2.0)*x5807*x5808))+x5806);
j4eval[0]=x5809;
j4eval[1]=IKsign(x5809);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5807))+x5808))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5810=cj5*cj5;
IkReal x5811=r01*r01;
IkReal x5812=(r01*sj5);
IkReal x5813=(cj5*r00);
CheckValue<IkReal> x5814 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5813))+x5812)),IKFAST_ATAN2_MAGTHRESH);
if(!x5814.valid){
continue;
}
CheckValue<IkReal> x5815=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5810*x5811))+(r02*r02)+(((-2.0)*x5812*x5813))+((x5810*(r00*r00)))+x5811)),-1);
if(!x5815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5814.value)+(((1.5707963267949)*(x5815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5816=IKcos(j4);
IkReal x5817=IKsin(j4);
IkReal x5818=(cj5*r00);
IkReal x5819=(cj5*r10);
IkReal x5820=(cj5*r20);
IkReal x5821=((1.0)*x5816);
IkReal x5822=((1.0)*x5817);
IkReal x5823=(sj5*x5816);
IkReal x5824=(sj5*x5817);
evalcond[0]=(((r21*x5823))+((r22*x5817))+(((-1.0)*x5820*x5821)));
evalcond[1]=(((r11*x5823))+((r12*x5817))+(((-1.0)*x5819*x5821)));
evalcond[2]=((-1.0)+(((-1.0)*x5818*x5821))+((r02*x5817))+((r01*x5823)));
evalcond[3]=((((-1.0)*r02*x5821))+(((-1.0)*x5818*x5822))+((r01*x5824)));
evalcond[4]=((((-1.0)*r22*x5821))+((r21*x5824))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5820*x5822)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x5824))+((cj1*cj2))+(((-1.0)*r12*x5821))+(((-1.0)*x5819*x5822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5825=((1.0)*cj5);
CheckValue<IkReal> x5826=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5825))+(((-1.0)*r20*sj5)))),-1);
if(!x5826.valid){
continue;
}
CheckValue<IkReal> x5827 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5825)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5826.value)))+(x5827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5828=IKcos(j4);
IkReal x5829=IKsin(j4);
IkReal x5830=(cj5*r00);
IkReal x5831=(cj5*r10);
IkReal x5832=(cj5*r20);
IkReal x5833=((1.0)*x5828);
IkReal x5834=((1.0)*x5829);
IkReal x5835=(sj5*x5828);
IkReal x5836=(sj5*x5829);
evalcond[0]=(((r21*x5835))+(((-1.0)*x5832*x5833))+((r22*x5829)));
evalcond[1]=(((r12*x5829))+(((-1.0)*x5831*x5833))+((r11*x5835)));
evalcond[2]=((-1.0)+((r02*x5829))+(((-1.0)*x5830*x5833))+((r01*x5835)));
evalcond[3]=((((-1.0)*r02*x5833))+(((-1.0)*x5830*x5834))+((r01*x5836)));
evalcond[4]=(((r21*x5836))+((cj2*sj1))+(((-1.0)*r22*x5833))+(((-1.0)*x5832*x5834))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5831*x5834))+((r11*x5836))+((cj1*cj2))+(((-1.0)*r12*x5833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5837 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5837.valid){
continue;
}
CheckValue<IkReal> x5838=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5837.value)+(((1.5707963267949)*(x5838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5839=IKcos(j4);
IkReal x5840=IKsin(j4);
IkReal x5841=(cj5*r00);
IkReal x5842=(cj5*r10);
IkReal x5843=(cj5*r20);
IkReal x5844=((1.0)*x5839);
IkReal x5845=((1.0)*x5840);
IkReal x5846=(sj5*x5839);
IkReal x5847=(sj5*x5840);
evalcond[0]=(((r21*x5846))+(((-1.0)*x5843*x5844))+((r22*x5840)));
evalcond[1]=(((r11*x5846))+((r12*x5840))+(((-1.0)*x5842*x5844)));
evalcond[2]=((-1.0)+((r01*x5846))+(((-1.0)*x5841*x5844))+((r02*x5840)));
evalcond[3]=((((-1.0)*r02*x5844))+((r01*x5847))+(((-1.0)*x5841*x5845)));
evalcond[4]=(((cj2*sj1))+((r21*x5847))+((cj1*sj2))+(((-1.0)*x5843*x5845))+(((-1.0)*r22*x5844)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x5847))+(((-1.0)*x5842*x5845))+((cj1*cj2))+(((-1.0)*r12*x5844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5848=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5848);
rxp1_1=(px*r21);
rxp1_2=(r11*x5848);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5849=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5849);
rxp1_1=(px*r21);
rxp1_2=(r11*x5849);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5850=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5850);
rxp1_1=(px*r21);
rxp1_2=(r11*x5850);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5853=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x5853.valid){
continue;
}
IkReal x5851=x5853.value;
IkReal x5852=(cj0*x5851);
sj4array[0]=((((-1.0)*sj1*sj2*x5852))+((cj1*cj2*x5852)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5854=IKcos(j4);
IkReal x5855=IKsin(j4);
IkReal x5856=(r21*sj5);
IkReal x5857=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x5854);
evalcond[1]=(cj0+((r02*x5855)));
evalcond[2]=(((x5854*x5856))+(((-1.0)*x5854*x5857)));
evalcond[3]=((((-1.0)*cj5*r10*x5854))+((r11*sj5*x5854)));
evalcond[4]=(((cj2*sj1))+((x5855*x5856))+((cj1*sj2))+(((-1.0)*x5855*x5857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5860=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5860.valid){
continue;
}
IkReal x5858=x5860.value;
IkReal x5859=((1.0)*x5858);
sj4array[0]=((((-1.0)*cj1*sj2*x5859))+(((-1.0)*cj2*sj1*x5859)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5861=IKcos(j4);
IkReal x5862=IKsin(j4);
IkReal x5863=((1.0)*cj5);
IkReal x5864=(sj5*x5861);
evalcond[0]=((-1.0)*r02*x5861);
evalcond[1]=(cj0+((r02*x5862)));
evalcond[2]=(((r21*x5864))+(((-1.0)*r20*x5861*x5863)));
evalcond[3]=(((r11*x5864))+(((-1.0)*r10*x5861*x5863)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*r10*x5862*x5863))+((cj0*sj1*sj2))+((r11*sj5*x5862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5865=IKPowWithIntegerCheck(r02,-1);
if(!x5865.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x5865.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5866=IKcos(j4);
IkReal x5867=IKsin(j4);
IkReal x5868=(r21*sj5);
IkReal x5869=(r11*sj5);
IkReal x5870=((1.0)*cj5*x5867);
IkReal x5871=((1.0)*cj5*x5866);
evalcond[0]=((-1.0)*r02*x5866);
evalcond[1]=(((x5866*x5868))+(((-1.0)*r20*x5871)));
evalcond[2]=(((x5866*x5869))+(((-1.0)*r10*x5871)));
evalcond[3]=(((cj2*sj1))+((x5867*x5868))+((cj1*sj2))+(((-1.0)*r20*x5870)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((x5867*x5869))+((cj0*sj1*sj2))+(((-1.0)*r10*x5870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5872=((1.0)*sj0);
IkReal x5873=((1.0)*sj5);
CheckValue<IkReal> x5874=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5873))+(((-1.0)*cj5*r21)))),-1);
if(!x5874.valid){
continue;
}
CheckValue<IkReal> x5875 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x5873))+((r01*sj0*sj5))+(((-1.0)*cj5*r00*x5872)))),IkReal(((((-1.0)*r02*x5872))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5874.value)))+(x5875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5876=IKcos(j4);
IkReal x5877=IKsin(j4);
IkReal x5878=(cj5*r00);
IkReal x5879=(cj1*cj2);
IkReal x5880=(cj5*r10);
IkReal x5881=(sj1*sj2);
IkReal x5882=(cj5*r20);
IkReal x5883=((1.0)*x5876);
IkReal x5884=((1.0)*x5877);
IkReal x5885=(sj5*x5876);
IkReal x5886=(sj5*x5877);
evalcond[0]=((((-1.0)*x5882*x5883))+((r22*x5877))+((r21*x5885)));
evalcond[1]=(((r01*x5885))+cj0+((r02*x5877))+(((-1.0)*x5878*x5883)));
evalcond[2]=(sj0+((r11*x5885))+(((-1.0)*x5880*x5883))+((r12*x5877)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5882*x5884))+((cj1*sj2))+((r21*x5886))+(((-1.0)*r22*x5883)));
evalcond[4]=(((r01*x5886))+((sj0*x5879))+(((-1.0)*sj0*x5881))+(((-1.0)*r02*x5883))+(((-1.0)*x5878*x5884)));
evalcond[5]=(((r11*x5886))+(((-1.0)*r12*x5883))+(((-1.0)*x5880*x5884))+((cj0*x5881))+(((-1.0)*cj0*x5879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5887=((1.0)*cj5);
CheckValue<IkReal> x5888 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5887)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5888.valid){
continue;
}
CheckValue<IkReal> x5889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5887)))),-1);
if(!x5889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5888.value)+(((1.5707963267949)*(x5889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5890=IKcos(j4);
IkReal x5891=IKsin(j4);
IkReal x5892=(cj5*r00);
IkReal x5893=(cj1*cj2);
IkReal x5894=(cj5*r10);
IkReal x5895=(sj1*sj2);
IkReal x5896=(cj5*r20);
IkReal x5897=((1.0)*x5890);
IkReal x5898=((1.0)*x5891);
IkReal x5899=(sj5*x5890);
IkReal x5900=(sj5*x5891);
evalcond[0]=(((r22*x5891))+(((-1.0)*x5896*x5897))+((r21*x5899)));
evalcond[1]=(cj0+(((-1.0)*x5892*x5897))+((r02*x5891))+((r01*x5899)));
evalcond[2]=(sj0+(((-1.0)*x5894*x5897))+((r12*x5891))+((r11*x5899)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5896*x5898))+(((-1.0)*r22*x5897))+((cj1*sj2))+((r21*x5900)));
evalcond[4]=((((-1.0)*x5892*x5898))+(((-1.0)*sj0*x5895))+((sj0*x5893))+(((-1.0)*r02*x5897))+((r01*x5900)));
evalcond[5]=(((cj0*x5895))+(((-1.0)*r12*x5897))+(((-1.0)*cj0*x5893))+(((-1.0)*x5894*x5898))+((r11*x5900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5901 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5901.valid){
continue;
}
CheckValue<IkReal> x5902=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5901.value)+(((1.5707963267949)*(x5902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5903=IKcos(j4);
IkReal x5904=IKsin(j4);
IkReal x5905=(cj5*r00);
IkReal x5906=(cj1*cj2);
IkReal x5907=(cj5*r10);
IkReal x5908=(sj1*sj2);
IkReal x5909=(cj5*r20);
IkReal x5910=((1.0)*x5903);
IkReal x5911=((1.0)*x5904);
IkReal x5912=(sj5*x5903);
IkReal x5913=(sj5*x5904);
evalcond[0]=(((r22*x5904))+(((-1.0)*x5909*x5910))+((r21*x5912)));
evalcond[1]=(((r01*x5912))+cj0+(((-1.0)*x5905*x5910))+((r02*x5904)));
evalcond[2]=(((r12*x5904))+sj0+(((-1.0)*x5907*x5910))+((r11*x5912)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x5910))+(((-1.0)*x5909*x5911))+((r21*x5913)));
evalcond[4]=(((r01*x5913))+((sj0*x5906))+(((-1.0)*sj0*x5908))+(((-1.0)*x5905*x5911))+(((-1.0)*r02*x5910)));
evalcond[5]=((((-1.0)*r12*x5910))+(((-1.0)*x5907*x5911))+(((-1.0)*cj0*x5906))+((cj0*x5908))+((r11*x5913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5914=r21*r21;
IkReal x5915=cj5*cj5;
IkReal x5916=(cj2*sj1);
IkReal x5917=(cj1*sj2);
IkReal x5918=((1.0)*r22);
IkReal x5919=(r21*sj5);
IkReal x5920=((1.0)*cj5*r20);
CheckValue<IkReal> x5921=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5915*(r20*r20)))+(((-1.0)*r22*x5918))+((x5914*x5915))+(((2.0)*cj5*r20*x5919))+(((-1.0)*x5914)))),-1);
if(!x5921.valid){
continue;
}
CheckValue<IkReal> x5922 = IKatan2WithCheck(IkReal((((x5916*x5919))+(((-1.0)*x5916*x5920))+(((-1.0)*x5917*x5920))+((x5917*x5919)))),IkReal(((((-1.0)*x5916*x5918))+(((-1.0)*x5917*x5918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5921.value)))+(x5922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5923=IKcos(j4);
IkReal x5924=IKsin(j4);
IkReal x5925=(r21*sj5);
IkReal x5926=(cj5*r20);
IkReal x5927=((1.0)*x5923);
evalcond[0]=(((x5923*x5925))+((r22*x5924))+(((-1.0)*x5926*x5927)));
evalcond[1]=(((x5924*x5925))+((cj2*sj1))+(((-1.0)*r22*x5927))+((cj1*sj2))+(((-1.0)*x5924*x5926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5928=(cj4*cj5);
IkReal x5929=((1.0)*sj4);
IkReal x5930=((1.0)*cj4*sj5);
if( IKabs((((r10*x5928))+(((-1.0)*r12*x5929))+(((-1.0)*r11*x5930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5930))+(((-1.0)*r02*x5929))+((r00*x5928)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x5928))+(((-1.0)*r12*x5929))+(((-1.0)*r11*x5930))))+IKsqr(((((-1.0)*r01*x5930))+(((-1.0)*r02*x5929))+((r00*x5928))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x5928))+(((-1.0)*r12*x5929))+(((-1.0)*r11*x5930))), ((((-1.0)*r01*x5930))+(((-1.0)*r02*x5929))+((r00*x5928))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5931=IKsin(j0);
IkReal x5932=IKcos(j0);
IkReal x5933=(sj4*sj5);
IkReal x5934=(cj5*r01);
IkReal x5935=((0.0565)*sj5);
IkReal x5936=((1.0)*sj2);
IkReal x5937=((0.09)*sj2);
IkReal x5938=(cj5*r11);
IkReal x5939=((1.0)*cj2);
IkReal x5940=((0.09)*cj2);
IkReal x5941=((1.0)*cj4);
IkReal x5942=(cj4*sj5);
IkReal x5943=(sj1*x5931);
IkReal x5944=(cj1*x5932);
IkReal x5945=(cj1*x5931);
IkReal x5946=(cj5*x5941);
IkReal x5947=(sj1*x5932);
IkReal x5948=((1.0)*cj5*sj4);
evalcond[0]=(((r01*x5942))+((r02*sj4))+(((-1.0)*r00*x5946))+x5932);
evalcond[1]=((((-1.0)*r10*x5946))+((r12*sj4))+((r11*x5942))+x5931);
evalcond[2]=(((r00*sj5))+((cj2*x5943))+x5934+((sj2*x5945)));
evalcond[3]=(((r10*sj5))+(((-1.0)*x5936*x5944))+(((-1.0)*x5939*x5947))+x5938);
evalcond[4]=((((-1.0)*x5936*x5943))+((r01*x5933))+((cj2*x5945))+(((-1.0)*r00*x5948))+(((-1.0)*r02*x5941)));
evalcond[5]=((((-1.0)*r12*x5941))+((r11*x5933))+(((-1.0)*x5939*x5944))+(((-1.0)*r10*x5948))+((sj2*x5947)));
evalcond[6]=((((-0.09)*x5943))+(((0.0565)*x5932))+(((-0.0565)*x5934))+(((-1.0)*r00*x5935))+(((-1.0)*x5937*x5945))+(((1.0e-7)*x5945))+(((-1.0)*x5940*x5943))+(((-1.0)*px)));
evalcond[7]=((((0.0565)*x5931))+(((-0.0565)*x5938))+(((-1.0e-7)*x5944))+(((-1.0)*py))+((x5937*x5944))+(((0.09)*x5947))+(((-1.0)*r10*x5935))+((x5940*x5947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5949=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x5949.valid){
continue;
}
CheckValue<IkReal> x5950 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5950.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5949.value)))+(x5950.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5951=IKsin(j0);
IkReal x5952=IKcos(j0);
IkReal x5953=(cj5*r01);
IkReal x5954=((0.0565)*sj5);
IkReal x5955=(cj1*sj2);
IkReal x5956=(cj5*r11);
IkReal x5957=(cj2*sj1);
IkReal x5958=((1.0e-7)*cj1);
IkReal x5959=((1.0)*x5952);
IkReal x5960=((0.09)*x5951);
IkReal x5961=((0.09)*x5952);
evalcond[0]=(((r00*sj5))+((x5951*x5957))+((x5951*x5955))+x5953);
evalcond[1]=(((r10*sj5))+(((-1.0)*x5957*x5959))+x5956+(((-1.0)*x5955*x5959)));
evalcond[2]=((((-1.0)*r00*x5954))+(((-1.0)*x5957*x5960))+((x5951*x5958))+(((-1.0)*px))+(((0.0565)*x5952))+(((-0.0565)*x5953))+(((-1.0)*sj1*x5960))+(((-1.0)*x5955*x5960)));
evalcond[3]=((((-1.0)*r10*x5954))+(((-1.0)*py))+(((-1.0)*x5952*x5958))+(((0.0565)*x5951))+(((-0.0565)*x5956))+((sj1*x5961))+((x5957*x5961))+((x5955*x5961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5962=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5962;
j4eval[1]=IKsign(x5962);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5963=((1.0)*cj5);
IkReal x5964=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5963)));
j4eval[0]=x5964;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5963))))));
j4eval[2]=IKsign(x5964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5965=((1.0)*sj0);
IkReal x5966=((1.0)*sj5);
IkReal x5967=((((-1.0)*r20*x5966))+(((-1.0)*cj5*r21)));
j4eval[0]=x5967;
j4eval[1]=((IKabs(((((-1.0)*r02*x5965))+((cj0*r12)))))+(IKabs(((((-1.0)*cj5*r00*x5965))+((cj0*cj5*r10))+(((-1.0)*cj0*r11*x5966))+((r01*sj0*sj5))))));
j4eval[2]=IKsign(x5967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5968=((-1.0)*r20);
IkReal x5970 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5970)==0){
continue;
}
IkReal x5969=pow(x5970,-0.5);
CheckValue<IkReal> x5971 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5968),IKFAST_ATAN2_MAGTHRESH);
if(!x5971.valid){
continue;
}
IkReal gconst148=((-1.0)*(x5971.value));
IkReal gconst149=(r21*x5969);
IkReal gconst150=(x5968*x5969);
CheckValue<IkReal> x5972 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5972.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5972.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5973=((-1.0)*r20);
IkReal x5974=x5969;
CheckValue<IkReal> x5976 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5973),IKFAST_ATAN2_MAGTHRESH);
if(!x5976.valid){
continue;
}
IkReal x5975=((-1.0)*(x5976.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst149;
cj5=gconst150;
j5=x5975;
IkReal gconst148=x5975;
IkReal gconst149=(r21*x5974);
IkReal gconst150=(x5973*x5974);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5977=((-1.0)*r20);
IkReal x5978=x5969;
CheckValue<IkReal> x5980 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5977),IKFAST_ATAN2_MAGTHRESH);
if(!x5980.valid){
continue;
}
IkReal x5979=((-1.0)*(x5980.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst149;
cj5=gconst150;
j5=x5979;
IkReal gconst148=x5979;
IkReal gconst149=(r21*x5978);
IkReal gconst150=(x5977*x5978);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5981=((-1.0)*r20);
IkReal x5982=x5969;
CheckValue<IkReal> x5984 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5981),IKFAST_ATAN2_MAGTHRESH);
if(!x5984.valid){
continue;
}
IkReal x5983=((-1.0)*(x5984.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst149;
cj5=gconst150;
j5=x5983;
IkReal gconst148=x5983;
IkReal gconst149=(r21*x5982);
IkReal gconst150=(x5981*x5982);
IkReal x5985=((1.0)*(r22*r22));
CheckValue<IkReal> x5989=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5985))),-1);
if(!x5989.valid){
continue;
}
IkReal x5986=x5989.value;
IkReal x5987=((1.0)*x5986);
IkReal x5988=((((-1.0)*x5985))+(((-2.0)*x5986*(r20*r20)*(r21*r21)))+(((-1.0)*x5987*(r20*r20*r20*r20)))+(((-1.0)*x5987*(r21*r21*r21*r21))));
j4eval[0]=x5988;
j4eval[1]=IKsign(x5988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5990=(cj1*sj2);
IkReal x5991=((1.0)*r22);
IkReal x5992=(gconst149*r21);
IkReal x5993=(gconst150*r20);
IkReal x5994=(cj2*sj1);
CheckValue<IkReal> x5995 = IKatan2WithCheck(IkReal(((((-1.0)*x5993*x5994))+(((-1.0)*x5990*x5993))+((x5992*x5994))+((x5990*x5992)))),IkReal(((((-1.0)*x5990*x5991))+(((-1.0)*x5991*x5994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5995.valid){
continue;
}
CheckValue<IkReal> x5996=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5993*x5993)))+(((-1.0)*(x5992*x5992)))+(((-1.0)*r22*x5991))+(((2.0)*x5992*x5993)))),-1);
if(!x5996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5995.value)+(((1.5707963267949)*(x5996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5997=IKcos(j4);
IkReal x5998=IKsin(j4);
IkReal x5999=(gconst149*r01);
IkReal x6000=(gconst150*r10);
IkReal x6001=(cj1*cj2);
IkReal x6002=(gconst150*r00);
IkReal x6003=(sj1*sj2);
IkReal x6004=(gconst150*r20);
IkReal x6005=((1.0)*x5997);
IkReal x6006=((1.0)*x5998);
IkReal x6007=(gconst149*x5998);
IkReal x6008=(gconst149*x5997);
evalcond[0]=(((r21*x6008))+(((-1.0)*x6004*x6005))+((r22*x5998)));
evalcond[1]=(cj0+((r02*x5998))+((x5997*x5999))+(((-1.0)*x6002*x6005)));
evalcond[2]=(((r12*x5998))+sj0+((r11*x6008))+(((-1.0)*x6000*x6005)));
evalcond[3]=(((r21*x6007))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x6005))+(((-1.0)*x6004*x6006)));
evalcond[4]=(((x5998*x5999))+((sj0*x6001))+(((-1.0)*sj0*x6003))+(((-1.0)*r02*x6005))+(((-1.0)*x6002*x6006)));
evalcond[5]=(((cj0*x6003))+((r11*x6007))+(((-1.0)*r12*x6005))+(((-1.0)*cj0*x6001))+(((-1.0)*x6000*x6006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6009=((1.0)*gconst150);
CheckValue<IkReal> x6010 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x6009))+((cj0*gconst149*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6010.valid){
continue;
}
CheckValue<IkReal> x6011=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r10))+(((-1.0)*r11*x6009)))),-1);
if(!x6011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6010.value)+(((1.5707963267949)*(x6011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6012=IKcos(j4);
IkReal x6013=IKsin(j4);
IkReal x6014=(gconst149*r01);
IkReal x6015=(gconst150*r10);
IkReal x6016=(cj1*cj2);
IkReal x6017=(gconst150*r00);
IkReal x6018=(sj1*sj2);
IkReal x6019=(gconst150*r20);
IkReal x6020=((1.0)*x6012);
IkReal x6021=((1.0)*x6013);
IkReal x6022=(gconst149*x6013);
IkReal x6023=(gconst149*x6012);
evalcond[0]=(((r21*x6023))+(((-1.0)*x6019*x6020))+((r22*x6013)));
evalcond[1]=(((x6012*x6014))+cj0+((r02*x6013))+(((-1.0)*x6017*x6020)));
evalcond[2]=((((-1.0)*x6015*x6020))+sj0+((r12*x6013))+((r11*x6023)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x6020))+((r21*x6022))+(((-1.0)*x6019*x6021)));
evalcond[4]=((((-1.0)*x6017*x6021))+(((-1.0)*r02*x6020))+((sj0*x6016))+(((-1.0)*sj0*x6018))+((x6013*x6014)));
evalcond[5]=((((-1.0)*x6015*x6021))+((cj0*x6018))+((r11*x6022))+(((-1.0)*cj0*x6016))+(((-1.0)*r12*x6020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6024=IKPowWithIntegerCheck(IKsign((((gconst150*r01))+((gconst149*r00)))),-1);
if(!x6024.valid){
continue;
}
CheckValue<IkReal> x6025 = IKatan2WithCheck(IkReal((((gconst149*r21*sj0))+(((-1.0)*gconst150*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6024.value)))+(x6025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6026=IKcos(j4);
IkReal x6027=IKsin(j4);
IkReal x6028=(gconst149*r01);
IkReal x6029=(gconst150*r10);
IkReal x6030=(cj1*cj2);
IkReal x6031=(gconst150*r00);
IkReal x6032=(sj1*sj2);
IkReal x6033=(gconst150*r20);
IkReal x6034=((1.0)*x6026);
IkReal x6035=((1.0)*x6027);
IkReal x6036=(gconst149*x6027);
IkReal x6037=(gconst149*x6026);
evalcond[0]=(((r21*x6037))+((r22*x6027))+(((-1.0)*x6033*x6034)));
evalcond[1]=(((x6026*x6028))+((r02*x6027))+cj0+(((-1.0)*x6031*x6034)));
evalcond[2]=((((-1.0)*x6029*x6034))+sj0+((r11*x6037))+((r12*x6027)));
evalcond[3]=(((cj2*sj1))+((r21*x6036))+((cj1*sj2))+(((-1.0)*x6033*x6035))+(((-1.0)*r22*x6034)));
evalcond[4]=((((-1.0)*x6031*x6035))+((sj0*x6030))+((x6027*x6028))+(((-1.0)*sj0*x6032))+(((-1.0)*r02*x6034)));
evalcond[5]=((((-1.0)*x6029*x6035))+((cj0*x6032))+((r11*x6036))+(((-1.0)*r12*x6034))+(((-1.0)*cj0*x6030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6038=((-1.0)*r21);
IkReal x6040 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6040)==0){
continue;
}
IkReal x6039=pow(x6040,-0.5);
CheckValue<IkReal> x6041 = IKatan2WithCheck(IkReal(x6038),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6041.valid){
continue;
}
IkReal gconst151=((3.14159265358979)+(((-1.0)*(x6041.value))));
IkReal gconst152=(x6038*x6039);
IkReal gconst153=((1.0)*r20*x6039);
CheckValue<IkReal> x6042 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6042.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6042.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6043=((-1.0)*r21);
CheckValue<IkReal> x6046 = IKatan2WithCheck(IkReal(x6043),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6046.valid){
continue;
}
IkReal x6044=((1.0)*(x6046.value));
IkReal x6045=x6039;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x6044)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x6044)));
IkReal gconst152=(x6043*x6045);
IkReal gconst153=((1.0)*r20*x6045);
IkReal x6047=r22*r22;
IkReal x6048=((1.0)*x6047);
CheckValue<IkReal> x6052=IKPowWithIntegerCheck(((-1.0)+x6047),-1);
if(!x6052.valid){
continue;
}
IkReal x6049=x6052.value;
if((((1.0)+(((-1.0)*x6048)))) < -0.00001)
continue;
IkReal x6050=IKsqrt(((1.0)+(((-1.0)*x6048))));
IkReal x6051=(sj0*x6049*x6050);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6051+(((-1.0)*x6048*x6051))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6053=((-1.0)*r21);
CheckValue<IkReal> x6056 = IKatan2WithCheck(IkReal(x6053),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6056.valid){
continue;
}
IkReal x6054=((1.0)*(x6056.value));
IkReal x6055=x6039;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x6054)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x6054)));
IkReal gconst152=(x6053*x6055);
IkReal gconst153=((1.0)*r20*x6055);
IkReal x6057=r22*r22;
IkReal x6058=((1.0)*x6057);
CheckValue<IkReal> x6062=IKPowWithIntegerCheck(((-1.0)+x6057),-1);
if(!x6062.valid){
continue;
}
IkReal x6059=x6062.value;
if((((1.0)+(((-1.0)*x6058)))) < -0.00001)
continue;
IkReal x6060=IKsqrt(((1.0)+(((-1.0)*x6058))));
IkReal x6061=(cj0*x6059*x6060);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6061+(((-1.0)*x6058*x6061))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6063=((-1.0)*r21);
CheckValue<IkReal> x6066 = IKatan2WithCheck(IkReal(x6063),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6066.valid){
continue;
}
IkReal x6064=((1.0)*(x6066.value));
IkReal x6065=x6039;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst152;
cj5=gconst153;
j5=((3.14159265)+(((-1.0)*x6064)));
IkReal gconst151=((3.14159265358979)+(((-1.0)*x6064)));
IkReal gconst152=(x6063*x6065);
IkReal gconst153=((1.0)*r20*x6065);
IkReal x6067=r22*r22;
IkReal x6068=(cj0*r12);
IkReal x6069=((1.0)*r02*sj0);
CheckValue<IkReal> x6073=IKPowWithIntegerCheck(((-1.0)+x6067),-1);
if(!x6073.valid){
continue;
}
IkReal x6070=x6073.value;
if((((1.0)+(((-1.0)*x6067)))) < -0.00001)
continue;
IkReal x6071=IKsqrt(((1.0)+(((-1.0)*x6067))));
IkReal x6072=(r22*x6070*x6071);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x6068+(((-1.0)*x6069)))))+(IKabs((((x6068*x6072))+(((-1.0)*x6069*x6072))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6074=((1.0)*sj0);
IkReal x6075=((1.0)*gconst152);
CheckValue<IkReal> x6076 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x6075))+((gconst152*r01*sj0))+(((-1.0)*gconst153*r00*x6074))+((cj0*gconst153*r10)))),IkReal(((((-1.0)*r02*x6074))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6076.valid){
continue;
}
CheckValue<IkReal> x6077=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst153*r21))+(((-1.0)*r20*x6075)))),-1);
if(!x6077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6076.value)+(((1.5707963267949)*(x6077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6078=IKcos(j4);
IkReal x6079=IKsin(j4);
IkReal x6080=(cj1*cj2);
IkReal x6081=(sj1*sj2);
IkReal x6082=((1.0)*x6078);
IkReal x6083=(gconst152*x6078);
IkReal x6084=(gconst152*x6079);
IkReal x6085=((1.0)*gconst153*x6079);
evalcond[0]=(((r22*x6079))+((r21*x6083))+(((-1.0)*gconst153*r20*x6082)));
evalcond[1]=(cj0+((r01*x6083))+(((-1.0)*gconst153*r00*x6082))+((r02*x6079)));
evalcond[2]=(sj0+(((-1.0)*gconst153*r10*x6082))+((r11*x6083))+((r12*x6079)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x6082))+((cj1*sj2))+((r21*x6084))+(((-1.0)*r20*x6085)));
evalcond[4]=(((sj0*x6080))+(((-1.0)*r00*x6085))+((r01*x6084))+(((-1.0)*sj0*x6081))+(((-1.0)*r02*x6082)));
evalcond[5]=((((-1.0)*r12*x6082))+(((-1.0)*cj0*x6080))+((cj0*x6081))+((r11*x6084))+(((-1.0)*r10*x6085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6086=((1.0)*gconst153);
CheckValue<IkReal> x6087 = IKatan2WithCheck(IkReal((((cj0*gconst152*r21))+(((-1.0)*cj0*r20*x6086)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6087.valid){
continue;
}
CheckValue<IkReal> x6088=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst152*r10))+(((-1.0)*r11*x6086)))),-1);
if(!x6088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6087.value)+(((1.5707963267949)*(x6088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6089=IKcos(j4);
IkReal x6090=IKsin(j4);
IkReal x6091=(cj1*cj2);
IkReal x6092=(sj1*sj2);
IkReal x6093=((1.0)*x6089);
IkReal x6094=(gconst152*x6089);
IkReal x6095=(gconst152*x6090);
IkReal x6096=((1.0)*gconst153*x6090);
evalcond[0]=((((-1.0)*gconst153*r20*x6093))+((r22*x6090))+((r21*x6094)));
evalcond[1]=((((-1.0)*gconst153*r00*x6093))+cj0+((r01*x6094))+((r02*x6090)));
evalcond[2]=(sj0+(((-1.0)*gconst153*r10*x6093))+((r11*x6094))+((r12*x6090)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x6093))+((cj1*sj2))+((r21*x6095))+(((-1.0)*r20*x6096)));
evalcond[4]=(((sj0*x6091))+(((-1.0)*r00*x6096))+((r01*x6095))+(((-1.0)*sj0*x6092))+(((-1.0)*r02*x6093)));
evalcond[5]=((((-1.0)*r10*x6096))+(((-1.0)*cj0*x6091))+((cj0*x6092))+((r11*x6095))+(((-1.0)*r12*x6093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6097 = IKatan2WithCheck(IkReal((((gconst152*r21*sj0))+(((-1.0)*gconst153*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6097.valid){
continue;
}
CheckValue<IkReal> x6098=IKPowWithIntegerCheck(IKsign((((gconst153*r01))+((gconst152*r00)))),-1);
if(!x6098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6097.value)+(((1.5707963267949)*(x6098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6099=IKcos(j4);
IkReal x6100=IKsin(j4);
IkReal x6101=(cj1*cj2);
IkReal x6102=(sj1*sj2);
IkReal x6103=((1.0)*x6099);
IkReal x6104=(gconst152*x6099);
IkReal x6105=(gconst152*x6100);
IkReal x6106=((1.0)*gconst153*x6100);
evalcond[0]=(((r22*x6100))+((r21*x6104))+(((-1.0)*gconst153*r20*x6103)));
evalcond[1]=((((-1.0)*gconst153*r00*x6103))+cj0+((r02*x6100))+((r01*x6104)));
evalcond[2]=(((r11*x6104))+sj0+(((-1.0)*gconst153*r10*x6103))+((r12*x6100)));
evalcond[3]=(((cj2*sj1))+((r21*x6105))+((cj1*sj2))+(((-1.0)*r22*x6103))+(((-1.0)*r20*x6106)));
evalcond[4]=((((-1.0)*r02*x6103))+((sj0*x6101))+(((-1.0)*sj0*x6102))+(((-1.0)*r00*x6106))+((r01*x6105)));
evalcond[5]=(((r11*x6105))+((cj0*x6102))+(((-1.0)*r10*x6106))+(((-1.0)*r12*x6103))+(((-1.0)*cj0*x6101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6107=((-1.0)*r10);
IkReal x6109 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6109)==0){
continue;
}
IkReal x6108=pow(x6109,-0.5);
CheckValue<IkReal> x6110 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6107),IKFAST_ATAN2_MAGTHRESH);
if(!x6110.valid){
continue;
}
IkReal gconst154=((-1.0)*(x6110.value));
IkReal gconst155=(r11*x6108);
IkReal gconst156=(x6107*x6108);
CheckValue<IkReal> x6111 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6111.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6111.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6112=((-1.0)*r10);
IkReal x6113=x6108;
CheckValue<IkReal> x6115 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6112),IKFAST_ATAN2_MAGTHRESH);
if(!x6115.valid){
continue;
}
IkReal x6114=((-1.0)*(x6115.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst155;
cj5=gconst156;
j5=x6114;
IkReal gconst154=x6114;
IkReal gconst155=(r11*x6113);
IkReal gconst156=(x6112*x6113);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6116=((-1.0)*r10);
IkReal x6117=x6108;
CheckValue<IkReal> x6119 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6116),IKFAST_ATAN2_MAGTHRESH);
if(!x6119.valid){
continue;
}
IkReal x6118=((-1.0)*(x6119.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst155;
cj5=gconst156;
j5=x6118;
IkReal gconst154=x6118;
IkReal gconst155=(r11*x6117);
IkReal gconst156=(x6116*x6117);
IkReal x6120=r12*r12;
IkReal x6121=(r02*sj0);
IkReal x6122=((1.0)*x6120);
CheckValue<IkReal> x6126=IKPowWithIntegerCheck(((-1.0)+x6120),-1);
if(!x6126.valid){
continue;
}
IkReal x6123=x6126.value;
if((((1.0)+(((-1.0)*x6122)))) < -0.00001)
continue;
IkReal x6124=IKsqrt(((1.0)+(((-1.0)*x6122))));
IkReal x6125=(cj0*x6123*x6124);
j4eval[0]=((IKabs((x6125+((r12*x6121*x6123*x6124))+(((-1.0)*x6122*x6125)))))+(IKabs(((((-1.0)*x6121))+((cj0*r12))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6127=((-1.0)*r10);
IkReal x6128=x6108;
CheckValue<IkReal> x6130 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6127),IKFAST_ATAN2_MAGTHRESH);
if(!x6130.valid){
continue;
}
IkReal x6129=((-1.0)*(x6130.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst155;
cj5=gconst156;
j5=x6129;
IkReal gconst154=x6129;
IkReal gconst155=(r11*x6128);
IkReal gconst156=(x6127*x6128);
IkReal x6131=((1.0)+(((-1.0)*(r12*r12))));
IkReal x6132=(cj1*r22*sj2);
IkReal x6133=(cj2*r22*sj1);
CheckValue<IkReal> x6139=IKPowWithIntegerCheck(x6131,-1);
if(!x6139.valid){
continue;
}
IkReal x6134=x6139.value;
IkReal x6135=((1.0)*x6134);
IkReal x6136=x6108;
IkReal x6137=(r12*x6136);
IkReal x6138=((((-2.0)*r10*r11*r20*r21*x6134))+(((-1.0)*x6135*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6135*(r11*r11)*(r21*r21))));
j4eval[0]=x6138;
j4eval[1]=((IKabs(((((-1.0)*x6132))+(((-1.0)*x6133)))))+(IKabs((((x6133*x6137))+((x6132*x6137))))));
j4eval[2]=IKsign(x6138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6140=(cj1*sj2);
IkReal x6141=((1.0)*r22);
IkReal x6142=(cj2*sj1);
IkReal x6143=(gconst156*r20);
IkReal x6144=(gconst155*r21);
CheckValue<IkReal> x6145=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6143*x6143)))+(((2.0)*x6143*x6144))+(((-1.0)*(x6144*x6144)))+(((-1.0)*r22*x6141)))),-1);
if(!x6145.valid){
continue;
}
CheckValue<IkReal> x6146 = IKatan2WithCheck(IkReal(((((-1.0)*x6140*x6143))+((x6142*x6144))+((x6140*x6144))+(((-1.0)*x6142*x6143)))),IkReal(((((-1.0)*x6140*x6141))+(((-1.0)*x6141*x6142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6145.value)))+(x6146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6147=IKcos(j4);
IkReal x6148=IKsin(j4);
IkReal x6149=(cj1*cj2);
IkReal x6150=(gconst155*r11);
IkReal x6151=(sj1*sj2);
IkReal x6152=(gconst155*r21);
IkReal x6153=(gconst155*r01);
IkReal x6154=((1.0)*x6147);
IkReal x6155=((1.0)*gconst156*x6148);
evalcond[0]=((((-1.0)*gconst156*r20*x6154))+((x6147*x6152))+((r22*x6148)));
evalcond[1]=(cj0+(((-1.0)*gconst156*r00*x6154))+((x6147*x6153))+((r02*x6148)));
evalcond[2]=(sj0+((x6147*x6150))+(((-1.0)*gconst156*r10*x6154))+((r12*x6148)));
evalcond[3]=(((cj2*sj1))+((x6148*x6152))+(((-1.0)*r22*x6154))+((cj1*sj2))+(((-1.0)*r20*x6155)));
evalcond[4]=((((-1.0)*r02*x6154))+((x6148*x6153))+(((-1.0)*sj0*x6151))+((sj0*x6149))+(((-1.0)*r00*x6155)));
evalcond[5]=(((x6148*x6150))+((cj0*x6151))+(((-1.0)*cj0*x6149))+(((-1.0)*r12*x6154))+(((-1.0)*r10*x6155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6156=((1.0)*sj0);
IkReal x6157=((1.0)*gconst155);
CheckValue<IkReal> x6158=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst156*r21))+(((-1.0)*r20*x6157)))),-1);
if(!x6158.valid){
continue;
}
CheckValue<IkReal> x6159 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x6157))+(((-1.0)*gconst156*r00*x6156))+((gconst155*r01*sj0))+((cj0*gconst156*r10)))),IkReal(((((-1.0)*r02*x6156))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6158.value)))+(x6159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6160=IKcos(j4);
IkReal x6161=IKsin(j4);
IkReal x6162=(cj1*cj2);
IkReal x6163=(gconst155*r11);
IkReal x6164=(sj1*sj2);
IkReal x6165=(gconst155*r21);
IkReal x6166=(gconst155*r01);
IkReal x6167=((1.0)*x6160);
IkReal x6168=((1.0)*gconst156*x6161);
evalcond[0]=(((x6160*x6165))+(((-1.0)*gconst156*r20*x6167))+((r22*x6161)));
evalcond[1]=(cj0+((r02*x6161))+((x6160*x6166))+(((-1.0)*gconst156*r00*x6167)));
evalcond[2]=(sj0+((r12*x6161))+(((-1.0)*gconst156*r10*x6167))+((x6160*x6163)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6168))+((x6161*x6165))+(((-1.0)*r22*x6167)));
evalcond[4]=(((sj0*x6162))+((x6161*x6166))+(((-1.0)*r02*x6167))+(((-1.0)*sj0*x6164))+(((-1.0)*r00*x6168)));
evalcond[5]=((((-1.0)*r12*x6167))+((x6161*x6163))+(((-1.0)*cj0*x6162))+((cj0*x6164))+(((-1.0)*r10*x6168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6169=IKPowWithIntegerCheck(IKsign((((gconst156*r01))+((gconst155*r00)))),-1);
if(!x6169.valid){
continue;
}
CheckValue<IkReal> x6170 = IKatan2WithCheck(IkReal((((gconst155*r21*sj0))+(((-1.0)*gconst156*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6169.value)))+(x6170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6171=IKcos(j4);
IkReal x6172=IKsin(j4);
IkReal x6173=(cj1*cj2);
IkReal x6174=(gconst155*r11);
IkReal x6175=(sj1*sj2);
IkReal x6176=(gconst155*r21);
IkReal x6177=(gconst155*r01);
IkReal x6178=((1.0)*x6171);
IkReal x6179=((1.0)*gconst156*x6172);
evalcond[0]=((((-1.0)*gconst156*r20*x6178))+((x6171*x6176))+((r22*x6172)));
evalcond[1]=(cj0+((r02*x6172))+((x6171*x6177))+(((-1.0)*gconst156*r00*x6178)));
evalcond[2]=(sj0+((r12*x6172))+((x6171*x6174))+(((-1.0)*gconst156*r10*x6178)));
evalcond[3]=(((cj2*sj1))+((x6172*x6176))+(((-1.0)*r20*x6179))+((cj1*sj2))+(((-1.0)*r22*x6178)));
evalcond[4]=(((x6172*x6177))+((sj0*x6173))+(((-1.0)*sj0*x6175))+(((-1.0)*r00*x6179))+(((-1.0)*r02*x6178)));
evalcond[5]=(((x6172*x6174))+(((-1.0)*r12*x6178))+(((-1.0)*cj0*x6173))+((cj0*x6175))+(((-1.0)*r10*x6179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6180=((-1.0)*r11);
IkReal x6182 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6182)==0){
continue;
}
IkReal x6181=pow(x6182,-0.5);
CheckValue<IkReal> x6183 = IKatan2WithCheck(IkReal(x6180),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6183.valid){
continue;
}
IkReal gconst157=((3.14159265358979)+(((-1.0)*(x6183.value))));
IkReal gconst158=(x6180*x6181);
IkReal gconst159=((1.0)*r10*x6181);
CheckValue<IkReal> x6184 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6184.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6184.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6185=((-1.0)*r11);
CheckValue<IkReal> x6188 = IKatan2WithCheck(IkReal(x6185),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6188.valid){
continue;
}
IkReal x6186=((1.0)*(x6188.value));
IkReal x6187=x6181;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst158;
cj5=gconst159;
j5=((3.14159265)+(((-1.0)*x6186)));
IkReal gconst157=((3.14159265358979)+(((-1.0)*x6186)));
IkReal gconst158=(x6185*x6187);
IkReal gconst159=((1.0)*r10*x6187);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x6189=((-1.0)*r11);
CheckValue<IkReal> x6192 = IKatan2WithCheck(IkReal(x6189),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6192.valid){
continue;
}
IkReal x6190=((1.0)*(x6192.value));
IkReal x6191=x6181;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst158;
cj5=gconst159;
j5=((3.14159265)+(((-1.0)*x6190)));
IkReal gconst157=((3.14159265358979)+(((-1.0)*x6190)));
IkReal gconst158=(x6189*x6191);
IkReal gconst159=((1.0)*r10*x6191);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6193=((1.0)*sj0);
IkReal x6194=((1.0)*gconst158);
CheckValue<IkReal> x6195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6194))+(((-1.0)*gconst159*r21)))),-1);
if(!x6195.valid){
continue;
}
CheckValue<IkReal> x6196 = IKatan2WithCheck(IkReal((((gconst158*r01*sj0))+((cj0*gconst159*r10))+(((-1.0)*gconst159*r00*x6193))+(((-1.0)*cj0*r11*x6194)))),IkReal(((((-1.0)*r02*x6193))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6195.value)))+(x6196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6197=IKcos(j4);
IkReal x6198=IKsin(j4);
IkReal x6199=(cj1*cj2);
IkReal x6200=(sj1*sj2);
IkReal x6201=(gconst159*r00);
IkReal x6202=(gconst159*r10);
IkReal x6203=(gconst159*r20);
IkReal x6204=((1.0)*x6197);
IkReal x6205=(gconst158*x6197);
IkReal x6206=((1.0)*x6198);
IkReal x6207=(gconst158*x6198);
evalcond[0]=(((r21*x6205))+((r22*x6198))+(((-1.0)*x6203*x6204)));
evalcond[1]=(cj0+((r01*x6205))+((r02*x6198))+(((-1.0)*x6201*x6204)));
evalcond[2]=(sj0+(((-1.0)*x6202*x6204))+((r12*x6198))+((r11*x6205)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6207))+(((-1.0)*r22*x6204))+(((-1.0)*x6203*x6206)));
evalcond[4]=(((r01*x6207))+(((-1.0)*r02*x6204))+((sj0*x6199))+(((-1.0)*sj0*x6200))+(((-1.0)*x6201*x6206)));
evalcond[5]=((((-1.0)*x6202*x6206))+(((-1.0)*cj0*x6199))+(((-1.0)*r12*x6204))+((r11*x6207))+((cj0*x6200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6208=((1.0)*gconst159);
CheckValue<IkReal> x6209 = IKatan2WithCheck(IkReal((((cj0*gconst158*r21))+(((-1.0)*cj0*r20*x6208)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6209.valid){
continue;
}
CheckValue<IkReal> x6210=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst158*r10))+(((-1.0)*r11*x6208)))),-1);
if(!x6210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6209.value)+(((1.5707963267949)*(x6210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6211=IKcos(j4);
IkReal x6212=IKsin(j4);
IkReal x6213=(cj1*cj2);
IkReal x6214=(sj1*sj2);
IkReal x6215=(gconst159*r00);
IkReal x6216=(gconst159*r10);
IkReal x6217=(gconst159*r20);
IkReal x6218=((1.0)*x6211);
IkReal x6219=(gconst158*x6211);
IkReal x6220=((1.0)*x6212);
IkReal x6221=(gconst158*x6212);
evalcond[0]=(((r21*x6219))+(((-1.0)*x6217*x6218))+((r22*x6212)));
evalcond[1]=(cj0+((r02*x6212))+((r01*x6219))+(((-1.0)*x6215*x6218)));
evalcond[2]=(((r12*x6212))+((r11*x6219))+sj0+(((-1.0)*x6216*x6218)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6221))+(((-1.0)*x6217*x6220))+(((-1.0)*r22*x6218)));
evalcond[4]=(((sj0*x6213))+((r01*x6221))+(((-1.0)*x6215*x6220))+(((-1.0)*r02*x6218))+(((-1.0)*sj0*x6214)));
evalcond[5]=((((-1.0)*r12*x6218))+((r11*x6221))+(((-1.0)*cj0*x6213))+(((-1.0)*x6216*x6220))+((cj0*x6214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6222 = IKatan2WithCheck(IkReal((((gconst158*r21*sj0))+(((-1.0)*gconst159*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6222.valid){
continue;
}
CheckValue<IkReal> x6223=IKPowWithIntegerCheck(IKsign((((gconst158*r00))+((gconst159*r01)))),-1);
if(!x6223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6222.value)+(((1.5707963267949)*(x6223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6224=IKcos(j4);
IkReal x6225=IKsin(j4);
IkReal x6226=(cj1*cj2);
IkReal x6227=(sj1*sj2);
IkReal x6228=(gconst159*r00);
IkReal x6229=(gconst159*r10);
IkReal x6230=(gconst159*r20);
IkReal x6231=((1.0)*x6224);
IkReal x6232=(gconst158*x6224);
IkReal x6233=((1.0)*x6225);
IkReal x6234=(gconst158*x6225);
evalcond[0]=(((r21*x6232))+((r22*x6225))+(((-1.0)*x6230*x6231)));
evalcond[1]=(((r02*x6225))+cj0+(((-1.0)*x6228*x6231))+((r01*x6232)));
evalcond[2]=(sj0+(((-1.0)*x6229*x6231))+((r12*x6225))+((r11*x6232)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6234))+(((-1.0)*r22*x6231))+(((-1.0)*x6230*x6233)));
evalcond[4]=((((-1.0)*x6228*x6233))+((r01*x6234))+(((-1.0)*r02*x6231))+(((-1.0)*sj0*x6227))+((sj0*x6226)));
evalcond[5]=((((-1.0)*r12*x6231))+(((-1.0)*cj0*x6226))+((cj0*x6227))+(((-1.0)*x6229*x6233))+((r11*x6234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6235=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6235;
j4eval[1]=IKsign(x6235);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6236=((1.0)*cj5);
IkReal x6237=((((-1.0)*r21*x6236))+(((-1.0)*r20*sj5)));
j4eval[0]=x6237;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6236))))));
j4eval[2]=IKsign(x6237);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6238=cj5*cj5;
IkReal x6239=r11*r11;
IkReal x6240=(cj5*r10);
IkReal x6241=(r11*sj5);
IkReal x6242=((((2.0)*x6240*x6241))+(((-1.0)*x6238*(r10*r10)))+(((-1.0)*x6239))+(((-1.0)*(r12*r12)))+((x6238*x6239)));
j4eval[0]=x6242;
j4eval[1]=((IKabs(r12))+(IKabs((x6241+(((-1.0)*x6240))))));
j4eval[2]=IKsign(x6242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6243=cj5*cj5;
IkReal x6244=r11*r11;
IkReal x6245=(cj5*r10);
IkReal x6246=(r11*sj5);
CheckValue<IkReal> x6247=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6244))+((x6243*x6244))+(((2.0)*x6245*x6246))+(((-1.0)*(r12*r12)))+(((-1.0)*x6243*(r10*r10))))),-1);
if(!x6247.valid){
continue;
}
CheckValue<IkReal> x6248 = IKatan2WithCheck(IkReal(r12),IkReal((x6246+(((-1.0)*x6245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6247.value)))+(x6248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6249=IKcos(j4);
IkReal x6250=IKsin(j4);
IkReal x6251=(cj5*r00);
IkReal x6252=(cj5*r10);
IkReal x6253=(cj5*r20);
IkReal x6254=((1.0)*x6249);
IkReal x6255=((1.0)*x6250);
IkReal x6256=(sj5*x6249);
IkReal x6257=(sj5*x6250);
evalcond[0]=(((r22*x6250))+((r21*x6256))+(((-1.0)*x6253*x6254)));
evalcond[1]=((((-1.0)*x6251*x6254))+((r01*x6256))+((r02*x6250)));
evalcond[2]=((1.0)+(((-1.0)*x6252*x6254))+((r12*x6250))+((r11*x6256)));
evalcond[3]=((((-1.0)*x6252*x6255))+(((-1.0)*r12*x6254))+((r11*x6257)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x6257))+(((-1.0)*r22*x6254))+(((-1.0)*x6253*x6255)));
evalcond[5]=((((-1.0)*x6251*x6255))+((r01*x6257))+(((-1.0)*r02*x6254))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6258=((1.0)*cj5);
CheckValue<IkReal> x6259 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x6258)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6259.valid){
continue;
}
CheckValue<IkReal> x6260=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6258))+(((-1.0)*r20*sj5)))),-1);
if(!x6260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6259.value)+(((1.5707963267949)*(x6260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6261=IKcos(j4);
IkReal x6262=IKsin(j4);
IkReal x6263=(cj5*r00);
IkReal x6264=(cj5*r10);
IkReal x6265=(cj5*r20);
IkReal x6266=((1.0)*x6261);
IkReal x6267=((1.0)*x6262);
IkReal x6268=(sj5*x6261);
IkReal x6269=(sj5*x6262);
evalcond[0]=(((r22*x6262))+((r21*x6268))+(((-1.0)*x6265*x6266)));
evalcond[1]=(((r01*x6268))+(((-1.0)*x6263*x6266))+((r02*x6262)));
evalcond[2]=((1.0)+((r12*x6262))+(((-1.0)*x6264*x6266))+((r11*x6268)));
evalcond[3]=((((-1.0)*x6264*x6267))+(((-1.0)*r12*x6266))+((r11*x6269)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x6269))+(((-1.0)*x6265*x6267))+(((-1.0)*r22*x6266)));
evalcond[5]=(((r01*x6269))+(((-1.0)*r02*x6266))+(((-1.0)*sj1*sj2))+(((-1.0)*x6263*x6267))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6270=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6270.valid){
continue;
}
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6270.value)))+(x6271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6272=IKcos(j4);
IkReal x6273=IKsin(j4);
IkReal x6274=(cj5*r00);
IkReal x6275=(cj5*r10);
IkReal x6276=(cj5*r20);
IkReal x6277=((1.0)*x6272);
IkReal x6278=((1.0)*x6273);
IkReal x6279=(sj5*x6272);
IkReal x6280=(sj5*x6273);
evalcond[0]=(((r22*x6273))+(((-1.0)*x6276*x6277))+((r21*x6279)));
evalcond[1]=((((-1.0)*x6274*x6277))+((r01*x6279))+((r02*x6273)));
evalcond[2]=((1.0)+((r12*x6273))+(((-1.0)*x6275*x6277))+((r11*x6279)));
evalcond[3]=((((-1.0)*x6275*x6278))+((r11*x6280))+(((-1.0)*r12*x6277)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6276*x6278))+(((-1.0)*r22*x6277))+((r21*x6280)));
evalcond[5]=((((-1.0)*x6274*x6278))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x6277))+((cj1*cj2))+((r01*x6280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6281=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6281;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x6281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6282=((1.0)*cj5);
IkReal x6283=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6282)));
j4eval[0]=x6283;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6282))+((r21*sj5))))));
j4eval[2]=IKsign(x6283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6284=cj5*cj5;
IkReal x6285=r11*r11;
IkReal x6286=(r11*sj5);
IkReal x6287=(cj5*r10);
IkReal x6288=((r12*r12)+x6285+(((-2.0)*x6286*x6287))+(((-1.0)*x6284*x6285))+((x6284*(r10*r10))));
j4eval[0]=x6288;
j4eval[1]=((IKabs(r12))+(IKabs((x6286+(((-1.0)*x6287))))));
j4eval[2]=IKsign(x6288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6289=cj5*cj5;
IkReal x6290=r11*r11;
IkReal x6291=(cj5*r10);
IkReal x6292=(r11*sj5);
CheckValue<IkReal> x6293 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6291))+x6292)),IKFAST_ATAN2_MAGTHRESH);
if(!x6293.valid){
continue;
}
CheckValue<IkReal> x6294=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6290+((x6289*(r10*r10)))+(((-1.0)*x6289*x6290))+(((-2.0)*x6291*x6292)))),-1);
if(!x6294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6293.value)+(((1.5707963267949)*(x6294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6295=IKcos(j4);
IkReal x6296=IKsin(j4);
IkReal x6297=(cj5*r00);
IkReal x6298=(cj5*r10);
IkReal x6299=(cj5*r20);
IkReal x6300=((1.0)*x6295);
IkReal x6301=((1.0)*x6296);
IkReal x6302=(sj5*x6295);
IkReal x6303=(sj5*x6296);
evalcond[0]=(((r22*x6296))+((r21*x6302))+(((-1.0)*x6299*x6300)));
evalcond[1]=(((r01*x6302))+(((-1.0)*x6297*x6300))+((r02*x6296)));
evalcond[2]=((-1.0)+(((-1.0)*x6298*x6300))+((r11*x6302))+((r12*x6296)));
evalcond[3]=((((-1.0)*x6298*x6301))+(((-1.0)*r12*x6300))+((r11*x6303)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x6303))+(((-1.0)*x6299*x6301))+(((-1.0)*r22*x6300)));
evalcond[5]=((((-1.0)*r02*x6300))+((r01*x6303))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6297*x6301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6304=((1.0)*cj5);
CheckValue<IkReal> x6305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6304))+(((-1.0)*r00*sj5)))),-1);
if(!x6305.valid){
continue;
}
CheckValue<IkReal> x6306 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x6304)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6305.value)))+(x6306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6307=IKcos(j4);
IkReal x6308=IKsin(j4);
IkReal x6309=(cj5*r00);
IkReal x6310=(cj5*r10);
IkReal x6311=(cj5*r20);
IkReal x6312=((1.0)*x6307);
IkReal x6313=((1.0)*x6308);
IkReal x6314=(sj5*x6307);
IkReal x6315=(sj5*x6308);
evalcond[0]=((((-1.0)*x6311*x6312))+((r22*x6308))+((r21*x6314)));
evalcond[1]=(((r01*x6314))+((r02*x6308))+(((-1.0)*x6309*x6312)));
evalcond[2]=((-1.0)+(((-1.0)*x6310*x6312))+((r11*x6314))+((r12*x6308)));
evalcond[3]=((((-1.0)*r12*x6312))+(((-1.0)*x6310*x6313))+((r11*x6315)));
evalcond[4]=((((-1.0)*r22*x6312))+((cj2*sj1))+(((-1.0)*x6311*x6313))+((cj1*sj2))+((r21*x6315)));
evalcond[5]=((((-1.0)*r02*x6312))+((r01*x6315))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6309*x6313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6316=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6316.valid){
continue;
}
CheckValue<IkReal> x6317 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6316.value)))+(x6317.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6318=IKcos(j4);
IkReal x6319=IKsin(j4);
IkReal x6320=(cj5*r00);
IkReal x6321=(cj5*r10);
IkReal x6322=(cj5*r20);
IkReal x6323=((1.0)*x6318);
IkReal x6324=((1.0)*x6319);
IkReal x6325=(sj5*x6318);
IkReal x6326=(sj5*x6319);
evalcond[0]=(((r22*x6319))+(((-1.0)*x6322*x6323))+((r21*x6325)));
evalcond[1]=((((-1.0)*x6320*x6323))+((r02*x6319))+((r01*x6325)));
evalcond[2]=((-1.0)+((r11*x6325))+(((-1.0)*x6321*x6323))+((r12*x6319)));
evalcond[3]=(((r11*x6326))+(((-1.0)*x6321*x6324))+(((-1.0)*r12*x6323)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x6323))+(((-1.0)*x6322*x6324))+((r21*x6326)));
evalcond[5]=((((-1.0)*x6320*x6324))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6326))+(((-1.0)*r02*x6323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6328 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6328)==0){
continue;
}
IkReal x6327=pow(x6328,-0.5);
CheckValue<IkReal> x6329 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6329.valid){
continue;
}
IkReal gconst160=((-1.0)*(x6329.value));
IkReal gconst161=((-1.0)*r01*x6327);
IkReal gconst162=(r00*x6327);
CheckValue<IkReal> x6330 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6330.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6330.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6333 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6333.valid){
continue;
}
IkReal x6331=((-1.0)*(x6333.value));
IkReal x6332=x6327;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst161;
cj5=gconst162;
j5=x6331;
IkReal gconst160=x6331;
IkReal gconst161=((-1.0)*r01*x6332);
IkReal gconst162=(r00*x6332);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6336 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6336.valid){
continue;
}
IkReal x6334=((-1.0)*(x6336.value));
IkReal x6335=x6327;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst161;
cj5=gconst162;
j5=x6334;
IkReal gconst160=x6334;
IkReal gconst161=((-1.0)*r01*x6335);
IkReal gconst162=(r00*x6335);
IkReal x6337=r02*r02;
IkReal x6338=((1.0)*sj0);
IkReal x6339=(cj0*r12);
CheckValue<IkReal> x6343=IKPowWithIntegerCheck(((-1.0)+x6337),-1);
if(!x6343.valid){
continue;
}
IkReal x6340=x6343.value;
if((((1.0)+(((-1.0)*x6337)))) < -0.00001)
continue;
IkReal x6341=IKsqrt(((1.0)+(((-1.0)*x6337))));
IkReal x6342=(x6340*x6341);
j4eval[0]=((IKabs((((sj0*x6342))+(((-1.0)*x6337*x6338*x6342))+((r02*x6339*x6342)))))+(IKabs((x6339+(((-1.0)*r02*x6338))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6346 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6346.valid){
continue;
}
IkReal x6344=((-1.0)*(x6346.value));
IkReal x6345=x6327;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst161;
cj5=gconst162;
j5=x6344;
IkReal gconst160=x6344;
IkReal gconst161=((-1.0)*r01*x6345);
IkReal gconst162=(r00*x6345);
IkReal x6347=r02*r02;
IkReal x6348=((1.0)*r22);
IkReal x6349=(cj1*sj2);
IkReal x6350=(cj2*sj1);
IkReal x6351=((1.0)+(((-1.0)*x6347)));
CheckValue<IkReal> x6358=IKPowWithIntegerCheck(x6351,-1);
if(!x6358.valid){
continue;
}
IkReal x6352=x6358.value;
CheckValue<IkReal> x6359=IKPowWithIntegerCheck(((-1.0)+x6347),-1);
if(!x6359.valid){
continue;
}
IkReal x6353=x6359.value;
IkReal x6354=((1.0)*x6352);
if((x6351) < -0.00001)
continue;
IkReal x6355=IKsqrt(x6351);
IkReal x6356=(r02*x6353*x6355);
IkReal x6357=((((-1.0)*r22*x6348))+(((-2.0)*r00*r01*r20*r21*x6352))+(((-1.0)*x6354*(r01*r01)*(r21*r21)))+(((-1.0)*x6354*(r00*r00)*(r20*r20))));
j4eval[0]=x6357;
j4eval[1]=((IKabs(((((-1.0)*x6348*x6349*x6356))+(((-1.0)*x6348*x6350*x6356)))))+(IKabs(((((-1.0)*x6348*x6350))+(((-1.0)*x6348*x6349))))));
j4eval[2]=IKsign(x6357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6360=(cj2*sj1);
IkReal x6361=(gconst161*r21);
IkReal x6362=(gconst162*r20);
IkReal x6363=((1.0)*cj1*sj2);
CheckValue<IkReal> x6364=IKPowWithIntegerCheck(IKsign(((((2.0)*x6361*x6362))+(((-1.0)*(x6362*x6362)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6361*x6361))))),-1);
if(!x6364.valid){
continue;
}
CheckValue<IkReal> x6365 = IKatan2WithCheck(IkReal(((((-1.0)*x6362*x6363))+(((-1.0)*x6360*x6362))+((x6360*x6361))+((cj1*sj2*x6361)))),IkReal(((((-1.0)*r22*x6360))+(((-1.0)*r22*x6363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6364.value)))+(x6365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6366=IKcos(j4);
IkReal x6367=IKsin(j4);
IkReal x6368=(cj1*cj2);
IkReal x6369=(sj1*sj2);
IkReal x6370=(gconst162*r10);
IkReal x6371=(gconst162*r20);
IkReal x6372=(gconst162*r00);
IkReal x6373=((1.0)*x6366);
IkReal x6374=((1.0)*x6367);
IkReal x6375=(gconst161*x6367);
IkReal x6376=(gconst161*x6366);
evalcond[0]=(((r21*x6376))+(((-1.0)*x6371*x6373))+((r22*x6367)));
evalcond[1]=((((-1.0)*x6372*x6373))+cj0+((r01*x6376))+((r02*x6367)));
evalcond[2]=(sj0+((r12*x6367))+((r11*x6376))+(((-1.0)*x6370*x6373)));
evalcond[3]=(((r21*x6375))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6371*x6374))+(((-1.0)*r22*x6373)));
evalcond[4]=((((-1.0)*x6372*x6374))+(((-1.0)*r02*x6373))+((r01*x6375))+((sj0*x6368))+(((-1.0)*sj0*x6369)));
evalcond[5]=((((-1.0)*cj0*x6368))+((r11*x6375))+(((-1.0)*x6370*x6374))+(((-1.0)*r12*x6373))+((cj0*x6369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6377=((1.0)*sj0);
IkReal x6378=((1.0)*gconst161);
CheckValue<IkReal> x6379 = IKatan2WithCheck(IkReal(((((-1.0)*gconst162*r00*x6377))+(((-1.0)*cj0*r11*x6378))+((cj0*gconst162*r10))+((gconst161*r01*sj0)))),IkReal(((((-1.0)*r02*x6377))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6379.valid){
continue;
}
CheckValue<IkReal> x6380=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst162*r21))+(((-1.0)*r20*x6378)))),-1);
if(!x6380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6379.value)+(((1.5707963267949)*(x6380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6381=IKcos(j4);
IkReal x6382=IKsin(j4);
IkReal x6383=(cj1*cj2);
IkReal x6384=(sj1*sj2);
IkReal x6385=(gconst162*r10);
IkReal x6386=(gconst162*r20);
IkReal x6387=(gconst162*r00);
IkReal x6388=((1.0)*x6381);
IkReal x6389=((1.0)*x6382);
IkReal x6390=(gconst161*x6382);
IkReal x6391=(gconst161*x6381);
evalcond[0]=((((-1.0)*x6386*x6388))+((r22*x6382))+((r21*x6391)));
evalcond[1]=(cj0+((r02*x6382))+((r01*x6391))+(((-1.0)*x6387*x6388)));
evalcond[2]=(sj0+((r11*x6391))+(((-1.0)*x6385*x6388))+((r12*x6382)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6386*x6389))+((cj1*sj2))+(((-1.0)*r22*x6388))+((r21*x6390)));
evalcond[4]=(((sj0*x6383))+(((-1.0)*sj0*x6384))+((r01*x6390))+(((-1.0)*r02*x6388))+(((-1.0)*x6387*x6389)));
evalcond[5]=(((r11*x6390))+((cj0*x6384))+(((-1.0)*r12*x6388))+(((-1.0)*x6385*x6389))+(((-1.0)*cj0*x6383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6392=((1.0)*gconst162);
CheckValue<IkReal> x6393 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x6392))+((cj0*gconst161*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6393.valid){
continue;
}
CheckValue<IkReal> x6394=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst161*r10))+(((-1.0)*r11*x6392)))),-1);
if(!x6394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6393.value)+(((1.5707963267949)*(x6394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6395=IKcos(j4);
IkReal x6396=IKsin(j4);
IkReal x6397=(cj1*cj2);
IkReal x6398=(sj1*sj2);
IkReal x6399=(gconst162*r10);
IkReal x6400=(gconst162*r20);
IkReal x6401=(gconst162*r00);
IkReal x6402=((1.0)*x6395);
IkReal x6403=((1.0)*x6396);
IkReal x6404=(gconst161*x6396);
IkReal x6405=(gconst161*x6395);
evalcond[0]=((((-1.0)*x6400*x6402))+((r21*x6405))+((r22*x6396)));
evalcond[1]=(cj0+(((-1.0)*x6401*x6402))+((r01*x6405))+((r02*x6396)));
evalcond[2]=(sj0+((r12*x6396))+((r11*x6405))+(((-1.0)*x6399*x6402)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6400*x6403))+((r21*x6404))+((cj1*sj2))+(((-1.0)*r22*x6402)));
evalcond[4]=((((-1.0)*x6401*x6403))+((r01*x6404))+((sj0*x6397))+(((-1.0)*r02*x6402))+(((-1.0)*sj0*x6398)));
evalcond[5]=(((cj0*x6398))+(((-1.0)*cj0*x6397))+(((-1.0)*r12*x6402))+((r11*x6404))+(((-1.0)*x6399*x6403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6407 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6407)==0){
continue;
}
IkReal x6406=pow(x6407,-0.5);
CheckValue<IkReal> x6408 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6408.valid){
continue;
}
IkReal gconst163=((3.14159265358979)+(((-1.0)*(x6408.value))));
IkReal gconst164=((1.0)*r01*x6406);
IkReal gconst165=((-1.0)*r00*x6406);
CheckValue<IkReal> x6409 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6409.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6409.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x6412 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6412.valid){
continue;
}
IkReal x6410=((1.0)*(x6412.value));
IkReal x6411=x6406;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst164;
cj5=gconst165;
j5=((3.14159265)+(((-1.0)*x6410)));
IkReal gconst163=((3.14159265358979)+(((-1.0)*x6410)));
IkReal gconst164=((1.0)*r01*x6411);
IkReal gconst165=((-1.0)*r00*x6411);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6415 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6415.valid){
continue;
}
IkReal x6413=((1.0)*(x6415.value));
IkReal x6414=x6406;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst164;
cj5=gconst165;
j5=((3.14159265)+(((-1.0)*x6413)));
IkReal gconst163=((3.14159265358979)+(((-1.0)*x6413)));
IkReal gconst164=((1.0)*r01*x6414);
IkReal gconst165=((-1.0)*r00*x6414);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6416=((1.0)*gconst165);
IkReal x6417=((1.0)*gconst164);
CheckValue<IkReal> x6418=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6416))+(((-1.0)*r20*x6417)))),-1);
if(!x6418.valid){
continue;
}
CheckValue<IkReal> x6419 = IKatan2WithCheck(IkReal((((cj0*gconst165*r10))+(((-1.0)*cj0*r11*x6417))+((gconst164*r01*sj0))+(((-1.0)*r00*sj0*x6416)))),IkReal(((((-1.0)*r02*sj0))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6418.value)))+(x6419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6420=IKcos(j4);
IkReal x6421=IKsin(j4);
IkReal x6422=(gconst165*r10);
IkReal x6423=(cj1*cj2);
IkReal x6424=(sj1*sj2);
IkReal x6425=(gconst164*r01);
IkReal x6426=(gconst165*r20);
IkReal x6427=(gconst164*r21);
IkReal x6428=(gconst164*r11);
IkReal x6429=(gconst165*r00);
IkReal x6430=((1.0)*x6420);
IkReal x6431=((1.0)*x6421);
evalcond[0]=((((-1.0)*x6426*x6430))+((r22*x6421))+((x6420*x6427)));
evalcond[1]=(cj0+((r02*x6421))+(((-1.0)*x6429*x6430))+((x6420*x6425)));
evalcond[2]=(sj0+((r12*x6421))+((x6420*x6428))+(((-1.0)*x6422*x6430)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6426*x6431))+((cj1*sj2))+(((-1.0)*r22*x6430))+((x6421*x6427)));
evalcond[4]=((((-1.0)*r02*x6430))+(((-1.0)*x6429*x6431))+(((-1.0)*sj0*x6424))+((x6421*x6425))+((sj0*x6423)));
evalcond[5]=((((-1.0)*cj0*x6423))+(((-1.0)*r12*x6430))+((cj0*x6424))+((x6421*x6428))+(((-1.0)*x6422*x6431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6432=((1.0)*gconst165);
CheckValue<IkReal> x6433=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6432))+(((-1.0)*gconst164*r10)))),-1);
if(!x6433.valid){
continue;
}
CheckValue<IkReal> x6434 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x6432))+((cj0*gconst164*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6433.value)))+(x6434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6435=IKcos(j4);
IkReal x6436=IKsin(j4);
IkReal x6437=(gconst165*r10);
IkReal x6438=(cj1*cj2);
IkReal x6439=(sj1*sj2);
IkReal x6440=(gconst164*r01);
IkReal x6441=(gconst165*r20);
IkReal x6442=(gconst164*r21);
IkReal x6443=(gconst164*r11);
IkReal x6444=(gconst165*r00);
IkReal x6445=((1.0)*x6435);
IkReal x6446=((1.0)*x6436);
evalcond[0]=(((r22*x6436))+((x6435*x6442))+(((-1.0)*x6441*x6445)));
evalcond[1]=(cj0+(((-1.0)*x6444*x6445))+((r02*x6436))+((x6435*x6440)));
evalcond[2]=(sj0+((r12*x6436))+(((-1.0)*x6437*x6445))+((x6435*x6443)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6436*x6442))+(((-1.0)*r22*x6445))+(((-1.0)*x6441*x6446)));
evalcond[4]=((((-1.0)*sj0*x6439))+(((-1.0)*r02*x6445))+(((-1.0)*x6444*x6446))+((sj0*x6438))+((x6436*x6440)));
evalcond[5]=(((cj0*x6439))+(((-1.0)*r12*x6445))+(((-1.0)*x6437*x6446))+(((-1.0)*cj0*x6438))+((x6436*x6443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6447 = IKatan2WithCheck(IkReal(((((-1.0)*gconst165*r20*sj0))+((gconst164*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6447.valid){
continue;
}
CheckValue<IkReal> x6448=IKPowWithIntegerCheck(IKsign((((gconst164*r00))+((gconst165*r01)))),-1);
if(!x6448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6447.value)+(((1.5707963267949)*(x6448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6449=IKcos(j4);
IkReal x6450=IKsin(j4);
IkReal x6451=(gconst165*r10);
IkReal x6452=(cj1*cj2);
IkReal x6453=(sj1*sj2);
IkReal x6454=(gconst164*r01);
IkReal x6455=(gconst165*r20);
IkReal x6456=(gconst164*r21);
IkReal x6457=(gconst164*r11);
IkReal x6458=(gconst165*r00);
IkReal x6459=((1.0)*x6449);
IkReal x6460=((1.0)*x6450);
evalcond[0]=(((x6449*x6456))+((r22*x6450))+(((-1.0)*x6455*x6459)));
evalcond[1]=(cj0+((x6449*x6454))+((r02*x6450))+(((-1.0)*x6458*x6459)));
evalcond[2]=(sj0+(((-1.0)*x6451*x6459))+((x6449*x6457))+((r12*x6450)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6450*x6456))+(((-1.0)*x6455*x6460))+(((-1.0)*r22*x6459)));
evalcond[4]=((((-1.0)*sj0*x6453))+(((-1.0)*r02*x6459))+(((-1.0)*x6458*x6460))+((sj0*x6452))+((x6450*x6454)));
evalcond[5]=(((cj0*x6453))+((x6450*x6457))+(((-1.0)*r12*x6459))+(((-1.0)*cj0*x6452))+(((-1.0)*x6451*x6460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6461=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6461;
j4eval[1]=IKsign(x6461);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6462=((1.0)*cj5);
IkReal x6463=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6462)));
j4eval[0]=x6463;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6462))))));
j4eval[2]=IKsign(x6463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6464=cj5*cj5;
IkReal x6465=r01*r01;
IkReal x6466=(r01*sj5);
IkReal x6467=(cj5*r00);
IkReal x6468=(((x6464*x6465))+(((2.0)*x6466*x6467))+(((-1.0)*(r02*r02)))+(((-1.0)*x6465))+(((-1.0)*x6464*(r00*r00))));
j4eval[0]=x6468;
j4eval[1]=IKsign(x6468);
j4eval[2]=((IKabs(r02))+(IKabs((x6466+(((-1.0)*x6467))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6469=cj5*cj5;
IkReal x6470=r01*r01;
IkReal x6471=(r01*sj5);
IkReal x6472=(cj5*r00);
CheckValue<IkReal> x6473=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x6471*x6472))+(((-1.0)*x6469*(r00*r00)))+(((-1.0)*x6470))+((x6469*x6470)))),-1);
if(!x6473.valid){
continue;
}
CheckValue<IkReal> x6474 = IKatan2WithCheck(IkReal(r02),IkReal((x6471+(((-1.0)*x6472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6473.value)))+(x6474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6475=IKcos(j4);
IkReal x6476=IKsin(j4);
IkReal x6477=(cj5*r00);
IkReal x6478=(cj5*r10);
IkReal x6479=(cj5*r20);
IkReal x6480=((1.0)*x6475);
IkReal x6481=((1.0)*x6476);
IkReal x6482=(sj5*x6475);
IkReal x6483=(sj5*x6476);
evalcond[0]=(((r22*x6476))+((r21*x6482))+(((-1.0)*x6479*x6480)));
evalcond[1]=((((-1.0)*x6478*x6480))+((r11*x6482))+((r12*x6476)));
evalcond[2]=((1.0)+((r01*x6482))+((r02*x6476))+(((-1.0)*x6477*x6480)));
evalcond[3]=(((r01*x6483))+(((-1.0)*r02*x6480))+(((-1.0)*x6477*x6481)));
evalcond[4]=(((r21*x6483))+((cj2*sj1))+(((-1.0)*r22*x6480))+((cj1*sj2))+(((-1.0)*x6479*x6481)));
evalcond[5]=((((-1.0)*x6478*x6481))+((r11*x6483))+(((-1.0)*r12*x6480))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6484=((1.0)*cj5);
CheckValue<IkReal> x6485 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x6484)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6485.valid){
continue;
}
CheckValue<IkReal> x6486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6484)))),-1);
if(!x6486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6485.value)+(((1.5707963267949)*(x6486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6487=IKcos(j4);
IkReal x6488=IKsin(j4);
IkReal x6489=(cj5*r00);
IkReal x6490=(cj5*r10);
IkReal x6491=(cj5*r20);
IkReal x6492=((1.0)*x6487);
IkReal x6493=((1.0)*x6488);
IkReal x6494=(sj5*x6487);
IkReal x6495=(sj5*x6488);
evalcond[0]=((((-1.0)*x6491*x6492))+((r22*x6488))+((r21*x6494)));
evalcond[1]=(((r11*x6494))+((r12*x6488))+(((-1.0)*x6490*x6492)));
evalcond[2]=((1.0)+((r01*x6494))+(((-1.0)*x6489*x6492))+((r02*x6488)));
evalcond[3]=(((r01*x6495))+(((-1.0)*r02*x6492))+(((-1.0)*x6489*x6493)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x6492))+((cj1*sj2))+(((-1.0)*x6491*x6493))+((r21*x6495)));
evalcond[5]=(((r11*x6495))+(((-1.0)*r12*x6492))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6490*x6493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6496=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6496.valid){
continue;
}
CheckValue<IkReal> x6497 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6496.value)))+(x6497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6498=IKcos(j4);
IkReal x6499=IKsin(j4);
IkReal x6500=(cj5*r00);
IkReal x6501=(cj5*r10);
IkReal x6502=(cj5*r20);
IkReal x6503=((1.0)*x6498);
IkReal x6504=((1.0)*x6499);
IkReal x6505=(sj5*x6498);
IkReal x6506=(sj5*x6499);
evalcond[0]=(((r21*x6505))+(((-1.0)*x6502*x6503))+((r22*x6499)));
evalcond[1]=((((-1.0)*x6501*x6503))+((r12*x6499))+((r11*x6505)));
evalcond[2]=((1.0)+(((-1.0)*x6500*x6503))+((r02*x6499))+((r01*x6505)));
evalcond[3]=((((-1.0)*x6500*x6504))+(((-1.0)*r02*x6503))+((r01*x6506)));
evalcond[4]=(((cj2*sj1))+((r21*x6506))+((cj1*sj2))+(((-1.0)*r22*x6503))+(((-1.0)*x6502*x6504)));
evalcond[5]=((((-1.0)*r12*x6503))+(((-1.0)*x6501*x6504))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6507=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6507;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6508=((1.0)*cj5);
IkReal x6509=((((-1.0)*r21*x6508))+(((-1.0)*r20*sj5)));
j4eval[0]=x6509;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6508))+((r11*sj5))))));
j4eval[2]=IKsign(x6509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6510=cj5*cj5;
IkReal x6511=r01*r01;
IkReal x6512=(cj5*r00);
IkReal x6513=(r01*sj5);
IkReal x6514=(((x6510*(r00*r00)))+(((-2.0)*x6512*x6513))+x6511+(((-1.0)*x6510*x6511))+(r02*r02));
j4eval[0]=x6514;
j4eval[1]=IKsign(x6514);
j4eval[2]=((IKabs(r02))+(IKabs((x6513+(((-1.0)*x6512))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6515=cj5*cj5;
IkReal x6516=r01*r01;
IkReal x6517=(r01*sj5);
IkReal x6518=(cj5*r00);
CheckValue<IkReal> x6519=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6517*x6518))+(((-1.0)*x6515*x6516))+x6516+((x6515*(r00*r00)))+(r02*r02))),-1);
if(!x6519.valid){
continue;
}
CheckValue<IkReal> x6520 = IKatan2WithCheck(IkReal(r02),IkReal((x6517+(((-1.0)*x6518)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6519.value)))+(x6520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6521=IKcos(j4);
IkReal x6522=IKsin(j4);
IkReal x6523=(cj5*r00);
IkReal x6524=(cj5*r10);
IkReal x6525=(cj5*r20);
IkReal x6526=((1.0)*x6521);
IkReal x6527=((1.0)*x6522);
IkReal x6528=(sj5*x6521);
IkReal x6529=(sj5*x6522);
evalcond[0]=((((-1.0)*x6525*x6526))+((r21*x6528))+((r22*x6522)));
evalcond[1]=(((r12*x6522))+(((-1.0)*x6524*x6526))+((r11*x6528)));
evalcond[2]=((-1.0)+((r02*x6522))+((r01*x6528))+(((-1.0)*x6523*x6526)));
evalcond[3]=((((-1.0)*r02*x6526))+((r01*x6529))+(((-1.0)*x6523*x6527)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x6526))+(((-1.0)*x6525*x6527))+((r21*x6529)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x6526))+(((-1.0)*x6524*x6527))+((cj1*cj2))+((r11*x6529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6530=((1.0)*cj5);
CheckValue<IkReal> x6531 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x6530))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6531.valid){
continue;
}
CheckValue<IkReal> x6532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6530))+(((-1.0)*r20*sj5)))),-1);
if(!x6532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6531.value)+(((1.5707963267949)*(x6532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6533=IKcos(j4);
IkReal x6534=IKsin(j4);
IkReal x6535=(cj5*r00);
IkReal x6536=(cj5*r10);
IkReal x6537=(cj5*r20);
IkReal x6538=((1.0)*x6533);
IkReal x6539=((1.0)*x6534);
IkReal x6540=(sj5*x6533);
IkReal x6541=(sj5*x6534);
evalcond[0]=((((-1.0)*x6537*x6538))+((r22*x6534))+((r21*x6540)));
evalcond[1]=((((-1.0)*x6536*x6538))+((r11*x6540))+((r12*x6534)));
evalcond[2]=((-1.0)+((r02*x6534))+(((-1.0)*x6535*x6538))+((r01*x6540)));
evalcond[3]=((((-1.0)*x6535*x6539))+(((-1.0)*r02*x6538))+((r01*x6541)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6537*x6539))+((cj1*sj2))+(((-1.0)*r22*x6538))+((r21*x6541)));
evalcond[5]=((((-1.0)*r12*x6538))+(((-1.0)*x6536*x6539))+(((-1.0)*sj1*sj2))+((r11*x6541))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6542 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6542.valid){
continue;
}
CheckValue<IkReal> x6543=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6542.value)+(((1.5707963267949)*(x6543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6544=IKcos(j4);
IkReal x6545=IKsin(j4);
IkReal x6546=(cj5*r00);
IkReal x6547=(cj5*r10);
IkReal x6548=(cj5*r20);
IkReal x6549=((1.0)*x6544);
IkReal x6550=((1.0)*x6545);
IkReal x6551=(sj5*x6544);
IkReal x6552=(sj5*x6545);
evalcond[0]=((((-1.0)*x6548*x6549))+((r22*x6545))+((r21*x6551)));
evalcond[1]=(((r11*x6551))+(((-1.0)*x6547*x6549))+((r12*x6545)));
evalcond[2]=((-1.0)+((r02*x6545))+(((-1.0)*x6546*x6549))+((r01*x6551)));
evalcond[3]=((((-1.0)*x6546*x6550))+(((-1.0)*r02*x6549))+((r01*x6552)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x6549))+((cj1*sj2))+(((-1.0)*x6548*x6550))+((r21*x6552)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x6549))+((r11*x6552))+(((-1.0)*x6547*x6550))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6553=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6553);
rxp1_1=(px*r21);
rxp1_2=(r11*x6553);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6554=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6554);
rxp1_1=(px*r21);
rxp1_2=(r11*x6554);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6555=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6555);
rxp1_1=(px*r21);
rxp1_2=(r11*x6555);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6558=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6558.valid){
continue;
}
IkReal x6556=x6558.value;
IkReal x6557=(cj0*x6556);
sj4array[0]=((((-1.0)*sj1*sj2*x6557))+((cj1*cj2*x6557)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6559=IKcos(j4);
IkReal x6560=IKsin(j4);
IkReal x6561=(r21*sj5);
IkReal x6562=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x6559);
evalcond[1]=(cj0+((r02*x6560)));
evalcond[2]=((((-1.0)*x6559*x6562))+((x6559*x6561)));
evalcond[3]=(((r11*sj5*x6559))+(((-1.0)*cj5*r10*x6559)));
evalcond[4]=(((cj2*sj1))+((x6560*x6561))+((cj1*sj2))+(((-1.0)*x6560*x6562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6565=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6565.valid){
continue;
}
IkReal x6563=x6565.value;
IkReal x6564=((1.0)*x6563);
sj4array[0]=((((-1.0)*cj2*sj1*x6564))+(((-1.0)*cj1*sj2*x6564)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6566=IKcos(j4);
IkReal x6567=IKsin(j4);
IkReal x6568=((1.0)*cj5);
IkReal x6569=(sj5*x6566);
evalcond[0]=((-1.0)*r02*x6566);
evalcond[1]=(cj0+((r02*x6567)));
evalcond[2]=(((r21*x6569))+(((-1.0)*r20*x6566*x6568)));
evalcond[3]=((((-1.0)*r10*x6566*x6568))+((r11*x6569)));
evalcond[4]=((((-1.0)*r10*x6567*x6568))+(((-1.0)*cj0*cj1*cj2))+((r11*sj5*x6567))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6570=IKPowWithIntegerCheck(r02,-1);
if(!x6570.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x6570.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6571=IKcos(j4);
IkReal x6572=IKsin(j4);
IkReal x6573=(r21*sj5);
IkReal x6574=(r11*sj5);
IkReal x6575=((1.0)*cj5*x6572);
IkReal x6576=((1.0)*cj5*x6571);
evalcond[0]=((-1.0)*r02*x6571);
evalcond[1]=((((-1.0)*r20*x6576))+((x6571*x6573)));
evalcond[2]=((((-1.0)*r10*x6576))+((x6571*x6574)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6572*x6573))+(((-1.0)*r20*x6575)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((x6572*x6574))+(((-1.0)*r10*x6575))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6577=((1.0)*sj0);
IkReal x6578=((1.0)*sj5);
CheckValue<IkReal> x6579 = IKatan2WithCheck(IkReal((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x6578))+((r01*sj0*sj5))+(((-1.0)*cj5*r00*x6577)))),IkReal(((((-1.0)*r02*x6577))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6579.valid){
continue;
}
CheckValue<IkReal> x6580=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x6578)))),-1);
if(!x6580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6579.value)+(((1.5707963267949)*(x6580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6581=IKcos(j4);
IkReal x6582=IKsin(j4);
IkReal x6583=(cj5*r00);
IkReal x6584=(cj1*cj2);
IkReal x6585=(cj5*r10);
IkReal x6586=(sj1*sj2);
IkReal x6587=(cj5*r20);
IkReal x6588=((1.0)*x6581);
IkReal x6589=((1.0)*x6582);
IkReal x6590=(sj5*x6581);
IkReal x6591=(sj5*x6582);
evalcond[0]=(((r22*x6582))+((r21*x6590))+(((-1.0)*x6587*x6588)));
evalcond[1]=(((r02*x6582))+cj0+((r01*x6590))+(((-1.0)*x6583*x6588)));
evalcond[2]=(sj0+((r11*x6590))+(((-1.0)*x6585*x6588))+((r12*x6582)));
evalcond[3]=(((cj2*sj1))+((r21*x6591))+((cj1*sj2))+(((-1.0)*r22*x6588))+(((-1.0)*x6587*x6589)));
evalcond[4]=(((sj0*x6584))+(((-1.0)*r02*x6588))+((r01*x6591))+(((-1.0)*sj0*x6586))+(((-1.0)*x6583*x6589)));
evalcond[5]=(((r11*x6591))+((cj0*x6586))+(((-1.0)*r12*x6588))+(((-1.0)*x6585*x6589))+(((-1.0)*cj0*x6584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6592=((1.0)*cj5);
CheckValue<IkReal> x6593 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x6592))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6593.valid){
continue;
}
CheckValue<IkReal> x6594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6592)))),-1);
if(!x6594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6593.value)+(((1.5707963267949)*(x6594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6595=IKcos(j4);
IkReal x6596=IKsin(j4);
IkReal x6597=(cj5*r00);
IkReal x6598=(cj1*cj2);
IkReal x6599=(cj5*r10);
IkReal x6600=(sj1*sj2);
IkReal x6601=(cj5*r20);
IkReal x6602=((1.0)*x6595);
IkReal x6603=((1.0)*x6596);
IkReal x6604=(sj5*x6595);
IkReal x6605=(sj5*x6596);
evalcond[0]=(((r22*x6596))+(((-1.0)*x6601*x6602))+((r21*x6604)));
evalcond[1]=(((r02*x6596))+cj0+((r01*x6604))+(((-1.0)*x6597*x6602)));
evalcond[2]=(((r12*x6596))+(((-1.0)*x6599*x6602))+sj0+((r11*x6604)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6601*x6603))+(((-1.0)*r22*x6602))+((cj1*sj2))+((r21*x6605)));
evalcond[4]=((((-1.0)*sj0*x6600))+((sj0*x6598))+((r01*x6605))+(((-1.0)*r02*x6602))+(((-1.0)*x6597*x6603)));
evalcond[5]=((((-1.0)*cj0*x6598))+(((-1.0)*x6599*x6603))+((cj0*x6600))+(((-1.0)*r12*x6602))+((r11*x6605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6606 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6606.valid){
continue;
}
CheckValue<IkReal> x6607=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6606.value)+(((1.5707963267949)*(x6607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6608=IKcos(j4);
IkReal x6609=IKsin(j4);
IkReal x6610=(cj5*r00);
IkReal x6611=(cj1*cj2);
IkReal x6612=(cj5*r10);
IkReal x6613=(sj1*sj2);
IkReal x6614=(cj5*r20);
IkReal x6615=((1.0)*x6608);
IkReal x6616=((1.0)*x6609);
IkReal x6617=(sj5*x6608);
IkReal x6618=(sj5*x6609);
evalcond[0]=(((r21*x6617))+((r22*x6609))+(((-1.0)*x6614*x6615)));
evalcond[1]=(cj0+((r01*x6617))+(((-1.0)*x6610*x6615))+((r02*x6609)));
evalcond[2]=((((-1.0)*x6612*x6615))+sj0+((r11*x6617))+((r12*x6609)));
evalcond[3]=(((cj2*sj1))+((r21*x6618))+((cj1*sj2))+(((-1.0)*r22*x6615))+(((-1.0)*x6614*x6616)));
evalcond[4]=(((r01*x6618))+(((-1.0)*x6610*x6616))+(((-1.0)*r02*x6615))+((sj0*x6611))+(((-1.0)*sj0*x6613)));
evalcond[5]=((((-1.0)*cj0*x6611))+(((-1.0)*r12*x6615))+(((-1.0)*x6612*x6616))+((r11*x6618))+((cj0*x6613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6619=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x6619;
j0eval[1]=IKsign(x6619);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6620=cj5*cj5;
IkReal x6621=r21*r21;
IkReal x6622=(cj2*sj1);
IkReal x6623=(cj1*sj2);
IkReal x6624=((1.0)*r22);
IkReal x6625=(r21*sj5);
IkReal x6626=((1.0)*cj5*r20);
IkReal x6627=((r22*r22)+(((-1.0)*x6620*x6621))+x6621+((x6620*(r20*r20)))+(((-2.0)*cj5*r20*x6625)));
j4eval[0]=x6627;
j4eval[1]=IKsign(x6627);
j4eval[2]=((IKabs(((((-1.0)*x6622*x6626))+((x6622*x6625))+(((-1.0)*x6623*x6626))+((x6623*x6625)))))+(IKabs(((((-1.0)*x6622*x6624))+(((-1.0)*x6623*x6624))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px))))+IKsqr(((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px))), ((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6628=IKsin(j0);
IkReal x6629=IKcos(j0);
evalcond[0]=((((1.0e-7)*x6628))+(((0.0565)*x6629))+(((-1.0)*px)));
evalcond[1]=((((-1.0e-7)*x6629))+(((0.0565)*x6628))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6630=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6630;
j4eval[1]=IKsign(x6630);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6631=((1.0)*cj5);
IkReal x6632=((((-1.0)*r11*x6631))+(((-1.0)*r10*sj5)));
j4eval[0]=x6632;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6631))))));
j4eval[2]=IKsign(x6632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6633=cj5*cj5;
IkReal x6634=((1.0)*r20);
IkReal x6635=(r01*r21);
IkReal x6636=(r21*sj5);
IkReal x6637=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x6635))+(((-1.0)*r00*x6633*x6634))+((x6633*x6635))+((cj5*r00*x6636)));
j4eval[0]=x6637;
j4eval[1]=((IKabs((((cj0*x6636))+(((-1.0)*cj0*cj5*x6634)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6637);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6638=cj5*cj5;
IkReal x6639=((1.0)*r20);
IkReal x6640=(r01*r21);
IkReal x6641=(r21*sj5);
CheckValue<IkReal> x6642=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x6638*x6639))+(((-1.0)*x6640))+((x6638*x6640))+((cj5*r00*x6641)))),-1);
if(!x6642.valid){
continue;
}
CheckValue<IkReal> x6643 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6641))+(((-1.0)*cj0*cj5*x6639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6642.value)))+(x6643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6644=IKcos(j4);
IkReal x6645=IKsin(j4);
IkReal x6646=(cj5*r00);
IkReal x6647=(cj5*r10);
IkReal x6648=(cj5*r20);
IkReal x6649=((1.0)*x6644);
IkReal x6650=(sj5*x6644);
IkReal x6651=((1.0)*sj5*x6645);
evalcond[0]=(((r22*x6645))+((r21*x6650))+(((-1.0)*x6648*x6649)));
evalcond[1]=((((-1.0)*r21*x6651))+((r22*x6644))+((x6645*x6648)));
evalcond[2]=(cj0+(((-1.0)*x6646*x6649))+((r01*x6650))+((r02*x6645)));
evalcond[3]=(sj0+((r11*x6650))+(((-1.0)*x6647*x6649))+((r12*x6645)));
evalcond[4]=(sj0+(((-1.0)*r01*x6651))+((x6645*x6646))+((r02*x6644)));
evalcond[5]=((((-1.0)*r11*x6651))+((x6645*x6647))+((r12*x6644))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6652=((1.0)*cj5);
CheckValue<IkReal> x6653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6652)))),-1);
if(!x6653.valid){
continue;
}
CheckValue<IkReal> x6654 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6652)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6653.value)))+(x6654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6655=IKcos(j4);
IkReal x6656=IKsin(j4);
IkReal x6657=(cj5*r00);
IkReal x6658=(cj5*r10);
IkReal x6659=(cj5*r20);
IkReal x6660=((1.0)*x6655);
IkReal x6661=(sj5*x6655);
IkReal x6662=((1.0)*sj5*x6656);
evalcond[0]=((((-1.0)*x6659*x6660))+((r21*x6661))+((r22*x6656)));
evalcond[1]=((((-1.0)*r21*x6662))+((x6656*x6659))+((r22*x6655)));
evalcond[2]=(cj0+(((-1.0)*x6657*x6660))+((r02*x6656))+((r01*x6661)));
evalcond[3]=(sj0+(((-1.0)*x6658*x6660))+((r12*x6656))+((r11*x6661)));
evalcond[4]=(sj0+((x6656*x6657))+(((-1.0)*r01*x6662))+((r02*x6655)));
evalcond[5]=(((x6656*x6658))+((r12*x6655))+(((-1.0)*r11*x6662))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6663 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6663.valid){
continue;
}
CheckValue<IkReal> x6664=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6663.value)+(((1.5707963267949)*(x6664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6665=IKcos(j4);
IkReal x6666=IKsin(j4);
IkReal x6667=(cj5*r00);
IkReal x6668=(cj5*r10);
IkReal x6669=(cj5*r20);
IkReal x6670=((1.0)*x6665);
IkReal x6671=(sj5*x6665);
IkReal x6672=((1.0)*sj5*x6666);
evalcond[0]=((((-1.0)*x6669*x6670))+((r22*x6666))+((r21*x6671)));
evalcond[1]=((((-1.0)*r21*x6672))+((x6666*x6669))+((r22*x6665)));
evalcond[2]=(cj0+((r02*x6666))+((r01*x6671))+(((-1.0)*x6667*x6670)));
evalcond[3]=(sj0+((r11*x6671))+((r12*x6666))+(((-1.0)*x6668*x6670)));
evalcond[4]=(sj0+((r02*x6665))+((x6666*x6667))+(((-1.0)*r01*x6672)));
evalcond[5]=(((r12*x6665))+(((-1.0)*r11*x6672))+((x6666*x6668))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px))))+IKsqr(((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((17.6991150441923)*py))+(((3.13258673348537e-5)*px))), ((((-3.13258673348537e-5)*py))+(((17.6991150441923)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6673=IKsin(j0);
IkReal x6674=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((1.0e-7)*x6673))+(((0.0565)*x6674)));
evalcond[1]=((((-1.0)*py))+(((-1.0e-7)*x6674))+(((0.0565)*x6673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6675=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6675;
j4eval[1]=IKsign(x6675);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6676=((1.0)*cj5);
IkReal x6677=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6676)));
j4eval[0]=x6677;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6676)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6678=cj5*cj5;
IkReal x6679=((1.0)*r20);
IkReal x6680=(r01*r21);
IkReal x6681=(r21*sj5);
IkReal x6682=(((cj5*r01*r20*sj5))+((x6678*x6680))+(((-1.0)*r02*r22))+(((-1.0)*r00*x6678*x6679))+((cj5*r00*x6681))+(((-1.0)*x6680)));
j4eval[0]=x6682;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6679))+((cj0*x6681)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6683=cj5*cj5;
IkReal x6684=((1.0)*r20);
IkReal x6685=(r01*r21);
IkReal x6686=(r21*sj5);
CheckValue<IkReal> x6687=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x6683*x6685))+((cj5*r00*x6686))+(((-1.0)*r00*x6683*x6684))+(((-1.0)*x6685)))),-1);
if(!x6687.valid){
continue;
}
CheckValue<IkReal> x6688 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6684))+((cj0*x6686)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6687.value)))+(x6688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6689=IKcos(j4);
IkReal x6690=IKsin(j4);
IkReal x6691=(cj5*r00);
IkReal x6692=(cj5*r10);
IkReal x6693=(cj5*r20);
IkReal x6694=((1.0)*x6689);
IkReal x6695=(sj5*x6689);
IkReal x6696=((1.0)*sj5*x6690);
evalcond[0]=(((r22*x6690))+(((-1.0)*x6693*x6694))+((r21*x6695)));
evalcond[1]=((((-1.0)*r21*x6696))+((x6690*x6693))+((r22*x6689)));
evalcond[2]=(cj0+((r01*x6695))+(((-1.0)*x6691*x6694))+((r02*x6690)));
evalcond[3]=(((r11*x6695))+sj0+((r12*x6690))+(((-1.0)*x6692*x6694)));
evalcond[4]=(((r12*x6689))+cj0+((x6690*x6692))+(((-1.0)*r11*x6696)));
evalcond[5]=(((r02*x6689))+(((-1.0)*sj0))+(((-1.0)*r01*x6696))+((x6690*x6691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6697=((1.0)*cj5);
CheckValue<IkReal> x6698 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6697)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6698.valid){
continue;
}
CheckValue<IkReal> x6699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6697)))),-1);
if(!x6699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6698.value)+(((1.5707963267949)*(x6699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6700=IKcos(j4);
IkReal x6701=IKsin(j4);
IkReal x6702=(cj5*r00);
IkReal x6703=(cj5*r10);
IkReal x6704=(cj5*r20);
IkReal x6705=((1.0)*x6700);
IkReal x6706=(sj5*x6700);
IkReal x6707=((1.0)*sj5*x6701);
evalcond[0]=(((r21*x6706))+(((-1.0)*x6704*x6705))+((r22*x6701)));
evalcond[1]=((((-1.0)*r21*x6707))+((x6701*x6704))+((r22*x6700)));
evalcond[2]=(cj0+(((-1.0)*x6702*x6705))+((r01*x6706))+((r02*x6701)));
evalcond[3]=(sj0+(((-1.0)*x6703*x6705))+((r11*x6706))+((r12*x6701)));
evalcond[4]=(cj0+((r12*x6700))+((x6701*x6703))+(((-1.0)*r11*x6707)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x6707))+((x6701*x6702))+((r02*x6700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6708 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6708.valid){
continue;
}
CheckValue<IkReal> x6709=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6708.value)+(((1.5707963267949)*(x6709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6710=IKcos(j4);
IkReal x6711=IKsin(j4);
IkReal x6712=(cj5*r00);
IkReal x6713=(cj5*r10);
IkReal x6714=(cj5*r20);
IkReal x6715=((1.0)*x6710);
IkReal x6716=(sj5*x6710);
IkReal x6717=((1.0)*sj5*x6711);
evalcond[0]=(((r22*x6711))+(((-1.0)*x6714*x6715))+((r21*x6716)));
evalcond[1]=((((-1.0)*r21*x6717))+((x6711*x6714))+((r22*x6710)));
evalcond[2]=(cj0+((r02*x6711))+(((-1.0)*x6712*x6715))+((r01*x6716)));
evalcond[3]=(sj0+(((-1.0)*x6713*x6715))+((r11*x6716))+((r12*x6711)));
evalcond[4]=(cj0+((x6711*x6713))+(((-1.0)*r11*x6717))+((r12*x6710)));
evalcond[5]=((((-1.0)*sj0))+((x6711*x6712))+((r02*x6710))+(((-1.0)*r01*x6717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.00343155704133)*py))+(((-7.9700679669685)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.00343155704133)*px))+(((7.9700679669685)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.00343155704133)*py))+(((-7.9700679669685)*px))))+IKsqr(((((5.00343155704133)*px))+(((7.9700679669685)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.00343155704133)*py))+(((-7.9700679669685)*px))), ((((5.00343155704133)*px))+(((7.9700679669685)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6718=IKcos(j0);
IkReal x6719=IKsin(j0);
evalcond[0]=((((0.0565)*x6718))+(((-1.0)*px))+(((-0.09)*x6719)));
evalcond[1]=((((0.0565)*x6719))+(((-1.0)*py))+(((0.09)*x6718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6720=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6720;
j4eval[1]=IKsign(x6720);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6721=((1.0)*cj5);
IkReal x6722=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6721)));
j4eval[0]=x6722;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6721)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6723=cj5*cj5;
IkReal x6724=((1.0)*r20);
IkReal x6725=(r01*r21);
IkReal x6726=(r21*sj5);
IkReal x6727=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x6725))+((x6723*x6725))+(((-1.0)*r00*x6723*x6724))+((cj5*r00*x6726)));
j4eval[0]=x6727;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6724))+((cj0*x6726)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6728=cj5*cj5;
IkReal x6729=((1.0)*r20);
IkReal x6730=(r01*r21);
IkReal x6731=(r21*sj5);
CheckValue<IkReal> x6732 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6729))+((cj0*x6731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6732.valid){
continue;
}
CheckValue<IkReal> x6733=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x6730))+(((-1.0)*r02*r22))+((cj5*r00*x6731))+(((-1.0)*r00*x6728*x6729))+((x6728*x6730)))),-1);
if(!x6733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6732.value)+(((1.5707963267949)*(x6733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6734=IKcos(j4);
IkReal x6735=IKsin(j4);
IkReal x6736=(cj5*r00);
IkReal x6737=(cj5*r10);
IkReal x6738=(cj5*r20);
IkReal x6739=((1.0)*x6734);
IkReal x6740=(sj5*x6734);
IkReal x6741=((1.0)*sj5*x6735);
evalcond[0]=(((r22*x6735))+((r21*x6740))+(((-1.0)*x6738*x6739)));
evalcond[1]=(((r22*x6734))+(((-1.0)*r21*x6741))+((x6735*x6738)));
evalcond[2]=(cj0+(((-1.0)*x6736*x6739))+((r01*x6740))+((r02*x6735)));
evalcond[3]=(sj0+((r11*x6740))+((r12*x6735))+(((-1.0)*x6737*x6739)));
evalcond[4]=(cj0+(((-1.0)*r11*x6741))+((r12*x6734))+((x6735*x6737)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x6741))+((x6735*x6736))+((r02*x6734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6742=((1.0)*cj5);
CheckValue<IkReal> x6743=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6742))+(((-1.0)*r10*sj5)))),-1);
if(!x6743.valid){
continue;
}
CheckValue<IkReal> x6744 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6742)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6743.value)))+(x6744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6745=IKcos(j4);
IkReal x6746=IKsin(j4);
IkReal x6747=(cj5*r00);
IkReal x6748=(cj5*r10);
IkReal x6749=(cj5*r20);
IkReal x6750=((1.0)*x6745);
IkReal x6751=(sj5*x6745);
IkReal x6752=((1.0)*sj5*x6746);
evalcond[0]=((((-1.0)*x6749*x6750))+((r21*x6751))+((r22*x6746)));
evalcond[1]=(((x6746*x6749))+((r22*x6745))+(((-1.0)*r21*x6752)));
evalcond[2]=(((r02*x6746))+cj0+((r01*x6751))+(((-1.0)*x6747*x6750)));
evalcond[3]=(sj0+((r11*x6751))+(((-1.0)*x6748*x6750))+((r12*x6746)));
evalcond[4]=(((x6746*x6748))+cj0+((r12*x6745))+(((-1.0)*r11*x6752)));
evalcond[5]=(((r02*x6745))+(((-1.0)*sj0))+((x6746*x6747))+(((-1.0)*r01*x6752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6753 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6753.valid){
continue;
}
CheckValue<IkReal> x6754=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6753.value)+(((1.5707963267949)*(x6754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6755=IKcos(j4);
IkReal x6756=IKsin(j4);
IkReal x6757=(cj5*r00);
IkReal x6758=(cj5*r10);
IkReal x6759=(cj5*r20);
IkReal x6760=((1.0)*x6755);
IkReal x6761=(sj5*x6755);
IkReal x6762=((1.0)*sj5*x6756);
evalcond[0]=(((r22*x6756))+(((-1.0)*x6759*x6760))+((r21*x6761)));
evalcond[1]=(((r22*x6755))+((x6756*x6759))+(((-1.0)*r21*x6762)));
evalcond[2]=(((r01*x6761))+cj0+((r02*x6756))+(((-1.0)*x6757*x6760)));
evalcond[3]=(sj0+(((-1.0)*x6758*x6760))+((r12*x6756))+((r11*x6761)));
evalcond[4]=(((x6756*x6758))+cj0+((r12*x6755))+(((-1.0)*r11*x6762)));
evalcond[5]=((((-1.0)*sj0))+((x6756*x6757))+(((-1.0)*r01*x6762))+((r02*x6755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.00343155704133)*py))+(((-7.9700679669685)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.00343155704133)*px))+(((7.9700679669685)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.00343155704133)*py))+(((-7.9700679669685)*px))))+IKsqr(((((5.00343155704133)*px))+(((7.9700679669685)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.00343155704133)*py))+(((-7.9700679669685)*px))), ((((5.00343155704133)*px))+(((7.9700679669685)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6763=IKcos(j0);
IkReal x6764=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.09)*x6764))+(((0.0565)*x6763)));
evalcond[1]=((((0.09)*x6763))+(((-1.0)*py))+(((0.0565)*x6764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6765=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6765;
j4eval[1]=IKsign(x6765);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6766=((1.0)*cj5);
IkReal x6767=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6766)));
j4eval[0]=x6767;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6766))))));
j4eval[2]=IKsign(x6767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6768=cj5*cj5;
IkReal x6769=((1.0)*r20);
IkReal x6770=(r01*r21);
IkReal x6771=(r21*sj5);
IkReal x6772=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x6770))+((cj5*r00*x6771))+(((-1.0)*r00*x6768*x6769))+((x6768*x6770)));
j4eval[0]=x6772;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6769))+((cj0*x6771)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6773=cj5*cj5;
IkReal x6774=((1.0)*r20);
IkReal x6775=(r01*r21);
IkReal x6776=(r21*sj5);
CheckValue<IkReal> x6777=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x6773*x6774))+((x6773*x6775))+(((-1.0)*x6775))+((cj5*r00*x6776)))),-1);
if(!x6777.valid){
continue;
}
CheckValue<IkReal> x6778 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6776))+(((-1.0)*cj0*cj5*x6774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6777.value)))+(x6778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6779=IKcos(j4);
IkReal x6780=IKsin(j4);
IkReal x6781=(cj5*r00);
IkReal x6782=(cj5*r10);
IkReal x6783=(cj5*r20);
IkReal x6784=((1.0)*x6779);
IkReal x6785=(sj5*x6779);
IkReal x6786=((1.0)*sj5*x6780);
evalcond[0]=(((r22*x6780))+((r21*x6785))+(((-1.0)*x6783*x6784)));
evalcond[1]=((((-1.0)*r21*x6786))+((r22*x6779))+((x6780*x6783)));
evalcond[2]=(cj0+((r02*x6780))+(((-1.0)*x6781*x6784))+((r01*x6785)));
evalcond[3]=((((-1.0)*x6782*x6784))+sj0+((r12*x6780))+((r11*x6785)));
evalcond[4]=(sj0+((r02*x6779))+((x6780*x6781))+(((-1.0)*r01*x6786)));
evalcond[5]=(((r12*x6779))+(((-1.0)*r11*x6786))+((x6780*x6782))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6787=((1.0)*cj5);
CheckValue<IkReal> x6788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6787)))),-1);
if(!x6788.valid){
continue;
}
CheckValue<IkReal> x6789 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6787)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6788.value)))+(x6789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6790=IKcos(j4);
IkReal x6791=IKsin(j4);
IkReal x6792=(cj5*r00);
IkReal x6793=(cj5*r10);
IkReal x6794=(cj5*r20);
IkReal x6795=((1.0)*x6790);
IkReal x6796=(sj5*x6790);
IkReal x6797=((1.0)*sj5*x6791);
evalcond[0]=(((r21*x6796))+((r22*x6791))+(((-1.0)*x6794*x6795)));
evalcond[1]=(((r22*x6790))+(((-1.0)*r21*x6797))+((x6791*x6794)));
evalcond[2]=(((r02*x6791))+cj0+(((-1.0)*x6792*x6795))+((r01*x6796)));
evalcond[3]=(sj0+(((-1.0)*x6793*x6795))+((r12*x6791))+((r11*x6796)));
evalcond[4]=(((r02*x6790))+sj0+(((-1.0)*r01*x6797))+((x6791*x6792)));
evalcond[5]=((((-1.0)*r11*x6797))+((r12*x6790))+(((-1.0)*cj0))+((x6791*x6793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6798 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6798.valid){
continue;
}
CheckValue<IkReal> x6799=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6798.value)+(((1.5707963267949)*(x6799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6800=IKcos(j4);
IkReal x6801=IKsin(j4);
IkReal x6802=(cj5*r00);
IkReal x6803=(cj5*r10);
IkReal x6804=(cj5*r20);
IkReal x6805=((1.0)*x6800);
IkReal x6806=(sj5*x6800);
IkReal x6807=((1.0)*sj5*x6801);
evalcond[0]=(((r22*x6801))+((r21*x6806))+(((-1.0)*x6804*x6805)));
evalcond[1]=(((x6801*x6804))+((r22*x6800))+(((-1.0)*r21*x6807)));
evalcond[2]=(cj0+((r01*x6806))+(((-1.0)*x6802*x6805))+((r02*x6801)));
evalcond[3]=(sj0+(((-1.0)*x6803*x6805))+((r11*x6806))+((r12*x6801)));
evalcond[4]=(((x6801*x6802))+sj0+(((-1.0)*r01*x6807))+((r02*x6800)));
evalcond[5]=(((x6801*x6803))+(((-1.0)*r11*x6807))+((r12*x6800))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((17.6991150441923)*px))+(((3.13258673348537e-5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py))))+IKsqr(((((17.6991150441923)*px))+(((3.13258673348537e-5)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py))), ((((17.6991150441923)*px))+(((3.13258673348537e-5)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6808=IKcos(j0);
IkReal x6809=IKsin(j0);
evalcond[0]=((((0.0565)*x6808))+(((-1.0)*px))+(((-1.0e-7)*x6809)));
evalcond[1]=((((0.0565)*x6809))+(((1.0e-7)*x6808))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6810=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6810;
j4eval[1]=IKsign(x6810);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6811=((1.0)*cj5);
IkReal x6812=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6811)));
j4eval[0]=x6812;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6811)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6812);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6813=cj5*cj5;
IkReal x6814=((1.0)*r20);
IkReal x6815=(r01*r21);
IkReal x6816=(r21*sj5);
IkReal x6817=(((cj5*r01*r20*sj5))+(((-1.0)*x6815))+(((-1.0)*r02*r22))+(((-1.0)*r00*x6813*x6814))+((x6813*x6815))+((cj5*r00*x6816)));
j4eval[0]=x6817;
j4eval[1]=((IKabs((((cj0*x6816))+(((-1.0)*cj0*cj5*x6814)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6817);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6818=cj5*cj5;
IkReal x6819=((1.0)*r20);
IkReal x6820=(r01*r21);
IkReal x6821=(r21*sj5);
CheckValue<IkReal> x6822=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x6821))+(((-1.0)*x6820))+((x6818*x6820))+(((-1.0)*r00*x6818*x6819)))),-1);
if(!x6822.valid){
continue;
}
CheckValue<IkReal> x6823 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6819))+((cj0*x6821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6822.value)))+(x6823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6824=IKcos(j4);
IkReal x6825=IKsin(j4);
IkReal x6826=(cj5*r00);
IkReal x6827=(cj5*r10);
IkReal x6828=(cj5*r20);
IkReal x6829=((1.0)*x6824);
IkReal x6830=(sj5*x6824);
IkReal x6831=((1.0)*sj5*x6825);
evalcond[0]=(((r22*x6825))+((r21*x6830))+(((-1.0)*x6828*x6829)));
evalcond[1]=(((r22*x6824))+((x6825*x6828))+(((-1.0)*r21*x6831)));
evalcond[2]=(((r02*x6825))+cj0+((r01*x6830))+(((-1.0)*x6826*x6829)));
evalcond[3]=(sj0+((r11*x6830))+((r12*x6825))+(((-1.0)*x6827*x6829)));
evalcond[4]=(cj0+(((-1.0)*r11*x6831))+((x6825*x6827))+((r12*x6824)));
evalcond[5]=(((r02*x6824))+(((-1.0)*sj0))+((x6825*x6826))+(((-1.0)*r01*x6831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6832=((1.0)*cj5);
CheckValue<IkReal> x6833=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6832)))),-1);
if(!x6833.valid){
continue;
}
CheckValue<IkReal> x6834 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6832)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6833.value)))+(x6834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6835=IKcos(j4);
IkReal x6836=IKsin(j4);
IkReal x6837=(cj5*r00);
IkReal x6838=(cj5*r10);
IkReal x6839=(cj5*r20);
IkReal x6840=((1.0)*x6835);
IkReal x6841=(sj5*x6835);
IkReal x6842=((1.0)*sj5*x6836);
evalcond[0]=(((r22*x6836))+((r21*x6841))+(((-1.0)*x6839*x6840)));
evalcond[1]=(((r22*x6835))+(((-1.0)*r21*x6842))+((x6836*x6839)));
evalcond[2]=(((r02*x6836))+cj0+(((-1.0)*x6837*x6840))+((r01*x6841)));
evalcond[3]=(sj0+((r11*x6841))+((r12*x6836))+(((-1.0)*x6838*x6840)));
evalcond[4]=(cj0+(((-1.0)*r11*x6842))+((r12*x6835))+((x6836*x6838)));
evalcond[5]=(((r02*x6835))+(((-1.0)*r01*x6842))+(((-1.0)*sj0))+((x6836*x6837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6843 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6843.valid){
continue;
}
CheckValue<IkReal> x6844=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6843.value)+(((1.5707963267949)*(x6844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6845=IKcos(j4);
IkReal x6846=IKsin(j4);
IkReal x6847=(cj5*r00);
IkReal x6848=(cj5*r10);
IkReal x6849=(cj5*r20);
IkReal x6850=((1.0)*x6845);
IkReal x6851=(sj5*x6845);
IkReal x6852=((1.0)*sj5*x6846);
evalcond[0]=(((r21*x6851))+((r22*x6846))+(((-1.0)*x6849*x6850)));
evalcond[1]=(((r22*x6845))+((x6846*x6849))+(((-1.0)*r21*x6852)));
evalcond[2]=(cj0+((r01*x6851))+(((-1.0)*x6847*x6850))+((r02*x6846)));
evalcond[3]=(sj0+((r12*x6846))+((r11*x6851))+(((-1.0)*x6848*x6850)));
evalcond[4]=(cj0+((r12*x6845))+(((-1.0)*r11*x6852))+((x6846*x6848)));
evalcond[5]=((((-1.0)*sj0))+((x6846*x6847))+(((-1.0)*r01*x6852))+((r02*x6845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((17.6991150441923)*px))+(((3.13258673348537e-5)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py))))+IKsqr(((((17.6991150441923)*px))+(((3.13258673348537e-5)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.13258673348537e-5)*px))+(((17.6991150441923)*py))), ((((17.6991150441923)*px))+(((3.13258673348537e-5)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6853=IKcos(j0);
IkReal x6854=IKsin(j0);
evalcond[0]=((((-1.0e-7)*x6854))+(((0.0565)*x6853))+(((-1.0)*px)));
evalcond[1]=((((0.0565)*x6854))+(((1.0e-7)*x6853))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6855=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6855;
j4eval[1]=IKsign(x6855);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6856=((1.0)*cj5);
IkReal x6857=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6856)));
j4eval[0]=x6857;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6856))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6858=cj5*cj5;
IkReal x6859=((1.0)*r20);
IkReal x6860=(r01*r21);
IkReal x6861=(r21*sj5);
IkReal x6862=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x6858*x6859))+(((-1.0)*x6860))+((cj5*r00*x6861))+((x6858*x6860)));
j4eval[0]=x6862;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6859))+((cj0*x6861)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6863=cj5*cj5;
IkReal x6864=((1.0)*r20);
IkReal x6865=(r01*r21);
IkReal x6866=(r21*sj5);
CheckValue<IkReal> x6867=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x6863*x6864))+(((-1.0)*x6865))+((x6863*x6865))+((cj5*r00*x6866)))),-1);
if(!x6867.valid){
continue;
}
CheckValue<IkReal> x6868 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6866))+(((-1.0)*cj0*cj5*x6864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6867.value)))+(x6868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6869=IKcos(j4);
IkReal x6870=IKsin(j4);
IkReal x6871=(cj5*r00);
IkReal x6872=(cj5*r10);
IkReal x6873=(cj5*r20);
IkReal x6874=((1.0)*x6869);
IkReal x6875=(sj5*x6869);
IkReal x6876=((1.0)*sj5*x6870);
evalcond[0]=(((r22*x6870))+((r21*x6875))+(((-1.0)*x6873*x6874)));
evalcond[1]=(((r22*x6869))+((x6870*x6873))+(((-1.0)*r21*x6876)));
evalcond[2]=(((r02*x6870))+(((-1.0)*x6871*x6874))+cj0+((r01*x6875)));
evalcond[3]=(((r11*x6875))+sj0+((r12*x6870))+(((-1.0)*x6872*x6874)));
evalcond[4]=(((r02*x6869))+sj0+((x6870*x6871))+(((-1.0)*r01*x6876)));
evalcond[5]=(((x6870*x6872))+((r12*x6869))+(((-1.0)*r11*x6876))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6877=((1.0)*cj5);
CheckValue<IkReal> x6878 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x6877))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6878.valid){
continue;
}
CheckValue<IkReal> x6879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6877)))),-1);
if(!x6879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6878.value)+(((1.5707963267949)*(x6879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6880=IKcos(j4);
IkReal x6881=IKsin(j4);
IkReal x6882=(cj5*r00);
IkReal x6883=(cj5*r10);
IkReal x6884=(cj5*r20);
IkReal x6885=((1.0)*x6880);
IkReal x6886=(sj5*x6880);
IkReal x6887=((1.0)*sj5*x6881);
evalcond[0]=((((-1.0)*x6884*x6885))+((r22*x6881))+((r21*x6886)));
evalcond[1]=((((-1.0)*r21*x6887))+((r22*x6880))+((x6881*x6884)));
evalcond[2]=(cj0+((r02*x6881))+((r01*x6886))+(((-1.0)*x6882*x6885)));
evalcond[3]=(sj0+((r11*x6886))+(((-1.0)*x6883*x6885))+((r12*x6881)));
evalcond[4]=(sj0+((r02*x6880))+(((-1.0)*r01*x6887))+((x6881*x6882)));
evalcond[5]=((((-1.0)*r11*x6887))+((x6881*x6883))+(((-1.0)*cj0))+((r12*x6880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6888 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6888.valid){
continue;
}
CheckValue<IkReal> x6889=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6888.value)+(((1.5707963267949)*(x6889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6890=IKcos(j4);
IkReal x6891=IKsin(j4);
IkReal x6892=(cj5*r00);
IkReal x6893=(cj5*r10);
IkReal x6894=(cj5*r20);
IkReal x6895=((1.0)*x6890);
IkReal x6896=(sj5*x6890);
IkReal x6897=((1.0)*sj5*x6891);
evalcond[0]=((((-1.0)*x6894*x6895))+((r22*x6891))+((r21*x6896)));
evalcond[1]=(((x6891*x6894))+(((-1.0)*r21*x6897))+((r22*x6890)));
evalcond[2]=(cj0+((r02*x6891))+(((-1.0)*x6892*x6895))+((r01*x6896)));
evalcond[3]=(sj0+((r12*x6891))+(((-1.0)*x6893*x6895))+((r11*x6896)));
evalcond[4]=((((-1.0)*r01*x6897))+((x6891*x6892))+sj0+((r02*x6890)));
evalcond[5]=(((x6891*x6893))+((r12*x6890))+(((-1.0)*r11*x6897))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.00343155704133)*py))+(((7.9700679669685)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.00343155704133)*px))+(((-7.9700679669685)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.00343155704133)*py))+(((7.9700679669685)*px))))+IKsqr(((((5.00343155704133)*px))+(((-7.9700679669685)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.00343155704133)*py))+(((7.9700679669685)*px))), ((((5.00343155704133)*px))+(((-7.9700679669685)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6898=IKsin(j0);
IkReal x6899=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.0565)*x6899))+(((0.09)*x6898)));
evalcond[1]=((((-0.09)*x6899))+(((-1.0)*py))+(((0.0565)*x6898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6900=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6900;
j4eval[1]=IKsign(x6900);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6901=((1.0)*cj5);
IkReal x6902=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6901)));
j4eval[0]=x6902;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6901))))));
j4eval[2]=IKsign(x6902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6903=cj5*cj5;
IkReal x6904=((1.0)*r20);
IkReal x6905=(r01*r21);
IkReal x6906=(r21*sj5);
IkReal x6907=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x6903*x6904))+(((-1.0)*x6905))+((cj5*r00*x6906))+((x6903*x6905)));
j4eval[0]=x6907;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6904))+((cj0*x6906)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6908=cj5*cj5;
IkReal x6909=((1.0)*r20);
IkReal x6910=(r01*r21);
IkReal x6911=(r21*sj5);
CheckValue<IkReal> x6912=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x6908*x6909))+((x6908*x6910))+(((-1.0)*x6910))+((cj5*r00*x6911)))),-1);
if(!x6912.valid){
continue;
}
CheckValue<IkReal> x6913 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6909))+((cj0*x6911)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6912.value)))+(x6913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6914=IKcos(j4);
IkReal x6915=IKsin(j4);
IkReal x6916=(cj5*r00);
IkReal x6917=(cj5*r10);
IkReal x6918=(cj5*r20);
IkReal x6919=((1.0)*x6914);
IkReal x6920=(sj5*x6914);
IkReal x6921=((1.0)*sj5*x6915);
evalcond[0]=(((r22*x6915))+(((-1.0)*x6918*x6919))+((r21*x6920)));
evalcond[1]=(((r22*x6914))+((x6915*x6918))+(((-1.0)*r21*x6921)));
evalcond[2]=(cj0+((r01*x6920))+(((-1.0)*x6916*x6919))+((r02*x6915)));
evalcond[3]=(sj0+(((-1.0)*x6917*x6919))+((r12*x6915))+((r11*x6920)));
evalcond[4]=(sj0+(((-1.0)*r01*x6921))+((r02*x6914))+((x6915*x6916)));
evalcond[5]=(((r12*x6914))+(((-1.0)*r11*x6921))+((x6915*x6917))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6922=((1.0)*cj5);
CheckValue<IkReal> x6923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6922)))),-1);
if(!x6923.valid){
continue;
}
CheckValue<IkReal> x6924 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6922)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6923.value)))+(x6924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6925=IKcos(j4);
IkReal x6926=IKsin(j4);
IkReal x6927=(cj5*r00);
IkReal x6928=(cj5*r10);
IkReal x6929=(cj5*r20);
IkReal x6930=((1.0)*x6925);
IkReal x6931=(sj5*x6925);
IkReal x6932=((1.0)*sj5*x6926);
evalcond[0]=(((r22*x6926))+(((-1.0)*x6929*x6930))+((r21*x6931)));
evalcond[1]=(((x6926*x6929))+((r22*x6925))+(((-1.0)*r21*x6932)));
evalcond[2]=(cj0+((r01*x6931))+((r02*x6926))+(((-1.0)*x6927*x6930)));
evalcond[3]=(sj0+((r11*x6931))+((r12*x6926))+(((-1.0)*x6928*x6930)));
evalcond[4]=(sj0+((x6926*x6927))+(((-1.0)*r01*x6932))+((r02*x6925)));
evalcond[5]=(((x6926*x6928))+((r12*x6925))+(((-1.0)*r11*x6932))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6933 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6933.valid){
continue;
}
CheckValue<IkReal> x6934=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6933.value)+(((1.5707963267949)*(x6934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6935=IKcos(j4);
IkReal x6936=IKsin(j4);
IkReal x6937=(cj5*r00);
IkReal x6938=(cj5*r10);
IkReal x6939=(cj5*r20);
IkReal x6940=((1.0)*x6935);
IkReal x6941=(sj5*x6935);
IkReal x6942=((1.0)*sj5*x6936);
evalcond[0]=(((r22*x6936))+((r21*x6941))+(((-1.0)*x6939*x6940)));
evalcond[1]=((((-1.0)*r21*x6942))+((r22*x6935))+((x6936*x6939)));
evalcond[2]=(cj0+((r01*x6941))+((r02*x6936))+(((-1.0)*x6937*x6940)));
evalcond[3]=(sj0+(((-1.0)*x6938*x6940))+((r12*x6936))+((r11*x6941)));
evalcond[4]=(sj0+((r02*x6935))+(((-1.0)*r01*x6942))+((x6936*x6937)));
evalcond[5]=((((-1.0)*r11*x6942))+((r12*x6935))+(((-1.0)*cj0))+((x6936*x6938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((5.00343155704133)*py))+(((7.9700679669685)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((5.00343155704133)*px))+(((-7.9700679669685)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((5.00343155704133)*py))+(((7.9700679669685)*px))))+IKsqr(((((5.00343155704133)*px))+(((-7.9700679669685)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((5.00343155704133)*py))+(((7.9700679669685)*px))), ((((5.00343155704133)*px))+(((-7.9700679669685)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6943=IKsin(j0);
IkReal x6944=IKcos(j0);
evalcond[0]=((((0.0565)*x6944))+(((-1.0)*px))+(((0.09)*x6943)));
evalcond[1]=((((0.0565)*x6943))+(((-1.0)*py))+(((-0.09)*x6944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6945=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6945;
j4eval[1]=IKsign(x6945);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6946=((1.0)*cj5);
IkReal x6947=((((-1.0)*r11*x6946))+(((-1.0)*r10*sj5)));
j4eval[0]=x6947;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6946)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6947);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6948=cj5*cj5;
IkReal x6949=((1.0)*r20);
IkReal x6950=(r01*r21);
IkReal x6951=(r21*sj5);
IkReal x6952=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x6950))+((cj5*r00*x6951))+(((-1.0)*r00*x6948*x6949))+((x6948*x6950)));
j4eval[0]=x6952;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x6951))+(((-1.0)*cj0*cj5*x6949))))));
j4eval[2]=IKsign(x6952);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6953=cj5*cj5;
IkReal x6954=((1.0)*r20);
IkReal x6955=(r01*r21);
IkReal x6956=(r21*sj5);
CheckValue<IkReal> x6957 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6956))+(((-1.0)*cj0*cj5*x6954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6957.valid){
continue;
}
CheckValue<IkReal> x6958=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x6953*x6954))+(((-1.0)*r02*r22))+(((-1.0)*x6955))+((cj5*r00*x6956))+((x6953*x6955)))),-1);
if(!x6958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6957.value)+(((1.5707963267949)*(x6958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6959=IKcos(j4);
IkReal x6960=IKsin(j4);
IkReal x6961=(cj5*r00);
IkReal x6962=(cj5*r10);
IkReal x6963=(cj5*r20);
IkReal x6964=((1.0)*x6959);
IkReal x6965=(sj5*x6959);
IkReal x6966=((1.0)*sj5*x6960);
evalcond[0]=(((r21*x6965))+((r22*x6960))+(((-1.0)*x6963*x6964)));
evalcond[1]=(((r22*x6959))+(((-1.0)*r21*x6966))+((x6960*x6963)));
evalcond[2]=(cj0+((r01*x6965))+(((-1.0)*x6961*x6964))+((r02*x6960)));
evalcond[3]=(sj0+(((-1.0)*x6962*x6964))+((r11*x6965))+((r12*x6960)));
evalcond[4]=(cj0+(((-1.0)*r11*x6966))+((r12*x6959))+((x6960*x6962)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6959))+((x6960*x6961))+(((-1.0)*r01*x6966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6967=((1.0)*cj5);
CheckValue<IkReal> x6968 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x6967))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6968.valid){
continue;
}
CheckValue<IkReal> x6969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6967)))),-1);
if(!x6969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6968.value)+(((1.5707963267949)*(x6969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6970=IKcos(j4);
IkReal x6971=IKsin(j4);
IkReal x6972=(cj5*r00);
IkReal x6973=(cj5*r10);
IkReal x6974=(cj5*r20);
IkReal x6975=((1.0)*x6970);
IkReal x6976=(sj5*x6970);
IkReal x6977=((1.0)*sj5*x6971);
evalcond[0]=((((-1.0)*x6974*x6975))+((r21*x6976))+((r22*x6971)));
evalcond[1]=(((r22*x6970))+(((-1.0)*r21*x6977))+((x6971*x6974)));
evalcond[2]=(cj0+((r01*x6976))+((r02*x6971))+(((-1.0)*x6972*x6975)));
evalcond[3]=(((r12*x6971))+sj0+(((-1.0)*x6973*x6975))+((r11*x6976)));
evalcond[4]=(((r12*x6970))+cj0+(((-1.0)*r11*x6977))+((x6971*x6973)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6970))+((x6971*x6972))+(((-1.0)*r01*x6977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6978 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6978.valid){
continue;
}
CheckValue<IkReal> x6979=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6978.value)+(((1.5707963267949)*(x6979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6980=IKcos(j4);
IkReal x6981=IKsin(j4);
IkReal x6982=(cj5*r00);
IkReal x6983=(cj5*r10);
IkReal x6984=(cj5*r20);
IkReal x6985=((1.0)*x6980);
IkReal x6986=(sj5*x6980);
IkReal x6987=((1.0)*sj5*x6981);
evalcond[0]=(((r22*x6981))+(((-1.0)*x6984*x6985))+((r21*x6986)));
evalcond[1]=((((-1.0)*r21*x6987))+((r22*x6980))+((x6981*x6984)));
evalcond[2]=(cj0+((r02*x6981))+((r01*x6986))+(((-1.0)*x6982*x6985)));
evalcond[3]=(sj0+(((-1.0)*x6983*x6985))+((r12*x6981))+((r11*x6986)));
evalcond[4]=(cj0+((x6981*x6983))+(((-1.0)*r11*x6987))+((r12*x6980)));
evalcond[5]=((((-1.0)*sj0))+((x6981*x6982))+((r02*x6980))+(((-1.0)*r01*x6987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6988=(cj1*sj2);
IkReal x6989=(cj5*r01);
IkReal x6990=((180.0)*sj1);
IkReal x6991=(r00*sj5);
IkReal x6992=((2000.0)*px);
IkReal x6993=(cj2*sj1);
IkReal x6994=((0.0002)*cj1);
CheckValue<IkReal> x6995=IKPowWithIntegerCheck((x6993+x6988),-1);
if(!x6995.valid){
continue;
}
CheckValue<IkReal> x6996=IKPowWithIntegerCheck(((((113.0)*x6993))+(((113.0)*x6988))),-1);
if(!x6996.valid){
continue;
}
if( IKabs(((x6995.value)*((x6991+x6989)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6996.value)*((((x6992*x6993))+((x6990*x6991))+(((293.0)*x6988*x6989))+(((293.0)*x6991*x6993))+(((293.0)*x6989*x6993))+((x6989*x6990))+((x6988*x6992))+(((293.0)*x6988*x6991))+(((-1.0)*x6989*x6994))+(((-1.0)*x6991*x6994)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6995.value)*((x6991+x6989))))+IKsqr(((x6996.value)*((((x6992*x6993))+((x6990*x6991))+(((293.0)*x6988*x6989))+(((293.0)*x6991*x6993))+(((293.0)*x6989*x6993))+((x6989*x6990))+((x6988*x6992))+(((293.0)*x6988*x6991))+(((-1.0)*x6989*x6994))+(((-1.0)*x6991*x6994))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6995.value)*((x6991+x6989))), ((x6996.value)*((((x6992*x6993))+((x6990*x6991))+(((293.0)*x6988*x6989))+(((293.0)*x6991*x6993))+(((293.0)*x6989*x6993))+((x6989*x6990))+((x6988*x6992))+(((293.0)*x6988*x6991))+(((-1.0)*x6989*x6994))+(((-1.0)*x6991*x6994))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6997=IKsin(j0);
IkReal x6998=IKcos(j0);
IkReal x6999=((0.0565)*cj5);
IkReal x7000=(r10*sj5);
IkReal x7001=(cj1*sj2);
IkReal x7002=(cj2*sj1);
IkReal x7003=((1.0)*cj5);
IkReal x7004=(r00*sj5);
IkReal x7005=((1.0e-7)*cj1);
IkReal x7006=((1.0)*x6998);
IkReal x7007=((0.09)*x6997);
IkReal x7008=((0.09)*x6998);
evalcond[0]=((((-1.0)*x7004))+(((-1.0)*r01*x7003))+((x6997*x7001))+((x6997*x7002)));
evalcond[1]=((((-1.0)*x7000))+(((-1.0)*r11*x7003))+(((-1.0)*x7002*x7006))+(((-1.0)*x7001*x7006)));
evalcond[2]=((((-0.0565)*x7004))+(((-1.0)*x7002*x7007))+(((0.0565)*x6998))+(((-1.0)*px))+(((-1.0)*sj1*x7007))+(((-1.0)*x7001*x7007))+((x6997*x7005))+(((-1.0)*r01*x6999)));
evalcond[3]=((((-1.0)*r11*x6999))+((sj1*x7008))+(((-0.0565)*x7000))+(((-1.0)*x6998*x7005))+(((0.0565)*x6997))+((x7002*x7008))+((x7001*x7008))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7009=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7009;
j4eval[1]=IKsign(x7009);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7010=((1.0)*cj5);
IkReal x7011=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7010)));
j4eval[0]=x7011;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7010))))));
j4eval[2]=IKsign(x7011);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7012=((1.0)*sj0);
IkReal x7013=((1.0)*sj5);
IkReal x7014=((((-1.0)*r20*x7013))+(((-1.0)*cj5*r21)));
j4eval[0]=x7014;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x7013))+((r01*sj0*sj5))+(((-1.0)*cj5*r00*x7012)))))+(IKabs(((((-1.0)*r02*x7012))+((cj0*r12))))));
j4eval[2]=IKsign(x7014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7015=((-1.0)*r20);
IkReal x7017 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7017)==0){
continue;
}
IkReal x7016=pow(x7017,-0.5);
CheckValue<IkReal> x7018 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7015),IKFAST_ATAN2_MAGTHRESH);
if(!x7018.valid){
continue;
}
IkReal gconst166=((-1.0)*(x7018.value));
IkReal gconst167=(r21*x7016);
IkReal gconst168=(x7015*x7016);
CheckValue<IkReal> x7019 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7019.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7019.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7020=((-1.0)*r20);
IkReal x7021=x7016;
CheckValue<IkReal> x7023 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7020),IKFAST_ATAN2_MAGTHRESH);
if(!x7023.valid){
continue;
}
IkReal x7022=((-1.0)*(x7023.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst167;
cj5=gconst168;
j5=x7022;
IkReal gconst166=x7022;
IkReal gconst167=(r21*x7021);
IkReal gconst168=(x7020*x7021);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7024=((-1.0)*r20);
IkReal x7025=x7016;
CheckValue<IkReal> x7027 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7024),IKFAST_ATAN2_MAGTHRESH);
if(!x7027.valid){
continue;
}
IkReal x7026=((-1.0)*(x7027.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst167;
cj5=gconst168;
j5=x7026;
IkReal gconst166=x7026;
IkReal gconst167=(r21*x7025);
IkReal gconst168=(x7024*x7025);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7028=((-1.0)*r20);
IkReal x7029=x7016;
CheckValue<IkReal> x7031 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7028),IKFAST_ATAN2_MAGTHRESH);
if(!x7031.valid){
continue;
}
IkReal x7030=((-1.0)*(x7031.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst167;
cj5=gconst168;
j5=x7030;
IkReal gconst166=x7030;
IkReal gconst167=(r21*x7029);
IkReal gconst168=(x7028*x7029);
IkReal x7032=r22*r22;
CheckValue<IkReal> x7035=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7032))),-1);
if(!x7035.valid){
continue;
}
IkReal x7033=x7035.value;
IkReal x7034=(x7032+(((2.0)*x7033*(r20*r20)*(r21*r21)))+((x7033*(r21*r21*r21*r21)))+((x7033*(r20*r20*r20*r20))));
j4eval[0]=x7034;
j4eval[1]=IKsign(x7034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7036=(cj2*sj1);
IkReal x7037=(gconst168*r20);
IkReal x7038=(cj1*sj2);
IkReal x7039=((1.0)*r22);
IkReal x7040=(gconst167*r21);
CheckValue<IkReal> x7041 = IKatan2WithCheck(IkReal(((((-1.0)*x7037*x7038))+(((-1.0)*x7036*x7037))+((x7036*x7040))+((x7038*x7040)))),IkReal(((((-1.0)*x7036*x7039))+(((-1.0)*x7038*x7039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7041.valid){
continue;
}
CheckValue<IkReal> x7042=IKPowWithIntegerCheck(IKsign(((x7037*x7037)+(r22*r22)+(((-2.0)*x7037*x7040))+(x7040*x7040))),-1);
if(!x7042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7041.value)+(((1.5707963267949)*(x7042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7043=IKcos(j4);
IkReal x7044=IKsin(j4);
IkReal x7045=(cj1*cj2);
IkReal x7046=(sj1*sj2);
IkReal x7047=(gconst168*x7044);
IkReal x7048=(gconst167*x7043);
IkReal x7049=((1.0)*gconst168*x7043);
IkReal x7050=((1.0)*gconst167*x7044);
evalcond[0]=((((-1.0)*r20*x7049))+((r21*x7048))+((r22*x7044)));
evalcond[1]=(((r01*x7048))+cj0+(((-1.0)*r00*x7049))+((r02*x7044)));
evalcond[2]=(sj0+((r12*x7044))+((r11*x7048))+(((-1.0)*r10*x7049)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x7050))+((r20*x7047))+((r22*x7043)));
evalcond[4]=((((-1.0)*r01*x7050))+(((-1.0)*sj0*x7046))+((r00*x7047))+((sj0*x7045))+((r02*x7043)));
evalcond[5]=(((r12*x7043))+((r10*x7047))+(((-1.0)*cj0*x7045))+(((-1.0)*r11*x7050))+((cj0*x7046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7051=((1.0)*gconst168);
CheckValue<IkReal> x7052 = IKatan2WithCheck(IkReal((((cj0*gconst167*r21))+(((-1.0)*cj0*r20*x7051)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7052.valid){
continue;
}
CheckValue<IkReal> x7053=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst167*r10))+(((-1.0)*r11*x7051)))),-1);
if(!x7053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7052.value)+(((1.5707963267949)*(x7053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7054=IKcos(j4);
IkReal x7055=IKsin(j4);
IkReal x7056=(cj1*cj2);
IkReal x7057=(sj1*sj2);
IkReal x7058=(gconst168*x7055);
IkReal x7059=(gconst167*x7054);
IkReal x7060=((1.0)*gconst168*x7054);
IkReal x7061=((1.0)*gconst167*x7055);
evalcond[0]=((((-1.0)*r20*x7060))+((r22*x7055))+((r21*x7059)));
evalcond[1]=(cj0+(((-1.0)*r00*x7060))+((r02*x7055))+((r01*x7059)));
evalcond[2]=(sj0+((r11*x7059))+((r12*x7055))+(((-1.0)*r10*x7060)));
evalcond[3]=(((r20*x7058))+((cj2*sj1))+(((-1.0)*r21*x7061))+((cj1*sj2))+((r22*x7054)));
evalcond[4]=((((-1.0)*r01*x7061))+((r02*x7054))+((sj0*x7056))+(((-1.0)*sj0*x7057))+((r00*x7058)));
evalcond[5]=(((r10*x7058))+(((-1.0)*cj0*x7056))+(((-1.0)*r11*x7061))+((cj0*x7057))+((r12*x7054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7062=IKPowWithIntegerCheck(IKsign((((gconst167*r00))+((gconst168*r01)))),-1);
if(!x7062.valid){
continue;
}
CheckValue<IkReal> x7063 = IKatan2WithCheck(IkReal(((((-1.0)*gconst168*r20*sj0))+((gconst167*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7062.value)))+(x7063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7064=IKcos(j4);
IkReal x7065=IKsin(j4);
IkReal x7066=(cj1*cj2);
IkReal x7067=(sj1*sj2);
IkReal x7068=(gconst168*x7065);
IkReal x7069=(gconst167*x7064);
IkReal x7070=((1.0)*gconst168*x7064);
IkReal x7071=((1.0)*gconst167*x7065);
evalcond[0]=(((r22*x7065))+(((-1.0)*r20*x7070))+((r21*x7069)));
evalcond[1]=((((-1.0)*r00*x7070))+cj0+((r01*x7069))+((r02*x7065)));
evalcond[2]=(((r12*x7065))+sj0+(((-1.0)*r10*x7070))+((r11*x7069)));
evalcond[3]=((((-1.0)*r21*x7071))+((cj2*sj1))+((r22*x7064))+((cj1*sj2))+((r20*x7068)));
evalcond[4]=((((-1.0)*r01*x7071))+((r00*x7068))+((r02*x7064))+((sj0*x7066))+(((-1.0)*sj0*x7067)));
evalcond[5]=(((r12*x7064))+((cj0*x7067))+(((-1.0)*r11*x7071))+((r10*x7068))+(((-1.0)*cj0*x7066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7072=((-1.0)*r21);
IkReal x7074 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7074)==0){
continue;
}
IkReal x7073=pow(x7074,-0.5);
CheckValue<IkReal> x7075 = IKatan2WithCheck(IkReal(x7072),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7075.valid){
continue;
}
IkReal gconst169=((3.14159265358979)+(((-1.0)*(x7075.value))));
IkReal gconst170=(x7072*x7073);
IkReal gconst171=((1.0)*r20*x7073);
CheckValue<IkReal> x7076 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7076.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7076.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7077=((-1.0)*r21);
CheckValue<IkReal> x7080 = IKatan2WithCheck(IkReal(x7077),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7080.valid){
continue;
}
IkReal x7078=((1.0)*(x7080.value));
IkReal x7079=x7073;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7078)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7078)));
IkReal gconst170=(x7077*x7079);
IkReal gconst171=((1.0)*r20*x7079);
IkReal x7081=r22*r22;
IkReal x7082=((1.0)*x7081);
CheckValue<IkReal> x7086=IKPowWithIntegerCheck(((-1.0)+x7081),-1);
if(!x7086.valid){
continue;
}
IkReal x7083=x7086.value;
if((((1.0)+(((-1.0)*x7082)))) < -0.00001)
continue;
IkReal x7084=IKsqrt(((1.0)+(((-1.0)*x7082))));
IkReal x7085=(sj0*x7083*x7084);
j4eval[0]=((IKabs((x7085+(((-1.0)*x7082*x7085)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7087=((-1.0)*r21);
CheckValue<IkReal> x7090 = IKatan2WithCheck(IkReal(x7087),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7090.valid){
continue;
}
IkReal x7088=((1.0)*(x7090.value));
IkReal x7089=x7073;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7088)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7088)));
IkReal gconst170=(x7087*x7089);
IkReal gconst171=((1.0)*r20*x7089);
IkReal x7091=r22*r22;
IkReal x7092=((1.0)*x7091);
CheckValue<IkReal> x7096=IKPowWithIntegerCheck(((-1.0)+x7091),-1);
if(!x7096.valid){
continue;
}
IkReal x7093=x7096.value;
if((((1.0)+(((-1.0)*x7092)))) < -0.00001)
continue;
IkReal x7094=IKsqrt(((1.0)+(((-1.0)*x7092))));
IkReal x7095=(cj0*x7093*x7094);
j4eval[0]=((IKabs((x7095+(((-1.0)*x7092*x7095)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7097=((-1.0)*r21);
CheckValue<IkReal> x7100 = IKatan2WithCheck(IkReal(x7097),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7100.valid){
continue;
}
IkReal x7098=((1.0)*(x7100.value));
IkReal x7099=x7073;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7098)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7098)));
IkReal gconst170=(x7097*x7099);
IkReal gconst171=((1.0)*r20*x7099);
IkReal x7101=r22*r22;
IkReal x7102=(cj0*r12);
IkReal x7103=((1.0)*r02*sj0);
CheckValue<IkReal> x7107=IKPowWithIntegerCheck(((-1.0)+x7101),-1);
if(!x7107.valid){
continue;
}
IkReal x7104=x7107.value;
if((((1.0)+(((-1.0)*x7101)))) < -0.00001)
continue;
IkReal x7105=IKsqrt(((1.0)+(((-1.0)*x7101))));
IkReal x7106=(r22*x7104*x7105);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x7102*x7106))+(((-1.0)*x7103*x7106)))))+(IKabs((x7102+(((-1.0)*x7103))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7108=((1.0)*gconst170);
IkReal x7109=((1.0)*sj0);
CheckValue<IkReal> x7110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7108))+(((-1.0)*gconst171*r21)))),-1);
if(!x7110.valid){
continue;
}
CheckValue<IkReal> x7111 = IKatan2WithCheck(IkReal(((((-1.0)*gconst171*r00*x7109))+((cj0*gconst171*r10))+(((-1.0)*cj0*r11*x7108))+((gconst170*r01*sj0)))),IkReal(((((-1.0)*r02*x7109))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7110.value)))+(x7111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7112=IKcos(j4);
IkReal x7113=IKsin(j4);
IkReal x7114=(cj1*cj2);
IkReal x7115=(sj1*sj2);
IkReal x7116=(gconst171*x7113);
IkReal x7117=(gconst170*x7112);
IkReal x7118=((1.0)*gconst170*x7113);
IkReal x7119=((1.0)*gconst171*x7112);
evalcond[0]=(((r21*x7117))+((r22*x7113))+(((-1.0)*r20*x7119)));
evalcond[1]=(cj0+((r02*x7113))+((r01*x7117))+(((-1.0)*r00*x7119)));
evalcond[2]=(((r11*x7117))+((r12*x7113))+sj0+(((-1.0)*r10*x7119)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x7118))+((r22*x7112))+((r20*x7116)));
evalcond[4]=(((sj0*x7114))+((r02*x7112))+(((-1.0)*sj0*x7115))+(((-1.0)*r01*x7118))+((r00*x7116)));
evalcond[5]=(((cj0*x7115))+((r12*x7112))+(((-1.0)*r11*x7118))+((r10*x7116))+(((-1.0)*cj0*x7114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7120=((1.0)*gconst171);
CheckValue<IkReal> x7121 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x7120))+((cj0*gconst170*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7121.valid){
continue;
}
CheckValue<IkReal> x7122=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst170*r10))+(((-1.0)*r11*x7120)))),-1);
if(!x7122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7121.value)+(((1.5707963267949)*(x7122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7123=IKcos(j4);
IkReal x7124=IKsin(j4);
IkReal x7125=(cj1*cj2);
IkReal x7126=(sj1*sj2);
IkReal x7127=(gconst171*x7124);
IkReal x7128=(gconst170*x7123);
IkReal x7129=((1.0)*gconst170*x7124);
IkReal x7130=((1.0)*gconst171*x7123);
evalcond[0]=((((-1.0)*r20*x7130))+((r22*x7124))+((r21*x7128)));
evalcond[1]=(((r01*x7128))+cj0+(((-1.0)*r00*x7130))+((r02*x7124)));
evalcond[2]=((((-1.0)*r10*x7130))+sj0+((r12*x7124))+((r11*x7128)));
evalcond[3]=(((cj2*sj1))+((r20*x7127))+((cj1*sj2))+(((-1.0)*r21*x7129))+((r22*x7123)));
evalcond[4]=(((r00*x7127))+(((-1.0)*sj0*x7126))+(((-1.0)*r01*x7129))+((r02*x7123))+((sj0*x7125)));
evalcond[5]=((((-1.0)*cj0*x7125))+((cj0*x7126))+((r10*x7127))+(((-1.0)*r11*x7129))+((r12*x7123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7131 = IKatan2WithCheck(IkReal((((gconst170*r21*sj0))+(((-1.0)*gconst171*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7131.valid){
continue;
}
CheckValue<IkReal> x7132=IKPowWithIntegerCheck(IKsign((((gconst170*r00))+((gconst171*r01)))),-1);
if(!x7132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7131.value)+(((1.5707963267949)*(x7132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7133=IKcos(j4);
IkReal x7134=IKsin(j4);
IkReal x7135=(cj1*cj2);
IkReal x7136=(sj1*sj2);
IkReal x7137=(gconst171*x7134);
IkReal x7138=(gconst170*x7133);
IkReal x7139=((1.0)*gconst170*x7134);
IkReal x7140=((1.0)*gconst171*x7133);
evalcond[0]=(((r22*x7134))+((r21*x7138))+(((-1.0)*r20*x7140)));
evalcond[1]=(cj0+((r01*x7138))+(((-1.0)*r00*x7140))+((r02*x7134)));
evalcond[2]=(((r11*x7138))+sj0+((r12*x7134))+(((-1.0)*r10*x7140)));
evalcond[3]=(((cj2*sj1))+((r22*x7133))+((cj1*sj2))+((r20*x7137))+(((-1.0)*r21*x7139)));
evalcond[4]=((((-1.0)*r01*x7139))+((sj0*x7135))+(((-1.0)*sj0*x7136))+((r00*x7137))+((r02*x7133)));
evalcond[5]=(((cj0*x7136))+(((-1.0)*r11*x7139))+(((-1.0)*cj0*x7135))+((r10*x7137))+((r12*x7133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7141=((-1.0)*r10);
IkReal x7143 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7143)==0){
continue;
}
IkReal x7142=pow(x7143,-0.5);
CheckValue<IkReal> x7144 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7141),IKFAST_ATAN2_MAGTHRESH);
if(!x7144.valid){
continue;
}
IkReal gconst172=((-1.0)*(x7144.value));
IkReal gconst173=(r11*x7142);
IkReal gconst174=(x7141*x7142);
CheckValue<IkReal> x7145 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7145.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7145.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7146=((-1.0)*r10);
IkReal x7147=x7142;
CheckValue<IkReal> x7149 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7146),IKFAST_ATAN2_MAGTHRESH);
if(!x7149.valid){
continue;
}
IkReal x7148=((-1.0)*(x7149.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst173;
cj5=gconst174;
j5=x7148;
IkReal gconst172=x7148;
IkReal gconst173=(r11*x7147);
IkReal gconst174=(x7146*x7147);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7150=((-1.0)*r10);
IkReal x7151=x7142;
CheckValue<IkReal> x7153 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7150),IKFAST_ATAN2_MAGTHRESH);
if(!x7153.valid){
continue;
}
IkReal x7152=((-1.0)*(x7153.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst173;
cj5=gconst174;
j5=x7152;
IkReal gconst172=x7152;
IkReal gconst173=(r11*x7151);
IkReal gconst174=(x7150*x7151);
IkReal x7154=r12*r12;
IkReal x7155=(r02*sj0);
IkReal x7156=((1.0)*x7154);
CheckValue<IkReal> x7160=IKPowWithIntegerCheck(((-1.0)+x7154),-1);
if(!x7160.valid){
continue;
}
IkReal x7157=x7160.value;
if((((1.0)+(((-1.0)*x7156)))) < -0.00001)
continue;
IkReal x7158=IKsqrt(((1.0)+(((-1.0)*x7156))));
IkReal x7159=(cj0*x7157*x7158);
j4eval[0]=((IKabs(((((-1.0)*x7155))+((cj0*r12)))))+(IKabs((x7159+(((-1.0)*x7156*x7159))+((r12*x7155*x7157*x7158))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7161=((-1.0)*r10);
IkReal x7162=x7142;
CheckValue<IkReal> x7164 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7161),IKFAST_ATAN2_MAGTHRESH);
if(!x7164.valid){
continue;
}
IkReal x7163=((-1.0)*(x7164.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst173;
cj5=gconst174;
j5=x7163;
IkReal gconst172=x7163;
IkReal gconst173=(r11*x7162);
IkReal gconst174=(x7161*x7162);
IkReal x7165=((1.0)*r22);
IkReal x7166=(cj1*sj2);
IkReal x7167=(cj2*sj1);
IkReal x7168=x7142;
IkReal x7169=(r12*r22*x7168);
j4eval[0]=((IKabs((((x7167*x7169))+((x7166*x7169)))))+(IKabs(((((-1.0)*x7165*x7166))+(((-1.0)*x7165*x7167))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7170=(gconst174*r20);
IkReal x7171=(cj2*sj1);
IkReal x7172=(gconst173*r21);
IkReal x7173=((1.0)*cj1*sj2);
CheckValue<IkReal> x7174 = IKatan2WithCheck(IkReal(((((-1.0)*x7170*x7173))+((cj1*sj2*x7172))+(((-1.0)*x7170*x7171))+((x7171*x7172)))),IkReal(((((-1.0)*r22*x7173))+(((-1.0)*r22*x7171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7174.valid){
continue;
}
CheckValue<IkReal> x7175=IKPowWithIntegerCheck(IKsign(((x7170*x7170)+(((-2.0)*x7170*x7172))+(r22*r22)+(x7172*x7172))),-1);
if(!x7175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7174.value)+(((1.5707963267949)*(x7175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7176=IKcos(j4);
IkReal x7177=IKsin(j4);
IkReal x7178=(cj1*cj2);
IkReal x7179=(gconst174*r10);
IkReal x7180=(gconst173*r11);
IkReal x7181=(sj1*sj2);
IkReal x7182=(gconst173*r21);
IkReal x7183=(gconst173*r01);
IkReal x7184=(gconst174*r20);
IkReal x7185=(gconst174*r00);
IkReal x7186=((1.0)*x7176);
IkReal x7187=((1.0)*x7177);
evalcond[0]=(((x7176*x7182))+(((-1.0)*x7184*x7186))+((r22*x7177)));
evalcond[1]=(((x7176*x7183))+cj0+(((-1.0)*x7185*x7186))+((r02*x7177)));
evalcond[2]=(sj0+((x7176*x7180))+(((-1.0)*x7179*x7186))+((r12*x7177)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7182*x7187))+((r22*x7176))+((x7177*x7184)));
evalcond[4]=(((sj0*x7178))+((r02*x7176))+(((-1.0)*sj0*x7181))+(((-1.0)*x7183*x7187))+((x7177*x7185)));
evalcond[5]=(((x7177*x7179))+((cj0*x7181))+(((-1.0)*x7180*x7187))+(((-1.0)*cj0*x7178))+((r12*x7176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7188=((1.0)*gconst173);
IkReal x7189=((1.0)*sj0);
CheckValue<IkReal> x7190 = IKatan2WithCheck(IkReal(((((-1.0)*gconst174*r00*x7189))+((cj0*gconst174*r10))+(((-1.0)*cj0*r11*x7188))+((gconst173*r01*sj0)))),IkReal(((((-1.0)*r02*x7189))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7190.valid){
continue;
}
CheckValue<IkReal> x7191=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst174*r21))+(((-1.0)*r20*x7188)))),-1);
if(!x7191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7190.value)+(((1.5707963267949)*(x7191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7192=IKcos(j4);
IkReal x7193=IKsin(j4);
IkReal x7194=(cj1*cj2);
IkReal x7195=(gconst174*r10);
IkReal x7196=(gconst173*r11);
IkReal x7197=(sj1*sj2);
IkReal x7198=(gconst173*r21);
IkReal x7199=(gconst173*r01);
IkReal x7200=(gconst174*r20);
IkReal x7201=(gconst174*r00);
IkReal x7202=((1.0)*x7192);
IkReal x7203=((1.0)*x7193);
evalcond[0]=(((r22*x7193))+((x7192*x7198))+(((-1.0)*x7200*x7202)));
evalcond[1]=(cj0+((r02*x7193))+((x7192*x7199))+(((-1.0)*x7201*x7202)));
evalcond[2]=(sj0+((r12*x7193))+(((-1.0)*x7195*x7202))+((x7192*x7196)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7198*x7203))+((x7193*x7200))+((r22*x7192)));
evalcond[4]=((((-1.0)*x7199*x7203))+((r02*x7192))+((x7193*x7201))+((sj0*x7194))+(((-1.0)*sj0*x7197)));
evalcond[5]=((((-1.0)*cj0*x7194))+((r12*x7192))+(((-1.0)*x7196*x7203))+((x7193*x7195))+((cj0*x7197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7204=IKPowWithIntegerCheck(IKsign((((gconst174*r01))+((gconst173*r00)))),-1);
if(!x7204.valid){
continue;
}
CheckValue<IkReal> x7205 = IKatan2WithCheck(IkReal((((gconst173*r21*sj0))+(((-1.0)*gconst174*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7204.value)))+(x7205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7206=IKcos(j4);
IkReal x7207=IKsin(j4);
IkReal x7208=(cj1*cj2);
IkReal x7209=(gconst174*r10);
IkReal x7210=(gconst173*r11);
IkReal x7211=(sj1*sj2);
IkReal x7212=(gconst173*r21);
IkReal x7213=(gconst173*r01);
IkReal x7214=(gconst174*r20);
IkReal x7215=(gconst174*r00);
IkReal x7216=((1.0)*x7206);
IkReal x7217=((1.0)*x7207);
evalcond[0]=(((x7206*x7212))+(((-1.0)*x7214*x7216))+((r22*x7207)));
evalcond[1]=((((-1.0)*x7215*x7216))+cj0+((x7206*x7213))+((r02*x7207)));
evalcond[2]=(sj0+((x7206*x7210))+(((-1.0)*x7209*x7216))+((r12*x7207)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7212*x7217))+((cj1*sj2))+((x7207*x7214))+((r22*x7206)));
evalcond[4]=((((-1.0)*x7213*x7217))+((x7207*x7215))+(((-1.0)*sj0*x7211))+((r02*x7206))+((sj0*x7208)));
evalcond[5]=(((cj0*x7211))+(((-1.0)*cj0*x7208))+((x7207*x7209))+(((-1.0)*x7210*x7217))+((r12*x7206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7218=((-1.0)*r11);
IkReal x7220 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7220)==0){
continue;
}
IkReal x7219=pow(x7220,-0.5);
CheckValue<IkReal> x7221 = IKatan2WithCheck(IkReal(x7218),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7221.valid){
continue;
}
IkReal gconst175=((3.14159265358979)+(((-1.0)*(x7221.value))));
IkReal gconst176=(x7218*x7219);
IkReal gconst177=((1.0)*r10*x7219);
CheckValue<IkReal> x7222 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7222.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7222.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7223=((-1.0)*r11);
CheckValue<IkReal> x7226 = IKatan2WithCheck(IkReal(x7223),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7226.valid){
continue;
}
IkReal x7224=((1.0)*(x7226.value));
IkReal x7225=x7219;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst176;
cj5=gconst177;
j5=((3.14159265)+(((-1.0)*x7224)));
IkReal gconst175=((3.14159265358979)+(((-1.0)*x7224)));
IkReal gconst176=(x7223*x7225);
IkReal gconst177=((1.0)*r10*x7225);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7227=((-1.0)*r11);
CheckValue<IkReal> x7230 = IKatan2WithCheck(IkReal(x7227),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7230.valid){
continue;
}
IkReal x7228=((1.0)*(x7230.value));
IkReal x7229=x7219;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst176;
cj5=gconst177;
j5=((3.14159265)+(((-1.0)*x7228)));
IkReal gconst175=((3.14159265358979)+(((-1.0)*x7228)));
IkReal gconst176=(x7227*x7229);
IkReal gconst177=((1.0)*r10*x7229);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7231=((1.0)*sj0);
IkReal x7232=((1.0)*gconst176);
CheckValue<IkReal> x7233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7232))+(((-1.0)*gconst177*r21)))),-1);
if(!x7233.valid){
continue;
}
CheckValue<IkReal> x7234 = IKatan2WithCheck(IkReal(((((-1.0)*gconst177*r00*x7231))+(((-1.0)*cj0*r11*x7232))+((gconst176*r01*sj0))+((cj0*gconst177*r10)))),IkReal(((((-1.0)*r02*x7231))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7233.value)))+(x7234.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7235=IKcos(j4);
IkReal x7236=IKsin(j4);
IkReal x7237=(cj1*cj2);
IkReal x7238=(sj1*sj2);
IkReal x7239=(gconst176*x7235);
IkReal x7240=(gconst177*x7236);
IkReal x7241=((1.0)*gconst177*x7235);
IkReal x7242=((1.0)*gconst176*x7236);
evalcond[0]=((((-1.0)*r20*x7241))+((r21*x7239))+((r22*x7236)));
evalcond[1]=(((r01*x7239))+cj0+(((-1.0)*r00*x7241))+((r02*x7236)));
evalcond[2]=(sj0+(((-1.0)*r10*x7241))+((r12*x7236))+((r11*x7239)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x7242))+((cj1*sj2))+((r20*x7240))+((r22*x7235)));
evalcond[4]=((((-1.0)*sj0*x7238))+((r00*x7240))+(((-1.0)*r01*x7242))+((r02*x7235))+((sj0*x7237)));
evalcond[5]=((((-1.0)*r11*x7242))+(((-1.0)*cj0*x7237))+((r10*x7240))+((cj0*x7238))+((r12*x7235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7243=((1.0)*gconst177);
CheckValue<IkReal> x7244 = IKatan2WithCheck(IkReal((((cj0*gconst176*r21))+(((-1.0)*cj0*r20*x7243)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7244.valid){
continue;
}
CheckValue<IkReal> x7245=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7243))+(((-1.0)*gconst176*r10)))),-1);
if(!x7245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7244.value)+(((1.5707963267949)*(x7245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7246=IKcos(j4);
IkReal x7247=IKsin(j4);
IkReal x7248=(cj1*cj2);
IkReal x7249=(sj1*sj2);
IkReal x7250=(gconst176*x7246);
IkReal x7251=(gconst177*x7247);
IkReal x7252=((1.0)*gconst177*x7246);
IkReal x7253=((1.0)*gconst176*x7247);
evalcond[0]=(((r21*x7250))+((r22*x7247))+(((-1.0)*r20*x7252)));
evalcond[1]=(((r02*x7247))+cj0+(((-1.0)*r00*x7252))+((r01*x7250)));
evalcond[2]=(sj0+(((-1.0)*r10*x7252))+((r11*x7250))+((r12*x7247)));
evalcond[3]=((((-1.0)*r21*x7253))+((cj2*sj1))+((cj1*sj2))+((r20*x7251))+((r22*x7246)));
evalcond[4]=(((r02*x7246))+((r00*x7251))+(((-1.0)*sj0*x7249))+(((-1.0)*r01*x7253))+((sj0*x7248)));
evalcond[5]=(((cj0*x7249))+((r10*x7251))+(((-1.0)*r11*x7253))+(((-1.0)*cj0*x7248))+((r12*x7246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7254=IKPowWithIntegerCheck(IKsign((((gconst177*r01))+((gconst176*r00)))),-1);
if(!x7254.valid){
continue;
}
CheckValue<IkReal> x7255 = IKatan2WithCheck(IkReal((((gconst176*r21*sj0))+(((-1.0)*gconst177*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7254.value)))+(x7255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7256=IKcos(j4);
IkReal x7257=IKsin(j4);
IkReal x7258=(cj1*cj2);
IkReal x7259=(sj1*sj2);
IkReal x7260=(gconst176*x7256);
IkReal x7261=(gconst177*x7257);
IkReal x7262=((1.0)*gconst177*x7256);
IkReal x7263=((1.0)*gconst176*x7257);
evalcond[0]=(((r22*x7257))+(((-1.0)*r20*x7262))+((r21*x7260)));
evalcond[1]=((((-1.0)*r00*x7262))+((r02*x7257))+cj0+((r01*x7260)));
evalcond[2]=(sj0+((r11*x7260))+((r12*x7257))+(((-1.0)*r10*x7262)));
evalcond[3]=(((cj2*sj1))+((r22*x7256))+((cj1*sj2))+(((-1.0)*r21*x7263))+((r20*x7261)));
evalcond[4]=(((r02*x7256))+(((-1.0)*r01*x7263))+(((-1.0)*sj0*x7259))+((sj0*x7258))+((r00*x7261)));
evalcond[5]=((((-1.0)*cj0*x7258))+((r12*x7256))+((r10*x7261))+(((-1.0)*r11*x7263))+((cj0*x7259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7264=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7264;
j4eval[1]=IKsign(x7264);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7265=((1.0)*cj5);
IkReal x7266=((((-1.0)*r21*x7265))+(((-1.0)*r20*sj5)));
j4eval[0]=x7266;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x7265))+((r01*sj5))))));
j4eval[2]=IKsign(x7266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7267=cj5*cj5;
IkReal x7268=r11*r11;
IkReal x7269=(cj5*r10);
IkReal x7270=(r11*sj5);
IkReal x7271=((((2.0)*x7269*x7270))+(((-1.0)*x7267*(r10*r10)))+(((-1.0)*x7268))+((x7267*x7268))+(((-1.0)*(r12*r12))));
j4eval[0]=x7271;
j4eval[1]=((IKabs((x7270+(((-1.0)*x7269)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7272=cj5*cj5;
IkReal x7273=r11*r11;
IkReal x7274=(cj5*r10);
IkReal x7275=(r11*sj5);
CheckValue<IkReal> x7276 = IKatan2WithCheck(IkReal(r12),IkReal((x7275+(((-1.0)*x7274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7276.valid){
continue;
}
CheckValue<IkReal> x7277=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7273))+(((-1.0)*x7272*(r10*r10)))+(((-1.0)*(r12*r12)))+((x7272*x7273))+(((2.0)*x7274*x7275)))),-1);
if(!x7277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7276.value)+(((1.5707963267949)*(x7277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7278=IKcos(j4);
IkReal x7279=IKsin(j4);
IkReal x7280=(cj5*r00);
IkReal x7281=((1.0)*x7278);
IkReal x7282=(sj5*x7278);
IkReal x7283=(cj5*x7279);
IkReal x7284=((1.0)*sj5*x7279);
evalcond[0]=((((-1.0)*cj5*r20*x7281))+((r21*x7282))+((r22*x7279)));
evalcond[1]=((((-1.0)*x7280*x7281))+((r01*x7282))+((r02*x7279)));
evalcond[2]=(((r12*x7278))+(((-1.0)*r11*x7284))+((r10*x7283)));
evalcond[3]=((1.0)+((r11*x7282))+(((-1.0)*cj5*r10*x7281))+((r12*x7279)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x7284))+((r20*x7283))+((r22*x7278)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r01*x7284))+((x7279*x7280))+((cj1*cj2))+((r02*x7278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7285=((1.0)*cj5);
CheckValue<IkReal> x7286 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x7285)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7286.valid){
continue;
}
CheckValue<IkReal> x7287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7285))+(((-1.0)*r20*sj5)))),-1);
if(!x7287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7286.value)+(((1.5707963267949)*(x7287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7288=IKcos(j4);
IkReal x7289=IKsin(j4);
IkReal x7290=(cj5*r00);
IkReal x7291=((1.0)*x7288);
IkReal x7292=(sj5*x7288);
IkReal x7293=(cj5*x7289);
IkReal x7294=((1.0)*sj5*x7289);
evalcond[0]=((((-1.0)*cj5*r20*x7291))+((r22*x7289))+((r21*x7292)));
evalcond[1]=((((-1.0)*x7290*x7291))+((r02*x7289))+((r01*x7292)));
evalcond[2]=(((r12*x7288))+((r10*x7293))+(((-1.0)*r11*x7294)));
evalcond[3]=((1.0)+((r12*x7289))+((r11*x7292))+(((-1.0)*cj5*r10*x7291)));
evalcond[4]=(((cj2*sj1))+((r22*x7288))+(((-1.0)*r21*x7294))+((cj1*sj2))+((r20*x7293)));
evalcond[5]=((((-1.0)*r01*x7294))+((r02*x7288))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x7289*x7290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7295=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7295.valid){
continue;
}
CheckValue<IkReal> x7296 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7295.value)))+(x7296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7297=IKcos(j4);
IkReal x7298=IKsin(j4);
IkReal x7299=(cj5*r00);
IkReal x7300=((1.0)*x7297);
IkReal x7301=(sj5*x7297);
IkReal x7302=(cj5*x7298);
IkReal x7303=((1.0)*sj5*x7298);
evalcond[0]=((((-1.0)*cj5*r20*x7300))+((r22*x7298))+((r21*x7301)));
evalcond[1]=(((r02*x7298))+(((-1.0)*x7299*x7300))+((r01*x7301)));
evalcond[2]=(((r12*x7297))+((r10*x7302))+(((-1.0)*r11*x7303)));
evalcond[3]=((1.0)+((r12*x7298))+(((-1.0)*cj5*r10*x7300))+((r11*x7301)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x7303))+((cj1*sj2))+((r22*x7297))+((r20*x7302)));
evalcond[5]=(((x7298*x7299))+(((-1.0)*sj1*sj2))+((r02*x7297))+((cj1*cj2))+(((-1.0)*r01*x7303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7304=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7304;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x7304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7305=((1.0)*cj5);
IkReal x7306=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7305)));
j4eval[0]=x7306;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x7305))+((r21*sj5))))));
j4eval[2]=IKsign(x7306);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7307=cj5*cj5;
IkReal x7308=r11*r11;
IkReal x7309=(r11*sj5);
IkReal x7310=(cj5*r10);
IkReal x7311=(x7308+(r12*r12)+(((-1.0)*x7307*x7308))+(((-2.0)*x7309*x7310))+((x7307*(r10*r10))));
j4eval[0]=x7311;
j4eval[1]=((IKabs(r12))+(IKabs((x7309+(((-1.0)*x7310))))));
j4eval[2]=IKsign(x7311);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7312=cj5*cj5;
IkReal x7313=r11*r11;
IkReal x7314=(cj5*r10);
IkReal x7315=(r11*sj5);
CheckValue<IkReal> x7316=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7312*x7313))+x7313+(r12*r12)+((x7312*(r10*r10)))+(((-2.0)*x7314*x7315)))),-1);
if(!x7316.valid){
continue;
}
CheckValue<IkReal> x7317 = IKatan2WithCheck(IkReal(r12),IkReal((x7315+(((-1.0)*x7314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7316.value)))+(x7317.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7318=IKcos(j4);
IkReal x7319=IKsin(j4);
IkReal x7320=(cj5*r00);
IkReal x7321=((1.0)*x7318);
IkReal x7322=(sj5*x7318);
IkReal x7323=(cj5*x7319);
IkReal x7324=((1.0)*sj5*x7319);
evalcond[0]=(((r22*x7319))+((r21*x7322))+(((-1.0)*cj5*r20*x7321)));
evalcond[1]=(((r02*x7319))+((r01*x7322))+(((-1.0)*x7320*x7321)));
evalcond[2]=(((r12*x7318))+((r10*x7323))+(((-1.0)*r11*x7324)));
evalcond[3]=((-1.0)+((r12*x7319))+(((-1.0)*cj5*r10*x7321))+((r11*x7322)));
evalcond[4]=(((cj2*sj1))+((r22*x7318))+((cj1*sj2))+(((-1.0)*r21*x7324))+((r20*x7323)));
evalcond[5]=(((r02*x7318))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x7324))+((x7319*x7320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7325=((1.0)*cj5);
CheckValue<IkReal> x7326 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x7325)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7326.valid){
continue;
}
CheckValue<IkReal> x7327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7325)))),-1);
if(!x7327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7326.value)+(((1.5707963267949)*(x7327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7328=IKcos(j4);
IkReal x7329=IKsin(j4);
IkReal x7330=(cj5*r00);
IkReal x7331=((1.0)*x7328);
IkReal x7332=(sj5*x7328);
IkReal x7333=(cj5*x7329);
IkReal x7334=((1.0)*sj5*x7329);
evalcond[0]=((((-1.0)*cj5*r20*x7331))+((r22*x7329))+((r21*x7332)));
evalcond[1]=((((-1.0)*x7330*x7331))+((r01*x7332))+((r02*x7329)));
evalcond[2]=(((r10*x7333))+(((-1.0)*r11*x7334))+((r12*x7328)));
evalcond[3]=((-1.0)+((r12*x7329))+(((-1.0)*cj5*r10*x7331))+((r11*x7332)));
evalcond[4]=(((cj2*sj1))+((r22*x7328))+(((-1.0)*r21*x7334))+((cj1*sj2))+((r20*x7333)));
evalcond[5]=(((x7329*x7330))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x7334))+((r02*x7328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7335=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7335.valid){
continue;
}
CheckValue<IkReal> x7336 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7335.value)))+(x7336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7337=IKcos(j4);
IkReal x7338=IKsin(j4);
IkReal x7339=(cj5*r00);
IkReal x7340=((1.0)*x7337);
IkReal x7341=(sj5*x7337);
IkReal x7342=(cj5*x7338);
IkReal x7343=((1.0)*sj5*x7338);
evalcond[0]=(((r22*x7338))+(((-1.0)*cj5*r20*x7340))+((r21*x7341)));
evalcond[1]=(((r02*x7338))+((r01*x7341))+(((-1.0)*x7339*x7340)));
evalcond[2]=(((r12*x7337))+(((-1.0)*r11*x7343))+((r10*x7342)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x7340))+((r12*x7338))+((r11*x7341)));
evalcond[4]=(((cj2*sj1))+((r22*x7337))+((cj1*sj2))+((r20*x7342))+(((-1.0)*r21*x7343)));
evalcond[5]=(((r02*x7337))+(((-1.0)*r01*x7343))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7338*x7339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7345 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7345)==0){
continue;
}
IkReal x7344=pow(x7345,-0.5);
CheckValue<IkReal> x7346 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7346.valid){
continue;
}
IkReal gconst178=((-1.0)*(x7346.value));
IkReal gconst179=((-1.0)*r01*x7344);
IkReal gconst180=(r00*x7344);
CheckValue<IkReal> x7347 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7347.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7347.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7350 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7350.valid){
continue;
}
IkReal x7348=((-1.0)*(x7350.value));
IkReal x7349=x7344;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst179;
cj5=gconst180;
j5=x7348;
IkReal gconst178=x7348;
IkReal gconst179=((-1.0)*r01*x7349);
IkReal gconst180=(r00*x7349);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7353 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7353.valid){
continue;
}
IkReal x7351=((-1.0)*(x7353.value));
IkReal x7352=x7344;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst179;
cj5=gconst180;
j5=x7351;
IkReal gconst178=x7351;
IkReal gconst179=((-1.0)*r01*x7352);
IkReal gconst180=(r00*x7352);
IkReal x7354=r02*r02;
IkReal x7355=((1.0)*sj0);
IkReal x7356=(cj0*r12);
CheckValue<IkReal> x7360=IKPowWithIntegerCheck(((-1.0)+x7354),-1);
if(!x7360.valid){
continue;
}
IkReal x7357=x7360.value;
if((((1.0)+(((-1.0)*x7354)))) < -0.00001)
continue;
IkReal x7358=IKsqrt(((1.0)+(((-1.0)*x7354))));
IkReal x7359=(x7357*x7358);
j4eval[0]=((IKabs(((((-1.0)*x7354*x7355*x7359))+((r02*x7356*x7359))+((sj0*x7359)))))+(IKabs((x7356+(((-1.0)*r02*x7355))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7363 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7363.valid){
continue;
}
IkReal x7361=((-1.0)*(x7363.value));
IkReal x7362=x7344;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst179;
cj5=gconst180;
j5=x7361;
IkReal gconst178=x7361;
IkReal gconst179=((-1.0)*r01*x7362);
IkReal gconst180=(r00*x7362);
IkReal x7364=r02*r02;
CheckValue<IkReal> x7370=IKPowWithIntegerCheck(((-1.0)+x7364),-1);
if(!x7370.valid){
continue;
}
IkReal x7365=x7370.value;
IkReal x7366=((1.0)*cj1*r22*sj2);
IkReal x7367=((1.0)*cj2*r22*sj1);
if((((1.0)+(((-1.0)*x7364)))) < -0.00001)
continue;
IkReal x7368=IKsqrt(((1.0)+(((-1.0)*x7364))));
IkReal x7369=(r02*x7365*x7368);
j4eval[0]=((IKabs(((((-1.0)*x7366))+(((-1.0)*x7367)))))+(IKabs(((((-1.0)*x7367*x7369))+(((-1.0)*x7366*x7369))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7371=(gconst180*r20);
IkReal x7372=(gconst179*r21);
IkReal x7373=(cj2*sj1);
IkReal x7374=((1.0)*cj1*sj2);
CheckValue<IkReal> x7375 = IKatan2WithCheck(IkReal(((((-1.0)*x7371*x7373))+((x7372*x7373))+((cj1*sj2*x7372))+(((-1.0)*x7371*x7374)))),IkReal(((((-1.0)*r22*x7374))+(((-1.0)*r22*x7373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7375.valid){
continue;
}
CheckValue<IkReal> x7376=IKPowWithIntegerCheck(IKsign(((x7371*x7371)+(x7372*x7372)+(r22*r22)+(((-2.0)*x7371*x7372)))),-1);
if(!x7376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7375.value)+(((1.5707963267949)*(x7376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7377=IKcos(j4);
IkReal x7378=IKsin(j4);
IkReal x7379=(cj1*cj2);
IkReal x7380=(sj1*sj2);
IkReal x7381=(gconst180*x7378);
IkReal x7382=(gconst179*x7377);
IkReal x7383=((1.0)*gconst179*x7378);
IkReal x7384=((1.0)*gconst180*x7377);
evalcond[0]=(((r21*x7382))+(((-1.0)*r20*x7384))+((r22*x7378)));
evalcond[1]=(((r02*x7378))+cj0+((r01*x7382))+(((-1.0)*r00*x7384)));
evalcond[2]=(sj0+((r12*x7378))+((r11*x7382))+(((-1.0)*r10*x7384)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7381))+(((-1.0)*r21*x7383))+((r22*x7377)));
evalcond[4]=(((r02*x7377))+(((-1.0)*sj0*x7380))+((r00*x7381))+(((-1.0)*r01*x7383))+((sj0*x7379)));
evalcond[5]=(((r12*x7377))+((r10*x7381))+(((-1.0)*r11*x7383))+(((-1.0)*cj0*x7379))+((cj0*x7380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7385=((1.0)*sj0);
IkReal x7386=((1.0)*gconst179);
CheckValue<IkReal> x7387 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x7386))+((gconst179*r01*sj0))+((cj0*gconst180*r10))+(((-1.0)*gconst180*r00*x7385)))),IkReal(((((-1.0)*r02*x7385))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7387.valid){
continue;
}
CheckValue<IkReal> x7388=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst180*r21))+(((-1.0)*r20*x7386)))),-1);
if(!x7388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7387.value)+(((1.5707963267949)*(x7388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7389=IKcos(j4);
IkReal x7390=IKsin(j4);
IkReal x7391=(cj1*cj2);
IkReal x7392=(sj1*sj2);
IkReal x7393=(gconst180*x7390);
IkReal x7394=(gconst179*x7389);
IkReal x7395=((1.0)*gconst179*x7390);
IkReal x7396=((1.0)*gconst180*x7389);
evalcond[0]=(((r22*x7390))+(((-1.0)*r20*x7396))+((r21*x7394)));
evalcond[1]=(cj0+(((-1.0)*r00*x7396))+((r02*x7390))+((r01*x7394)));
evalcond[2]=(sj0+((r12*x7390))+((r11*x7394))+(((-1.0)*r10*x7396)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7393))+(((-1.0)*r21*x7395))+((r22*x7389)));
evalcond[4]=((((-1.0)*r01*x7395))+((r00*x7393))+((sj0*x7391))+((r02*x7389))+(((-1.0)*sj0*x7392)));
evalcond[5]=((((-1.0)*r11*x7395))+((r10*x7393))+(((-1.0)*cj0*x7391))+((r12*x7389))+((cj0*x7392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7397=((1.0)*gconst180);
CheckValue<IkReal> x7398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7397))+(((-1.0)*gconst179*r10)))),-1);
if(!x7398.valid){
continue;
}
CheckValue<IkReal> x7399 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x7397))+((cj0*gconst179*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7398.value)))+(x7399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7400=IKcos(j4);
IkReal x7401=IKsin(j4);
IkReal x7402=(cj1*cj2);
IkReal x7403=(sj1*sj2);
IkReal x7404=(gconst180*x7401);
IkReal x7405=(gconst179*x7400);
IkReal x7406=((1.0)*gconst179*x7401);
IkReal x7407=((1.0)*gconst180*x7400);
evalcond[0]=((((-1.0)*r20*x7407))+((r21*x7405))+((r22*x7401)));
evalcond[1]=(cj0+((r02*x7401))+(((-1.0)*r00*x7407))+((r01*x7405)));
evalcond[2]=(((r11*x7405))+sj0+(((-1.0)*r10*x7407))+((r12*x7401)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x7406))+((r20*x7404))+((cj1*sj2))+((r22*x7400)));
evalcond[4]=((((-1.0)*r01*x7406))+((r02*x7400))+(((-1.0)*sj0*x7403))+((r00*x7404))+((sj0*x7402)));
evalcond[5]=((((-1.0)*r11*x7406))+(((-1.0)*cj0*x7402))+((r12*x7400))+((r10*x7404))+((cj0*x7403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7409 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7409)==0){
continue;
}
IkReal x7408=pow(x7409,-0.5);
CheckValue<IkReal> x7410 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7410.valid){
continue;
}
IkReal gconst181=((3.14159265358979)+(((-1.0)*(x7410.value))));
IkReal gconst182=((1.0)*r01*x7408);
IkReal gconst183=((-1.0)*r00*x7408);
CheckValue<IkReal> x7411 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7411.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7411.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x7414 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7414.valid){
continue;
}
IkReal x7412=((1.0)*(x7414.value));
IkReal x7413=x7408;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst182;
cj5=gconst183;
j5=((3.14159265)+(((-1.0)*x7412)));
IkReal gconst181=((3.14159265358979)+(((-1.0)*x7412)));
IkReal gconst182=((1.0)*r01*x7413);
IkReal gconst183=((-1.0)*r00*x7413);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7417 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7417.valid){
continue;
}
IkReal x7415=((1.0)*(x7417.value));
IkReal x7416=x7408;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst182;
cj5=gconst183;
j5=((3.14159265)+(((-1.0)*x7415)));
IkReal gconst181=((3.14159265358979)+(((-1.0)*x7415)));
IkReal gconst182=((1.0)*r01*x7416);
IkReal gconst183=((-1.0)*r00*x7416);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7418=((1.0)*sj0);
IkReal x7419=((1.0)*gconst182);
CheckValue<IkReal> x7420=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst183*r21))+(((-1.0)*r20*x7419)))),-1);
if(!x7420.valid){
continue;
}
CheckValue<IkReal> x7421 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x7419))+((cj0*gconst183*r10))+((gconst182*r01*sj0))+(((-1.0)*gconst183*r00*x7418)))),IkReal((((cj0*r12))+(((-1.0)*r02*x7418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7420.value)))+(x7421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7422=IKcos(j4);
IkReal x7423=IKsin(j4);
IkReal x7424=(sj1*sj2);
IkReal x7425=(cj1*cj2);
IkReal x7426=(gconst183*x7423);
IkReal x7427=(gconst182*x7422);
IkReal x7428=((1.0)*gconst182*x7423);
IkReal x7429=((1.0)*gconst183*x7422);
evalcond[0]=(((r21*x7427))+(((-1.0)*r20*x7429))+((r22*x7423)));
evalcond[1]=(((r01*x7427))+(((-1.0)*r00*x7429))+cj0+((r02*x7423)));
evalcond[2]=(sj0+(((-1.0)*r10*x7429))+((r11*x7427))+((r12*x7423)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7426))+(((-1.0)*r21*x7428))+((r22*x7422)));
evalcond[4]=((((-1.0)*sj0*x7424))+((r00*x7426))+((r02*x7422))+((sj0*x7425))+(((-1.0)*r01*x7428)));
evalcond[5]=((((-1.0)*r11*x7428))+((cj0*x7424))+((r10*x7426))+(((-1.0)*cj0*x7425))+((r12*x7422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7430=((1.0)*gconst183);
CheckValue<IkReal> x7431=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst182*r10))+(((-1.0)*r11*x7430)))),-1);
if(!x7431.valid){
continue;
}
CheckValue<IkReal> x7432 = IKatan2WithCheck(IkReal((((cj0*gconst182*r21))+(((-1.0)*cj0*r20*x7430)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7431.value)))+(x7432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7433=IKcos(j4);
IkReal x7434=IKsin(j4);
IkReal x7435=(sj1*sj2);
IkReal x7436=(cj1*cj2);
IkReal x7437=(gconst183*x7434);
IkReal x7438=(gconst182*x7433);
IkReal x7439=((1.0)*gconst182*x7434);
IkReal x7440=((1.0)*gconst183*x7433);
evalcond[0]=(((r21*x7438))+((r22*x7434))+(((-1.0)*r20*x7440)));
evalcond[1]=(((r01*x7438))+cj0+(((-1.0)*r00*x7440))+((r02*x7434)));
evalcond[2]=((((-1.0)*r10*x7440))+sj0+((r11*x7438))+((r12*x7434)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7437))+(((-1.0)*r21*x7439))+((r22*x7433)));
evalcond[4]=((((-1.0)*r01*x7439))+(((-1.0)*sj0*x7435))+((r00*x7437))+((r02*x7433))+((sj0*x7436)));
evalcond[5]=((((-1.0)*r11*x7439))+((r10*x7437))+((cj0*x7435))+(((-1.0)*cj0*x7436))+((r12*x7433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7441=IKPowWithIntegerCheck(IKsign((((gconst183*r01))+((gconst182*r00)))),-1);
if(!x7441.valid){
continue;
}
CheckValue<IkReal> x7442 = IKatan2WithCheck(IkReal(((((-1.0)*gconst183*r20*sj0))+((gconst182*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7441.value)))+(x7442.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7443=IKcos(j4);
IkReal x7444=IKsin(j4);
IkReal x7445=(sj1*sj2);
IkReal x7446=(cj1*cj2);
IkReal x7447=(gconst183*x7444);
IkReal x7448=(gconst182*x7443);
IkReal x7449=((1.0)*gconst182*x7444);
IkReal x7450=((1.0)*gconst183*x7443);
evalcond[0]=(((r22*x7444))+((r21*x7448))+(((-1.0)*r20*x7450)));
evalcond[1]=(cj0+(((-1.0)*r00*x7450))+((r01*x7448))+((r02*x7444)));
evalcond[2]=((((-1.0)*r10*x7450))+((r12*x7444))+sj0+((r11*x7448)));
evalcond[3]=(((cj2*sj1))+((r20*x7447))+((cj1*sj2))+((r22*x7443))+(((-1.0)*r21*x7449)));
evalcond[4]=(((sj0*x7446))+(((-1.0)*r01*x7449))+(((-1.0)*sj0*x7445))+((r00*x7447))+((r02*x7443)));
evalcond[5]=((((-1.0)*cj0*x7446))+((r12*x7443))+((r10*x7447))+((cj0*x7445))+(((-1.0)*r11*x7449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7451=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7451;
j4eval[1]=IKsign(x7451);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7452=((1.0)*cj5);
IkReal x7453=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7452)));
j4eval[0]=x7453;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7452))))));
j4eval[2]=IKsign(x7453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7454=cj5*cj5;
IkReal x7455=r01*r01;
IkReal x7456=(r01*sj5);
IkReal x7457=(cj5*r00);
IkReal x7458=(((x7454*x7455))+(((-1.0)*x7454*(r00*r00)))+(((-1.0)*x7455))+(((-1.0)*(r02*r02)))+(((2.0)*x7456*x7457)));
j4eval[0]=x7458;
j4eval[1]=IKsign(x7458);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7457))+x7456))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7459=cj5*cj5;
IkReal x7460=r01*r01;
IkReal x7461=(r01*sj5);
IkReal x7462=(cj5*r00);
CheckValue<IkReal> x7463 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7462))+x7461)),IKFAST_ATAN2_MAGTHRESH);
if(!x7463.valid){
continue;
}
CheckValue<IkReal> x7464=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x7459*x7460))+(((-1.0)*x7459*(r00*r00)))+(((2.0)*x7461*x7462))+(((-1.0)*x7460)))),-1);
if(!x7464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7463.value)+(((1.5707963267949)*(x7464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7465=IKcos(j4);
IkReal x7466=IKsin(j4);
IkReal x7467=(cj5*r00);
IkReal x7468=((1.0)*x7465);
IkReal x7469=(sj5*x7465);
IkReal x7470=(cj5*x7466);
IkReal x7471=((1.0)*sj5*x7466);
evalcond[0]=(((r21*x7469))+(((-1.0)*cj5*r20*x7468))+((r22*x7466)));
evalcond[1]=(((r12*x7466))+((r11*x7469))+(((-1.0)*cj5*r10*x7468)));
evalcond[2]=((((-1.0)*r01*x7471))+((r02*x7465))+((x7466*x7467)));
evalcond[3]=((1.0)+((r02*x7466))+(((-1.0)*x7467*x7468))+((r01*x7469)));
evalcond[4]=(((cj2*sj1))+((r20*x7470))+((cj1*sj2))+(((-1.0)*r21*x7471))+((r22*x7465)));
evalcond[5]=(((r10*x7470))+(((-1.0)*r11*x7471))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x7465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7472=((1.0)*cj5);
CheckValue<IkReal> x7473=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7472))+(((-1.0)*r10*sj5)))),-1);
if(!x7473.valid){
continue;
}
CheckValue<IkReal> x7474 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x7472)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7473.value)))+(x7474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7475=IKcos(j4);
IkReal x7476=IKsin(j4);
IkReal x7477=(cj5*r00);
IkReal x7478=((1.0)*x7475);
IkReal x7479=(sj5*x7475);
IkReal x7480=(cj5*x7476);
IkReal x7481=((1.0)*sj5*x7476);
evalcond[0]=((((-1.0)*cj5*r20*x7478))+((r22*x7476))+((r21*x7479)));
evalcond[1]=(((r11*x7479))+(((-1.0)*cj5*r10*x7478))+((r12*x7476)));
evalcond[2]=(((r02*x7475))+(((-1.0)*r01*x7481))+((x7476*x7477)));
evalcond[3]=((1.0)+((r02*x7476))+(((-1.0)*x7477*x7478))+((r01*x7479)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x7475))+((r20*x7480))+(((-1.0)*r21*x7481)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x7480))+(((-1.0)*r11*x7481))+((r12*x7475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7482=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7482.valid){
continue;
}
CheckValue<IkReal> x7483 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7482.value)))+(x7483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7484=IKcos(j4);
IkReal x7485=IKsin(j4);
IkReal x7486=(cj5*r00);
IkReal x7487=((1.0)*x7484);
IkReal x7488=(sj5*x7484);
IkReal x7489=(cj5*x7485);
IkReal x7490=((1.0)*sj5*x7485);
evalcond[0]=(((r22*x7485))+(((-1.0)*cj5*r20*x7487))+((r21*x7488)));
evalcond[1]=((((-1.0)*cj5*r10*x7487))+((r11*x7488))+((r12*x7485)));
evalcond[2]=((((-1.0)*r01*x7490))+((r02*x7484))+((x7485*x7486)));
evalcond[3]=((1.0)+(((-1.0)*x7486*x7487))+((r01*x7488))+((r02*x7485)));
evalcond[4]=(((r22*x7484))+((cj2*sj1))+((cj1*sj2))+((r20*x7489))+(((-1.0)*r21*x7490)));
evalcond[5]=(((r12*x7484))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x7489))+(((-1.0)*r11*x7490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7491=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7491;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7492=((1.0)*cj5);
IkReal x7493=((((-1.0)*r21*x7492))+(((-1.0)*r20*sj5)));
j4eval[0]=x7493;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x7492))))));
j4eval[2]=IKsign(x7493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7494=cj5*cj5;
IkReal x7495=r01*r01;
IkReal x7496=(cj5*r00);
IkReal x7497=(r01*sj5);
IkReal x7498=((((-2.0)*x7496*x7497))+(((-1.0)*x7494*x7495))+(r02*r02)+x7495+((x7494*(r00*r00))));
j4eval[0]=x7498;
j4eval[1]=IKsign(x7498);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7496))+x7497))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7499=cj5*cj5;
IkReal x7500=r01*r01;
IkReal x7501=(r01*sj5);
IkReal x7502=(cj5*r00);
CheckValue<IkReal> x7503 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7502))+x7501)),IKFAST_ATAN2_MAGTHRESH);
if(!x7503.valid){
continue;
}
CheckValue<IkReal> x7504=IKPowWithIntegerCheck(IKsign((((x7499*(r00*r00)))+(((-2.0)*x7501*x7502))+(((-1.0)*x7499*x7500))+x7500+(r02*r02))),-1);
if(!x7504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7503.value)+(((1.5707963267949)*(x7504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7505=IKcos(j4);
IkReal x7506=IKsin(j4);
IkReal x7507=(cj5*r00);
IkReal x7508=((1.0)*x7505);
IkReal x7509=(sj5*x7505);
IkReal x7510=(cj5*x7506);
IkReal x7511=((1.0)*sj5*x7506);
evalcond[0]=((((-1.0)*cj5*r20*x7508))+((r22*x7506))+((r21*x7509)));
evalcond[1]=(((r12*x7506))+((r11*x7509))+(((-1.0)*cj5*r10*x7508)));
evalcond[2]=(((x7506*x7507))+(((-1.0)*r01*x7511))+((r02*x7505)));
evalcond[3]=((-1.0)+(((-1.0)*x7507*x7508))+((r02*x7506))+((r01*x7509)));
evalcond[4]=(((cj2*sj1))+((r20*x7510))+((cj1*sj2))+(((-1.0)*r21*x7511))+((r22*x7505)));
evalcond[5]=(((r12*x7505))+(((-1.0)*sj1*sj2))+((r10*x7510))+((cj1*cj2))+(((-1.0)*r11*x7511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7512=((1.0)*cj5);
CheckValue<IkReal> x7513 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x7512))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7513.valid){
continue;
}
CheckValue<IkReal> x7514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7512))+(((-1.0)*r20*sj5)))),-1);
if(!x7514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7513.value)+(((1.5707963267949)*(x7514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7515=IKcos(j4);
IkReal x7516=IKsin(j4);
IkReal x7517=(cj5*r00);
IkReal x7518=((1.0)*x7515);
IkReal x7519=(sj5*x7515);
IkReal x7520=(cj5*x7516);
IkReal x7521=((1.0)*sj5*x7516);
evalcond[0]=(((r21*x7519))+(((-1.0)*cj5*r20*x7518))+((r22*x7516)));
evalcond[1]=(((r11*x7519))+((r12*x7516))+(((-1.0)*cj5*r10*x7518)));
evalcond[2]=((((-1.0)*r01*x7521))+((r02*x7515))+((x7516*x7517)));
evalcond[3]=((-1.0)+((r01*x7519))+((r02*x7516))+(((-1.0)*x7517*x7518)));
evalcond[4]=(((cj2*sj1))+((r20*x7520))+((cj1*sj2))+(((-1.0)*r21*x7521))+((r22*x7515)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x7515))+((r10*x7520))+(((-1.0)*r11*x7521))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7522 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7522.valid){
continue;
}
CheckValue<IkReal> x7523=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7522.value)+(((1.5707963267949)*(x7523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7524=IKcos(j4);
IkReal x7525=IKsin(j4);
IkReal x7526=(cj5*r00);
IkReal x7527=((1.0)*x7524);
IkReal x7528=(sj5*x7524);
IkReal x7529=(cj5*x7525);
IkReal x7530=((1.0)*sj5*x7525);
evalcond[0]=(((r21*x7528))+(((-1.0)*cj5*r20*x7527))+((r22*x7525)));
evalcond[1]=(((r11*x7528))+((r12*x7525))+(((-1.0)*cj5*r10*x7527)));
evalcond[2]=(((x7525*x7526))+((r02*x7524))+(((-1.0)*r01*x7530)));
evalcond[3]=((-1.0)+((r01*x7528))+((r02*x7525))+(((-1.0)*x7526*x7527)));
evalcond[4]=(((cj2*sj1))+((r20*x7529))+((cj1*sj2))+((r22*x7524))+(((-1.0)*r21*x7530)));
evalcond[5]=((((-1.0)*r11*x7530))+((r12*x7524))+(((-1.0)*sj1*sj2))+((r10*x7529))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7531=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7531);
rxp1_1=(px*r21);
rxp1_2=(r11*x7531);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7532=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7532);
rxp1_1=(px*r21);
rxp1_2=(r11*x7532);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7533=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7533);
rxp1_1=(px*r21);
rxp1_2=(r11*x7533);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7536=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x7536.valid){
continue;
}
IkReal x7534=x7536.value;
IkReal x7535=(cj0*x7534);
sj4array[0]=(((cj1*cj2*x7535))+(((-1.0)*sj1*sj2*x7535)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7537=IKcos(j4);
IkReal x7538=IKsin(j4);
IkReal x7539=(r21*sj5);
IkReal x7540=((1.0)*cj5*x7537);
evalcond[0]=(r02*x7537);
evalcond[1]=(cj0+((r02*x7538)));
evalcond[2]=(((x7537*x7539))+(((-1.0)*r20*x7540)));
evalcond[3]=((((-1.0)*r10*x7540))+((r11*sj5*x7537)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7538*x7539))+((cj5*r20*x7538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7543=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7543.valid){
continue;
}
IkReal x7541=x7543.value;
IkReal x7542=((1.0)*x7541);
sj4array[0]=((((-1.0)*cj2*sj1*x7542))+(((-1.0)*cj1*sj2*x7542)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7544=IKcos(j4);
IkReal x7545=IKsin(j4);
IkReal x7546=(r11*sj5);
IkReal x7547=((1.0)*cj5*x7544);
evalcond[0]=(r02*x7544);
evalcond[1]=(cj0+((r02*x7545)));
evalcond[2]=(((r21*sj5*x7544))+(((-1.0)*r20*x7547)));
evalcond[3]=((((-1.0)*r10*x7547))+((x7544*x7546)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((cj5*r10*x7545))+(((-1.0)*x7545*x7546))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7548=IKPowWithIntegerCheck(r02,-1);
if(!x7548.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x7548.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7549=IKcos(j4);
IkReal x7550=IKsin(j4);
IkReal x7551=(cj5*r10);
IkReal x7552=(cj5*r20);
IkReal x7553=((1.0)*x7549);
IkReal x7554=(sj5*x7549);
IkReal x7555=((1.0)*sj5*x7550);
evalcond[0]=(r02*x7549);
evalcond[1]=(((r21*x7554))+(((-1.0)*x7552*x7553)));
evalcond[2]=((((-1.0)*x7551*x7553))+((r11*x7554)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7550*x7552))+(((-1.0)*r21*x7555)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((x7550*x7551))+(((-1.0)*r11*x7555))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7556=((1.0)*sj0);
IkReal x7557=((1.0)*sj5);
CheckValue<IkReal> x7558=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x7557)))),-1);
if(!x7558.valid){
continue;
}
CheckValue<IkReal> x7559 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r00*x7556))+((cj0*cj5*r10))+(((-1.0)*cj0*r11*x7557))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x7556))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7558.value)))+(x7559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7560=IKcos(j4);
IkReal x7561=IKsin(j4);
IkReal x7562=(cj5*r00);
IkReal x7563=(cj1*cj2);
IkReal x7564=(sj1*sj2);
IkReal x7565=((1.0)*x7560);
IkReal x7566=(sj5*x7560);
IkReal x7567=(cj5*x7561);
IkReal x7568=((1.0)*sj5*x7561);
evalcond[0]=((((-1.0)*cj5*r20*x7565))+((r22*x7561))+((r21*x7566)));
evalcond[1]=((((-1.0)*x7562*x7565))+((r02*x7561))+cj0+((r01*x7566)));
evalcond[2]=(sj0+((r11*x7566))+((r12*x7561))+(((-1.0)*cj5*r10*x7565)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x7568))+((cj1*sj2))+((r22*x7560))+((r20*x7567)));
evalcond[4]=(((r02*x7560))+(((-1.0)*sj0*x7564))+((sj0*x7563))+(((-1.0)*r01*x7568))+((x7561*x7562)));
evalcond[5]=(((r10*x7567))+((cj0*x7564))+(((-1.0)*r11*x7568))+((r12*x7560))+(((-1.0)*cj0*x7563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7569=((1.0)*cj5);
CheckValue<IkReal> x7570=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7569)))),-1);
if(!x7570.valid){
continue;
}
CheckValue<IkReal> x7571 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x7569))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7570.value)))+(x7571.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7572=IKcos(j4);
IkReal x7573=IKsin(j4);
IkReal x7574=(cj5*r00);
IkReal x7575=(cj1*cj2);
IkReal x7576=(sj1*sj2);
IkReal x7577=((1.0)*x7572);
IkReal x7578=(sj5*x7572);
IkReal x7579=(cj5*x7573);
IkReal x7580=((1.0)*sj5*x7573);
evalcond[0]=((((-1.0)*cj5*r20*x7577))+((r22*x7573))+((r21*x7578)));
evalcond[1]=(cj0+((r01*x7578))+(((-1.0)*x7574*x7577))+((r02*x7573)));
evalcond[2]=(sj0+(((-1.0)*cj5*r10*x7577))+((r12*x7573))+((r11*x7578)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7579))+((r22*x7572))+(((-1.0)*r21*x7580)));
evalcond[4]=((((-1.0)*r01*x7580))+((x7573*x7574))+((r02*x7572))+(((-1.0)*sj0*x7576))+((sj0*x7575)));
evalcond[5]=(((r12*x7572))+(((-1.0)*cj0*x7575))+((r10*x7579))+(((-1.0)*r11*x7580))+((cj0*x7576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7581 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7581.valid){
continue;
}
CheckValue<IkReal> x7582=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7581.value)+(((1.5707963267949)*(x7582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7583=IKcos(j4);
IkReal x7584=IKsin(j4);
IkReal x7585=(cj5*r00);
IkReal x7586=(cj1*cj2);
IkReal x7587=(sj1*sj2);
IkReal x7588=((1.0)*x7583);
IkReal x7589=(sj5*x7583);
IkReal x7590=(cj5*x7584);
IkReal x7591=((1.0)*sj5*x7584);
evalcond[0]=(((r22*x7584))+((r21*x7589))+(((-1.0)*cj5*r20*x7588)));
evalcond[1]=((((-1.0)*x7585*x7588))+cj0+((r02*x7584))+((r01*x7589)));
evalcond[2]=(sj0+((r12*x7584))+((r11*x7589))+(((-1.0)*cj5*r10*x7588)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7590))+((r22*x7583))+(((-1.0)*r21*x7591)));
evalcond[4]=(((r02*x7583))+(((-1.0)*sj0*x7587))+((x7584*x7585))+(((-1.0)*r01*x7591))+((sj0*x7586)));
evalcond[5]=(((r12*x7583))+(((-1.0)*r11*x7591))+((r10*x7590))+((cj0*x7587))+(((-1.0)*cj0*x7586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7592=cj5*cj5;
IkReal x7593=r21*r21;
IkReal x7594=(cj2*sj1);
IkReal x7595=(cj1*sj2);
IkReal x7596=((1.0)*r22);
IkReal x7597=(r21*sj5);
IkReal x7598=((1.0)*cj5*r20);
CheckValue<IkReal> x7599=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7592*x7593))+(r22*r22)+((x7592*(r20*r20)))+(((-2.0)*cj5*r20*x7597))+x7593)),-1);
if(!x7599.valid){
continue;
}
CheckValue<IkReal> x7600 = IKatan2WithCheck(IkReal((((x7595*x7597))+((x7594*x7597))+(((-1.0)*x7595*x7598))+(((-1.0)*x7594*x7598)))),IkReal(((((-1.0)*x7595*x7596))+(((-1.0)*x7594*x7596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7599.value)))+(x7600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7601=IKcos(j4);
IkReal x7602=IKsin(j4);
IkReal x7603=(r21*sj5);
IkReal x7604=(cj5*r20);
evalcond[0]=(((x7601*x7603))+((r22*x7602))+(((-1.0)*x7601*x7604)));
evalcond[1]=(((cj2*sj1))+((x7602*x7604))+((cj1*sj2))+((r22*x7601))+(((-1.0)*x7602*x7603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7605=(cj4*cj5);
IkReal x7606=((1.0)*sj4);
IkReal x7607=((1.0)*cj4*sj5);
if( IKabs(((((-1.0)*r11*x7607))+((r10*x7605))+(((-1.0)*r12*x7606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x7605))+(((-1.0)*r01*x7607))+(((-1.0)*r02*x7606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7607))+((r10*x7605))+(((-1.0)*r12*x7606))))+IKsqr((((r00*x7605))+(((-1.0)*r01*x7607))+(((-1.0)*r02*x7606))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7607))+((r10*x7605))+(((-1.0)*r12*x7606))), (((r00*x7605))+(((-1.0)*r01*x7607))+(((-1.0)*r02*x7606))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7608=IKsin(j0);
IkReal x7609=IKcos(j0);
IkReal x7610=(cj5*r01);
IkReal x7611=(r10*sj5);
IkReal x7612=(cj5*r00);
IkReal x7613=((1.0)*sj2);
IkReal x7614=((1.0)*sj5);
IkReal x7615=((0.09)*sj2);
IkReal x7616=((1.0)*cj4);
IkReal x7617=((1.0)*cj2);
IkReal x7618=(cj5*r11);
IkReal x7619=(cj5*r10);
IkReal x7620=((0.09)*cj2);
IkReal x7621=(cj4*sj5);
IkReal x7622=(sj1*x7608);
IkReal x7623=(cj1*x7609);
IkReal x7624=(cj1*x7608);
IkReal x7625=(sj1*x7609);
evalcond[0]=((((-1.0)*x7612*x7616))+((r01*x7621))+((r02*sj4))+x7609);
evalcond[1]=(((r12*sj4))+(((-1.0)*x7616*x7619))+x7608+((r11*x7621)));
evalcond[2]=(((sj2*x7624))+(((-1.0)*r00*x7614))+((cj2*x7622))+(((-1.0)*x7610)));
evalcond[3]=((((-1.0)*x7617*x7625))+(((-1.0)*x7611))+(((-1.0)*x7618))+(((-1.0)*x7613*x7623)));
evalcond[4]=(((sj4*x7612))+(((-1.0)*r01*sj4*x7614))+((cj2*x7624))+(((-1.0)*x7613*x7622))+((cj4*r02)));
evalcond[5]=(((sj2*x7625))+((sj4*x7619))+(((-1.0)*r11*sj4*x7614))+(((-1.0)*x7617*x7623))+((cj4*r12)));
evalcond[6]=((((-1.0)*x7615*x7624))+(((-0.0565)*r00*sj5))+(((0.0565)*x7609))+(((-1.0)*x7620*x7622))+(((-1.0)*px))+(((1.0e-7)*x7624))+(((-0.09)*x7622))+(((-0.0565)*x7610)));
evalcond[7]=((((0.0565)*x7608))+((x7620*x7625))+((x7615*x7623))+(((-1.0e-7)*x7623))+(((-1.0)*py))+(((0.09)*x7625))+(((-0.0565)*x7611))+(((-0.0565)*x7618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7626 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7626.valid){
continue;
}
CheckValue<IkReal> x7627=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x7627.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7626.value)+(((1.5707963267949)*(x7627.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7628=IKsin(j0);
IkReal x7629=IKcos(j0);
IkReal x7630=((0.0565)*cj5);
IkReal x7631=(r10*sj5);
IkReal x7632=(cj1*sj2);
IkReal x7633=(cj2*sj1);
IkReal x7634=((1.0)*cj5);
IkReal x7635=(r00*sj5);
IkReal x7636=((1.0e-7)*cj1);
IkReal x7637=((1.0)*x7629);
IkReal x7638=((0.09)*x7628);
IkReal x7639=((0.09)*x7629);
evalcond[0]=(((x7628*x7633))+((x7628*x7632))+(((-1.0)*r01*x7634))+(((-1.0)*x7635)));
evalcond[1]=((((-1.0)*x7633*x7637))+(((-1.0)*x7632*x7637))+(((-1.0)*x7631))+(((-1.0)*r11*x7634)));
evalcond[2]=((((0.0565)*x7629))+((x7628*x7636))+(((-1.0)*x7633*x7638))+(((-1.0)*px))+(((-1.0)*sj1*x7638))+(((-1.0)*r01*x7630))+(((-0.0565)*x7635))+(((-1.0)*x7632*x7638)));
evalcond[3]=(((x7633*x7639))+((x7632*x7639))+(((0.0565)*x7628))+(((-1.0)*x7629*x7636))+(((-1.0)*py))+(((-0.0565)*x7631))+(((-1.0)*r11*x7630))+((sj1*x7639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7640=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7640;
j4eval[1]=IKsign(x7640);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7641=((1.0)*cj5);
IkReal x7642=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7641)));
j4eval[0]=x7642;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7641))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7642);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7643=((1.0)*sj0);
IkReal x7644=((1.0)*sj5);
IkReal x7645=((((-1.0)*r20*x7644))+(((-1.0)*cj5*r21)));
j4eval[0]=x7645;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj5*r00*x7643))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x7644)))))+(IKabs(((((-1.0)*r02*x7643))+((cj0*r12))))));
j4eval[2]=IKsign(x7645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7646=((-1.0)*r20);
IkReal x7648 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7648)==0){
continue;
}
IkReal x7647=pow(x7648,-0.5);
CheckValue<IkReal> x7649 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7646),IKFAST_ATAN2_MAGTHRESH);
if(!x7649.valid){
continue;
}
IkReal gconst166=((-1.0)*(x7649.value));
IkReal gconst167=(r21*x7647);
IkReal gconst168=(x7646*x7647);
CheckValue<IkReal> x7650 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7650.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7650.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7651=((-1.0)*r20);
IkReal x7652=x7647;
CheckValue<IkReal> x7654 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7651),IKFAST_ATAN2_MAGTHRESH);
if(!x7654.valid){
continue;
}
IkReal x7653=((-1.0)*(x7654.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst167;
cj5=gconst168;
j5=x7653;
IkReal gconst166=x7653;
IkReal gconst167=(r21*x7652);
IkReal gconst168=(x7651*x7652);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7655=((-1.0)*r20);
IkReal x7656=x7647;
CheckValue<IkReal> x7658 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7655),IKFAST_ATAN2_MAGTHRESH);
if(!x7658.valid){
continue;
}
IkReal x7657=((-1.0)*(x7658.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst167;
cj5=gconst168;
j5=x7657;
IkReal gconst166=x7657;
IkReal gconst167=(r21*x7656);
IkReal gconst168=(x7655*x7656);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7659=((-1.0)*r20);
IkReal x7660=x7647;
CheckValue<IkReal> x7662 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7659),IKFAST_ATAN2_MAGTHRESH);
if(!x7662.valid){
continue;
}
IkReal x7661=((-1.0)*(x7662.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst167;
cj5=gconst168;
j5=x7661;
IkReal gconst166=x7661;
IkReal gconst167=(r21*x7660);
IkReal gconst168=(x7659*x7660);
IkReal x7663=r22*r22;
CheckValue<IkReal> x7666=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7663))),-1);
if(!x7666.valid){
continue;
}
IkReal x7664=x7666.value;
IkReal x7665=((((2.0)*x7664*(r20*r20)*(r21*r21)))+((x7664*(r21*r21*r21*r21)))+((x7664*(r20*r20*r20*r20)))+x7663);
j4eval[0]=x7665;
j4eval[1]=IKsign(x7665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7667=(cj2*sj1);
IkReal x7668=(gconst168*r20);
IkReal x7669=(cj1*sj2);
IkReal x7670=((1.0)*r22);
IkReal x7671=(gconst167*r21);
CheckValue<IkReal> x7672 = IKatan2WithCheck(IkReal((((x7669*x7671))+(((-1.0)*x7667*x7668))+(((-1.0)*x7668*x7669))+((x7667*x7671)))),IkReal(((((-1.0)*x7667*x7670))+(((-1.0)*x7669*x7670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7672.valid){
continue;
}
CheckValue<IkReal> x7673=IKPowWithIntegerCheck(IKsign(((x7668*x7668)+(r22*r22)+(x7671*x7671)+(((-2.0)*x7668*x7671)))),-1);
if(!x7673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7672.value)+(((1.5707963267949)*(x7673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7674=IKcos(j4);
IkReal x7675=IKsin(j4);
IkReal x7676=(cj1*cj2);
IkReal x7677=(sj1*sj2);
IkReal x7678=(gconst168*x7675);
IkReal x7679=(gconst167*x7674);
IkReal x7680=((1.0)*gconst168*x7674);
IkReal x7681=((1.0)*gconst167*x7675);
evalcond[0]=((((-1.0)*r20*x7680))+((r22*x7675))+((r21*x7679)));
evalcond[1]=(((r02*x7675))+cj0+(((-1.0)*r00*x7680))+((r01*x7679)));
evalcond[2]=((((-1.0)*r10*x7680))+((r11*x7679))+((r12*x7675))+sj0);
evalcond[3]=(((cj2*sj1))+((r22*x7674))+((cj1*sj2))+((r20*x7678))+(((-1.0)*r21*x7681)));
evalcond[4]=(((sj0*x7676))+((r02*x7674))+(((-1.0)*sj0*x7677))+(((-1.0)*r01*x7681))+((r00*x7678)));
evalcond[5]=(((r12*x7674))+(((-1.0)*cj0*x7676))+(((-1.0)*r11*x7681))+((r10*x7678))+((cj0*x7677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7682=((1.0)*gconst168);
CheckValue<IkReal> x7683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst167*r10))+(((-1.0)*r11*x7682)))),-1);
if(!x7683.valid){
continue;
}
CheckValue<IkReal> x7684 = IKatan2WithCheck(IkReal((((cj0*gconst167*r21))+(((-1.0)*cj0*r20*x7682)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7683.value)))+(x7684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7685=IKcos(j4);
IkReal x7686=IKsin(j4);
IkReal x7687=(cj1*cj2);
IkReal x7688=(sj1*sj2);
IkReal x7689=(gconst168*x7686);
IkReal x7690=(gconst167*x7685);
IkReal x7691=((1.0)*gconst168*x7685);
IkReal x7692=((1.0)*gconst167*x7686);
evalcond[0]=(((r21*x7690))+((r22*x7686))+(((-1.0)*r20*x7691)));
evalcond[1]=(cj0+(((-1.0)*r00*x7691))+((r01*x7690))+((r02*x7686)));
evalcond[2]=((((-1.0)*r10*x7691))+sj0+((r12*x7686))+((r11*x7690)));
evalcond[3]=((((-1.0)*r21*x7692))+((cj2*sj1))+((cj1*sj2))+((r20*x7689))+((r22*x7685)));
evalcond[4]=((((-1.0)*sj0*x7688))+((sj0*x7687))+(((-1.0)*r01*x7692))+((r00*x7689))+((r02*x7685)));
evalcond[5]=(((r12*x7685))+((cj0*x7688))+((r10*x7689))+(((-1.0)*r11*x7692))+(((-1.0)*cj0*x7687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7693=IKPowWithIntegerCheck(IKsign((((gconst167*r00))+((gconst168*r01)))),-1);
if(!x7693.valid){
continue;
}
CheckValue<IkReal> x7694 = IKatan2WithCheck(IkReal(((((-1.0)*gconst168*r20*sj0))+((gconst167*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7693.value)))+(x7694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7695=IKcos(j4);
IkReal x7696=IKsin(j4);
IkReal x7697=(cj1*cj2);
IkReal x7698=(sj1*sj2);
IkReal x7699=(gconst168*x7696);
IkReal x7700=(gconst167*x7695);
IkReal x7701=((1.0)*gconst168*x7695);
IkReal x7702=((1.0)*gconst167*x7696);
evalcond[0]=(((r21*x7700))+(((-1.0)*r20*x7701))+((r22*x7696)));
evalcond[1]=(((r02*x7696))+cj0+(((-1.0)*r00*x7701))+((r01*x7700)));
evalcond[2]=(sj0+((r12*x7696))+((r11*x7700))+(((-1.0)*r10*x7701)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x7702))+((r20*x7699))+((r22*x7695)));
evalcond[4]=(((r02*x7695))+(((-1.0)*sj0*x7698))+((sj0*x7697))+(((-1.0)*r01*x7702))+((r00*x7699)));
evalcond[5]=(((r12*x7695))+((r10*x7699))+(((-1.0)*r11*x7702))+((cj0*x7698))+(((-1.0)*cj0*x7697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7703=((-1.0)*r21);
IkReal x7705 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7705)==0){
continue;
}
IkReal x7704=pow(x7705,-0.5);
CheckValue<IkReal> x7706 = IKatan2WithCheck(IkReal(x7703),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7706.valid){
continue;
}
IkReal gconst169=((3.14159265358979)+(((-1.0)*(x7706.value))));
IkReal gconst170=(x7703*x7704);
IkReal gconst171=((1.0)*r20*x7704);
CheckValue<IkReal> x7707 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7707.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7707.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7708=((-1.0)*r21);
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal(x7708),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
IkReal x7709=((1.0)*(x7711.value));
IkReal x7710=x7704;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7709)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7709)));
IkReal gconst170=(x7708*x7710);
IkReal gconst171=((1.0)*r20*x7710);
IkReal x7712=r22*r22;
IkReal x7713=((1.0)*x7712);
CheckValue<IkReal> x7717=IKPowWithIntegerCheck(((-1.0)+x7712),-1);
if(!x7717.valid){
continue;
}
IkReal x7714=x7717.value;
if((((1.0)+(((-1.0)*x7713)))) < -0.00001)
continue;
IkReal x7715=IKsqrt(((1.0)+(((-1.0)*x7713))));
IkReal x7716=(sj0*x7714*x7715);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7716+(((-1.0)*x7713*x7716))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7718=((-1.0)*r21);
CheckValue<IkReal> x7721 = IKatan2WithCheck(IkReal(x7718),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7721.valid){
continue;
}
IkReal x7719=((1.0)*(x7721.value));
IkReal x7720=x7704;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7719)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7719)));
IkReal gconst170=(x7718*x7720);
IkReal gconst171=((1.0)*r20*x7720);
IkReal x7722=r22*r22;
IkReal x7723=((1.0)*x7722);
CheckValue<IkReal> x7727=IKPowWithIntegerCheck(((-1.0)+x7722),-1);
if(!x7727.valid){
continue;
}
IkReal x7724=x7727.value;
if((((1.0)+(((-1.0)*x7723)))) < -0.00001)
continue;
IkReal x7725=IKsqrt(((1.0)+(((-1.0)*x7723))));
IkReal x7726=(cj0*x7724*x7725);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x7723*x7726))+x7726))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7728=((-1.0)*r21);
CheckValue<IkReal> x7731 = IKatan2WithCheck(IkReal(x7728),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7731.valid){
continue;
}
IkReal x7729=((1.0)*(x7731.value));
IkReal x7730=x7704;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst170;
cj5=gconst171;
j5=((3.14159265)+(((-1.0)*x7729)));
IkReal gconst169=((3.14159265358979)+(((-1.0)*x7729)));
IkReal gconst170=(x7728*x7730);
IkReal gconst171=((1.0)*r20*x7730);
IkReal x7732=r22*r22;
IkReal x7733=(cj0*r12);
IkReal x7734=((1.0)*r02*sj0);
CheckValue<IkReal> x7738=IKPowWithIntegerCheck(((-1.0)+x7732),-1);
if(!x7738.valid){
continue;
}
IkReal x7735=x7738.value;
if((((1.0)+(((-1.0)*x7732)))) < -0.00001)
continue;
IkReal x7736=IKsqrt(((1.0)+(((-1.0)*x7732))));
IkReal x7737=(r22*x7735*x7736);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x7734))+x7733)))+(IKabs((((x7733*x7737))+(((-1.0)*x7734*x7737))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7739=((1.0)*gconst170);
IkReal x7740=((1.0)*sj0);
CheckValue<IkReal> x7741=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst171*r21))+(((-1.0)*r20*x7739)))),-1);
if(!x7741.valid){
continue;
}
CheckValue<IkReal> x7742 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x7739))+((cj0*gconst171*r10))+((gconst170*r01*sj0))+(((-1.0)*gconst171*r00*x7740)))),IkReal(((((-1.0)*r02*x7740))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7741.value)))+(x7742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7743=IKcos(j4);
IkReal x7744=IKsin(j4);
IkReal x7745=(cj1*cj2);
IkReal x7746=(sj1*sj2);
IkReal x7747=(gconst171*x7744);
IkReal x7748=(gconst170*x7743);
IkReal x7749=((1.0)*gconst170*x7744);
IkReal x7750=((1.0)*gconst171*x7743);
evalcond[0]=(((r22*x7744))+(((-1.0)*r20*x7750))+((r21*x7748)));
evalcond[1]=(((r01*x7748))+cj0+((r02*x7744))+(((-1.0)*r00*x7750)));
evalcond[2]=(((r12*x7744))+sj0+(((-1.0)*r10*x7750))+((r11*x7748)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7747))+(((-1.0)*r21*x7749))+((r22*x7743)));
evalcond[4]=(((r00*x7747))+((sj0*x7745))+((r02*x7743))+(((-1.0)*r01*x7749))+(((-1.0)*sj0*x7746)));
evalcond[5]=(((r10*x7747))+((r12*x7743))+(((-1.0)*cj0*x7745))+(((-1.0)*r11*x7749))+((cj0*x7746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7751=((1.0)*gconst171);
CheckValue<IkReal> x7752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7751))+(((-1.0)*gconst170*r10)))),-1);
if(!x7752.valid){
continue;
}
CheckValue<IkReal> x7753 = IKatan2WithCheck(IkReal((((cj0*gconst170*r21))+(((-1.0)*cj0*r20*x7751)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7752.value)))+(x7753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7754=IKcos(j4);
IkReal x7755=IKsin(j4);
IkReal x7756=(cj1*cj2);
IkReal x7757=(sj1*sj2);
IkReal x7758=(gconst171*x7755);
IkReal x7759=(gconst170*x7754);
IkReal x7760=((1.0)*gconst170*x7755);
IkReal x7761=((1.0)*gconst171*x7754);
evalcond[0]=((((-1.0)*r20*x7761))+((r21*x7759))+((r22*x7755)));
evalcond[1]=(((r01*x7759))+cj0+(((-1.0)*r00*x7761))+((r02*x7755)));
evalcond[2]=(sj0+(((-1.0)*r10*x7761))+((r11*x7759))+((r12*x7755)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7758))+(((-1.0)*r21*x7760))+((r22*x7754)));
evalcond[4]=((((-1.0)*sj0*x7757))+((r00*x7758))+(((-1.0)*r01*x7760))+((sj0*x7756))+((r02*x7754)));
evalcond[5]=(((r10*x7758))+(((-1.0)*cj0*x7756))+((cj0*x7757))+(((-1.0)*r11*x7760))+((r12*x7754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7762 = IKatan2WithCheck(IkReal((((gconst170*r21*sj0))+(((-1.0)*gconst171*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7762.valid){
continue;
}
CheckValue<IkReal> x7763=IKPowWithIntegerCheck(IKsign((((gconst170*r00))+((gconst171*r01)))),-1);
if(!x7763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7762.value)+(((1.5707963267949)*(x7763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7764=IKcos(j4);
IkReal x7765=IKsin(j4);
IkReal x7766=(cj1*cj2);
IkReal x7767=(sj1*sj2);
IkReal x7768=(gconst171*x7765);
IkReal x7769=(gconst170*x7764);
IkReal x7770=((1.0)*gconst170*x7765);
IkReal x7771=((1.0)*gconst171*x7764);
evalcond[0]=(((r22*x7765))+(((-1.0)*r20*x7771))+((r21*x7769)));
evalcond[1]=(cj0+(((-1.0)*r00*x7771))+((r02*x7765))+((r01*x7769)));
evalcond[2]=(sj0+(((-1.0)*r10*x7771))+((r12*x7765))+((r11*x7769)));
evalcond[3]=(((r22*x7764))+((cj2*sj1))+((cj1*sj2))+((r20*x7768))+(((-1.0)*r21*x7770)));
evalcond[4]=((((-1.0)*r01*x7770))+((sj0*x7766))+((r02*x7764))+(((-1.0)*sj0*x7767))+((r00*x7768)));
evalcond[5]=((((-1.0)*cj0*x7766))+((cj0*x7767))+(((-1.0)*r11*x7770))+((r12*x7764))+((r10*x7768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7772=((-1.0)*r10);
IkReal x7774 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7774)==0){
continue;
}
IkReal x7773=pow(x7774,-0.5);
CheckValue<IkReal> x7775 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7772),IKFAST_ATAN2_MAGTHRESH);
if(!x7775.valid){
continue;
}
IkReal gconst172=((-1.0)*(x7775.value));
IkReal gconst173=(r11*x7773);
IkReal gconst174=(x7772*x7773);
CheckValue<IkReal> x7776 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7776.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7776.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7777=((-1.0)*r10);
IkReal x7778=x7773;
CheckValue<IkReal> x7780 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7777),IKFAST_ATAN2_MAGTHRESH);
if(!x7780.valid){
continue;
}
IkReal x7779=((-1.0)*(x7780.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst173;
cj5=gconst174;
j5=x7779;
IkReal gconst172=x7779;
IkReal gconst173=(r11*x7778);
IkReal gconst174=(x7777*x7778);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7781=((-1.0)*r10);
IkReal x7782=x7773;
CheckValue<IkReal> x7784 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7781),IKFAST_ATAN2_MAGTHRESH);
if(!x7784.valid){
continue;
}
IkReal x7783=((-1.0)*(x7784.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst173;
cj5=gconst174;
j5=x7783;
IkReal gconst172=x7783;
IkReal gconst173=(r11*x7782);
IkReal gconst174=(x7781*x7782);
IkReal x7785=r12*r12;
IkReal x7786=(r02*sj0);
IkReal x7787=((1.0)*x7785);
CheckValue<IkReal> x7791=IKPowWithIntegerCheck(((-1.0)+x7785),-1);
if(!x7791.valid){
continue;
}
IkReal x7788=x7791.value;
if((((1.0)+(((-1.0)*x7787)))) < -0.00001)
continue;
IkReal x7789=IKsqrt(((1.0)+(((-1.0)*x7787))));
IkReal x7790=(cj0*x7788*x7789);
j4eval[0]=((IKabs(((((-1.0)*x7786))+((cj0*r12)))))+(IKabs((((r12*x7786*x7788*x7789))+(((-1.0)*x7787*x7790))+x7790))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7792=((-1.0)*r10);
IkReal x7793=x7773;
CheckValue<IkReal> x7795 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7792),IKFAST_ATAN2_MAGTHRESH);
if(!x7795.valid){
continue;
}
IkReal x7794=((-1.0)*(x7795.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst173;
cj5=gconst174;
j5=x7794;
IkReal gconst172=x7794;
IkReal gconst173=(r11*x7793);
IkReal gconst174=(x7792*x7793);
IkReal x7796=((1.0)*r22);
IkReal x7797=(cj1*sj2);
IkReal x7798=(cj2*sj1);
IkReal x7799=x7773;
IkReal x7800=(r12*r22*x7799);
j4eval[0]=((IKabs((((x7798*x7800))+((x7797*x7800)))))+(IKabs(((((-1.0)*x7796*x7797))+(((-1.0)*x7796*x7798))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7801=(gconst174*r20);
IkReal x7802=(cj2*sj1);
IkReal x7803=(gconst173*r21);
IkReal x7804=((1.0)*cj1*sj2);
CheckValue<IkReal> x7805=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7801*x7803))+(x7803*x7803)+(x7801*x7801))),-1);
if(!x7805.valid){
continue;
}
CheckValue<IkReal> x7806 = IKatan2WithCheck(IkReal((((x7802*x7803))+(((-1.0)*x7801*x7804))+(((-1.0)*x7801*x7802))+((cj1*sj2*x7803)))),IkReal(((((-1.0)*r22*x7802))+(((-1.0)*r22*x7804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7805.value)))+(x7806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7807=IKcos(j4);
IkReal x7808=IKsin(j4);
IkReal x7809=(cj1*cj2);
IkReal x7810=(gconst174*r10);
IkReal x7811=(gconst173*r11);
IkReal x7812=(sj1*sj2);
IkReal x7813=(gconst173*r21);
IkReal x7814=(gconst173*r01);
IkReal x7815=(gconst174*r20);
IkReal x7816=(gconst174*r00);
IkReal x7817=((1.0)*x7807);
IkReal x7818=((1.0)*x7808);
evalcond[0]=(((r22*x7808))+((x7807*x7813))+(((-1.0)*x7815*x7817)));
evalcond[1]=(cj0+(((-1.0)*x7816*x7817))+((r02*x7808))+((x7807*x7814)));
evalcond[2]=(sj0+((r12*x7808))+(((-1.0)*x7810*x7817))+((x7807*x7811)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x7807))+((x7808*x7815))+(((-1.0)*x7813*x7818)));
evalcond[4]=((((-1.0)*sj0*x7812))+((sj0*x7809))+(((-1.0)*x7814*x7818))+((r02*x7807))+((x7808*x7816)));
evalcond[5]=((((-1.0)*x7811*x7818))+((r12*x7807))+(((-1.0)*cj0*x7809))+((x7808*x7810))+((cj0*x7812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7819=((1.0)*gconst173);
IkReal x7820=((1.0)*sj0);
CheckValue<IkReal> x7821 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x7819))+(((-1.0)*gconst174*r00*x7820))+((cj0*gconst174*r10))+((gconst173*r01*sj0)))),IkReal(((((-1.0)*r02*x7820))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7821.valid){
continue;
}
CheckValue<IkReal> x7822=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst174*r21))+(((-1.0)*r20*x7819)))),-1);
if(!x7822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7821.value)+(((1.5707963267949)*(x7822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7823=IKcos(j4);
IkReal x7824=IKsin(j4);
IkReal x7825=(cj1*cj2);
IkReal x7826=(gconst174*r10);
IkReal x7827=(gconst173*r11);
IkReal x7828=(sj1*sj2);
IkReal x7829=(gconst173*r21);
IkReal x7830=(gconst173*r01);
IkReal x7831=(gconst174*r20);
IkReal x7832=(gconst174*r00);
IkReal x7833=((1.0)*x7823);
IkReal x7834=((1.0)*x7824);
evalcond[0]=((((-1.0)*x7831*x7833))+((x7823*x7829))+((r22*x7824)));
evalcond[1]=(cj0+((r02*x7824))+(((-1.0)*x7832*x7833))+((x7823*x7830)));
evalcond[2]=(sj0+((r12*x7824))+((x7823*x7827))+(((-1.0)*x7826*x7833)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7829*x7834))+((x7824*x7831))+((cj1*sj2))+((r22*x7823)));
evalcond[4]=(((x7824*x7832))+((r02*x7823))+((sj0*x7825))+(((-1.0)*x7830*x7834))+(((-1.0)*sj0*x7828)));
evalcond[5]=(((r12*x7823))+((cj0*x7828))+((x7824*x7826))+(((-1.0)*cj0*x7825))+(((-1.0)*x7827*x7834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7835=IKPowWithIntegerCheck(IKsign((((gconst174*r01))+((gconst173*r00)))),-1);
if(!x7835.valid){
continue;
}
CheckValue<IkReal> x7836 = IKatan2WithCheck(IkReal((((gconst173*r21*sj0))+(((-1.0)*gconst174*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7835.value)))+(x7836.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7837=IKcos(j4);
IkReal x7838=IKsin(j4);
IkReal x7839=(cj1*cj2);
IkReal x7840=(gconst174*r10);
IkReal x7841=(gconst173*r11);
IkReal x7842=(sj1*sj2);
IkReal x7843=(gconst173*r21);
IkReal x7844=(gconst173*r01);
IkReal x7845=(gconst174*r20);
IkReal x7846=(gconst174*r00);
IkReal x7847=((1.0)*x7837);
IkReal x7848=((1.0)*x7838);
evalcond[0]=((((-1.0)*x7845*x7847))+((x7837*x7843))+((r22*x7838)));
evalcond[1]=(cj0+(((-1.0)*x7846*x7847))+((x7837*x7844))+((r02*x7838)));
evalcond[2]=(((r12*x7838))+sj0+(((-1.0)*x7840*x7847))+((x7837*x7841)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7843*x7848))+((x7838*x7845))+((r22*x7837)));
evalcond[4]=((((-1.0)*x7844*x7848))+(((-1.0)*sj0*x7842))+((x7838*x7846))+((r02*x7837))+((sj0*x7839)));
evalcond[5]=(((r12*x7837))+((x7838*x7840))+((cj0*x7842))+(((-1.0)*x7841*x7848))+(((-1.0)*cj0*x7839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7849=((-1.0)*r11);
IkReal x7851 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7851)==0){
continue;
}
IkReal x7850=pow(x7851,-0.5);
CheckValue<IkReal> x7852 = IKatan2WithCheck(IkReal(x7849),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7852.valid){
continue;
}
IkReal gconst175=((3.14159265358979)+(((-1.0)*(x7852.value))));
IkReal gconst176=(x7849*x7850);
IkReal gconst177=((1.0)*r10*x7850);
CheckValue<IkReal> x7853 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7853.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7853.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7854=((-1.0)*r11);
CheckValue<IkReal> x7857 = IKatan2WithCheck(IkReal(x7854),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7857.valid){
continue;
}
IkReal x7855=((1.0)*(x7857.value));
IkReal x7856=x7850;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst176;
cj5=gconst177;
j5=((3.14159265)+(((-1.0)*x7855)));
IkReal gconst175=((3.14159265358979)+(((-1.0)*x7855)));
IkReal gconst176=(x7854*x7856);
IkReal gconst177=((1.0)*r10*x7856);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7858=((-1.0)*r11);
CheckValue<IkReal> x7861 = IKatan2WithCheck(IkReal(x7858),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7861.valid){
continue;
}
IkReal x7859=((1.0)*(x7861.value));
IkReal x7860=x7850;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst176;
cj5=gconst177;
j5=((3.14159265)+(((-1.0)*x7859)));
IkReal gconst175=((3.14159265358979)+(((-1.0)*x7859)));
IkReal gconst176=(x7858*x7860);
IkReal gconst177=((1.0)*r10*x7860);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7862=((1.0)*sj0);
IkReal x7863=((1.0)*gconst176);
CheckValue<IkReal> x7864 = IKatan2WithCheck(IkReal(((((-1.0)*gconst177*r00*x7862))+((gconst176*r01*sj0))+((cj0*gconst177*r10))+(((-1.0)*cj0*r11*x7863)))),IkReal(((((-1.0)*r02*x7862))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7864.valid){
continue;
}
CheckValue<IkReal> x7865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7863))+(((-1.0)*gconst177*r21)))),-1);
if(!x7865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7864.value)+(((1.5707963267949)*(x7865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7866=IKcos(j4);
IkReal x7867=IKsin(j4);
IkReal x7868=(cj1*cj2);
IkReal x7869=(sj1*sj2);
IkReal x7870=(gconst176*x7866);
IkReal x7871=(gconst177*x7867);
IkReal x7872=((1.0)*gconst177*x7866);
IkReal x7873=((1.0)*gconst176*x7867);
evalcond[0]=(((r22*x7867))+(((-1.0)*r20*x7872))+((r21*x7870)));
evalcond[1]=(cj0+(((-1.0)*r00*x7872))+((r01*x7870))+((r02*x7867)));
evalcond[2]=(sj0+((r11*x7870))+((r12*x7867))+(((-1.0)*r10*x7872)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7871))+((r22*x7866))+(((-1.0)*r21*x7873)));
evalcond[4]=((((-1.0)*r01*x7873))+((r00*x7871))+((sj0*x7868))+((r02*x7866))+(((-1.0)*sj0*x7869)));
evalcond[5]=(((cj0*x7869))+((r10*x7871))+((r12*x7866))+(((-1.0)*cj0*x7868))+(((-1.0)*r11*x7873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7874=((1.0)*gconst177);
CheckValue<IkReal> x7875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7874))+(((-1.0)*gconst176*r10)))),-1);
if(!x7875.valid){
continue;
}
CheckValue<IkReal> x7876 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x7874))+((cj0*gconst176*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7875.value)))+(x7876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7877=IKcos(j4);
IkReal x7878=IKsin(j4);
IkReal x7879=(cj1*cj2);
IkReal x7880=(sj1*sj2);
IkReal x7881=(gconst176*x7877);
IkReal x7882=(gconst177*x7878);
IkReal x7883=((1.0)*gconst177*x7877);
IkReal x7884=((1.0)*gconst176*x7878);
evalcond[0]=(((r21*x7881))+((r22*x7878))+(((-1.0)*r20*x7883)));
evalcond[1]=(cj0+(((-1.0)*r00*x7883))+((r01*x7881))+((r02*x7878)));
evalcond[2]=(sj0+(((-1.0)*r10*x7883))+((r12*x7878))+((r11*x7881)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7882))+(((-1.0)*r21*x7884))+((r22*x7877)));
evalcond[4]=((((-1.0)*r01*x7884))+((r00*x7882))+((sj0*x7879))+(((-1.0)*sj0*x7880))+((r02*x7877)));
evalcond[5]=(((cj0*x7880))+((r10*x7882))+((r12*x7877))+(((-1.0)*cj0*x7879))+(((-1.0)*r11*x7884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7885=IKPowWithIntegerCheck(IKsign((((gconst177*r01))+((gconst176*r00)))),-1);
if(!x7885.valid){
continue;
}
CheckValue<IkReal> x7886 = IKatan2WithCheck(IkReal((((gconst176*r21*sj0))+(((-1.0)*gconst177*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7885.value)))+(x7886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7887=IKcos(j4);
IkReal x7888=IKsin(j4);
IkReal x7889=(cj1*cj2);
IkReal x7890=(sj1*sj2);
IkReal x7891=(gconst176*x7887);
IkReal x7892=(gconst177*x7888);
IkReal x7893=((1.0)*gconst177*x7887);
IkReal x7894=((1.0)*gconst176*x7888);
evalcond[0]=(((r21*x7891))+(((-1.0)*r20*x7893))+((r22*x7888)));
evalcond[1]=(cj0+((r01*x7891))+(((-1.0)*r00*x7893))+((r02*x7888)));
evalcond[2]=(sj0+((r12*x7888))+(((-1.0)*r10*x7893))+((r11*x7891)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x7894))+((cj1*sj2))+((r22*x7887))+((r20*x7892)));
evalcond[4]=((((-1.0)*sj0*x7890))+((sj0*x7889))+(((-1.0)*r01*x7894))+((r02*x7887))+((r00*x7892)));
evalcond[5]=((((-1.0)*r11*x7894))+((r12*x7887))+(((-1.0)*cj0*x7889))+((cj0*x7890))+((r10*x7892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7895=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7895;
j4eval[1]=IKsign(x7895);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7896=((1.0)*cj5);
IkReal x7897=((((-1.0)*r21*x7896))+(((-1.0)*r20*sj5)));
j4eval[0]=x7897;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7896))))));
j4eval[2]=IKsign(x7897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7898=cj5*cj5;
IkReal x7899=r11*r11;
IkReal x7900=(cj5*r10);
IkReal x7901=(r11*sj5);
IkReal x7902=((((2.0)*x7900*x7901))+(((-1.0)*(r12*r12)))+((x7898*x7899))+(((-1.0)*x7898*(r10*r10)))+(((-1.0)*x7899)));
j4eval[0]=x7902;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7900))+x7901))));
j4eval[2]=IKsign(x7902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7903=cj5*cj5;
IkReal x7904=r11*r11;
IkReal x7905=(cj5*r10);
IkReal x7906=(r11*sj5);
CheckValue<IkReal> x7907 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7905))+x7906)),IKFAST_ATAN2_MAGTHRESH);
if(!x7907.valid){
continue;
}
CheckValue<IkReal> x7908=IKPowWithIntegerCheck(IKsign((((x7903*x7904))+(((-1.0)*x7904))+(((-1.0)*(r12*r12)))+(((2.0)*x7905*x7906))+(((-1.0)*x7903*(r10*r10))))),-1);
if(!x7908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7907.value)+(((1.5707963267949)*(x7908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7909=IKcos(j4);
IkReal x7910=IKsin(j4);
IkReal x7911=(cj5*r00);
IkReal x7912=((1.0)*x7909);
IkReal x7913=(sj5*x7909);
IkReal x7914=(cj5*x7910);
IkReal x7915=((1.0)*sj5*x7910);
evalcond[0]=(((r22*x7910))+((r21*x7913))+(((-1.0)*cj5*r20*x7912)));
evalcond[1]=((((-1.0)*x7911*x7912))+((r02*x7910))+((r01*x7913)));
evalcond[2]=(((r10*x7914))+(((-1.0)*r11*x7915))+((r12*x7909)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x7912))+((r12*x7910))+((r11*x7913)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x7914))+(((-1.0)*r21*x7915))+((r22*x7909)));
evalcond[5]=(((r02*x7909))+(((-1.0)*sj1*sj2))+((x7910*x7911))+((cj1*cj2))+(((-1.0)*r01*x7915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7916=((1.0)*cj5);
CheckValue<IkReal> x7917 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x7916)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7917.valid){
continue;
}
CheckValue<IkReal> x7918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7916))+(((-1.0)*r20*sj5)))),-1);
if(!x7918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7917.value)+(((1.5707963267949)*(x7918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7919=IKcos(j4);
IkReal x7920=IKsin(j4);
IkReal x7921=(cj5*r00);
IkReal x7922=((1.0)*x7919);
IkReal x7923=(sj5*x7919);
IkReal x7924=(cj5*x7920);
IkReal x7925=((1.0)*sj5*x7920);
evalcond[0]=((((-1.0)*cj5*r20*x7922))+((r22*x7920))+((r21*x7923)));
evalcond[1]=((((-1.0)*x7921*x7922))+((r02*x7920))+((r01*x7923)));
evalcond[2]=(((r10*x7924))+((r12*x7919))+(((-1.0)*r11*x7925)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x7922))+((r12*x7920))+((r11*x7923)));
evalcond[4]=(((r22*x7919))+((cj2*sj1))+((cj1*sj2))+((r20*x7924))+(((-1.0)*r21*x7925)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x7920*x7921))+((r02*x7919))+((cj1*cj2))+(((-1.0)*r01*x7925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7926=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7926.valid){
continue;
}
CheckValue<IkReal> x7927 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7926.value)))+(x7927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7928=IKcos(j4);
IkReal x7929=IKsin(j4);
IkReal x7930=(cj5*r00);
IkReal x7931=((1.0)*x7928);
IkReal x7932=(sj5*x7928);
IkReal x7933=(cj5*x7929);
IkReal x7934=((1.0)*sj5*x7929);
evalcond[0]=(((r22*x7929))+((r21*x7932))+(((-1.0)*cj5*r20*x7931)));
evalcond[1]=(((r02*x7929))+(((-1.0)*x7930*x7931))+((r01*x7932)));
evalcond[2]=(((r12*x7928))+(((-1.0)*r11*x7934))+((r10*x7933)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x7931))+((r11*x7932))+((r12*x7929)));
evalcond[4]=(((cj2*sj1))+((r22*x7928))+((r20*x7933))+((cj1*sj2))+(((-1.0)*r21*x7934)));
evalcond[5]=((((-1.0)*r01*x7934))+(((-1.0)*sj1*sj2))+((r02*x7928))+((x7929*x7930))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7935=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7935;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x7935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7936=((1.0)*cj5);
IkReal x7937=((((-1.0)*r01*x7936))+(((-1.0)*r00*sj5)));
j4eval[0]=x7937;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7936)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7938=cj5*cj5;
IkReal x7939=r11*r11;
IkReal x7940=(r11*sj5);
IkReal x7941=(cj5*r10);
IkReal x7942=((r12*r12)+(((-2.0)*x7940*x7941))+(((-1.0)*x7938*x7939))+x7939+((x7938*(r10*r10))));
j4eval[0]=x7942;
j4eval[1]=((IKabs(r12))+(IKabs((x7940+(((-1.0)*x7941))))));
j4eval[2]=IKsign(x7942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7943=cj5*cj5;
IkReal x7944=r11*r11;
IkReal x7945=(cj5*r10);
IkReal x7946=(r11*sj5);
CheckValue<IkReal> x7947 = IKatan2WithCheck(IkReal(r12),IkReal((x7946+(((-1.0)*x7945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7947.valid){
continue;
}
CheckValue<IkReal> x7948=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7943*(r10*r10)))+(((-2.0)*x7945*x7946))+x7944+(((-1.0)*x7943*x7944)))),-1);
if(!x7948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7947.value)+(((1.5707963267949)*(x7948.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7949=IKcos(j4);
IkReal x7950=IKsin(j4);
IkReal x7951=(cj5*r00);
IkReal x7952=((1.0)*x7949);
IkReal x7953=(sj5*x7949);
IkReal x7954=(cj5*x7950);
IkReal x7955=((1.0)*sj5*x7950);
evalcond[0]=((((-1.0)*cj5*r20*x7952))+((r22*x7950))+((r21*x7953)));
evalcond[1]=(((r01*x7953))+((r02*x7950))+(((-1.0)*x7951*x7952)));
evalcond[2]=(((r12*x7949))+((r10*x7954))+(((-1.0)*r11*x7955)));
evalcond[3]=((-1.0)+((r12*x7950))+(((-1.0)*cj5*r10*x7952))+((r11*x7953)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x7954))+(((-1.0)*r21*x7955))+((r22*x7949)));
evalcond[5]=(((r02*x7949))+((x7950*x7951))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x7955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7956=((1.0)*cj5);
CheckValue<IkReal> x7957=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7956)))),-1);
if(!x7957.valid){
continue;
}
CheckValue<IkReal> x7958 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x7956)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7957.value)))+(x7958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7959=IKcos(j4);
IkReal x7960=IKsin(j4);
IkReal x7961=(cj5*r00);
IkReal x7962=((1.0)*x7959);
IkReal x7963=(sj5*x7959);
IkReal x7964=(cj5*x7960);
IkReal x7965=((1.0)*sj5*x7960);
evalcond[0]=(((r21*x7963))+(((-1.0)*cj5*r20*x7962))+((r22*x7960)));
evalcond[1]=(((r01*x7963))+((r02*x7960))+(((-1.0)*x7961*x7962)));
evalcond[2]=(((r12*x7959))+(((-1.0)*r11*x7965))+((r10*x7964)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x7962))+((r11*x7963))+((r12*x7960)));
evalcond[4]=(((cj2*sj1))+((r22*x7959))+((cj1*sj2))+((r20*x7964))+(((-1.0)*r21*x7965)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7960*x7961))+((r02*x7959))+(((-1.0)*r01*x7965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7966=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7966.valid){
continue;
}
CheckValue<IkReal> x7967 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7966.value)))+(x7967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7968=IKcos(j4);
IkReal x7969=IKsin(j4);
IkReal x7970=(cj5*r00);
IkReal x7971=((1.0)*x7968);
IkReal x7972=(sj5*x7968);
IkReal x7973=(cj5*x7969);
IkReal x7974=((1.0)*sj5*x7969);
evalcond[0]=((((-1.0)*cj5*r20*x7971))+((r22*x7969))+((r21*x7972)));
evalcond[1]=(((r01*x7972))+((r02*x7969))+(((-1.0)*x7970*x7971)));
evalcond[2]=(((r12*x7968))+(((-1.0)*r11*x7974))+((r10*x7973)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x7971))+((r11*x7972))+((r12*x7969)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x7973))+(((-1.0)*r21*x7974))+((r22*x7968)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7969*x7970))+((r02*x7968))+(((-1.0)*r01*x7974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7976 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7976)==0){
continue;
}
IkReal x7975=pow(x7976,-0.5);
CheckValue<IkReal> x7977 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7977.valid){
continue;
}
IkReal gconst178=((-1.0)*(x7977.value));
IkReal gconst179=((-1.0)*r01*x7975);
IkReal gconst180=(r00*x7975);
CheckValue<IkReal> x7978 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7978.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7978.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7981 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7981.valid){
continue;
}
IkReal x7979=((-1.0)*(x7981.value));
IkReal x7980=x7975;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst179;
cj5=gconst180;
j5=x7979;
IkReal gconst178=x7979;
IkReal gconst179=((-1.0)*r01*x7980);
IkReal gconst180=(r00*x7980);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7984 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7984.valid){
continue;
}
IkReal x7982=((-1.0)*(x7984.value));
IkReal x7983=x7975;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst179;
cj5=gconst180;
j5=x7982;
IkReal gconst178=x7982;
IkReal gconst179=((-1.0)*r01*x7983);
IkReal gconst180=(r00*x7983);
IkReal x7985=r02*r02;
IkReal x7986=((1.0)*sj0);
IkReal x7987=(cj0*r12);
CheckValue<IkReal> x7991=IKPowWithIntegerCheck(((-1.0)+x7985),-1);
if(!x7991.valid){
continue;
}
IkReal x7988=x7991.value;
if((((1.0)+(((-1.0)*x7985)))) < -0.00001)
continue;
IkReal x7989=IKsqrt(((1.0)+(((-1.0)*x7985))));
IkReal x7990=(x7988*x7989);
j4eval[0]=((IKabs((x7987+(((-1.0)*r02*x7986)))))+(IKabs((((r02*x7987*x7990))+(((-1.0)*x7985*x7986*x7990))+((sj0*x7990))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7994 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7994.valid){
continue;
}
IkReal x7992=((-1.0)*(x7994.value));
IkReal x7993=x7975;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst179;
cj5=gconst180;
j5=x7992;
IkReal gconst178=x7992;
IkReal gconst179=((-1.0)*r01*x7993);
IkReal gconst180=(r00*x7993);
IkReal x7995=r02*r02;
CheckValue<IkReal> x8001=IKPowWithIntegerCheck(((-1.0)+x7995),-1);
if(!x8001.valid){
continue;
}
IkReal x7996=x8001.value;
IkReal x7997=((1.0)*cj1*r22*sj2);
IkReal x7998=((1.0)*cj2*r22*sj1);
if((((1.0)+(((-1.0)*x7995)))) < -0.00001)
continue;
IkReal x7999=IKsqrt(((1.0)+(((-1.0)*x7995))));
IkReal x8000=(r02*x7996*x7999);
j4eval[0]=((IKabs(((((-1.0)*x7998*x8000))+(((-1.0)*x7997*x8000)))))+(IKabs(((((-1.0)*x7997))+(((-1.0)*x7998))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8002=(gconst180*r20);
IkReal x8003=(gconst179*r21);
IkReal x8004=(cj2*sj1);
IkReal x8005=((1.0)*cj1*sj2);
CheckValue<IkReal> x8006=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8002*x8003))+(x8003*x8003)+(x8002*x8002))),-1);
if(!x8006.valid){
continue;
}
CheckValue<IkReal> x8007 = IKatan2WithCheck(IkReal(((((-1.0)*x8002*x8004))+(((-1.0)*x8002*x8005))+((cj1*sj2*x8003))+((x8003*x8004)))),IkReal(((((-1.0)*r22*x8004))+(((-1.0)*r22*x8005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8006.value)))+(x8007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8008=IKcos(j4);
IkReal x8009=IKsin(j4);
IkReal x8010=(cj1*cj2);
IkReal x8011=(sj1*sj2);
IkReal x8012=(gconst180*x8009);
IkReal x8013=(gconst179*x8008);
IkReal x8014=((1.0)*gconst179*x8009);
IkReal x8015=((1.0)*gconst180*x8008);
evalcond[0]=((((-1.0)*r20*x8015))+((r22*x8009))+((r21*x8013)));
evalcond[1]=((((-1.0)*r00*x8015))+cj0+((r01*x8013))+((r02*x8009)));
evalcond[2]=(sj0+((r12*x8009))+((r11*x8013))+(((-1.0)*r10*x8015)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8014))+((r22*x8008))+((r20*x8012)));
evalcond[4]=((((-1.0)*r01*x8014))+((r02*x8008))+((r00*x8012))+((sj0*x8010))+(((-1.0)*sj0*x8011)));
evalcond[5]=(((cj0*x8011))+((r12*x8008))+(((-1.0)*cj0*x8010))+((r10*x8012))+(((-1.0)*r11*x8014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8016=((1.0)*sj0);
IkReal x8017=((1.0)*gconst179);
CheckValue<IkReal> x8018=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst180*r21))+(((-1.0)*r20*x8017)))),-1);
if(!x8018.valid){
continue;
}
CheckValue<IkReal> x8019 = IKatan2WithCheck(IkReal((((gconst179*r01*sj0))+((cj0*gconst180*r10))+(((-1.0)*gconst180*r00*x8016))+(((-1.0)*cj0*r11*x8017)))),IkReal(((((-1.0)*r02*x8016))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8018.value)))+(x8019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8020=IKcos(j4);
IkReal x8021=IKsin(j4);
IkReal x8022=(cj1*cj2);
IkReal x8023=(sj1*sj2);
IkReal x8024=(gconst180*x8021);
IkReal x8025=(gconst179*x8020);
IkReal x8026=((1.0)*gconst179*x8021);
IkReal x8027=((1.0)*gconst180*x8020);
evalcond[0]=((((-1.0)*r20*x8027))+((r21*x8025))+((r22*x8021)));
evalcond[1]=(cj0+((r02*x8021))+(((-1.0)*r00*x8027))+((r01*x8025)));
evalcond[2]=(sj0+((r12*x8021))+((r11*x8025))+(((-1.0)*r10*x8027)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8026))+((r20*x8024))+((r22*x8020)));
evalcond[4]=((((-1.0)*sj0*x8023))+((sj0*x8022))+((r02*x8020))+((r00*x8024))+(((-1.0)*r01*x8026)));
evalcond[5]=(((r10*x8024))+(((-1.0)*cj0*x8022))+(((-1.0)*r11*x8026))+((cj0*x8023))+((r12*x8020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8028=((1.0)*gconst180);
CheckValue<IkReal> x8029 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x8028))+((cj0*gconst179*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8029.valid){
continue;
}
CheckValue<IkReal> x8030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8028))+(((-1.0)*gconst179*r10)))),-1);
if(!x8030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8029.value)+(((1.5707963267949)*(x8030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8031=IKcos(j4);
IkReal x8032=IKsin(j4);
IkReal x8033=(cj1*cj2);
IkReal x8034=(sj1*sj2);
IkReal x8035=(gconst180*x8032);
IkReal x8036=(gconst179*x8031);
IkReal x8037=((1.0)*gconst179*x8032);
IkReal x8038=((1.0)*gconst180*x8031);
evalcond[0]=((((-1.0)*r20*x8038))+((r21*x8036))+((r22*x8032)));
evalcond[1]=(cj0+((r02*x8032))+((r01*x8036))+(((-1.0)*r00*x8038)));
evalcond[2]=(sj0+((r12*x8032))+(((-1.0)*r10*x8038))+((r11*x8036)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8037))+((r20*x8035))+((r22*x8031)));
evalcond[4]=((((-1.0)*sj0*x8034))+((sj0*x8033))+((r02*x8031))+(((-1.0)*r01*x8037))+((r00*x8035)));
evalcond[5]=((((-1.0)*r11*x8037))+(((-1.0)*cj0*x8033))+((r10*x8035))+((cj0*x8034))+((r12*x8031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8040 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8040)==0){
continue;
}
IkReal x8039=pow(x8040,-0.5);
CheckValue<IkReal> x8041 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8041.valid){
continue;
}
IkReal gconst181=((3.14159265358979)+(((-1.0)*(x8041.value))));
IkReal gconst182=((1.0)*r01*x8039);
IkReal gconst183=((-1.0)*r00*x8039);
CheckValue<IkReal> x8042 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8042.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8042.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x8045 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8045.valid){
continue;
}
IkReal x8043=((1.0)*(x8045.value));
IkReal x8044=x8039;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst182;
cj5=gconst183;
j5=((3.14159265)+(((-1.0)*x8043)));
IkReal gconst181=((3.14159265358979)+(((-1.0)*x8043)));
IkReal gconst182=((1.0)*r01*x8044);
IkReal gconst183=((-1.0)*r00*x8044);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x8048 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8048.valid){
continue;
}
IkReal x8046=((1.0)*(x8048.value));
IkReal x8047=x8039;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst182;
cj5=gconst183;
j5=((3.14159265)+(((-1.0)*x8046)));
IkReal gconst181=((3.14159265358979)+(((-1.0)*x8046)));
IkReal gconst182=((1.0)*r01*x8047);
IkReal gconst183=((-1.0)*r00*x8047);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8049=((1.0)*sj0);
IkReal x8050=((1.0)*gconst182);
CheckValue<IkReal> x8051=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst183*r21))+(((-1.0)*r20*x8050)))),-1);
if(!x8051.valid){
continue;
}
CheckValue<IkReal> x8052 = IKatan2WithCheck(IkReal((((cj0*gconst183*r10))+(((-1.0)*cj0*r11*x8050))+(((-1.0)*gconst183*r00*x8049))+((gconst182*r01*sj0)))),IkReal(((((-1.0)*r02*x8049))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8051.value)))+(x8052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8053=IKcos(j4);
IkReal x8054=IKsin(j4);
IkReal x8055=(sj1*sj2);
IkReal x8056=(cj1*cj2);
IkReal x8057=(gconst183*x8054);
IkReal x8058=(gconst182*x8053);
IkReal x8059=((1.0)*gconst182*x8054);
IkReal x8060=((1.0)*gconst183*x8053);
evalcond[0]=(((r21*x8058))+(((-1.0)*r20*x8060))+((r22*x8054)));
evalcond[1]=(cj0+((r02*x8054))+(((-1.0)*r00*x8060))+((r01*x8058)));
evalcond[2]=(sj0+(((-1.0)*r10*x8060))+((r11*x8058))+((r12*x8054)));
evalcond[3]=(((cj2*sj1))+((r20*x8057))+((cj1*sj2))+(((-1.0)*r21*x8059))+((r22*x8053)));
evalcond[4]=(((r00*x8057))+(((-1.0)*sj0*x8055))+((r02*x8053))+((sj0*x8056))+(((-1.0)*r01*x8059)));
evalcond[5]=((((-1.0)*cj0*x8056))+((r10*x8057))+((cj0*x8055))+((r12*x8053))+(((-1.0)*r11*x8059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8061=((1.0)*gconst183);
CheckValue<IkReal> x8062=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst182*r10))+(((-1.0)*r11*x8061)))),-1);
if(!x8062.valid){
continue;
}
CheckValue<IkReal> x8063 = IKatan2WithCheck(IkReal((((cj0*gconst182*r21))+(((-1.0)*cj0*r20*x8061)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8062.value)))+(x8063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8064=IKcos(j4);
IkReal x8065=IKsin(j4);
IkReal x8066=(sj1*sj2);
IkReal x8067=(cj1*cj2);
IkReal x8068=(gconst183*x8065);
IkReal x8069=(gconst182*x8064);
IkReal x8070=((1.0)*gconst182*x8065);
IkReal x8071=((1.0)*gconst183*x8064);
evalcond[0]=(((r21*x8069))+((r22*x8065))+(((-1.0)*r20*x8071)));
evalcond[1]=(cj0+((r01*x8069))+(((-1.0)*r00*x8071))+((r02*x8065)));
evalcond[2]=(sj0+((r11*x8069))+(((-1.0)*r10*x8071))+((r12*x8065)));
evalcond[3]=(((cj2*sj1))+((r22*x8064))+((cj1*sj2))+((r20*x8068))+(((-1.0)*r21*x8070)));
evalcond[4]=((((-1.0)*sj0*x8066))+((r00*x8068))+(((-1.0)*r01*x8070))+((r02*x8064))+((sj0*x8067)));
evalcond[5]=(((r10*x8068))+((cj0*x8066))+(((-1.0)*cj0*x8067))+(((-1.0)*r11*x8070))+((r12*x8064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8072=IKPowWithIntegerCheck(IKsign((((gconst183*r01))+((gconst182*r00)))),-1);
if(!x8072.valid){
continue;
}
CheckValue<IkReal> x8073 = IKatan2WithCheck(IkReal(((((-1.0)*gconst183*r20*sj0))+((gconst182*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8072.value)))+(x8073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8074=IKcos(j4);
IkReal x8075=IKsin(j4);
IkReal x8076=(sj1*sj2);
IkReal x8077=(cj1*cj2);
IkReal x8078=(gconst183*x8075);
IkReal x8079=(gconst182*x8074);
IkReal x8080=((1.0)*gconst182*x8075);
IkReal x8081=((1.0)*gconst183*x8074);
evalcond[0]=(((r22*x8075))+((r21*x8079))+(((-1.0)*r20*x8081)));
evalcond[1]=(((r02*x8075))+cj0+(((-1.0)*r00*x8081))+((r01*x8079)));
evalcond[2]=(sj0+((r12*x8075))+((r11*x8079))+(((-1.0)*r10*x8081)));
evalcond[3]=(((cj2*sj1))+((r20*x8078))+((cj1*sj2))+((r22*x8074))+(((-1.0)*r21*x8080)));
evalcond[4]=(((r02*x8074))+(((-1.0)*r01*x8080))+((r00*x8078))+((sj0*x8077))+(((-1.0)*sj0*x8076)));
evalcond[5]=(((r10*x8078))+((cj0*x8076))+((r12*x8074))+(((-1.0)*cj0*x8077))+(((-1.0)*r11*x8080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8082=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8082;
j4eval[1]=IKsign(x8082);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8083=((1.0)*cj5);
IkReal x8084=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8083)));
j4eval[0]=x8084;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8083))))));
j4eval[2]=IKsign(x8084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8085=cj5*cj5;
IkReal x8086=r01*r01;
IkReal x8087=(r01*sj5);
IkReal x8088=(cj5*r00);
IkReal x8089=((((-1.0)*x8086))+(((-1.0)*(r02*r02)))+((x8085*x8086))+(((-1.0)*x8085*(r00*r00)))+(((2.0)*x8087*x8088)));
j4eval[0]=x8089;
j4eval[1]=IKsign(x8089);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8088))+x8087))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8090=cj5*cj5;
IkReal x8091=r01*r01;
IkReal x8092=(r01*sj5);
IkReal x8093=(cj5*r00);
CheckValue<IkReal> x8094 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8093))+x8092)),IKFAST_ATAN2_MAGTHRESH);
if(!x8094.valid){
continue;
}
CheckValue<IkReal> x8095=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8090*(r00*r00)))+(((-1.0)*x8091))+(((-1.0)*(r02*r02)))+((x8090*x8091))+(((2.0)*x8092*x8093)))),-1);
if(!x8095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8094.value)+(((1.5707963267949)*(x8095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8096=IKcos(j4);
IkReal x8097=IKsin(j4);
IkReal x8098=(cj5*r00);
IkReal x8099=((1.0)*x8096);
IkReal x8100=(sj5*x8096);
IkReal x8101=(cj5*x8097);
IkReal x8102=((1.0)*sj5*x8097);
evalcond[0]=(((r22*x8097))+(((-1.0)*cj5*r20*x8099))+((r21*x8100)));
evalcond[1]=((((-1.0)*cj5*r10*x8099))+((r11*x8100))+((r12*x8097)));
evalcond[2]=(((x8097*x8098))+(((-1.0)*r01*x8102))+((r02*x8096)));
evalcond[3]=((1.0)+((r01*x8100))+(((-1.0)*x8098*x8099))+((r02*x8097)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8096))+((r20*x8101))+(((-1.0)*r21*x8102)));
evalcond[5]=((((-1.0)*r11*x8102))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8101))+((r12*x8096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8103=((1.0)*cj5);
CheckValue<IkReal> x8104 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x8103)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8104.valid){
continue;
}
CheckValue<IkReal> x8105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8103))+(((-1.0)*r10*sj5)))),-1);
if(!x8105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8104.value)+(((1.5707963267949)*(x8105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8106=IKcos(j4);
IkReal x8107=IKsin(j4);
IkReal x8108=(cj5*r00);
IkReal x8109=((1.0)*x8106);
IkReal x8110=(sj5*x8106);
IkReal x8111=(cj5*x8107);
IkReal x8112=((1.0)*sj5*x8107);
evalcond[0]=(((r21*x8110))+(((-1.0)*cj5*r20*x8109))+((r22*x8107)));
evalcond[1]=((((-1.0)*cj5*r10*x8109))+((r12*x8107))+((r11*x8110)));
evalcond[2]=(((r02*x8106))+((x8107*x8108))+(((-1.0)*r01*x8112)));
evalcond[3]=((1.0)+(((-1.0)*x8108*x8109))+((r02*x8107))+((r01*x8110)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x8112))+((cj1*sj2))+((r20*x8111))+((r22*x8106)));
evalcond[5]=((((-1.0)*r11*x8112))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x8111))+((r12*x8106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8113=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8113.valid){
continue;
}
CheckValue<IkReal> x8114 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8113.value)))+(x8114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8115=IKcos(j4);
IkReal x8116=IKsin(j4);
IkReal x8117=(cj5*r00);
IkReal x8118=((1.0)*x8115);
IkReal x8119=(sj5*x8115);
IkReal x8120=(cj5*x8116);
IkReal x8121=((1.0)*sj5*x8116);
evalcond[0]=((((-1.0)*cj5*r20*x8118))+((r21*x8119))+((r22*x8116)));
evalcond[1]=(((r12*x8116))+(((-1.0)*cj5*r10*x8118))+((r11*x8119)));
evalcond[2]=(((r02*x8115))+((x8116*x8117))+(((-1.0)*r01*x8121)));
evalcond[3]=((1.0)+((r02*x8116))+(((-1.0)*x8117*x8118))+((r01*x8119)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x8121))+((cj1*sj2))+((r20*x8120))+((r22*x8115)));
evalcond[5]=((((-1.0)*r11*x8121))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x8115))+((r10*x8120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8122=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8122;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8123=((1.0)*cj5);
IkReal x8124=((((-1.0)*r21*x8123))+(((-1.0)*r20*sj5)));
j4eval[0]=x8124;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x8123)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8125=cj5*cj5;
IkReal x8126=r01*r01;
IkReal x8127=(cj5*r00);
IkReal x8128=(r01*sj5);
IkReal x8129=(((x8125*(r00*r00)))+(r02*r02)+(((-2.0)*x8127*x8128))+x8126+(((-1.0)*x8125*x8126)));
j4eval[0]=x8129;
j4eval[1]=IKsign(x8129);
j4eval[2]=((IKabs(r02))+(IKabs((x8128+(((-1.0)*x8127))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8130=cj5*cj5;
IkReal x8131=r01*r01;
IkReal x8132=(r01*sj5);
IkReal x8133=(cj5*r00);
CheckValue<IkReal> x8134 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8133))+x8132)),IKFAST_ATAN2_MAGTHRESH);
if(!x8134.valid){
continue;
}
CheckValue<IkReal> x8135=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8130*x8131))+(((-2.0)*x8132*x8133))+((x8130*(r00*r00)))+(r02*r02)+x8131)),-1);
if(!x8135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8134.value)+(((1.5707963267949)*(x8135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8136=IKcos(j4);
IkReal x8137=IKsin(j4);
IkReal x8138=(cj5*r00);
IkReal x8139=((1.0)*x8136);
IkReal x8140=(sj5*x8136);
IkReal x8141=(cj5*x8137);
IkReal x8142=((1.0)*sj5*x8137);
evalcond[0]=(((r22*x8137))+(((-1.0)*cj5*r20*x8139))+((r21*x8140)));
evalcond[1]=((((-1.0)*cj5*r10*x8139))+((r12*x8137))+((r11*x8140)));
evalcond[2]=((((-1.0)*r01*x8142))+((r02*x8136))+((x8137*x8138)));
evalcond[3]=((-1.0)+((r02*x8137))+((r01*x8140))+(((-1.0)*x8138*x8139)));
evalcond[4]=(((r22*x8136))+((cj2*sj1))+(((-1.0)*r21*x8142))+((r20*x8141))+((cj1*sj2)));
evalcond[5]=(((r12*x8136))+(((-1.0)*sj1*sj2))+((r10*x8141))+((cj1*cj2))+(((-1.0)*r11*x8142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8143=((1.0)*cj5);
CheckValue<IkReal> x8144 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x8143))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8144.valid){
continue;
}
CheckValue<IkReal> x8145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8143))+(((-1.0)*r20*sj5)))),-1);
if(!x8145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8144.value)+(((1.5707963267949)*(x8145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8146=IKcos(j4);
IkReal x8147=IKsin(j4);
IkReal x8148=(cj5*r00);
IkReal x8149=((1.0)*x8146);
IkReal x8150=(sj5*x8146);
IkReal x8151=(cj5*x8147);
IkReal x8152=((1.0)*sj5*x8147);
evalcond[0]=(((r22*x8147))+(((-1.0)*cj5*r20*x8149))+((r21*x8150)));
evalcond[1]=((((-1.0)*cj5*r10*x8149))+((r11*x8150))+((r12*x8147)));
evalcond[2]=(((x8147*x8148))+((r02*x8146))+(((-1.0)*r01*x8152)));
evalcond[3]=((-1.0)+((r01*x8150))+(((-1.0)*x8148*x8149))+((r02*x8147)));
evalcond[4]=(((cj2*sj1))+((r20*x8151))+((cj1*sj2))+((r22*x8146))+(((-1.0)*r21*x8152)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r10*x8151))+((cj1*cj2))+((r12*x8146))+(((-1.0)*r11*x8152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8153 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8153.valid){
continue;
}
CheckValue<IkReal> x8154=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8153.value)+(((1.5707963267949)*(x8154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8155=IKcos(j4);
IkReal x8156=IKsin(j4);
IkReal x8157=(cj5*r00);
IkReal x8158=((1.0)*x8155);
IkReal x8159=(sj5*x8155);
IkReal x8160=(cj5*x8156);
IkReal x8161=((1.0)*sj5*x8156);
evalcond[0]=((((-1.0)*cj5*r20*x8158))+((r22*x8156))+((r21*x8159)));
evalcond[1]=((((-1.0)*cj5*r10*x8158))+((r12*x8156))+((r11*x8159)));
evalcond[2]=(((x8156*x8157))+(((-1.0)*r01*x8161))+((r02*x8155)));
evalcond[3]=((-1.0)+((r01*x8159))+(((-1.0)*x8157*x8158))+((r02*x8156)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8155))+(((-1.0)*r21*x8161))+((r20*x8160)));
evalcond[5]=(((r10*x8160))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*x8161))+((r12*x8155))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8162=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8162);
rxp1_1=(px*r21);
rxp1_2=(r11*x8162);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8163=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8163);
rxp1_1=(px*r21);
rxp1_2=(r11*x8163);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8164=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8164);
rxp1_1=(px*r21);
rxp1_2=(r11*x8164);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8167=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8167.valid){
continue;
}
IkReal x8165=x8167.value;
IkReal x8166=(cj0*x8165);
sj4array[0]=((((-1.0)*sj1*sj2*x8166))+((cj1*cj2*x8166)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8168=IKcos(j4);
IkReal x8169=IKsin(j4);
IkReal x8170=(r21*sj5);
IkReal x8171=((1.0)*cj5*x8168);
evalcond[0]=(r02*x8168);
evalcond[1]=(cj0+((r02*x8169)));
evalcond[2]=(((x8168*x8170))+(((-1.0)*r20*x8171)));
evalcond[3]=(((r11*sj5*x8168))+(((-1.0)*r10*x8171)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((cj5*r20*x8169))+(((-1.0)*x8169*x8170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8174=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8174.valid){
continue;
}
IkReal x8172=x8174.value;
IkReal x8173=((1.0)*x8172);
sj4array[0]=((((-1.0)*cj2*sj1*x8173))+(((-1.0)*cj1*sj2*x8173)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8175=IKcos(j4);
IkReal x8176=IKsin(j4);
IkReal x8177=(r11*sj5);
IkReal x8178=((1.0)*cj5*x8175);
evalcond[0]=(r02*x8175);
evalcond[1]=(((r02*x8176))+cj0);
evalcond[2]=((((-1.0)*r20*x8178))+((r21*sj5*x8175)));
evalcond[3]=((((-1.0)*r10*x8178))+((x8175*x8177)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((cj5*r10*x8176))+(((-1.0)*x8176*x8177))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8179=IKPowWithIntegerCheck(r02,-1);
if(!x8179.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x8179.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8180=IKcos(j4);
IkReal x8181=IKsin(j4);
IkReal x8182=(cj5*r10);
IkReal x8183=(cj5*r20);
IkReal x8184=((1.0)*x8180);
IkReal x8185=(sj5*x8180);
IkReal x8186=((1.0)*sj5*x8181);
evalcond[0]=(r02*x8180);
evalcond[1]=(((r21*x8185))+(((-1.0)*x8183*x8184)));
evalcond[2]=(((r11*x8185))+(((-1.0)*x8182*x8184)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8186))+((x8181*x8183)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*r11*x8186))+((cj0*sj1*sj2))+((x8181*x8182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8187=((1.0)*sj0);
IkReal x8188=((1.0)*sj5);
CheckValue<IkReal> x8189=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8188))+(((-1.0)*cj5*r21)))),-1);
if(!x8189.valid){
continue;
}
CheckValue<IkReal> x8190 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r00*x8187))+((cj0*cj5*r10))+(((-1.0)*cj0*r11*x8188))+((r01*sj0*sj5)))),IkReal(((((-1.0)*r02*x8187))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8189.value)))+(x8190.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8191=IKcos(j4);
IkReal x8192=IKsin(j4);
IkReal x8193=(cj5*r00);
IkReal x8194=(cj1*cj2);
IkReal x8195=(sj1*sj2);
IkReal x8196=((1.0)*x8191);
IkReal x8197=(sj5*x8191);
IkReal x8198=(cj5*x8192);
IkReal x8199=((1.0)*sj5*x8192);
evalcond[0]=(((r21*x8197))+(((-1.0)*cj5*r20*x8196))+((r22*x8192)));
evalcond[1]=(cj0+((r01*x8197))+(((-1.0)*x8193*x8196))+((r02*x8192)));
evalcond[2]=(((r12*x8192))+((r11*x8197))+sj0+(((-1.0)*cj5*r10*x8196)));
evalcond[3]=(((r20*x8198))+((cj2*sj1))+((r22*x8191))+((cj1*sj2))+(((-1.0)*r21*x8199)));
evalcond[4]=((((-1.0)*r01*x8199))+((sj0*x8194))+((r02*x8191))+((x8192*x8193))+(((-1.0)*sj0*x8195)));
evalcond[5]=(((r10*x8198))+((r12*x8191))+(((-1.0)*cj0*x8194))+(((-1.0)*r11*x8199))+((cj0*x8195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8200=((1.0)*cj5);
CheckValue<IkReal> x8201=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8200)))),-1);
if(!x8201.valid){
continue;
}
CheckValue<IkReal> x8202 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8200)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8201.value)))+(x8202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8203=IKcos(j4);
IkReal x8204=IKsin(j4);
IkReal x8205=(cj5*r00);
IkReal x8206=(cj1*cj2);
IkReal x8207=(sj1*sj2);
IkReal x8208=((1.0)*x8203);
IkReal x8209=(sj5*x8203);
IkReal x8210=(cj5*x8204);
IkReal x8211=((1.0)*sj5*x8204);
evalcond[0]=(((r22*x8204))+(((-1.0)*cj5*r20*x8208))+((r21*x8209)));
evalcond[1]=(((r02*x8204))+(((-1.0)*x8205*x8208))+cj0+((r01*x8209)));
evalcond[2]=(((r11*x8209))+(((-1.0)*cj5*r10*x8208))+sj0+((r12*x8204)));
evalcond[3]=(((cj2*sj1))+((r22*x8203))+((cj1*sj2))+((r20*x8210))+(((-1.0)*r21*x8211)));
evalcond[4]=(((r02*x8203))+(((-1.0)*r01*x8211))+((sj0*x8206))+(((-1.0)*sj0*x8207))+((x8204*x8205)));
evalcond[5]=(((r12*x8203))+((cj0*x8207))+(((-1.0)*cj0*x8206))+(((-1.0)*r11*x8211))+((r10*x8210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8212 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8212.valid){
continue;
}
CheckValue<IkReal> x8213=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8212.value)+(((1.5707963267949)*(x8213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8214=IKcos(j4);
IkReal x8215=IKsin(j4);
IkReal x8216=(cj5*r00);
IkReal x8217=(cj1*cj2);
IkReal x8218=(sj1*sj2);
IkReal x8219=((1.0)*x8214);
IkReal x8220=(sj5*x8214);
IkReal x8221=(cj5*x8215);
IkReal x8222=((1.0)*sj5*x8215);
evalcond[0]=(((r22*x8215))+(((-1.0)*cj5*r20*x8219))+((r21*x8220)));
evalcond[1]=(cj0+((r01*x8220))+(((-1.0)*x8216*x8219))+((r02*x8215)));
evalcond[2]=(sj0+(((-1.0)*cj5*r10*x8219))+((r11*x8220))+((r12*x8215)));
evalcond[3]=(((cj2*sj1))+((r20*x8221))+((cj1*sj2))+((r22*x8214))+(((-1.0)*r21*x8222)));
evalcond[4]=((((-1.0)*sj0*x8218))+((x8215*x8216))+((r02*x8214))+(((-1.0)*r01*x8222))+((sj0*x8217)));
evalcond[5]=(((r12*x8214))+((cj0*x8218))+(((-1.0)*cj0*x8217))+((r10*x8221))+(((-1.0)*r11*x8222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8223=cj1*cj1;
IkReal x8224=cj2*cj2;
IkReal x8225=((0.4)*cj1);
IkReal x8226=(r10*sj5);
IkReal x8227=((20340.0)*sj1);
IkReal x8228=((0.0226)*cj1);
IkReal x8229=(r00*sj5);
IkReal x8230=(cj2*sj1);
IkReal x8231=((360000.0)*py);
IkReal x8232=((0.072)*cj1);
IkReal x8233=(cj1*sj2);
IkReal x8234=(cj5*r01);
IkReal x8235=((360000.0)*px);
IkReal x8236=(cj5*r11);
IkReal x8237=((64800.0)*x8223);
IkReal x8238=((20340.0)*cj5*x8233);
CheckValue<IkReal> x8239=IKPowWithIntegerCheck(IKsign(((-45169.0)+(((-64800.0)*cj2))+(((-4.0e-8)*x8223))+(((-32400.0)*x8224))+(((0.072)*sj2*x8223))+(((-64800.0)*sj1*x8233))+((x8224*x8237))+((x8230*x8232))+(((-64800.0)*x8230*x8233))+((cj2*x8237))+((sj1*x8232)))),-1);
if(!x8239.valid){
continue;
}
CheckValue<IkReal> x8240 = IKatan2WithCheck(IkReal(((((-1.0)*x8228*x8234))+(((-12769.0)*x8226))+(((20340.0)*x8233*x8234))+(((-12769.0)*x8236))+((cj2*x8227*x8234))+(((20340.0)*x8229*x8233))+((cj2*x8227*x8229))+(((-1.0)*px*x8225))+((x8230*x8235))+((x8227*x8234))+((x8233*x8235))+((x8227*x8229))+(((-226000.0)*py))+((sj1*x8235))+(((-1.0)*x8228*x8229)))),IkReal(((((-20340.0)*x8233*x8236))+(((-1.0)*cj2*x8227*x8236))+((x8228*x8236))+(((-1.0)*sj1*x8231))+(((-12769.0)*x8229))+(((-12769.0)*x8234))+((py*x8225))+(((-20340.0)*x8226*x8233))+(((-1.0)*x8231*x8233))+(((-1.0)*x8226*x8227))+((x8226*x8228))+(((-1.0)*cj2*x8226*x8227))+(((-1.0)*x8227*x8236))+(((-226000.0)*px))+(((-1.0)*x8230*x8231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8240.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8239.value)))+(x8240.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8241=IKsin(j0);
IkReal x8242=IKcos(j0);
IkReal x8243=((0.0565)*sj5);
IkReal x8244=((0.0565)*cj5);
IkReal x8245=((0.09)*sj2);
IkReal x8246=((0.09)*sj1);
IkReal x8247=(cj1*x8242);
IkReal x8248=(cj1*x8241);
evalcond[0]=((((-1.0)*r00*x8243))+(((-1.0)*x8245*x8248))+(((-1.0)*x8241*x8246))+(((0.0565)*x8242))+(((-1.0)*px))+(((-1.0)*cj2*x8241*x8246))+(((1.0e-7)*x8248))+(((-1.0)*r01*x8244)));
evalcond[1]=(((cj2*x8242*x8246))+(((0.0565)*x8241))+(((-1.0)*py))+(((-1.0)*r10*x8243))+((x8242*x8246))+(((-1.0)*r11*x8244))+((x8245*x8247))+(((-1.0e-7)*x8247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8249=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8249;
j4eval[1]=IKsign(x8249);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8250=((1.0)*cj5);
IkReal x8251=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8250)));
j4eval[0]=x8251;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x8250))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8252=((1.0)*sj0);
IkReal x8253=((1.0)*sj5);
IkReal x8254=((((-1.0)*r20*x8253))+(((-1.0)*cj5*r21)));
j4eval[0]=x8254;
j4eval[1]=((IKabs((((cj0*cj5*r10))+(((-1.0)*cj0*r11*x8253))+((r01*sj0*sj5))+(((-1.0)*cj5*r00*x8252)))))+(IKabs((((cj0*r12))+(((-1.0)*r02*x8252))))));
j4eval[2]=IKsign(x8254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8255=((-1.0)*r20);
IkReal x8257 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8257)==0){
continue;
}
IkReal x8256=pow(x8257,-0.5);
CheckValue<IkReal> x8258 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8255),IKFAST_ATAN2_MAGTHRESH);
if(!x8258.valid){
continue;
}
IkReal gconst34=((-1.0)*(x8258.value));
IkReal gconst35=(r21*x8256);
IkReal gconst36=(x8255*x8256);
CheckValue<IkReal> x8259 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8259.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8259.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8260=((-1.0)*r20);
IkReal x8261=x8256;
CheckValue<IkReal> x8263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8260),IKFAST_ATAN2_MAGTHRESH);
if(!x8263.valid){
continue;
}
IkReal x8262=((-1.0)*(x8263.value));
sj5=gconst35;
cj5=gconst36;
j5=x8262;
IkReal gconst34=x8262;
IkReal gconst35=(r21*x8261);
IkReal gconst36=(x8260*x8261);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8264=((-1.0)*r20);
IkReal x8265=x8256;
CheckValue<IkReal> x8267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8264),IKFAST_ATAN2_MAGTHRESH);
if(!x8267.valid){
continue;
}
IkReal x8266=((-1.0)*(x8267.value));
sj5=gconst35;
cj5=gconst36;
j5=x8266;
IkReal gconst34=x8266;
IkReal gconst35=(r21*x8265);
IkReal gconst36=(x8264*x8265);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8268=((-1.0)*r20);
IkReal x8269=x8256;
CheckValue<IkReal> x8271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8268),IKFAST_ATAN2_MAGTHRESH);
if(!x8271.valid){
continue;
}
IkReal x8270=((-1.0)*(x8271.value));
sj5=gconst35;
cj5=gconst36;
j5=x8270;
IkReal gconst34=x8270;
IkReal gconst35=(r21*x8269);
IkReal gconst36=(x8268*x8269);
IkReal x8272=r22*r22;
CheckValue<IkReal> x8276=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8272))),-1);
if(!x8276.valid){
continue;
}
IkReal x8273=x8276.value;
IkReal x8274=(cj3*x8273);
IkReal x8275=((((2.0)*x8274*(r20*r20)*(r21*r21)))+((x8274*(r20*r20*r20*r20)))+((x8274*(r21*r21*r21*r21)))+((cj3*x8272)));
j4eval[0]=x8275;
j4eval[1]=IKsign(x8275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8277=((-1.0)*r20);
IkReal x8278=x8256;
CheckValue<IkReal> x8280 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8277),IKFAST_ATAN2_MAGTHRESH);
if(!x8280.valid){
continue;
}
IkReal x8279=((-1.0)*(x8280.value));
sj5=gconst35;
cj5=gconst36;
j5=x8279;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst34=x8279;
IkReal gconst35=(r21*x8278);
IkReal gconst36=(x8277*x8278);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8281=((-1.0)*r20);
IkReal x8282=x8256;
CheckValue<IkReal> x8284 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8281),IKFAST_ATAN2_MAGTHRESH);
if(!x8284.valid){
continue;
}
IkReal x8283=((-1.0)*(x8284.value));
sj5=gconst35;
cj5=gconst36;
j5=x8283;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst34=x8283;
IkReal gconst35=(r21*x8282);
IkReal gconst36=(x8281*x8282);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8285=((-1.0)*r20);
IkReal x8286=x8256;
CheckValue<IkReal> x8288 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8285),IKFAST_ATAN2_MAGTHRESH);
if(!x8288.valid){
continue;
}
IkReal x8287=((-1.0)*(x8288.value));
sj5=gconst35;
cj5=gconst36;
j5=x8287;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst34=x8287;
IkReal gconst35=(r21*x8286);
IkReal gconst36=(x8285*x8286);
IkReal x8289=((1.0)*(r22*r22));
CheckValue<IkReal> x8293=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8289))),-1);
if(!x8293.valid){
continue;
}
IkReal x8290=x8293.value;
IkReal x8291=((1.0)*x8290);
IkReal x8292=((((-1.0)*x8291*(r21*r21*r21*r21)))+(((-1.0)*x8291*(r20*r20*r20*r20)))+(((-1.0)*x8289))+(((-2.0)*x8290*(r20*r20)*(r21*r21))));
j4eval[0]=x8292;
j4eval[1]=IKsign(x8292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8294=((-1.0)*r20);
IkReal x8295=x8256;
CheckValue<IkReal> x8297 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8294),IKFAST_ATAN2_MAGTHRESH);
if(!x8297.valid){
continue;
}
IkReal x8296=((-1.0)*(x8297.value));
sj5=gconst35;
cj5=gconst36;
j5=x8296;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x8296;
IkReal gconst35=(r21*x8295);
IkReal gconst36=(x8294*x8295);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8298=((-1.0)*r20);
IkReal x8299=x8256;
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8298),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
IkReal x8300=((-1.0)*(x8301.value));
sj5=gconst35;
cj5=gconst36;
j5=x8300;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x8300;
IkReal gconst35=(r21*x8299);
IkReal gconst36=(x8298*x8299);
IkReal x8302=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8306=IKPowWithIntegerCheck(x8302,-1);
if(!x8306.valid){
continue;
}
IkReal x8303=x8306.value;
IkReal x8304=((1.0)*x8303);
IkReal x8305=((((-1.0)*x8304*(r11*r11)*(r21*r21)))+(((-1.0)*x8304*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8303)));
j4eval[0]=x8305;
j4eval[1]=IKsign(x8305);
j4eval[2]=r12;
j4eval[3]=x8302;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8307=((-1.0)*r20);
IkReal x8308=x8256;
CheckValue<IkReal> x8310 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8307),IKFAST_ATAN2_MAGTHRESH);
if(!x8310.valid){
continue;
}
IkReal x8309=((-1.0)*(x8310.value));
sj5=gconst35;
cj5=gconst36;
j5=x8309;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x8309;
IkReal gconst35=(r21*x8308);
IkReal gconst36=(x8307*x8308);
IkReal x8311=r22*r22;
IkReal x8312=((1.0)+(((-1.0)*x8311)));
IkReal x8313=(r02*sj1*sj2);
IkReal x8314=(cj1*cj2*r02);
CheckValue<IkReal> x8321=IKPowWithIntegerCheck(x8312,-1);
if(!x8321.valid){
continue;
}
IkReal x8315=x8321.value;
CheckValue<IkReal> x8322=IKPowWithIntegerCheck(((-1.0)+x8311),-1);
if(!x8322.valid){
continue;
}
IkReal x8316=x8322.value;
IkReal x8317=((1.0)*x8315);
if((x8312) < -0.00001)
continue;
IkReal x8318=IKsqrt(x8312);
IkReal x8319=(r22*x8316*x8318);
IkReal x8320=((((-1.0)*x8317*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8315))+(((-1.0)*x8317*(r01*r01)*(r21*r21))));
j4eval[0]=x8320;
j4eval[1]=IKsign(x8320);
j4eval[2]=((IKabs((x8313+(((-1.0)*x8314)))))+(IKabs((((x8314*x8319))+(((-1.0)*x8313*x8319))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8323=(sj1*sj2);
IkReal x8324=(gconst35*r01);
IkReal x8325=(gconst36*r00);
IkReal x8326=((1.0)*cj1*cj2);
CheckValue<IkReal> x8327=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8325*x8325)))+(((-1.0)*(x8324*x8324)))+(((2.0)*x8324*x8325))+(((-1.0)*(r02*r02))))),-1);
if(!x8327.valid){
continue;
}
CheckValue<IkReal> x8328 = IKatan2WithCheck(IkReal((((x8323*x8325))+((cj1*cj2*x8324))+(((-1.0)*x8323*x8324))+(((-1.0)*x8325*x8326)))),IkReal((((r02*x8323))+(((-1.0)*r02*x8326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8327.value)))+(x8328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8329=IKcos(j4);
IkReal x8330=IKsin(j4);
IkReal x8331=(gconst36*r20);
IkReal x8332=(gconst36*r00);
IkReal x8333=(gconst36*r10);
IkReal x8334=((1.0)*x8329);
IkReal x8335=(gconst35*x8329);
IkReal x8336=(gconst35*x8330);
IkReal x8337=((1.0)*x8330);
evalcond[0]=(((r21*x8335))+((r22*x8330))+(((-1.0)*x8331*x8334)));
evalcond[1]=((((-1.0)*x8332*x8334))+((r01*x8335))+((r02*x8330)));
evalcond[2]=((1.0)+((r12*x8330))+((r11*x8335))+(((-1.0)*x8333*x8334)));
evalcond[3]=((((-1.0)*r12*x8334))+((r11*x8336))+(((-1.0)*x8333*x8337)));
evalcond[4]=(((cj2*sj1))+((r21*x8336))+(((-1.0)*r22*x8334))+((cj1*sj2))+(((-1.0)*x8331*x8337)));
evalcond[5]=((((-1.0)*x8332*x8337))+(((-1.0)*sj1*sj2))+((r01*x8336))+(((-1.0)*r02*x8334))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8338=(gconst36*r10);
IkReal x8339=(gconst35*r11);
CheckValue<IkReal> x8340 = IKatan2WithCheck(IkReal(r12),IkReal((x8339+(((-1.0)*x8338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8340.valid){
continue;
}
CheckValue<IkReal> x8341=IKPowWithIntegerCheck(IKsign(((((2.0)*x8338*x8339))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8338*x8338)))+(((-1.0)*(x8339*x8339))))),-1);
if(!x8341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8340.value)+(((1.5707963267949)*(x8341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8342=IKcos(j4);
IkReal x8343=IKsin(j4);
IkReal x8344=(gconst36*r20);
IkReal x8345=(gconst36*r00);
IkReal x8346=(gconst36*r10);
IkReal x8347=((1.0)*x8342);
IkReal x8348=(gconst35*x8342);
IkReal x8349=(gconst35*x8343);
IkReal x8350=((1.0)*x8343);
evalcond[0]=(((r21*x8348))+((r22*x8343))+(((-1.0)*x8344*x8347)));
evalcond[1]=(((r01*x8348))+(((-1.0)*x8345*x8347))+((r02*x8343)));
evalcond[2]=((1.0)+((r12*x8343))+((r11*x8348))+(((-1.0)*x8346*x8347)));
evalcond[3]=((((-1.0)*x8346*x8350))+((r11*x8349))+(((-1.0)*r12*x8347)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8349))+(((-1.0)*r22*x8347))+(((-1.0)*x8344*x8350)));
evalcond[5]=(((r01*x8349))+(((-1.0)*r02*x8347))+(((-1.0)*sj1*sj2))+(((-1.0)*x8345*x8350))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8351 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r20))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8351.valid){
continue;
}
CheckValue<IkReal> x8352=IKPowWithIntegerCheck(IKsign((((gconst36*r01))+((gconst35*r00)))),-1);
if(!x8352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8351.value)+(((1.5707963267949)*(x8352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8353=IKcos(j4);
IkReal x8354=IKsin(j4);
IkReal x8355=(gconst36*r20);
IkReal x8356=(gconst36*r00);
IkReal x8357=(gconst36*r10);
IkReal x8358=((1.0)*x8353);
IkReal x8359=(gconst35*x8353);
IkReal x8360=(gconst35*x8354);
IkReal x8361=((1.0)*x8354);
evalcond[0]=(((r22*x8354))+((r21*x8359))+(((-1.0)*x8355*x8358)));
evalcond[1]=(((r02*x8354))+((r01*x8359))+(((-1.0)*x8356*x8358)));
evalcond[2]=((1.0)+(((-1.0)*x8357*x8358))+((r11*x8359))+((r12*x8354)));
evalcond[3]=((((-1.0)*x8357*x8361))+(((-1.0)*r12*x8358))+((r11*x8360)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8358))+((cj1*sj2))+((r21*x8360))+(((-1.0)*x8355*x8361)));
evalcond[5]=((((-1.0)*r02*x8358))+(((-1.0)*sj1*sj2))+((r01*x8360))+(((-1.0)*x8356*x8361))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8362=((-1.0)*r20);
IkReal x8363=x8256;
CheckValue<IkReal> x8365 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8362),IKFAST_ATAN2_MAGTHRESH);
if(!x8365.valid){
continue;
}
IkReal x8364=((-1.0)*(x8365.value));
sj5=gconst35;
cj5=gconst36;
j5=x8364;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x8364;
IkReal gconst35=(r21*x8363);
IkReal gconst36=(x8362*x8363);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8366=((-1.0)*r20);
IkReal x8367=x8256;
CheckValue<IkReal> x8369 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8366),IKFAST_ATAN2_MAGTHRESH);
if(!x8369.valid){
continue;
}
IkReal x8368=((-1.0)*(x8369.value));
sj5=gconst35;
cj5=gconst36;
j5=x8368;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x8368;
IkReal gconst35=(r21*x8367);
IkReal gconst36=(x8366*x8367);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8370=((-1.0)*r20);
IkReal x8371=x8256;
CheckValue<IkReal> x8373 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8370),IKFAST_ATAN2_MAGTHRESH);
if(!x8373.valid){
continue;
}
IkReal x8372=((-1.0)*(x8373.value));
sj5=gconst35;
cj5=gconst36;
j5=x8372;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x8372;
IkReal gconst35=(r21*x8371);
IkReal gconst36=(x8370*x8371);
IkReal x8374=r22*r22;
IkReal x8375=((1.0)+(((-1.0)*x8374)));
IkReal x8376=(r02*sj1*sj2);
IkReal x8377=(cj1*cj2*r02);
CheckValue<IkReal> x8384=IKPowWithIntegerCheck(x8375,-1);
if(!x8384.valid){
continue;
}
IkReal x8378=x8384.value;
CheckValue<IkReal> x8385=IKPowWithIntegerCheck(((-1.0)+x8374),-1);
if(!x8385.valid){
continue;
}
IkReal x8379=x8385.value;
IkReal x8380=((1.0)*x8378);
if((x8375) < -0.00001)
continue;
IkReal x8381=IKsqrt(x8375);
IkReal x8382=(r22*x8379*x8381);
IkReal x8383=((((-1.0)*x8380*(r00*r00)*(r20*r20)))+(((-1.0)*x8380*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8378)));
j4eval[0]=x8383;
j4eval[1]=IKsign(x8383);
j4eval[2]=((IKabs((((x8376*x8382))+(((-1.0)*x8377*x8382)))))+(IKabs((x8377+(((-1.0)*x8376))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8386=(cj1*cj2);
IkReal x8387=(gconst36*r00);
IkReal x8388=(gconst35*r01);
IkReal x8389=((1.0)*sj1*sj2);
CheckValue<IkReal> x8390=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x8387*x8388))+(((-1.0)*(x8387*x8387)))+(((-1.0)*(x8388*x8388))))),-1);
if(!x8390.valid){
continue;
}
CheckValue<IkReal> x8391 = IKatan2WithCheck(IkReal(((((-1.0)*x8387*x8389))+((sj1*sj2*x8388))+(((-1.0)*x8386*x8388))+((x8386*x8387)))),IkReal(((((-1.0)*r02*x8389))+((r02*x8386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8390.value)))+(x8391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8392=IKcos(j4);
IkReal x8393=IKsin(j4);
IkReal x8394=(gconst36*r20);
IkReal x8395=(gconst36*r00);
IkReal x8396=(gconst36*r10);
IkReal x8397=((1.0)*x8392);
IkReal x8398=(gconst35*x8392);
IkReal x8399=(gconst35*x8393);
IkReal x8400=((1.0)*x8393);
evalcond[0]=(((r22*x8393))+((r21*x8398))+(((-1.0)*x8394*x8397)));
evalcond[1]=((((-1.0)*x8395*x8397))+((r02*x8393))+((r01*x8398)));
evalcond[2]=((-1.0)+(((-1.0)*x8396*x8397))+((r12*x8393))+((r11*x8398)));
evalcond[3]=((((-1.0)*r12*x8397))+((r11*x8399))+(((-1.0)*x8396*x8400)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8399))+(((-1.0)*r22*x8397))+(((-1.0)*x8394*x8400)));
evalcond[5]=((((-1.0)*x8395*x8400))+(((-1.0)*r02*x8397))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8401=(gconst35*r11);
IkReal x8402=(gconst36*r10);
CheckValue<IkReal> x8403=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8401*x8402))+(x8402*x8402)+(x8401*x8401))),-1);
if(!x8403.valid){
continue;
}
CheckValue<IkReal> x8404 = IKatan2WithCheck(IkReal(r12),IkReal((x8401+(((-1.0)*x8402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8403.value)))+(x8404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8405=IKcos(j4);
IkReal x8406=IKsin(j4);
IkReal x8407=(gconst36*r20);
IkReal x8408=(gconst36*r00);
IkReal x8409=(gconst36*r10);
IkReal x8410=((1.0)*x8405);
IkReal x8411=(gconst35*x8405);
IkReal x8412=(gconst35*x8406);
IkReal x8413=((1.0)*x8406);
evalcond[0]=(((r22*x8406))+((r21*x8411))+(((-1.0)*x8407*x8410)));
evalcond[1]=((((-1.0)*x8408*x8410))+((r01*x8411))+((r02*x8406)));
evalcond[2]=((-1.0)+(((-1.0)*x8409*x8410))+((r12*x8406))+((r11*x8411)));
evalcond[3]=((((-1.0)*r12*x8410))+(((-1.0)*x8409*x8413))+((r11*x8412)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8412))+(((-1.0)*x8407*x8413))+(((-1.0)*r22*x8410)));
evalcond[5]=((((-1.0)*x8408*x8413))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8410))+((r01*x8412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8414=((1.0)*gconst36);
CheckValue<IkReal> x8415=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r00))+(((-1.0)*r01*x8414)))),-1);
if(!x8415.valid){
continue;
}
CheckValue<IkReal> x8416 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8414))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8415.value)))+(x8416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8417=IKcos(j4);
IkReal x8418=IKsin(j4);
IkReal x8419=(gconst36*r20);
IkReal x8420=(gconst36*r00);
IkReal x8421=(gconst36*r10);
IkReal x8422=((1.0)*x8417);
IkReal x8423=(gconst35*x8417);
IkReal x8424=(gconst35*x8418);
IkReal x8425=((1.0)*x8418);
evalcond[0]=(((r21*x8423))+(((-1.0)*x8419*x8422))+((r22*x8418)));
evalcond[1]=(((r02*x8418))+(((-1.0)*x8420*x8422))+((r01*x8423)));
evalcond[2]=((-1.0)+((r12*x8418))+(((-1.0)*x8421*x8422))+((r11*x8423)));
evalcond[3]=((((-1.0)*x8421*x8425))+((r11*x8424))+(((-1.0)*r12*x8422)));
evalcond[4]=(((cj2*sj1))+((r21*x8424))+((cj1*sj2))+(((-1.0)*r22*x8422))+(((-1.0)*x8419*x8425)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8420*x8425))+(((-1.0)*r02*x8422))+((r01*x8424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8426=((-1.0)*r20);
IkReal x8427=x8256;
CheckValue<IkReal> x8429 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8426),IKFAST_ATAN2_MAGTHRESH);
if(!x8429.valid){
continue;
}
IkReal x8428=((-1.0)*(x8429.value));
sj5=gconst35;
cj5=gconst36;
j5=x8428;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8428;
IkReal gconst35=(r21*x8427);
IkReal gconst36=(x8426*x8427);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8430=((-1.0)*r20);
IkReal x8431=x8256;
CheckValue<IkReal> x8433 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8430),IKFAST_ATAN2_MAGTHRESH);
if(!x8433.valid){
continue;
}
IkReal x8432=((-1.0)*(x8433.value));
sj5=gconst35;
cj5=gconst36;
j5=x8432;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8432;
IkReal gconst35=(r21*x8431);
IkReal gconst36=(x8430*x8431);
IkReal x8434=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8438=IKPowWithIntegerCheck(x8434,-1);
if(!x8438.valid){
continue;
}
IkReal x8435=x8438.value;
IkReal x8436=((1.0)*x8435);
IkReal x8437=((((-1.0)*x8436*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8436*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8435)));
j4eval[0]=x8437;
j4eval[1]=IKsign(x8437);
j4eval[2]=r02;
j4eval[3]=x8434;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8439=((-1.0)*r20);
IkReal x8440=x8256;
CheckValue<IkReal> x8442 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8439),IKFAST_ATAN2_MAGTHRESH);
if(!x8442.valid){
continue;
}
IkReal x8441=((-1.0)*(x8442.value));
sj5=gconst35;
cj5=gconst36;
j5=x8441;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8441;
IkReal gconst35=(r21*x8440);
IkReal gconst36=(x8439*x8440);
IkReal x8443=r22*r22;
IkReal x8444=((1.0)*r12);
IkReal x8445=(sj1*sj2);
IkReal x8446=(cj1*cj2);
IkReal x8447=((1.0)+(((-1.0)*x8443)));
CheckValue<IkReal> x8454=IKPowWithIntegerCheck(x8447,-1);
if(!x8454.valid){
continue;
}
IkReal x8448=x8454.value;
CheckValue<IkReal> x8455=IKPowWithIntegerCheck(((-1.0)+x8443),-1);
if(!x8455.valid){
continue;
}
IkReal x8449=x8455.value;
IkReal x8450=((1.0)*x8448);
if((x8447) < -0.00001)
continue;
IkReal x8451=IKsqrt(x8447);
IkReal x8452=(r22*x8449*x8451);
IkReal x8453=((((-1.0)*r12*x8444))+(((-2.0)*r10*r11*r20*r21*x8448))+(((-1.0)*x8450*(r11*r11)*(r21*r21)))+(((-1.0)*x8450*(r10*r10)*(r20*r20))));
j4eval[0]=x8453;
j4eval[1]=IKsign(x8453);
j4eval[2]=((IKabs((((r12*x8446))+(((-1.0)*x8444*x8445)))))+(IKabs((((r12*x8445*x8452))+(((-1.0)*x8444*x8446*x8452))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8456=(sj1*sj2);
IkReal x8457=(gconst35*r11);
IkReal x8458=(cj1*cj2);
IkReal x8459=(gconst36*r10);
CheckValue<IkReal> x8460=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8459*x8459)))+(((-1.0)*(x8457*x8457)))+(((2.0)*x8457*x8459))+(((-1.0)*(r12*r12))))),-1);
if(!x8460.valid){
continue;
}
CheckValue<IkReal> x8461 = IKatan2WithCheck(IkReal((((x8458*x8459))+((x8456*x8457))+(((-1.0)*x8457*x8458))+(((-1.0)*x8456*x8459)))),IkReal(((((-1.0)*r12*x8456))+((r12*x8458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8460.value)))+(x8461.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8462=IKcos(j4);
IkReal x8463=IKsin(j4);
IkReal x8464=(gconst36*r20);
IkReal x8465=(gconst36*r00);
IkReal x8466=(gconst36*r10);
IkReal x8467=((1.0)*x8462);
IkReal x8468=(gconst35*x8462);
IkReal x8469=(gconst35*x8463);
IkReal x8470=((1.0)*x8463);
evalcond[0]=(((r22*x8463))+((r21*x8468))+(((-1.0)*x8464*x8467)));
evalcond[1]=(((r12*x8463))+((r11*x8468))+(((-1.0)*x8466*x8467)));
evalcond[2]=((1.0)+((r01*x8468))+(((-1.0)*x8465*x8467))+((r02*x8463)));
evalcond[3]=(((r01*x8469))+(((-1.0)*r02*x8467))+(((-1.0)*x8465*x8470)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x8469))+(((-1.0)*r22*x8467))+(((-1.0)*x8464*x8470)));
evalcond[5]=(((r11*x8469))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8466*x8470))+(((-1.0)*r12*x8467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8471=(gconst35*r01);
IkReal x8472=(gconst36*r00);
CheckValue<IkReal> x8473=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8472*x8472)))+(((-1.0)*(r02*r02)))+(((2.0)*x8471*x8472))+(((-1.0)*(x8471*x8471))))),-1);
if(!x8473.valid){
continue;
}
CheckValue<IkReal> x8474 = IKatan2WithCheck(IkReal(r02),IkReal((x8471+(((-1.0)*x8472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8473.value)))+(x8474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8475=IKcos(j4);
IkReal x8476=IKsin(j4);
IkReal x8477=(gconst36*r20);
IkReal x8478=(gconst36*r00);
IkReal x8479=(gconst36*r10);
IkReal x8480=((1.0)*x8475);
IkReal x8481=(gconst35*x8475);
IkReal x8482=(gconst35*x8476);
IkReal x8483=((1.0)*x8476);
evalcond[0]=((((-1.0)*x8477*x8480))+((r22*x8476))+((r21*x8481)));
evalcond[1]=(((r12*x8476))+(((-1.0)*x8479*x8480))+((r11*x8481)));
evalcond[2]=((1.0)+((r01*x8481))+(((-1.0)*x8478*x8480))+((r02*x8476)));
evalcond[3]=(((r01*x8482))+(((-1.0)*r02*x8480))+(((-1.0)*x8478*x8483)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8477*x8483))+((cj1*sj2))+(((-1.0)*r22*x8480))+((r21*x8482)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8480))+(((-1.0)*x8479*x8483))+((r11*x8482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8484=((1.0)*gconst36);
CheckValue<IkReal> x8485=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r10))+(((-1.0)*r11*x8484)))),-1);
if(!x8485.valid){
continue;
}
CheckValue<IkReal> x8486 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8484))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8485.value)))+(x8486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8487=IKcos(j4);
IkReal x8488=IKsin(j4);
IkReal x8489=(gconst36*r20);
IkReal x8490=(gconst36*r00);
IkReal x8491=(gconst36*r10);
IkReal x8492=((1.0)*x8487);
IkReal x8493=(gconst35*x8487);
IkReal x8494=(gconst35*x8488);
IkReal x8495=((1.0)*x8488);
evalcond[0]=(((r22*x8488))+((r21*x8493))+(((-1.0)*x8489*x8492)));
evalcond[1]=((((-1.0)*x8491*x8492))+((r12*x8488))+((r11*x8493)));
evalcond[2]=((1.0)+(((-1.0)*x8490*x8492))+((r02*x8488))+((r01*x8493)));
evalcond[3]=((((-1.0)*r02*x8492))+(((-1.0)*x8490*x8495))+((r01*x8494)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8492))+((r21*x8494))+(((-1.0)*x8489*x8495)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8491*x8495))+(((-1.0)*r12*x8492))+((r11*x8494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8496=((-1.0)*r20);
IkReal x8497=x8256;
CheckValue<IkReal> x8499 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8496),IKFAST_ATAN2_MAGTHRESH);
if(!x8499.valid){
continue;
}
IkReal x8498=((-1.0)*(x8499.value));
sj5=gconst35;
cj5=gconst36;
j5=x8498;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8498;
IkReal gconst35=(r21*x8497);
IkReal gconst36=(x8496*x8497);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8500=((-1.0)*r20);
IkReal x8501=x8256;
CheckValue<IkReal> x8503 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8500),IKFAST_ATAN2_MAGTHRESH);
if(!x8503.valid){
continue;
}
IkReal x8502=((-1.0)*(x8503.value));
sj5=gconst35;
cj5=gconst36;
j5=x8502;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8502;
IkReal gconst35=(r21*x8501);
IkReal gconst36=(x8500*x8501);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8504=((-1.0)*r20);
IkReal x8505=x8256;
CheckValue<IkReal> x8507 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8504),IKFAST_ATAN2_MAGTHRESH);
if(!x8507.valid){
continue;
}
IkReal x8506=((-1.0)*(x8507.value));
sj5=gconst35;
cj5=gconst36;
j5=x8506;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8506;
IkReal gconst35=(r21*x8505);
IkReal gconst36=(x8504*x8505);
IkReal x8508=r22*r22;
IkReal x8509=((1.0)+(((-1.0)*x8508)));
IkReal x8510=(r12*sj1*sj2);
IkReal x8511=(cj1*cj2*r12);
CheckValue<IkReal> x8518=IKPowWithIntegerCheck(x8509,-1);
if(!x8518.valid){
continue;
}
IkReal x8512=x8518.value;
CheckValue<IkReal> x8519=IKPowWithIntegerCheck(((-1.0)+x8508),-1);
if(!x8519.valid){
continue;
}
IkReal x8513=x8519.value;
IkReal x8514=((1.0)*x8512);
if((x8509) < -0.00001)
continue;
IkReal x8515=IKsqrt(x8509);
IkReal x8516=(r22*x8513*x8515);
IkReal x8517=((((-1.0)*x8514*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8512))+(((-1.0)*(r12*r12)))+(((-1.0)*x8514*(r10*r10)*(r20*r20))));
j4eval[0]=x8517;
j4eval[1]=IKsign(x8517);
j4eval[2]=((IKabs(((((-1.0)*x8510*x8516))+((x8511*x8516)))))+(IKabs((x8510+(((-1.0)*x8511))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8520=(gconst36*r10);
IkReal x8521=(sj1*sj2);
IkReal x8522=(gconst35*r11);
IkReal x8523=((1.0)*cj1*cj2);
CheckValue<IkReal> x8524 = IKatan2WithCheck(IkReal((((x8520*x8521))+(((-1.0)*x8521*x8522))+((cj1*cj2*x8522))+(((-1.0)*x8520*x8523)))),IkReal((((r12*x8521))+(((-1.0)*r12*x8523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8524.valid){
continue;
}
CheckValue<IkReal> x8525=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8522*x8522)))+(((2.0)*x8520*x8522))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8520*x8520))))),-1);
if(!x8525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8524.value)+(((1.5707963267949)*(x8525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8526=IKcos(j4);
IkReal x8527=IKsin(j4);
IkReal x8528=(gconst36*r20);
IkReal x8529=(gconst36*r00);
IkReal x8530=(gconst36*r10);
IkReal x8531=((1.0)*x8526);
IkReal x8532=(gconst35*x8526);
IkReal x8533=(gconst35*x8527);
IkReal x8534=((1.0)*x8527);
evalcond[0]=(((r22*x8527))+((r21*x8532))+(((-1.0)*x8528*x8531)));
evalcond[1]=(((r12*x8527))+(((-1.0)*x8530*x8531))+((r11*x8532)));
evalcond[2]=((-1.0)+((r01*x8532))+((r02*x8527))+(((-1.0)*x8529*x8531)));
evalcond[3]=((((-1.0)*r02*x8531))+((r01*x8533))+(((-1.0)*x8529*x8534)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8531))+((cj1*sj2))+((r21*x8533))+(((-1.0)*x8528*x8534)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8531))+(((-1.0)*x8530*x8534))+((cj1*cj2))+((r11*x8533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8535=(gconst35*r01);
IkReal x8536=(gconst36*r00);
CheckValue<IkReal> x8537=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8535*x8536))+(x8535*x8535)+(x8536*x8536)+(r02*r02))),-1);
if(!x8537.valid){
continue;
}
CheckValue<IkReal> x8538 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8536))+x8535)),IKFAST_ATAN2_MAGTHRESH);
if(!x8538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8537.value)))+(x8538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8539=IKcos(j4);
IkReal x8540=IKsin(j4);
IkReal x8541=(gconst36*r20);
IkReal x8542=(gconst36*r00);
IkReal x8543=(gconst36*r10);
IkReal x8544=((1.0)*x8539);
IkReal x8545=(gconst35*x8539);
IkReal x8546=(gconst35*x8540);
IkReal x8547=((1.0)*x8540);
evalcond[0]=(((r21*x8545))+(((-1.0)*x8541*x8544))+((r22*x8540)));
evalcond[1]=((((-1.0)*x8543*x8544))+((r12*x8540))+((r11*x8545)));
evalcond[2]=((-1.0)+((r01*x8545))+(((-1.0)*x8542*x8544))+((r02*x8540)));
evalcond[3]=((((-1.0)*r02*x8544))+((r01*x8546))+(((-1.0)*x8542*x8547)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8544))+((r21*x8546))+(((-1.0)*x8541*x8547)));
evalcond[5]=((((-1.0)*x8543*x8547))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8544))+((cj1*cj2))+((r11*x8546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8548 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r20))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8548.valid){
continue;
}
CheckValue<IkReal> x8549=IKPowWithIntegerCheck(IKsign((((gconst36*r11))+((gconst35*r10)))),-1);
if(!x8549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8548.value)+(((1.5707963267949)*(x8549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8550=IKcos(j4);
IkReal x8551=IKsin(j4);
IkReal x8552=(gconst36*r20);
IkReal x8553=(gconst36*r00);
IkReal x8554=(gconst36*r10);
IkReal x8555=((1.0)*x8550);
IkReal x8556=(gconst35*x8550);
IkReal x8557=(gconst35*x8551);
IkReal x8558=((1.0)*x8551);
evalcond[0]=(((r21*x8556))+((r22*x8551))+(((-1.0)*x8552*x8555)));
evalcond[1]=(((r11*x8556))+((r12*x8551))+(((-1.0)*x8554*x8555)));
evalcond[2]=((-1.0)+((r01*x8556))+((r02*x8551))+(((-1.0)*x8553*x8555)));
evalcond[3]=(((r01*x8557))+(((-1.0)*x8553*x8558))+(((-1.0)*r02*x8555)));
evalcond[4]=(((r21*x8557))+((cj2*sj1))+(((-1.0)*r22*x8555))+((cj1*sj2))+(((-1.0)*x8552*x8558)));
evalcond[5]=((((-1.0)*r12*x8555))+((r11*x8557))+(((-1.0)*sj1*sj2))+(((-1.0)*x8554*x8558))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8559=((-1.0)*r20);
IkReal x8560=((-1.0)*px);
CheckValue<IkReal> x8562 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8559),IKFAST_ATAN2_MAGTHRESH);
if(!x8562.valid){
continue;
}
IkReal x8561=((-1.0)*(x8562.value));
sj5=gconst35;
cj5=gconst36;
j5=x8561;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8560);
rxp1_1=(px*r21);
rxp1_2=(r11*x8560);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x8561;
IkReal gconst35=r21;
IkReal gconst36=x8559;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8563=((-1.0)*r20);
IkReal x8564=((-1.0)*px);
CheckValue<IkReal> x8566 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8563),IKFAST_ATAN2_MAGTHRESH);
if(!x8566.valid){
continue;
}
IkReal x8565=((-1.0)*(x8566.value));
sj5=gconst35;
cj5=gconst36;
j5=x8565;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8564);
rxp1_1=(px*r21);
rxp1_2=(r11*x8564);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x8565;
IkReal gconst35=r21;
IkReal gconst36=x8563;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8567=((-1.0)*r20);
IkReal x8568=((-1.0)*px);
CheckValue<IkReal> x8570 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8567),IKFAST_ATAN2_MAGTHRESH);
if(!x8570.valid){
continue;
}
IkReal x8569=((-1.0)*(x8570.value));
sj5=gconst35;
cj5=gconst36;
j5=x8569;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8568);
rxp1_1=(px*r21);
rxp1_2=(r11*x8568);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x8569;
IkReal gconst35=r21;
IkReal gconst36=x8567;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8573=IKPowWithIntegerCheck(((((-1.0)*gconst36*r10))+((gconst35*r11))),-1);
if(!x8573.valid){
continue;
}
IkReal x8571=x8573.value;
IkReal x8572=(cj0*x8571);
sj4array[0]=((((-1.0)*sj1*sj2*x8572))+((cj1*cj2*x8572)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8574=IKcos(j4);
IkReal x8575=IKsin(j4);
IkReal x8576=(gconst35*r21);
IkReal x8577=((1.0)*gconst36*x8574);
evalcond[0]=((-1.0)*r02*x8574);
evalcond[1]=(((r02*x8575))+cj0);
evalcond[2]=((((-1.0)*r20*x8577))+((x8574*x8576)));
evalcond[3]=(((gconst35*r11*x8574))+(((-1.0)*r10*x8577)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst36*r20*x8575))+((cj1*sj2))+((x8575*x8576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8580=IKPowWithIntegerCheck(((((-1.0)*gconst36*r20))+((gconst35*r21))),-1);
if(!x8580.valid){
continue;
}
IkReal x8578=x8580.value;
IkReal x8579=((1.0)*x8578);
sj4array[0]=((((-1.0)*cj1*sj2*x8579))+(((-1.0)*cj2*sj1*x8579)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8581=IKcos(j4);
IkReal x8582=IKsin(j4);
IkReal x8583=(gconst35*r11);
IkReal x8584=((1.0)*gconst36*x8581);
evalcond[0]=((-1.0)*r02*x8581);
evalcond[1]=(((r02*x8582))+cj0);
evalcond[2]=((((-1.0)*r20*x8584))+((gconst35*r21*x8581)));
evalcond[3]=(((x8581*x8583))+(((-1.0)*r10*x8584)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*gconst36*r10*x8582))+((x8582*x8583))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8585=IKPowWithIntegerCheck(r02,-1);
if(!x8585.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x8585.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8586=IKcos(j4);
IkReal x8587=IKsin(j4);
IkReal x8588=(gconst35*r21);
IkReal x8589=(gconst35*r11);
IkReal x8590=((1.0)*gconst36*x8586);
IkReal x8591=((1.0)*gconst36*x8587);
evalcond[0]=((-1.0)*r02*x8586);
evalcond[1]=((((-1.0)*r20*x8590))+((x8586*x8588)));
evalcond[2]=(((x8586*x8589))+(((-1.0)*r10*x8590)));
evalcond[3]=((((-1.0)*r20*x8591))+((cj2*sj1))+((cj1*sj2))+((x8587*x8588)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*r10*x8591))+((cj0*sj1*sj2))+((x8587*x8589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8592=(gconst36*r20);
IkReal x8593=(gconst35*r21);
IkReal x8594=(cj1*sj2);
IkReal x8595=((1.0)*cj2*sj1);
CheckValue<IkReal> x8596 = IKatan2WithCheck(IkReal(((((-1.0)*x8592*x8594))+((x8593*x8594))+(((-1.0)*x8592*x8595))+((cj2*sj1*x8593)))),IkReal(((((-1.0)*r22*x8595))+(((-1.0)*r22*x8594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8596.valid){
continue;
}
CheckValue<IkReal> x8597=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8592*x8592)))+(((2.0)*x8592*x8593))+(((-1.0)*(r22*r22)))+(((-1.0)*(x8593*x8593))))),-1);
if(!x8597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8596.value)+(((1.5707963267949)*(x8597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8598=IKcos(j4);
IkReal x8599=IKsin(j4);
IkReal x8600=(cj1*cj2);
IkReal x8601=(sj1*sj2);
IkReal x8602=(gconst36*r20);
IkReal x8603=(gconst36*r00);
IkReal x8604=(gconst36*r10);
IkReal x8605=((1.0)*x8598);
IkReal x8606=(gconst35*x8598);
IkReal x8607=(gconst35*x8599);
IkReal x8608=((1.0)*x8599);
evalcond[0]=((((-1.0)*x8602*x8605))+((r21*x8606))+((r22*x8599)));
evalcond[1]=(cj0+((r01*x8606))+((r02*x8599))+(((-1.0)*x8603*x8605)));
evalcond[2]=(sj0+((r11*x8606))+(((-1.0)*x8604*x8605))+((r12*x8599)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8602*x8608))+((cj1*sj2))+(((-1.0)*r22*x8605))+((r21*x8607)));
evalcond[4]=((((-1.0)*r02*x8605))+((r01*x8607))+(((-1.0)*sj0*x8601))+(((-1.0)*x8603*x8608))+((sj0*x8600)));
evalcond[5]=(((r11*x8607))+(((-1.0)*r12*x8605))+(((-1.0)*cj0*x8600))+(((-1.0)*x8604*x8608))+((cj0*x8601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8609=((1.0)*gconst36);
CheckValue<IkReal> x8610=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r10))+(((-1.0)*r11*x8609)))),-1);
if(!x8610.valid){
continue;
}
CheckValue<IkReal> x8611 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x8609))+((cj0*gconst35*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8610.value)))+(x8611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8612=IKcos(j4);
IkReal x8613=IKsin(j4);
IkReal x8614=(cj1*cj2);
IkReal x8615=(sj1*sj2);
IkReal x8616=(gconst36*r20);
IkReal x8617=(gconst36*r00);
IkReal x8618=(gconst36*r10);
IkReal x8619=((1.0)*x8612);
IkReal x8620=(gconst35*x8612);
IkReal x8621=(gconst35*x8613);
IkReal x8622=((1.0)*x8613);
evalcond[0]=(((r21*x8620))+((r22*x8613))+(((-1.0)*x8616*x8619)));
evalcond[1]=(cj0+((r02*x8613))+((r01*x8620))+(((-1.0)*x8617*x8619)));
evalcond[2]=(sj0+((r12*x8613))+(((-1.0)*x8618*x8619))+((r11*x8620)));
evalcond[3]=(((cj2*sj1))+((r21*x8621))+((cj1*sj2))+(((-1.0)*r22*x8619))+(((-1.0)*x8616*x8622)));
evalcond[4]=((((-1.0)*r02*x8619))+(((-1.0)*sj0*x8615))+(((-1.0)*x8617*x8622))+((sj0*x8614))+((r01*x8621)));
evalcond[5]=((((-1.0)*x8618*x8622))+(((-1.0)*r12*x8619))+(((-1.0)*cj0*x8614))+((r11*x8621))+((cj0*x8615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8623 = IKatan2WithCheck(IkReal((((gconst35*r21*sj0))+(((-1.0)*gconst36*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8623.valid){
continue;
}
CheckValue<IkReal> x8624=IKPowWithIntegerCheck(IKsign((((gconst36*r01))+((gconst35*r00)))),-1);
if(!x8624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8623.value)+(((1.5707963267949)*(x8624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8625=IKcos(j4);
IkReal x8626=IKsin(j4);
IkReal x8627=(cj1*cj2);
IkReal x8628=(sj1*sj2);
IkReal x8629=(gconst36*r20);
IkReal x8630=(gconst36*r00);
IkReal x8631=(gconst36*r10);
IkReal x8632=((1.0)*x8625);
IkReal x8633=(gconst35*x8625);
IkReal x8634=(gconst35*x8626);
IkReal x8635=((1.0)*x8626);
evalcond[0]=((((-1.0)*x8629*x8632))+((r21*x8633))+((r22*x8626)));
evalcond[1]=(cj0+((r02*x8626))+((r01*x8633))+(((-1.0)*x8630*x8632)));
evalcond[2]=(sj0+((r12*x8626))+((r11*x8633))+(((-1.0)*x8631*x8632)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8629*x8635))+((r21*x8634))+((cj1*sj2))+(((-1.0)*r22*x8632)));
evalcond[4]=((((-1.0)*sj0*x8628))+((sj0*x8627))+((r01*x8634))+(((-1.0)*x8630*x8635))+(((-1.0)*r02*x8632)));
evalcond[5]=((((-1.0)*r12*x8632))+((cj0*x8628))+((r11*x8634))+(((-1.0)*cj0*x8627))+(((-1.0)*x8631*x8635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8636=((-1.0)*r20);
IkReal x8637=x8256;
CheckValue<IkReal> x8639 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8636),IKFAST_ATAN2_MAGTHRESH);
if(!x8639.valid){
continue;
}
IkReal x8638=((-1.0)*(x8639.value));
sj5=gconst35;
cj5=gconst36;
j5=x8638;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst34=x8638;
IkReal gconst35=(r21*x8637);
IkReal gconst36=(x8636*x8637);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8640=((-1.0)*r20);
IkReal x8641=x8256;
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8640),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
IkReal x8642=((-1.0)*(x8643.value));
sj5=gconst35;
cj5=gconst36;
j5=x8642;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst34=x8642;
IkReal gconst35=(r21*x8641);
IkReal gconst36=(x8640*x8641);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8644=((-1.0)*r20);
IkReal x8645=x8256;
CheckValue<IkReal> x8647 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8644),IKFAST_ATAN2_MAGTHRESH);
if(!x8647.valid){
continue;
}
IkReal x8646=((-1.0)*(x8647.value));
sj5=gconst35;
cj5=gconst36;
j5=x8646;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst34=x8646;
IkReal gconst35=(r21*x8645);
IkReal gconst36=(x8644*x8645);
IkReal x8648=r22*r22;
CheckValue<IkReal> x8651=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8648))),-1);
if(!x8651.valid){
continue;
}
IkReal x8649=x8651.value;
IkReal x8650=(x8648+((x8649*(r20*r20*r20*r20)))+((x8649*(r21*r21*r21*r21)))+(((2.0)*x8649*(r20*r20)*(r21*r21))));
j4eval[0]=x8650;
j4eval[1]=IKsign(x8650);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8652=((-1.0)*r20);
IkReal x8653=x8256;
CheckValue<IkReal> x8655 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8652),IKFAST_ATAN2_MAGTHRESH);
if(!x8655.valid){
continue;
}
IkReal x8654=((-1.0)*(x8655.value));
sj5=gconst35;
cj5=gconst36;
j5=x8654;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x8654;
IkReal gconst35=(r21*x8653);
IkReal gconst36=(x8652*x8653);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8656=((-1.0)*r20);
IkReal x8657=x8256;
CheckValue<IkReal> x8659 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8656),IKFAST_ATAN2_MAGTHRESH);
if(!x8659.valid){
continue;
}
IkReal x8658=((-1.0)*(x8659.value));
sj5=gconst35;
cj5=gconst36;
j5=x8658;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x8658;
IkReal gconst35=(r21*x8657);
IkReal gconst36=(x8656*x8657);
IkReal x8660=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8664=IKPowWithIntegerCheck(x8660,-1);
if(!x8664.valid){
continue;
}
IkReal x8661=x8664.value;
IkReal x8662=((1.0)*x8661);
IkReal x8663=((((-1.0)*x8662*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8661))+(((-1.0)*(r12*r12)))+(((-1.0)*x8662*(r11*r11)*(r21*r21))));
j4eval[0]=x8663;
j4eval[1]=IKsign(x8663);
j4eval[2]=r12;
j4eval[3]=x8660;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8665=((-1.0)*r20);
IkReal x8666=x8256;
CheckValue<IkReal> x8668 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8665),IKFAST_ATAN2_MAGTHRESH);
if(!x8668.valid){
continue;
}
IkReal x8667=((-1.0)*(x8668.value));
sj5=gconst35;
cj5=gconst36;
j5=x8667;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x8667;
IkReal gconst35=(r21*x8666);
IkReal gconst36=(x8665*x8666);
IkReal x8669=r22*r22;
IkReal x8670=(cj1*r12*sj2);
IkReal x8671=(cj2*r12*sj1);
CheckValue<IkReal> x8675=IKPowWithIntegerCheck(((-1.0)+x8669),-1);
if(!x8675.valid){
continue;
}
IkReal x8672=x8675.value;
if((((1.0)+(((-1.0)*x8669)))) < -0.00001)
continue;
IkReal x8673=IKsqrt(((1.0)+(((-1.0)*x8669))));
IkReal x8674=(r22*x8672*x8673);
j4eval[0]=((IKabs((x8671+x8670)))+(IKabs((((x8670*x8674))+((x8671*x8674))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8676=((1.0)*gconst36);
IkReal x8677=(cj1*sj2);
IkReal x8678=(gconst35*r11);
IkReal x8679=(cj2*sj1);
CheckValue<IkReal> x8680 = IKatan2WithCheck(IkReal((((r12*x8679))+((r12*x8677)))),IkReal((((x8677*x8678))+((x8678*x8679))+(((-1.0)*r10*x8676*x8679))+(((-1.0)*r10*x8676*x8677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8680.valid){
continue;
}
CheckValue<IkReal> x8681=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r00))+(((-1.0)*r01*x8676)))),-1);
if(!x8681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8680.value)+(((1.5707963267949)*(x8681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8682=IKcos(j4);
IkReal x8683=IKsin(j4);
IkReal x8684=(gconst35*x8682);
IkReal x8685=(gconst36*x8683);
IkReal x8686=((1.0)*gconst36*x8682);
IkReal x8687=((1.0)*gconst35*x8683);
evalcond[0]=(((r22*x8683))+(((-1.0)*r20*x8686))+((r21*x8684)));
evalcond[1]=((((-1.0)*r00*x8686))+((r01*x8684))+((r02*x8683)));
evalcond[2]=(((r12*x8682))+((r10*x8685))+(((-1.0)*r11*x8687)));
evalcond[3]=((1.0)+((r12*x8683))+((r11*x8684))+(((-1.0)*r10*x8686)));
evalcond[4]=(((cj2*sj1))+((r20*x8685))+((cj1*sj2))+((r22*x8682))+(((-1.0)*r21*x8687)));
evalcond[5]=((((-1.0)*r01*x8687))+((r00*x8685))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x8682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8688=(gconst36*r10);
IkReal x8689=(gconst35*r11);
CheckValue<IkReal> x8690 = IKatan2WithCheck(IkReal(r12),IkReal((x8689+(((-1.0)*x8688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8690.valid){
continue;
}
CheckValue<IkReal> x8691=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8689*x8689)))+(((-1.0)*(r12*r12)))+(((2.0)*x8688*x8689))+(((-1.0)*(x8688*x8688))))),-1);
if(!x8691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8690.value)+(((1.5707963267949)*(x8691.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8692=IKcos(j4);
IkReal x8693=IKsin(j4);
IkReal x8694=(gconst35*x8692);
IkReal x8695=(gconst36*x8693);
IkReal x8696=((1.0)*gconst36*x8692);
IkReal x8697=((1.0)*gconst35*x8693);
evalcond[0]=(((r21*x8694))+((r22*x8693))+(((-1.0)*r20*x8696)));
evalcond[1]=(((r02*x8693))+((r01*x8694))+(((-1.0)*r00*x8696)));
evalcond[2]=(((r10*x8695))+(((-1.0)*r11*x8697))+((r12*x8692)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8696))+((r12*x8693))+((r11*x8694)));
evalcond[4]=(((cj2*sj1))+((r22*x8692))+((cj1*sj2))+((r20*x8695))+(((-1.0)*r21*x8697)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x8692))+((r00*x8695))+((cj1*cj2))+(((-1.0)*r01*x8697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8698 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r20))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8698.valid){
continue;
}
CheckValue<IkReal> x8699=IKPowWithIntegerCheck(IKsign((((gconst36*r01))+((gconst35*r00)))),-1);
if(!x8699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8698.value)+(((1.5707963267949)*(x8699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8700=IKcos(j4);
IkReal x8701=IKsin(j4);
IkReal x8702=(gconst35*x8700);
IkReal x8703=(gconst36*x8701);
IkReal x8704=((1.0)*gconst36*x8700);
IkReal x8705=((1.0)*gconst35*x8701);
evalcond[0]=(((r21*x8702))+((r22*x8701))+(((-1.0)*r20*x8704)));
evalcond[1]=(((r02*x8701))+(((-1.0)*r00*x8704))+((r01*x8702)));
evalcond[2]=(((r10*x8703))+((r12*x8700))+(((-1.0)*r11*x8705)));
evalcond[3]=((1.0)+((r11*x8702))+((r12*x8701))+(((-1.0)*r10*x8704)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8700))+(((-1.0)*r21*x8705))+((r20*x8703)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x8700))+((cj1*cj2))+((r00*x8703))+(((-1.0)*r01*x8705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8706=((-1.0)*r20);
IkReal x8707=x8256;
CheckValue<IkReal> x8709 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8706),IKFAST_ATAN2_MAGTHRESH);
if(!x8709.valid){
continue;
}
IkReal x8708=((-1.0)*(x8709.value));
sj5=gconst35;
cj5=gconst36;
j5=x8708;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x8708;
IkReal gconst35=(r21*x8707);
IkReal gconst36=(x8706*x8707);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8710=((-1.0)*r20);
IkReal x8711=x8256;
CheckValue<IkReal> x8713 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8710),IKFAST_ATAN2_MAGTHRESH);
if(!x8713.valid){
continue;
}
IkReal x8712=((-1.0)*(x8713.value));
sj5=gconst35;
cj5=gconst36;
j5=x8712;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x8712;
IkReal gconst35=(r21*x8711);
IkReal gconst36=(x8710*x8711);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8714=((-1.0)*r20);
IkReal x8715=x8256;
CheckValue<IkReal> x8717 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8714),IKFAST_ATAN2_MAGTHRESH);
if(!x8717.valid){
continue;
}
IkReal x8716=((-1.0)*(x8717.value));
sj5=gconst35;
cj5=gconst36;
j5=x8716;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x8716;
IkReal gconst35=(r21*x8715);
IkReal gconst36=(x8714*x8715);
IkReal x8718=r22*r22;
IkReal x8719=(cj1*r12*sj2);
IkReal x8720=(cj2*r12*sj1);
CheckValue<IkReal> x8724=IKPowWithIntegerCheck(((-1.0)+x8718),-1);
if(!x8724.valid){
continue;
}
IkReal x8721=x8724.value;
if((((1.0)+(((-1.0)*x8718)))) < -0.00001)
continue;
IkReal x8722=IKsqrt(((1.0)+(((-1.0)*x8718))));
IkReal x8723=(r22*x8721*x8722);
j4eval[0]=((IKabs((x8720+x8719)))+(IKabs((((x8720*x8723))+((x8719*x8723))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8725=((1.0)*gconst36);
IkReal x8726=(cj1*sj2);
IkReal x8727=(gconst35*r11);
IkReal x8728=(cj2*sj1);
CheckValue<IkReal> x8729 = IKatan2WithCheck(IkReal((((r12*x8726))+((r12*x8728)))),IkReal(((((-1.0)*r10*x8725*x8726))+(((-1.0)*r10*x8725*x8728))+((x8726*x8727))+((x8727*x8728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8729.valid){
continue;
}
CheckValue<IkReal> x8730=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r00))+(((-1.0)*r01*x8725)))),-1);
if(!x8730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8729.value)+(((1.5707963267949)*(x8730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8731=IKcos(j4);
IkReal x8732=IKsin(j4);
IkReal x8733=(gconst35*x8731);
IkReal x8734=(gconst36*x8732);
IkReal x8735=((1.0)*gconst36*x8731);
IkReal x8736=((1.0)*gconst35*x8732);
evalcond[0]=(((r21*x8733))+((r22*x8732))+(((-1.0)*r20*x8735)));
evalcond[1]=(((r02*x8732))+(((-1.0)*r00*x8735))+((r01*x8733)));
evalcond[2]=(((r10*x8734))+((r12*x8731))+(((-1.0)*r11*x8736)));
evalcond[3]=((-1.0)+((r11*x8733))+((r12*x8732))+(((-1.0)*r10*x8735)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8731))+(((-1.0)*r21*x8736))+((r20*x8734)));
evalcond[5]=(((r02*x8731))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x8736))+((r00*x8734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8737=(gconst35*r11);
IkReal x8738=(gconst36*r10);
CheckValue<IkReal> x8739=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8737*x8737)+(((-2.0)*x8737*x8738))+(x8738*x8738))),-1);
if(!x8739.valid){
continue;
}
CheckValue<IkReal> x8740 = IKatan2WithCheck(IkReal(r12),IkReal((x8737+(((-1.0)*x8738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8739.value)))+(x8740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8741=IKcos(j4);
IkReal x8742=IKsin(j4);
IkReal x8743=(gconst35*x8741);
IkReal x8744=(gconst36*x8742);
IkReal x8745=((1.0)*gconst36*x8741);
IkReal x8746=((1.0)*gconst35*x8742);
evalcond[0]=(((r22*x8742))+((r21*x8743))+(((-1.0)*r20*x8745)));
evalcond[1]=(((r01*x8743))+(((-1.0)*r00*x8745))+((r02*x8742)));
evalcond[2]=(((r12*x8741))+(((-1.0)*r11*x8746))+((r10*x8744)));
evalcond[3]=((-1.0)+((r12*x8742))+(((-1.0)*r10*x8745))+((r11*x8743)));
evalcond[4]=(((cj2*sj1))+((r20*x8744))+((cj1*sj2))+((r22*x8741))+(((-1.0)*r21*x8746)));
evalcond[5]=(((r00*x8744))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x8746))+((r02*x8741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8747=((1.0)*gconst36);
CheckValue<IkReal> x8748=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r00))+(((-1.0)*r01*x8747)))),-1);
if(!x8748.valid){
continue;
}
CheckValue<IkReal> x8749 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8747))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8748.value)))+(x8749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8750=IKcos(j4);
IkReal x8751=IKsin(j4);
IkReal x8752=(gconst35*x8750);
IkReal x8753=(gconst36*x8751);
IkReal x8754=((1.0)*gconst36*x8750);
IkReal x8755=((1.0)*gconst35*x8751);
evalcond[0]=(((r22*x8751))+(((-1.0)*r20*x8754))+((r21*x8752)));
evalcond[1]=(((r02*x8751))+(((-1.0)*r00*x8754))+((r01*x8752)));
evalcond[2]=(((r10*x8753))+((r12*x8750))+(((-1.0)*r11*x8755)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8754))+((r11*x8752))+((r12*x8751)));
evalcond[4]=(((r22*x8750))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8755))+((r20*x8753)));
evalcond[5]=(((r02*x8750))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x8753))+(((-1.0)*r01*x8755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8756=((-1.0)*r20);
IkReal x8757=x8256;
CheckValue<IkReal> x8759 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8756),IKFAST_ATAN2_MAGTHRESH);
if(!x8759.valid){
continue;
}
IkReal x8758=((-1.0)*(x8759.value));
sj5=gconst35;
cj5=gconst36;
j5=x8758;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8758;
IkReal gconst35=(r21*x8757);
IkReal gconst36=(x8756*x8757);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8760=((-1.0)*r20);
IkReal x8761=x8256;
CheckValue<IkReal> x8763 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8760),IKFAST_ATAN2_MAGTHRESH);
if(!x8763.valid){
continue;
}
IkReal x8762=((-1.0)*(x8763.value));
sj5=gconst35;
cj5=gconst36;
j5=x8762;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8762;
IkReal gconst35=(r21*x8761);
IkReal gconst36=(x8760*x8761);
IkReal x8764=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8768=IKPowWithIntegerCheck(x8764,-1);
if(!x8768.valid){
continue;
}
IkReal x8765=x8768.value;
IkReal x8766=((1.0)*x8765);
IkReal x8767=((((-1.0)*x8766*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8766*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8765)));
j4eval[0]=x8767;
j4eval[1]=IKsign(x8767);
j4eval[2]=r02;
j4eval[3]=x8764;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8769=((-1.0)*r20);
IkReal x8770=x8256;
CheckValue<IkReal> x8772 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8769),IKFAST_ATAN2_MAGTHRESH);
if(!x8772.valid){
continue;
}
IkReal x8771=((-1.0)*(x8772.value));
sj5=gconst35;
cj5=gconst36;
j5=x8771;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x8771;
IkReal gconst35=(r21*x8770);
IkReal gconst36=(x8769*x8770);
IkReal x8773=r22*r22;
IkReal x8774=(cj1*r02*sj2);
IkReal x8775=(cj2*r02*sj1);
CheckValue<IkReal> x8779=IKPowWithIntegerCheck(((-1.0)+x8773),-1);
if(!x8779.valid){
continue;
}
IkReal x8776=x8779.value;
if((((1.0)+(((-1.0)*x8773)))) < -0.00001)
continue;
IkReal x8777=IKsqrt(((1.0)+(((-1.0)*x8773))));
IkReal x8778=(r22*x8776*x8777);
j4eval[0]=((IKabs((((x8774*x8778))+((x8775*x8778)))))+(IKabs((x8774+x8775))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8780=(cj1*sj2);
IkReal x8781=(cj2*sj1);
IkReal x8782=(gconst35*r01);
IkReal x8783=((1.0)*gconst36*r00);
CheckValue<IkReal> x8784 = IKatan2WithCheck(IkReal((((r02*x8781))+((r02*x8780)))),IkReal(((((-1.0)*x8780*x8783))+(((-1.0)*x8781*x8783))+((x8781*x8782))+((x8780*x8782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8784.valid){
continue;
}
CheckValue<IkReal> x8785=IKPowWithIntegerCheck(IKsign((((gconst36*r11))+((gconst35*r10)))),-1);
if(!x8785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8784.value)+(((1.5707963267949)*(x8785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8786=IKcos(j4);
IkReal x8787=IKsin(j4);
IkReal x8788=(gconst35*x8786);
IkReal x8789=(gconst36*x8787);
IkReal x8790=((1.0)*gconst36*x8786);
IkReal x8791=((1.0)*gconst35*x8787);
evalcond[0]=(((r21*x8788))+((r22*x8787))+(((-1.0)*r20*x8790)));
evalcond[1]=(((r11*x8788))+((r12*x8787))+(((-1.0)*r10*x8790)));
evalcond[2]=(((r02*x8786))+(((-1.0)*r01*x8791))+((r00*x8789)));
evalcond[3]=((1.0)+((r02*x8787))+(((-1.0)*r00*x8790))+((r01*x8788)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8786))+(((-1.0)*r21*x8791))+((r20*x8789)));
evalcond[5]=((((-1.0)*r11*x8791))+((r10*x8789))+((r12*x8786))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8792=(gconst35*r01);
IkReal x8793=(gconst36*r00);
CheckValue<IkReal> x8794=IKPowWithIntegerCheck(IKsign(((((2.0)*x8792*x8793))+(((-1.0)*(x8792*x8792)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8793*x8793))))),-1);
if(!x8794.valid){
continue;
}
CheckValue<IkReal> x8795 = IKatan2WithCheck(IkReal(r02),IkReal((x8792+(((-1.0)*x8793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8794.value)))+(x8795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8796=IKcos(j4);
IkReal x8797=IKsin(j4);
IkReal x8798=(gconst35*x8796);
IkReal x8799=(gconst36*x8797);
IkReal x8800=((1.0)*gconst36*x8796);
IkReal x8801=((1.0)*gconst35*x8797);
evalcond[0]=(((r21*x8798))+(((-1.0)*r20*x8800))+((r22*x8797)));
evalcond[1]=((((-1.0)*r10*x8800))+((r12*x8797))+((r11*x8798)));
evalcond[2]=(((r02*x8796))+(((-1.0)*r01*x8801))+((r00*x8799)));
evalcond[3]=((1.0)+((r02*x8797))+(((-1.0)*r00*x8800))+((r01*x8798)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x8801))+((cj1*sj2))+((r22*x8796))+((r20*x8799)));
evalcond[5]=(((r10*x8799))+(((-1.0)*r11*x8801))+((r12*x8796))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8802=((1.0)*gconst36);
CheckValue<IkReal> x8803 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8802))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8803.valid){
continue;
}
CheckValue<IkReal> x8804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8802))+(((-1.0)*gconst35*r10)))),-1);
if(!x8804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8803.value)+(((1.5707963267949)*(x8804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8805=IKcos(j4);
IkReal x8806=IKsin(j4);
IkReal x8807=(gconst35*x8805);
IkReal x8808=(gconst36*x8806);
IkReal x8809=((1.0)*gconst36*x8805);
IkReal x8810=((1.0)*gconst35*x8806);
evalcond[0]=(((r21*x8807))+(((-1.0)*r20*x8809))+((r22*x8806)));
evalcond[1]=((((-1.0)*r10*x8809))+((r12*x8806))+((r11*x8807)));
evalcond[2]=(((r02*x8805))+((r00*x8808))+(((-1.0)*r01*x8810)));
evalcond[3]=((1.0)+((r02*x8806))+(((-1.0)*r00*x8809))+((r01*x8807)));
evalcond[4]=(((cj2*sj1))+((r22*x8805))+(((-1.0)*r21*x8810))+((cj1*sj2))+((r20*x8808)));
evalcond[5]=((((-1.0)*r11*x8810))+((r10*x8808))+((r12*x8805))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8811=((-1.0)*r20);
IkReal x8812=x8256;
CheckValue<IkReal> x8814 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8811),IKFAST_ATAN2_MAGTHRESH);
if(!x8814.valid){
continue;
}
IkReal x8813=((-1.0)*(x8814.value));
sj5=gconst35;
cj5=gconst36;
j5=x8813;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8813;
IkReal gconst35=(r21*x8812);
IkReal gconst36=(x8811*x8812);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8815=((-1.0)*r20);
IkReal x8816=x8256;
CheckValue<IkReal> x8818 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8815),IKFAST_ATAN2_MAGTHRESH);
if(!x8818.valid){
continue;
}
IkReal x8817=((-1.0)*(x8818.value));
sj5=gconst35;
cj5=gconst36;
j5=x8817;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8817;
IkReal gconst35=(r21*x8816);
IkReal gconst36=(x8815*x8816);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8819=((-1.0)*r20);
IkReal x8820=x8256;
CheckValue<IkReal> x8822 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8819),IKFAST_ATAN2_MAGTHRESH);
if(!x8822.valid){
continue;
}
IkReal x8821=((-1.0)*(x8822.value));
sj5=gconst35;
cj5=gconst36;
j5=x8821;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x8821;
IkReal gconst35=(r21*x8820);
IkReal gconst36=(x8819*x8820);
IkReal x8823=r22*r22;
IkReal x8824=(cj1*r02*sj2);
IkReal x8825=(cj2*r02*sj1);
CheckValue<IkReal> x8829=IKPowWithIntegerCheck(((-1.0)+x8823),-1);
if(!x8829.valid){
continue;
}
IkReal x8826=x8829.value;
if((((1.0)+(((-1.0)*x8823)))) < -0.00001)
continue;
IkReal x8827=IKsqrt(((1.0)+(((-1.0)*x8823))));
IkReal x8828=(r22*x8826*x8827);
j4eval[0]=((IKabs((x8824+x8825)))+(IKabs((((x8825*x8828))+((x8824*x8828))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8830=(cj1*sj2);
IkReal x8831=(cj2*sj1);
IkReal x8832=(gconst35*r01);
IkReal x8833=((1.0)*gconst36*r00);
CheckValue<IkReal> x8834 = IKatan2WithCheck(IkReal((((r02*x8830))+((r02*x8831)))),IkReal((((x8831*x8832))+((x8830*x8832))+(((-1.0)*x8830*x8833))+(((-1.0)*x8831*x8833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8834.valid){
continue;
}
CheckValue<IkReal> x8835=IKPowWithIntegerCheck(IKsign((((gconst36*r11))+((gconst35*r10)))),-1);
if(!x8835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8834.value)+(((1.5707963267949)*(x8835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8836=IKcos(j4);
IkReal x8837=IKsin(j4);
IkReal x8838=(gconst35*x8836);
IkReal x8839=(gconst36*x8837);
IkReal x8840=((1.0)*gconst36*x8836);
IkReal x8841=((1.0)*gconst35*x8837);
evalcond[0]=(((r21*x8838))+(((-1.0)*r20*x8840))+((r22*x8837)));
evalcond[1]=((((-1.0)*r10*x8840))+((r11*x8838))+((r12*x8837)));
evalcond[2]=(((r02*x8836))+(((-1.0)*r01*x8841))+((r00*x8839)));
evalcond[3]=((-1.0)+((r02*x8837))+((r01*x8838))+(((-1.0)*r00*x8840)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8841))+((r20*x8839))+((r22*x8836)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r10*x8839))+((r12*x8836))+((cj1*cj2))+(((-1.0)*r11*x8841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8842=(gconst35*r01);
IkReal x8843=(gconst36*r00);
CheckValue<IkReal> x8844 = IKatan2WithCheck(IkReal(r02),IkReal((x8842+(((-1.0)*x8843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8844.valid){
continue;
}
CheckValue<IkReal> x8845=IKPowWithIntegerCheck(IKsign(((x8842*x8842)+(x8843*x8843)+(((-2.0)*x8842*x8843))+(r02*r02))),-1);
if(!x8845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8844.value)+(((1.5707963267949)*(x8845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8846=IKcos(j4);
IkReal x8847=IKsin(j4);
IkReal x8848=(gconst35*x8846);
IkReal x8849=(gconst36*x8847);
IkReal x8850=((1.0)*gconst36*x8846);
IkReal x8851=((1.0)*gconst35*x8847);
evalcond[0]=(((r22*x8847))+((r21*x8848))+(((-1.0)*r20*x8850)));
evalcond[1]=(((r11*x8848))+((r12*x8847))+(((-1.0)*r10*x8850)));
evalcond[2]=((((-1.0)*r01*x8851))+((r02*x8846))+((r00*x8849)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8850))+((r02*x8847))+((r01*x8848)));
evalcond[4]=(((r22*x8846))+((cj2*sj1))+((cj1*sj2))+((r20*x8849))+(((-1.0)*r21*x8851)));
evalcond[5]=((((-1.0)*r11*x8851))+(((-1.0)*sj1*sj2))+((r12*x8846))+((r10*x8849))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8852 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r20))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8852.valid){
continue;
}
CheckValue<IkReal> x8853=IKPowWithIntegerCheck(IKsign((((gconst36*r11))+((gconst35*r10)))),-1);
if(!x8853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8852.value)+(((1.5707963267949)*(x8853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8854=IKcos(j4);
IkReal x8855=IKsin(j4);
IkReal x8856=(gconst35*x8854);
IkReal x8857=(gconst36*x8855);
IkReal x8858=((1.0)*gconst36*x8854);
IkReal x8859=((1.0)*gconst35*x8855);
evalcond[0]=(((r22*x8855))+((r21*x8856))+(((-1.0)*r20*x8858)));
evalcond[1]=((((-1.0)*r10*x8858))+((r11*x8856))+((r12*x8855)));
evalcond[2]=((((-1.0)*r01*x8859))+((r00*x8857))+((r02*x8854)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8858))+((r01*x8856))+((r02*x8855)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8854))+(((-1.0)*r21*x8859))+((r20*x8857)));
evalcond[5]=((((-1.0)*r11*x8859))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x8854))+((r10*x8857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8860=((-1.0)*r20);
IkReal x8861=((-1.0)*px);
CheckValue<IkReal> x8863 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8860),IKFAST_ATAN2_MAGTHRESH);
if(!x8863.valid){
continue;
}
IkReal x8862=((-1.0)*(x8863.value));
sj5=gconst35;
cj5=gconst36;
j5=x8862;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8861);
rxp1_1=(px*r21);
rxp1_2=(r11*x8861);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x8862;
IkReal gconst35=r21;
IkReal gconst36=x8860;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8864=((-1.0)*r20);
IkReal x8865=((-1.0)*px);
CheckValue<IkReal> x8867 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8864),IKFAST_ATAN2_MAGTHRESH);
if(!x8867.valid){
continue;
}
IkReal x8866=((-1.0)*(x8867.value));
sj5=gconst35;
cj5=gconst36;
j5=x8866;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8865);
rxp1_1=(px*r21);
rxp1_2=(r11*x8865);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x8866;
IkReal gconst35=r21;
IkReal gconst36=x8864;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8868=((-1.0)*r20);
IkReal x8869=((-1.0)*px);
CheckValue<IkReal> x8871 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8868),IKFAST_ATAN2_MAGTHRESH);
if(!x8871.valid){
continue;
}
IkReal x8870=((-1.0)*(x8871.value));
sj5=gconst35;
cj5=gconst36;
j5=x8870;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8869);
rxp1_1=(px*r21);
rxp1_2=(r11*x8869);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x8870;
IkReal gconst35=r21;
IkReal gconst36=x8868;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8874=IKPowWithIntegerCheck(((((-1.0)*gconst35*r11))+((gconst36*r10))),-1);
if(!x8874.valid){
continue;
}
IkReal x8872=x8874.value;
IkReal x8873=(cj0*x8872);
sj4array[0]=(((cj1*cj2*x8873))+(((-1.0)*sj1*sj2*x8873)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8875=IKcos(j4);
IkReal x8876=IKsin(j4);
IkReal x8877=(gconst35*r21);
IkReal x8878=((1.0)*gconst36*x8875);
evalcond[0]=(r02*x8875);
evalcond[1]=(((r02*x8876))+cj0);
evalcond[2]=(((x8875*x8877))+(((-1.0)*r20*x8878)));
evalcond[3]=(((gconst35*r11*x8875))+(((-1.0)*r10*x8878)));
evalcond[4]=(((gconst36*r20*x8876))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8876*x8877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8881=IKPowWithIntegerCheck(((((-1.0)*gconst35*r21))+((gconst36*r20))),-1);
if(!x8881.valid){
continue;
}
IkReal x8879=x8881.value;
IkReal x8880=((1.0)*x8879);
sj4array[0]=((((-1.0)*cj2*sj1*x8880))+(((-1.0)*cj1*sj2*x8880)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8882=IKcos(j4);
IkReal x8883=IKsin(j4);
IkReal x8884=(gconst35*r11);
IkReal x8885=((1.0)*gconst36*x8882);
evalcond[0]=(r02*x8882);
evalcond[1]=(cj0+((r02*x8883)));
evalcond[2]=((((-1.0)*r20*x8885))+((gconst35*r21*x8882)));
evalcond[3]=(((x8882*x8884))+(((-1.0)*r10*x8885)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*x8883*x8884))+((gconst36*r10*x8883))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8886=IKPowWithIntegerCheck(r02,-1);
if(!x8886.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x8886.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8887=IKcos(j4);
IkReal x8888=IKsin(j4);
IkReal x8889=(gconst36*r20);
IkReal x8890=(gconst36*r10);
IkReal x8891=((1.0)*x8887);
IkReal x8892=(gconst35*x8887);
IkReal x8893=((1.0)*gconst35*x8888);
evalcond[0]=(r02*x8887);
evalcond[1]=((((-1.0)*x8889*x8891))+((r21*x8892)));
evalcond[2]=(((r11*x8892))+(((-1.0)*x8890*x8891)));
evalcond[3]=((((-1.0)*r21*x8893))+((cj2*sj1))+((cj1*sj2))+((x8888*x8889)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*r11*x8893))+((x8888*x8890))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8894=((1.0)*r22);
IkReal x8895=(cj1*sj2);
IkReal x8896=(gconst36*r20);
IkReal x8897=(gconst35*r21);
IkReal x8898=(cj2*sj1);
CheckValue<IkReal> x8899 = IKatan2WithCheck(IkReal((((x8897*x8898))+((x8895*x8897))+(((-1.0)*x8896*x8898))+(((-1.0)*x8895*x8896)))),IkReal(((((-1.0)*x8894*x8895))+(((-1.0)*x8894*x8898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8899.valid){
continue;
}
CheckValue<IkReal> x8900=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8896*x8896)+(x8897*x8897)+(((-2.0)*x8896*x8897)))),-1);
if(!x8900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8899.value)+(((1.5707963267949)*(x8900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8901=IKcos(j4);
IkReal x8902=IKsin(j4);
IkReal x8903=(cj1*cj2);
IkReal x8904=(sj1*sj2);
IkReal x8905=(gconst35*x8901);
IkReal x8906=(gconst36*x8902);
IkReal x8907=((1.0)*gconst35*x8902);
IkReal x8908=((1.0)*gconst36*x8901);
evalcond[0]=(((r21*x8905))+(((-1.0)*r20*x8908))+((r22*x8902)));
evalcond[1]=(cj0+((r01*x8905))+(((-1.0)*r00*x8908))+((r02*x8902)));
evalcond[2]=(sj0+(((-1.0)*r10*x8908))+((r11*x8905))+((r12*x8902)));
evalcond[3]=(((cj2*sj1))+((r20*x8906))+((cj1*sj2))+(((-1.0)*r21*x8907))+((r22*x8901)));
evalcond[4]=(((sj0*x8903))+((r00*x8906))+(((-1.0)*r01*x8907))+(((-1.0)*sj0*x8904))+((r02*x8901)));
evalcond[5]=((((-1.0)*cj0*x8903))+((r10*x8906))+((r12*x8901))+((cj0*x8904))+(((-1.0)*r11*x8907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8909=((1.0)*gconst36);
CheckValue<IkReal> x8910=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r10))+(((-1.0)*r11*x8909)))),-1);
if(!x8910.valid){
continue;
}
CheckValue<IkReal> x8911 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x8909))+((cj0*gconst35*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8910.value)))+(x8911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8912=IKcos(j4);
IkReal x8913=IKsin(j4);
IkReal x8914=(cj1*cj2);
IkReal x8915=(sj1*sj2);
IkReal x8916=(gconst35*x8912);
IkReal x8917=(gconst36*x8913);
IkReal x8918=((1.0)*gconst35*x8913);
IkReal x8919=((1.0)*gconst36*x8912);
evalcond[0]=(((r22*x8913))+(((-1.0)*r20*x8919))+((r21*x8916)));
evalcond[1]=(((r01*x8916))+cj0+((r02*x8913))+(((-1.0)*r00*x8919)));
evalcond[2]=(sj0+((r11*x8916))+((r12*x8913))+(((-1.0)*r10*x8919)));
evalcond[3]=(((cj2*sj1))+((r22*x8912))+((cj1*sj2))+(((-1.0)*r21*x8918))+((r20*x8917)));
evalcond[4]=(((r00*x8917))+(((-1.0)*r01*x8918))+(((-1.0)*sj0*x8915))+((r02*x8912))+((sj0*x8914)));
evalcond[5]=(((cj0*x8915))+(((-1.0)*r11*x8918))+((r12*x8912))+((r10*x8917))+(((-1.0)*cj0*x8914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8920 = IKatan2WithCheck(IkReal((((gconst35*r21*sj0))+(((-1.0)*gconst36*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8920.valid){
continue;
}
CheckValue<IkReal> x8921=IKPowWithIntegerCheck(IKsign((((gconst36*r01))+((gconst35*r00)))),-1);
if(!x8921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8920.value)+(((1.5707963267949)*(x8921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8922=IKcos(j4);
IkReal x8923=IKsin(j4);
IkReal x8924=(cj1*cj2);
IkReal x8925=(sj1*sj2);
IkReal x8926=(gconst35*x8922);
IkReal x8927=(gconst36*x8923);
IkReal x8928=((1.0)*gconst35*x8923);
IkReal x8929=((1.0)*gconst36*x8922);
evalcond[0]=((((-1.0)*r20*x8929))+((r22*x8923))+((r21*x8926)));
evalcond[1]=(cj0+((r02*x8923))+(((-1.0)*r00*x8929))+((r01*x8926)));
evalcond[2]=(sj0+((r12*x8923))+((r11*x8926))+(((-1.0)*r10*x8929)));
evalcond[3]=(((r20*x8927))+((cj2*sj1))+(((-1.0)*r21*x8928))+((cj1*sj2))+((r22*x8922)));
evalcond[4]=((((-1.0)*sj0*x8925))+((r02*x8922))+((sj0*x8924))+(((-1.0)*r01*x8928))+((r00*x8927)));
evalcond[5]=(((cj0*x8925))+(((-1.0)*r11*x8928))+((r12*x8922))+((r10*x8927))+(((-1.0)*cj0*x8924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8930=((-1.0)*r20);
IkReal x8931=x8256;
CheckValue<IkReal> x8933 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8930),IKFAST_ATAN2_MAGTHRESH);
if(!x8933.valid){
continue;
}
IkReal x8932=((-1.0)*(x8933.value));
sj5=gconst35;
cj5=gconst36;
j5=x8932;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x8932;
IkReal gconst35=(r21*x8931);
IkReal gconst36=(x8930*x8931);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8934=((-1.0)*r20);
IkReal x8935=x8256;
CheckValue<IkReal> x8937 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8934),IKFAST_ATAN2_MAGTHRESH);
if(!x8937.valid){
continue;
}
IkReal x8936=((-1.0)*(x8937.value));
sj5=gconst35;
cj5=gconst36;
j5=x8936;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst34=x8936;
IkReal gconst35=(r21*x8935);
IkReal gconst36=(x8934*x8935);
CheckValue<IkReal> x8945=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8945.valid){
continue;
}
IkReal x8938=x8945.value;
IkReal x8939=(cj3*x8938);
IkReal x8940=(r11*x8939);
IkReal x8941=(r01*x8939);
IkReal x8942=(r00*x8939);
IkReal x8943=(r10*x8939);
IkReal x8944=(r20*r21*x8939);
j4eval[0]=IKsign((((r10*x8942*(r20*r20)))+((r10*r20*r21*x8941))+((cj3*r02*r12))+((r01*x8940*(r21*r21)))+((r00*r20*r21*x8940))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8946=gconst35*gconst35;
IkReal x8947=gconst36*gconst36;
IkReal x8948=((1.0)*sj3);
IkReal x8949=((1.0)*cj3);
IkReal x8950=(cj3*r01);
IkReal x8951=(gconst36*r11);
IkReal x8952=(r00*x8947);
IkReal x8953=(gconst35*gconst36*r10);
CheckValue<IkReal> x8954=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x8948))+(((-1.0)*r01*r11*x8946*x8948))+(((-1.0)*r10*x8948*x8952))+((r01*sj3*x8953))+((gconst35*r00*sj3*x8951)))),-1);
if(!x8954.valid){
continue;
}
CheckValue<IkReal> x8955 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8949*x8953))+((gconst35*x8950*x8951))+(((-1.0)*r11*x8949*x8952))+((r10*x8946*x8950)))),IkReal(((((-1.0)*gconst35*r02*r10*x8949))+(((-1.0)*r02*x8949*x8951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8954.value)))+(x8955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8956=IKcos(j4);
IkReal x8957=IKsin(j4);
IkReal x8958=(cj2*sj1);
IkReal x8959=(cj1*sj2);
IkReal x8960=(r11*sj3);
IkReal x8961=(cj3*r20);
IkReal x8962=(sj1*sj2);
IkReal x8963=(cj1*cj2);
IkReal x8964=(cj3*r10);
IkReal x8965=(cj3*gconst36);
IkReal x8966=(r00*sj3);
IkReal x8967=(r01*sj3);
IkReal x8968=(r20*sj3);
IkReal x8969=((1.0)*cj3);
IkReal x8970=(r10*sj3);
IkReal x8971=(r21*sj3);
IkReal x8972=(cj3*r00);
IkReal x8973=(gconst35*x8957);
IkReal x8974=(gconst35*x8956);
IkReal x8975=(gconst36*x8957);
IkReal x8976=((1.0)*x8956);
IkReal x8977=(cj3*x8956);
IkReal x8978=(x8958+x8959);
evalcond[0]=(((r21*x8974))+((r22*x8957))+(((-1.0)*gconst36*r20*x8976)));
evalcond[1]=(((r02*x8957))+((r01*x8974))+(((-1.0)*gconst36*r00*x8976)));
evalcond[2]=((1.0)+((r11*x8974))+(((-1.0)*gconst36*r10*x8976))+((r12*x8957)));
evalcond[3]=((((-1.0)*r11*x8969*x8973))+((r12*x8977))+((gconst36*x8960))+((x8964*x8975))+((gconst35*x8970)));
evalcond[4]=(((r11*x8965))+((gconst35*x8964))+(((-1.0)*r12*sj3*x8976))+((x8960*x8973))+(((-1.0)*x8970*x8975)));
evalcond[5]=(((gconst35*x8966))+((gconst36*x8967))+x8978+(((-1.0)*r01*x8969*x8973))+((r02*x8977))+((r00*x8957*x8965)));
evalcond[6]=(((x8971*x8973))+((gconst35*x8961))+x8978+(((-1.0)*x8968*x8975))+(((-1.0)*r22*sj3*x8976))+((r21*x8965)));
evalcond[7]=(((gconst35*x8968))+x8962+((x8961*x8975))+(((-1.0)*x8963))+((gconst36*x8971))+(((-1.0)*r21*x8969*x8973))+((r22*x8977)));
evalcond[8]=((((-1.0)*r02*sj3*x8976))+x8963+((x8967*x8973))+(((-1.0)*x8962))+((r01*x8965))+(((-1.0)*x8966*x8975))+((gconst35*x8972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8979=gconst35*gconst35;
IkReal x8980=gconst36*gconst36;
IkReal x8981=(r01*r10);
IkReal x8982=(r00*r10);
IkReal x8983=(gconst35*sj3);
IkReal x8984=(gconst36*r11);
IkReal x8985=((1.0)*r02);
IkReal x8986=(cj3*r11);
IkReal x8987=((1.0)*gconst35*gconst36);
CheckValue<IkReal> x8988 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*x8982*x8983))+(((-1.0)*r00*r11*sj3*x8980))+((sj3*x8979*x8981))+((r01*x8983*x8984)))),IkReal(((((-1.0)*r10*x8983*x8985))+(((-1.0)*sj3*x8984*x8985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8988.valid){
continue;
}
CheckValue<IkReal> x8989=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((r01*x8979*x8986))+(((-1.0)*cj3*gconst35*r00*x8984))+(((-1.0)*cj3*x8981*x8987))+((cj3*x8980*x8982)))),-1);
if(!x8989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8988.value)+(((1.5707963267949)*(x8989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8990=IKcos(j4);
IkReal x8991=IKsin(j4);
IkReal x8992=(cj2*sj1);
IkReal x8993=(cj1*sj2);
IkReal x8994=(r11*sj3);
IkReal x8995=(cj3*r20);
IkReal x8996=(sj1*sj2);
IkReal x8997=(cj1*cj2);
IkReal x8998=(cj3*r10);
IkReal x8999=(cj3*gconst36);
IkReal x9000=(r00*sj3);
IkReal x9001=(r01*sj3);
IkReal x9002=(r20*sj3);
IkReal x9003=((1.0)*cj3);
IkReal x9004=(r10*sj3);
IkReal x9005=(r21*sj3);
IkReal x9006=(cj3*r00);
IkReal x9007=(gconst35*x8991);
IkReal x9008=(gconst35*x8990);
IkReal x9009=(gconst36*x8991);
IkReal x9010=((1.0)*x8990);
IkReal x9011=(cj3*x8990);
IkReal x9012=(x8992+x8993);
evalcond[0]=(((r21*x9008))+(((-1.0)*gconst36*r20*x9010))+((r22*x8991)));
evalcond[1]=((((-1.0)*gconst36*r00*x9010))+((r02*x8991))+((r01*x9008)));
evalcond[2]=((1.0)+(((-1.0)*gconst36*r10*x9010))+((r12*x8991))+((r11*x9008)));
evalcond[3]=(((gconst35*x9004))+(((-1.0)*r11*x9003*x9007))+((x8998*x9009))+((r12*x9011))+((gconst36*x8994)));
evalcond[4]=(((r11*x8999))+(((-1.0)*r12*sj3*x9010))+((x8994*x9007))+(((-1.0)*x9004*x9009))+((gconst35*x8998)));
evalcond[5]=(((gconst35*x9000))+x9012+((r02*x9011))+((gconst36*x9001))+((r00*x8991*x8999))+(((-1.0)*r01*x9003*x9007)));
evalcond[6]=(((r21*x8999))+(((-1.0)*r22*sj3*x9010))+x9012+((x9005*x9007))+(((-1.0)*x9002*x9009))+((gconst35*x8995)));
evalcond[7]=(((gconst35*x9002))+x8996+((r22*x9011))+((gconst36*x9005))+(((-1.0)*x8997))+(((-1.0)*r21*x9003*x9007))+((x8995*x9009)));
evalcond[8]=(((gconst35*x9006))+(((-1.0)*x9000*x9009))+((x9001*x9007))+x8997+(((-1.0)*r02*sj3*x9010))+((r01*x8999))+(((-1.0)*x8996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9013 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r20))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9013.valid){
continue;
}
CheckValue<IkReal> x9014=IKPowWithIntegerCheck(IKsign((((gconst36*r01))+((gconst35*r00)))),-1);
if(!x9014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9013.value)+(((1.5707963267949)*(x9014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9015=IKcos(j4);
IkReal x9016=IKsin(j4);
IkReal x9017=(cj2*sj1);
IkReal x9018=(cj1*sj2);
IkReal x9019=(r11*sj3);
IkReal x9020=(cj3*r20);
IkReal x9021=(sj1*sj2);
IkReal x9022=(cj1*cj2);
IkReal x9023=(cj3*r10);
IkReal x9024=(cj3*gconst36);
IkReal x9025=(r00*sj3);
IkReal x9026=(r01*sj3);
IkReal x9027=(r20*sj3);
IkReal x9028=((1.0)*cj3);
IkReal x9029=(r10*sj3);
IkReal x9030=(r21*sj3);
IkReal x9031=(cj3*r00);
IkReal x9032=(gconst35*x9016);
IkReal x9033=(gconst35*x9015);
IkReal x9034=(gconst36*x9016);
IkReal x9035=((1.0)*x9015);
IkReal x9036=(cj3*x9015);
IkReal x9037=(x9017+x9018);
evalcond[0]=(((r21*x9033))+((r22*x9016))+(((-1.0)*gconst36*r20*x9035)));
evalcond[1]=(((r01*x9033))+(((-1.0)*gconst36*r00*x9035))+((r02*x9016)));
evalcond[2]=((1.0)+(((-1.0)*gconst36*r10*x9035))+((r11*x9033))+((r12*x9016)));
evalcond[3]=(((gconst36*x9019))+(((-1.0)*r11*x9028*x9032))+((gconst35*x9029))+((x9023*x9034))+((r12*x9036)));
evalcond[4]=(((x9019*x9032))+(((-1.0)*x9029*x9034))+((gconst35*x9023))+(((-1.0)*r12*sj3*x9035))+((r11*x9024)));
evalcond[5]=((((-1.0)*r01*x9028*x9032))+x9037+((gconst35*x9025))+((r02*x9036))+((r00*x9016*x9024))+((gconst36*x9026)));
evalcond[6]=(((r21*x9024))+x9037+(((-1.0)*r22*sj3*x9035))+((gconst35*x9020))+(((-1.0)*x9027*x9034))+((x9030*x9032)));
evalcond[7]=(((x9020*x9034))+((r22*x9036))+x9021+((gconst35*x9027))+(((-1.0)*r21*x9028*x9032))+((gconst36*x9030))+(((-1.0)*x9022)));
evalcond[8]=((((-1.0)*r02*sj3*x9035))+((x9026*x9032))+((r01*x9024))+x9022+((gconst35*x9031))+(((-1.0)*x9025*x9034))+(((-1.0)*x9021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9038=((-1.0)*r20);
IkReal x9039=x8256;
CheckValue<IkReal> x9041 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9038),IKFAST_ATAN2_MAGTHRESH);
if(!x9041.valid){
continue;
}
IkReal x9040=((-1.0)*(x9041.value));
sj5=gconst35;
cj5=gconst36;
j5=x9040;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x9040;
IkReal gconst35=(r21*x9039);
IkReal gconst36=(x9038*x9039);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9042=((-1.0)*r20);
IkReal x9043=x8256;
CheckValue<IkReal> x9045 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9042),IKFAST_ATAN2_MAGTHRESH);
if(!x9045.valid){
continue;
}
IkReal x9044=((-1.0)*(x9045.value));
sj5=gconst35;
cj5=gconst36;
j5=x9044;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst34=x9044;
IkReal gconst35=(r21*x9043);
IkReal gconst36=(x9042*x9043);
CheckValue<IkReal> x9053=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9053.valid){
continue;
}
IkReal x9046=x9053.value;
IkReal x9047=(cj3*x9046);
IkReal x9048=(r11*x9047);
IkReal x9049=(r01*x9047);
IkReal x9050=(r00*x9047);
IkReal x9051=(r10*x9047);
IkReal x9052=(r20*r21*x9047);
j4eval[0]=IKsign((((cj3*r02*r12))+((r01*x9048*(r21*r21)))+((r10*r20*r21*x9049))+((r00*r20*r21*x9048))+((r10*x9050*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9054=gconst35*gconst35;
IkReal x9055=gconst36*gconst36;
IkReal x9056=((1.0)*sj3);
IkReal x9057=((1.0)*cj3);
IkReal x9058=(cj3*r01);
IkReal x9059=(gconst36*r11);
IkReal x9060=(r00*x9055);
IkReal x9061=(gconst35*gconst36*r10);
CheckValue<IkReal> x9062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9056))+(((-1.0)*r01*r11*x9054*x9056))+((gconst35*r00*sj3*x9059))+((r01*sj3*x9061))+(((-1.0)*r10*x9056*x9060)))),-1);
if(!x9062.valid){
continue;
}
CheckValue<IkReal> x9063 = IKatan2WithCheck(IkReal((((gconst35*x9058*x9059))+((r10*x9054*x9058))+(((-1.0)*r11*x9057*x9060))+(((-1.0)*r00*x9057*x9061)))),IkReal(((((-1.0)*gconst35*r02*r10*x9057))+(((-1.0)*r02*x9057*x9059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9062.value)))+(x9063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9064=IKcos(j4);
IkReal x9065=IKsin(j4);
IkReal x9066=(sj1*sj2);
IkReal x9067=(r11*sj3);
IkReal x9068=((1.0)*cj1);
IkReal x9069=(cj3*r20);
IkReal x9070=(cj3*r10);
IkReal x9071=(cj3*gconst36);
IkReal x9072=(cj2*sj1);
IkReal x9073=((1.0)*sj3);
IkReal x9074=(r01*sj3);
IkReal x9075=(gconst35*sj3);
IkReal x9076=((1.0)*cj3);
IkReal x9077=(r21*sj3);
IkReal x9078=(cj3*r00);
IkReal x9079=(cj2*x9068);
IkReal x9080=(gconst35*x9065);
IkReal x9081=(gconst35*x9064);
IkReal x9082=(gconst36*x9065);
IkReal x9083=((1.0)*x9064);
IkReal x9084=(cj3*x9064);
evalcond[0]=(((r22*x9065))+((r21*x9081))+(((-1.0)*gconst36*r20*x9083)));
evalcond[1]=((((-1.0)*gconst36*r00*x9083))+((r01*x9081))+((r02*x9065)));
evalcond[2]=((-1.0)+((r11*x9081))+((r12*x9065))+(((-1.0)*gconst36*r10*x9083)));
evalcond[3]=(((gconst36*x9067))+((x9070*x9082))+((r12*x9084))+(((-1.0)*r11*x9076*x9080))+((r10*x9075)));
evalcond[4]=((((-1.0)*r10*x9073*x9082))+((x9067*x9080))+((r11*x9071))+(((-1.0)*r12*x9064*x9073))+((gconst35*x9070)));
evalcond[5]=(((r21*x9071))+((gconst35*x9069))+((r21*x9065*x9075))+((cj1*sj2))+x9072+(((-1.0)*r22*x9064*x9073))+(((-1.0)*r20*x9073*x9082)));
evalcond[6]=(((x9069*x9082))+((r20*x9075))+x9066+(((-1.0)*x9079))+((gconst36*x9077))+(((-1.0)*r21*x9076*x9080))+((r22*x9084)));
evalcond[7]=((((-1.0)*sj2*x9068))+(((-1.0)*x9072))+((r00*x9075))+((gconst36*x9074))+((r00*x9065*x9071))+((r02*x9084))+(((-1.0)*r01*x9076*x9080)));
evalcond[8]=(x9066+(((-1.0)*r00*x9073*x9082))+(((-1.0)*x9079))+(((-1.0)*r02*x9064*x9073))+((r01*x9071))+((gconst35*x9078))+((x9074*x9080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9085=gconst35*gconst35;
IkReal x9086=gconst36*gconst36;
IkReal x9087=(r01*r10);
IkReal x9088=(r00*r10);
IkReal x9089=(gconst35*sj3);
IkReal x9090=(gconst36*r11);
IkReal x9091=((1.0)*r02);
IkReal x9092=(cj3*r11);
IkReal x9093=((1.0)*gconst35*gconst36);
CheckValue<IkReal> x9094 = IKatan2WithCheck(IkReal((((r01*x9089*x9090))+(((-1.0)*gconst36*x9088*x9089))+(((-1.0)*r00*r11*sj3*x9086))+((sj3*x9085*x9087)))),IkReal(((((-1.0)*sj3*x9090*x9091))+(((-1.0)*r10*x9089*x9091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9094.valid){
continue;
}
CheckValue<IkReal> x9095=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*cj3*gconst35*r00*x9090))+(((-1.0)*cj3*x9087*x9093))+((cj3*x9086*x9088))+((r01*x9085*x9092)))),-1);
if(!x9095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9094.value)+(((1.5707963267949)*(x9095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9096=IKcos(j4);
IkReal x9097=IKsin(j4);
IkReal x9098=(sj1*sj2);
IkReal x9099=(r11*sj3);
IkReal x9100=((1.0)*cj1);
IkReal x9101=(cj3*r20);
IkReal x9102=(cj3*r10);
IkReal x9103=(cj3*gconst36);
IkReal x9104=(cj2*sj1);
IkReal x9105=((1.0)*sj3);
IkReal x9106=(r01*sj3);
IkReal x9107=(gconst35*sj3);
IkReal x9108=((1.0)*cj3);
IkReal x9109=(r21*sj3);
IkReal x9110=(cj3*r00);
IkReal x9111=(cj2*x9100);
IkReal x9112=(gconst35*x9097);
IkReal x9113=(gconst35*x9096);
IkReal x9114=(gconst36*x9097);
IkReal x9115=((1.0)*x9096);
IkReal x9116=(cj3*x9096);
evalcond[0]=(((r21*x9113))+(((-1.0)*gconst36*r20*x9115))+((r22*x9097)));
evalcond[1]=((((-1.0)*gconst36*r00*x9115))+((r01*x9113))+((r02*x9097)));
evalcond[2]=((-1.0)+((r11*x9113))+((r12*x9097))+(((-1.0)*gconst36*r10*x9115)));
evalcond[3]=(((r12*x9116))+((r10*x9107))+((x9102*x9114))+(((-1.0)*r11*x9108*x9112))+((gconst36*x9099)));
evalcond[4]=((((-1.0)*r10*x9105*x9114))+((x9099*x9112))+(((-1.0)*r12*x9096*x9105))+((r11*x9103))+((gconst35*x9102)));
evalcond[5]=((((-1.0)*r20*x9105*x9114))+((cj1*sj2))+x9104+((r21*x9103))+((r21*x9097*x9107))+((gconst35*x9101))+(((-1.0)*r22*x9096*x9105)));
evalcond[6]=(((x9101*x9114))+((gconst36*x9109))+x9098+(((-1.0)*x9111))+(((-1.0)*r21*x9108*x9112))+((r22*x9116))+((r20*x9107)));
evalcond[7]=((((-1.0)*sj2*x9100))+(((-1.0)*x9104))+(((-1.0)*r01*x9108*x9112))+((gconst36*x9106))+((r00*x9097*x9103))+((r02*x9116))+((r00*x9107)));
evalcond[8]=(((gconst35*x9110))+x9098+(((-1.0)*x9111))+(((-1.0)*r00*x9105*x9114))+((x9106*x9112))+((r01*x9103))+(((-1.0)*r02*x9096*x9105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9117=((1.0)*gconst36);
CheckValue<IkReal> x9118 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9117))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9118.valid){
continue;
}
CheckValue<IkReal> x9119=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r00))+(((-1.0)*r01*x9117)))),-1);
if(!x9119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9118.value)+(((1.5707963267949)*(x9119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9120=IKcos(j4);
IkReal x9121=IKsin(j4);
IkReal x9122=(sj1*sj2);
IkReal x9123=(r11*sj3);
IkReal x9124=((1.0)*cj1);
IkReal x9125=(cj3*r20);
IkReal x9126=(cj3*r10);
IkReal x9127=(cj3*gconst36);
IkReal x9128=(cj2*sj1);
IkReal x9129=((1.0)*sj3);
IkReal x9130=(r01*sj3);
IkReal x9131=(gconst35*sj3);
IkReal x9132=((1.0)*cj3);
IkReal x9133=(r21*sj3);
IkReal x9134=(cj3*r00);
IkReal x9135=(cj2*x9124);
IkReal x9136=(gconst35*x9121);
IkReal x9137=(gconst35*x9120);
IkReal x9138=(gconst36*x9121);
IkReal x9139=((1.0)*x9120);
IkReal x9140=(cj3*x9120);
evalcond[0]=(((r22*x9121))+((r21*x9137))+(((-1.0)*gconst36*r20*x9139)));
evalcond[1]=(((r02*x9121))+(((-1.0)*gconst36*r00*x9139))+((r01*x9137)));
evalcond[2]=((-1.0)+(((-1.0)*gconst36*r10*x9139))+((r11*x9137))+((r12*x9121)));
evalcond[3]=(((r10*x9131))+((r12*x9140))+((gconst36*x9123))+((x9126*x9138))+(((-1.0)*r11*x9132*x9136)));
evalcond[4]=((((-1.0)*r10*x9129*x9138))+(((-1.0)*r12*x9120*x9129))+((gconst35*x9126))+((x9123*x9136))+((r11*x9127)));
evalcond[5]=((((-1.0)*r20*x9129*x9138))+(((-1.0)*r22*x9120*x9129))+((cj1*sj2))+x9128+((gconst35*x9125))+((r21*x9121*x9131))+((r21*x9127)));
evalcond[6]=(((r20*x9131))+(((-1.0)*r21*x9132*x9136))+((gconst36*x9133))+x9122+((x9125*x9138))+(((-1.0)*x9135))+((r22*x9140)));
evalcond[7]=(((r00*x9121*x9127))+((gconst36*x9130))+(((-1.0)*sj2*x9124))+(((-1.0)*r01*x9132*x9136))+((r00*x9131))+(((-1.0)*x9128))+((r02*x9140)));
evalcond[8]=(((x9130*x9136))+x9122+(((-1.0)*r02*x9120*x9129))+(((-1.0)*r00*x9129*x9138))+((gconst35*x9134))+((r01*x9127))+(((-1.0)*x9135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9141=((-1.0)*r20);
IkReal x9142=x8256;
CheckValue<IkReal> x9144 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9141),IKFAST_ATAN2_MAGTHRESH);
if(!x9144.valid){
continue;
}
IkReal x9143=((-1.0)*(x9144.value));
sj5=gconst35;
cj5=gconst36;
j5=x9143;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x9143;
IkReal gconst35=(r21*x9142);
IkReal gconst36=(x9141*x9142);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9145=((-1.0)*r20);
IkReal x9146=x8256;
CheckValue<IkReal> x9148 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9145),IKFAST_ATAN2_MAGTHRESH);
if(!x9148.valid){
continue;
}
IkReal x9147=((-1.0)*(x9148.value));
sj5=gconst35;
cj5=gconst36;
j5=x9147;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst34=x9147;
IkReal gconst35=(r21*x9146);
IkReal gconst36=(x9145*x9146);
CheckValue<IkReal> x9156=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9156.valid){
continue;
}
IkReal x9149=x9156.value;
IkReal x9150=(cj3*x9149);
IkReal x9151=(r11*x9150);
IkReal x9152=(r01*x9150);
IkReal x9153=(r00*x9150);
IkReal x9154=(r10*x9150);
IkReal x9155=(r20*r21*x9150);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x9153*(r20*r20)))+((r01*x9151*(r21*r21)))+((r10*r20*r21*x9152))+((r00*r20*r21*x9151))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9157=gconst35*gconst35;
IkReal x9158=gconst36*gconst36;
IkReal x9159=((1.0)*sj3);
IkReal x9160=(r00*r10);
IkReal x9161=(cj3*r11);
IkReal x9162=(gconst35*gconst36);
IkReal x9163=((1.0)*cj3);
IkReal x9164=(r01*r10);
IkReal x9165=(gconst36*x9163);
CheckValue<IkReal> x9166 = IKatan2WithCheck(IkReal((((r01*x9161*x9162))+((r00*x9157*x9161))+(((-1.0)*x9158*x9163*x9164))+(((-1.0)*x9160*x9162*x9163)))),IkReal(((((-1.0)*gconst35*r00*r12*x9163))+(((-1.0)*r01*r12*x9165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9166.valid){
continue;
}
CheckValue<IkReal> x9167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r11*x9157*x9159))+(((-1.0)*r02*r12*x9159))+((sj3*x9162*x9164))+(((-1.0)*x9158*x9159*x9160))+((r00*r11*sj3*x9162)))),-1);
if(!x9167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9166.value)+(((1.5707963267949)*(x9167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9168=IKcos(j4);
IkReal x9169=IKsin(j4);
IkReal x9170=(sj1*sj2);
IkReal x9171=(r11*sj3);
IkReal x9172=((1.0)*cj1);
IkReal x9173=(cj3*gconst35);
IkReal x9174=(cj2*sj1);
IkReal x9175=(cj3*gconst36);
IkReal x9176=(gconst36*r20);
IkReal x9177=(gconst36*sj3);
IkReal x9178=(gconst35*sj3);
IkReal x9179=((1.0)*cj3);
IkReal x9180=(cj2*x9172);
IkReal x9181=(gconst35*x9169);
IkReal x9182=(gconst35*x9168);
IkReal x9183=((1.0)*x9168);
IkReal x9184=(r10*x9169);
IkReal x9185=((1.0)*x9169);
IkReal x9186=(cj3*x9168);
evalcond[0]=(((r22*x9169))+(((-1.0)*x9176*x9183))+((r21*x9182)));
evalcond[1]=(((r11*x9182))+(((-1.0)*gconst36*r10*x9183))+((r12*x9169)));
evalcond[2]=((1.0)+((r02*x9169))+((r01*x9182))+(((-1.0)*gconst36*r00*x9183)));
evalcond[3]=(((r02*x9186))+((r00*x9178))+((r01*x9177))+((r00*x9169*x9175))+(((-1.0)*r01*x9173*x9185)));
evalcond[4]=(((r00*x9173))+((r01*x9169*x9178))+((r01*x9175))+(((-1.0)*r00*x9177*x9185))+(((-1.0)*r02*sj3*x9183)));
evalcond[5]=((((-1.0)*r22*sj3*x9183))+((cj1*sj2))+x9174+((r20*x9173))+((r21*x9175))+(((-1.0)*sj3*x9176*x9185))+((r21*x9169*x9178)));
evalcond[6]=((((-1.0)*r21*x9173*x9185))+((r20*x9169*x9175))+x9170+((r20*x9178))+((r21*x9177))+(((-1.0)*x9180))+((r22*x9186)));
evalcond[7]=(((r10*x9173))+(((-1.0)*x9177*x9184))+x9170+(((-1.0)*r12*sj3*x9183))+(((-1.0)*x9180))+((x9171*x9181))+((r11*x9175)));
evalcond[8]=(((r10*x9178))+(((-1.0)*r11*x9173*x9185))+(((-1.0)*x9174))+((gconst36*x9171))+((r12*x9186))+((x9175*x9184))+(((-1.0)*sj2*x9172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9187=gconst35*gconst35;
IkReal x9188=gconst36*gconst36;
IkReal x9189=((1.0)*gconst35);
IkReal x9190=(r00*sj3);
IkReal x9191=(r01*r10);
IkReal x9192=(cj3*gconst36);
IkReal x9193=((1.0)*sj3);
IkReal x9194=(r01*r11);
CheckValue<IkReal> x9195=IKPowWithIntegerCheck(IKsign((((cj3*x9187*x9194))+((cj3*r02*r12))+(((-1.0)*r00*r11*x9189*x9192))+(((-1.0)*x9189*x9191*x9192))+((cj3*r00*r10*x9188)))),-1);
if(!x9195.valid){
continue;
}
CheckValue<IkReal> x9196 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r10*x9189*x9190))+((gconst35*gconst36*sj3*x9194))+((r11*x9187*x9190))+(((-1.0)*x9188*x9191*x9193)))),IkReal(((((-1.0)*gconst36*r01*r12*x9193))+(((-1.0)*r12*x9189*x9190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9195.value)))+(x9196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9197=IKcos(j4);
IkReal x9198=IKsin(j4);
IkReal x9199=(sj1*sj2);
IkReal x9200=(r11*sj3);
IkReal x9201=((1.0)*cj1);
IkReal x9202=(cj3*gconst35);
IkReal x9203=(cj2*sj1);
IkReal x9204=(cj3*gconst36);
IkReal x9205=(gconst36*r20);
IkReal x9206=(gconst36*sj3);
IkReal x9207=(gconst35*sj3);
IkReal x9208=((1.0)*cj3);
IkReal x9209=(cj2*x9201);
IkReal x9210=(gconst35*x9198);
IkReal x9211=(gconst35*x9197);
IkReal x9212=((1.0)*x9197);
IkReal x9213=(r10*x9198);
IkReal x9214=((1.0)*x9198);
IkReal x9215=(cj3*x9197);
evalcond[0]=(((r22*x9198))+((r21*x9211))+(((-1.0)*x9205*x9212)));
evalcond[1]=((((-1.0)*gconst36*r10*x9212))+((r11*x9211))+((r12*x9198)));
evalcond[2]=((1.0)+(((-1.0)*gconst36*r00*x9212))+((r02*x9198))+((r01*x9211)));
evalcond[3]=(((r00*x9207))+((r01*x9206))+((r00*x9198*x9204))+(((-1.0)*r01*x9202*x9214))+((r02*x9215)));
evalcond[4]=(((r00*x9202))+((r01*x9204))+(((-1.0)*r00*x9206*x9214))+((r01*x9198*x9207))+(((-1.0)*r02*sj3*x9212)));
evalcond[5]=(((r20*x9202))+(((-1.0)*r22*sj3*x9212))+x9203+((cj1*sj2))+((r21*x9204))+(((-1.0)*sj3*x9205*x9214))+((r21*x9198*x9207)));
evalcond[6]=(((r20*x9207))+x9199+((r20*x9198*x9204))+((r21*x9206))+((r22*x9215))+(((-1.0)*r21*x9202*x9214))+(((-1.0)*x9209)));
evalcond[7]=((((-1.0)*x9206*x9213))+((r10*x9202))+((x9200*x9210))+(((-1.0)*r12*sj3*x9212))+((r11*x9204))+x9199+(((-1.0)*x9209)));
evalcond[8]=(((r10*x9207))+((gconst36*x9200))+(((-1.0)*r11*x9202*x9214))+((x9204*x9213))+(((-1.0)*sj2*x9201))+((r12*x9215))+(((-1.0)*x9203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9216=((1.0)*gconst36);
CheckValue<IkReal> x9217=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r10))+(((-1.0)*r11*x9216)))),-1);
if(!x9217.valid){
continue;
}
CheckValue<IkReal> x9218 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9216))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9217.value)))+(x9218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9219=IKcos(j4);
IkReal x9220=IKsin(j4);
IkReal x9221=(sj1*sj2);
IkReal x9222=(r11*sj3);
IkReal x9223=((1.0)*cj1);
IkReal x9224=(cj3*gconst35);
IkReal x9225=(cj2*sj1);
IkReal x9226=(cj3*gconst36);
IkReal x9227=(gconst36*r20);
IkReal x9228=(gconst36*sj3);
IkReal x9229=(gconst35*sj3);
IkReal x9230=((1.0)*cj3);
IkReal x9231=(cj2*x9223);
IkReal x9232=(gconst35*x9220);
IkReal x9233=(gconst35*x9219);
IkReal x9234=((1.0)*x9219);
IkReal x9235=(r10*x9220);
IkReal x9236=((1.0)*x9220);
IkReal x9237=(cj3*x9219);
evalcond[0]=((((-1.0)*x9227*x9234))+((r21*x9233))+((r22*x9220)));
evalcond[1]=((((-1.0)*gconst36*r10*x9234))+((r12*x9220))+((r11*x9233)));
evalcond[2]=((1.0)+(((-1.0)*gconst36*r00*x9234))+((r02*x9220))+((r01*x9233)));
evalcond[3]=(((r00*x9229))+((r00*x9220*x9226))+((r01*x9228))+((r02*x9237))+(((-1.0)*r01*x9224*x9236)));
evalcond[4]=(((r00*x9224))+((r01*x9226))+(((-1.0)*r02*sj3*x9234))+(((-1.0)*r00*x9228*x9236))+((r01*x9220*x9229)));
evalcond[5]=(((r21*x9220*x9229))+((r20*x9224))+x9225+((cj1*sj2))+(((-1.0)*sj3*x9227*x9236))+((r21*x9226))+(((-1.0)*r22*sj3*x9234)));
evalcond[6]=(((r20*x9229))+x9221+((r21*x9228))+((r22*x9237))+((r20*x9220*x9226))+(((-1.0)*r21*x9224*x9236))+(((-1.0)*x9231)));
evalcond[7]=(x9221+(((-1.0)*x9231))+((r11*x9226))+(((-1.0)*x9228*x9235))+((x9222*x9232))+(((-1.0)*r12*sj3*x9234))+((r10*x9224)));
evalcond[8]=((((-1.0)*r11*x9224*x9236))+(((-1.0)*sj2*x9223))+(((-1.0)*x9225))+((r12*x9237))+((x9226*x9235))+((r10*x9229))+((gconst36*x9222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9238=((-1.0)*r20);
IkReal x9239=x8256;
CheckValue<IkReal> x9241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9238),IKFAST_ATAN2_MAGTHRESH);
if(!x9241.valid){
continue;
}
IkReal x9240=((-1.0)*(x9241.value));
sj5=gconst35;
cj5=gconst36;
j5=x9240;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x9240;
IkReal gconst35=(r21*x9239);
IkReal gconst36=(x9238*x9239);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9242=((-1.0)*r20);
IkReal x9243=x8256;
CheckValue<IkReal> x9245 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9242),IKFAST_ATAN2_MAGTHRESH);
if(!x9245.valid){
continue;
}
IkReal x9244=((-1.0)*(x9245.value));
sj5=gconst35;
cj5=gconst36;
j5=x9244;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst34=x9244;
IkReal gconst35=(r21*x9243);
IkReal gconst36=(x9242*x9243);
CheckValue<IkReal> x9253=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9253.valid){
continue;
}
IkReal x9246=x9253.value;
IkReal x9247=(cj3*x9246);
IkReal x9248=(r11*x9247);
IkReal x9249=(r01*x9247);
IkReal x9250=(r00*x9247);
IkReal x9251=(r10*x9247);
IkReal x9252=(r20*r21*x9247);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x9249))+((r10*x9250*(r20*r20)))+((r00*r20*r21*x9248))+((r01*x9248*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9254=gconst35*gconst35;
IkReal x9255=gconst36*gconst36;
IkReal x9256=((1.0)*sj3);
IkReal x9257=(r00*r10);
IkReal x9258=(cj3*r11);
IkReal x9259=(gconst35*gconst36);
IkReal x9260=((1.0)*cj3);
IkReal x9261=(r01*r10);
IkReal x9262=(gconst36*x9260);
CheckValue<IkReal> x9263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r11*x9254*x9256))+(((-1.0)*x9255*x9256*x9257))+((sj3*x9259*x9261))+(((-1.0)*r02*r12*x9256))+((r00*r11*sj3*x9259)))),-1);
if(!x9263.valid){
continue;
}
CheckValue<IkReal> x9264 = IKatan2WithCheck(IkReal(((((-1.0)*x9257*x9259*x9260))+(((-1.0)*x9255*x9260*x9261))+((r00*x9254*x9258))+((r01*x9258*x9259)))),IkReal(((((-1.0)*r01*r12*x9262))+(((-1.0)*gconst35*r00*r12*x9260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9263.value)))+(x9264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9265=IKcos(j4);
IkReal x9266=IKsin(j4);
IkReal x9267=(cj2*sj1);
IkReal x9268=(cj1*sj2);
IkReal x9269=(r11*sj3);
IkReal x9270=(cj3*r20);
IkReal x9271=(sj1*sj2);
IkReal x9272=(cj3*r10);
IkReal x9273=(cj1*cj2);
IkReal x9274=(cj3*gconst36);
IkReal x9275=(r00*sj3);
IkReal x9276=(r01*sj3);
IkReal x9277=(r20*sj3);
IkReal x9278=((1.0)*cj3);
IkReal x9279=(r10*sj3);
IkReal x9280=(r21*sj3);
IkReal x9281=(cj3*r00);
IkReal x9282=(gconst35*x9266);
IkReal x9283=(gconst35*x9265);
IkReal x9284=(gconst36*x9266);
IkReal x9285=((1.0)*x9265);
IkReal x9286=(cj3*x9265);
IkReal x9287=(x9267+x9268);
evalcond[0]=(((r22*x9266))+((r21*x9283))+(((-1.0)*gconst36*r20*x9285)));
evalcond[1]=(((r12*x9266))+((r11*x9283))+(((-1.0)*gconst36*r10*x9285)));
evalcond[2]=((-1.0)+(((-1.0)*gconst36*r00*x9285))+((r01*x9283))+((r02*x9266)));
evalcond[3]=((((-1.0)*r01*x9278*x9282))+((r02*x9286))+((gconst35*x9275))+((r00*x9266*x9274))+((gconst36*x9276)));
evalcond[4]=((((-1.0)*r02*sj3*x9285))+((gconst35*x9281))+((x9276*x9282))+((r01*x9274))+(((-1.0)*x9275*x9284)));
evalcond[5]=(((gconst35*x9279))+x9287+((x9272*x9284))+((gconst36*x9269))+(((-1.0)*r11*x9278*x9282))+((r12*x9286)));
evalcond[6]=((((-1.0)*x9277*x9284))+((gconst35*x9270))+x9287+((x9280*x9282))+((r21*x9274))+(((-1.0)*r22*sj3*x9285)));
evalcond[7]=(((gconst35*x9277))+((r22*x9286))+x9271+((gconst36*x9280))+((x9270*x9284))+(((-1.0)*r21*x9278*x9282))+(((-1.0)*x9273)));
evalcond[8]=(((gconst35*x9272))+x9273+(((-1.0)*r12*sj3*x9285))+((x9269*x9282))+(((-1.0)*x9271))+(((-1.0)*x9279*x9284))+((r11*x9274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9288=gconst35*gconst35;
IkReal x9289=gconst36*gconst36;
IkReal x9290=((1.0)*gconst35);
IkReal x9291=(r00*sj3);
IkReal x9292=(r01*r10);
IkReal x9293=(cj3*gconst36);
IkReal x9294=((1.0)*sj3);
IkReal x9295=(r01*r11);
CheckValue<IkReal> x9296 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r10*x9290*x9291))+((r11*x9288*x9291))+((gconst35*gconst36*sj3*x9295))+(((-1.0)*x9289*x9292*x9294)))),IkReal(((((-1.0)*gconst36*r01*r12*x9294))+(((-1.0)*r12*x9290*x9291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9296.valid){
continue;
}
CheckValue<IkReal> x9297=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*x9290*x9292*x9293))+((cj3*r00*r10*x9289))+(((-1.0)*r00*r11*x9290*x9293))+((cj3*x9288*x9295)))),-1);
if(!x9297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9296.value)+(((1.5707963267949)*(x9297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9298=IKcos(j4);
IkReal x9299=IKsin(j4);
IkReal x9300=(cj2*sj1);
IkReal x9301=(cj1*sj2);
IkReal x9302=(r11*sj3);
IkReal x9303=(cj3*r20);
IkReal x9304=(sj1*sj2);
IkReal x9305=(cj3*r10);
IkReal x9306=(cj1*cj2);
IkReal x9307=(cj3*gconst36);
IkReal x9308=(r00*sj3);
IkReal x9309=(r01*sj3);
IkReal x9310=(r20*sj3);
IkReal x9311=((1.0)*cj3);
IkReal x9312=(r10*sj3);
IkReal x9313=(r21*sj3);
IkReal x9314=(cj3*r00);
IkReal x9315=(gconst35*x9299);
IkReal x9316=(gconst35*x9298);
IkReal x9317=(gconst36*x9299);
IkReal x9318=((1.0)*x9298);
IkReal x9319=(cj3*x9298);
IkReal x9320=(x9300+x9301);
evalcond[0]=(((r22*x9299))+((r21*x9316))+(((-1.0)*gconst36*r20*x9318)));
evalcond[1]=((((-1.0)*gconst36*r10*x9318))+((r11*x9316))+((r12*x9299)));
evalcond[2]=((-1.0)+((r02*x9299))+((r01*x9316))+(((-1.0)*gconst36*r00*x9318)));
evalcond[3]=(((gconst36*x9309))+(((-1.0)*r01*x9311*x9315))+((r02*x9319))+((r00*x9299*x9307))+((gconst35*x9308)));
evalcond[4]=((((-1.0)*r02*sj3*x9318))+((x9309*x9315))+((gconst35*x9314))+((r01*x9307))+(((-1.0)*x9308*x9317)));
evalcond[5]=(((gconst36*x9302))+((x9305*x9317))+x9320+((gconst35*x9312))+((r12*x9319))+(((-1.0)*r11*x9311*x9315)));
evalcond[6]=((((-1.0)*x9310*x9317))+((x9313*x9315))+x9320+((r21*x9307))+((gconst35*x9303))+(((-1.0)*r22*sj3*x9318)));
evalcond[7]=(((r22*x9319))+x9304+(((-1.0)*r21*x9311*x9315))+((gconst35*x9310))+(((-1.0)*x9306))+((x9303*x9317))+((gconst36*x9313)));
evalcond[8]=(x9306+((gconst35*x9305))+(((-1.0)*x9312*x9317))+(((-1.0)*r12*sj3*x9318))+(((-1.0)*x9304))+((r11*x9307))+((x9302*x9315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9321 = IKatan2WithCheck(IkReal(((((-1.0)*gconst36*r20))+((gconst35*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9321.valid){
continue;
}
CheckValue<IkReal> x9322=IKPowWithIntegerCheck(IKsign((((gconst36*r11))+((gconst35*r10)))),-1);
if(!x9322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9321.value)+(((1.5707963267949)*(x9322.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9323=IKcos(j4);
IkReal x9324=IKsin(j4);
IkReal x9325=(cj2*sj1);
IkReal x9326=(cj1*sj2);
IkReal x9327=(r11*sj3);
IkReal x9328=(cj3*r20);
IkReal x9329=(sj1*sj2);
IkReal x9330=(cj3*r10);
IkReal x9331=(cj1*cj2);
IkReal x9332=(cj3*gconst36);
IkReal x9333=(r00*sj3);
IkReal x9334=(r01*sj3);
IkReal x9335=(r20*sj3);
IkReal x9336=((1.0)*cj3);
IkReal x9337=(r10*sj3);
IkReal x9338=(r21*sj3);
IkReal x9339=(cj3*r00);
IkReal x9340=(gconst35*x9324);
IkReal x9341=(gconst35*x9323);
IkReal x9342=(gconst36*x9324);
IkReal x9343=((1.0)*x9323);
IkReal x9344=(cj3*x9323);
IkReal x9345=(x9326+x9325);
evalcond[0]=(((r22*x9324))+((r21*x9341))+(((-1.0)*gconst36*r20*x9343)));
evalcond[1]=(((r11*x9341))+((r12*x9324))+(((-1.0)*gconst36*r10*x9343)));
evalcond[2]=((-1.0)+((r01*x9341))+(((-1.0)*gconst36*r00*x9343))+((r02*x9324)));
evalcond[3]=(((r00*x9324*x9332))+((gconst36*x9334))+((gconst35*x9333))+(((-1.0)*r01*x9336*x9340))+((r02*x9344)));
evalcond[4]=(((r01*x9332))+(((-1.0)*x9333*x9342))+(((-1.0)*r02*sj3*x9343))+((gconst35*x9339))+((x9334*x9340)));
evalcond[5]=(((r12*x9344))+x9345+((x9330*x9342))+((gconst36*x9327))+((gconst35*x9337))+(((-1.0)*r11*x9336*x9340)));
evalcond[6]=(x9345+(((-1.0)*r22*sj3*x9343))+((gconst35*x9328))+(((-1.0)*x9335*x9342))+((x9338*x9340))+((r21*x9332)));
evalcond[7]=(x9329+(((-1.0)*x9331))+((gconst36*x9338))+((gconst35*x9335))+((r22*x9344))+((x9328*x9342))+(((-1.0)*r21*x9336*x9340)));
evalcond[8]=((((-1.0)*x9337*x9342))+(((-1.0)*r12*sj3*x9343))+(((-1.0)*x9329))+x9331+((r11*x9332))+((x9327*x9340))+((gconst35*x9330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9346=((-1.0)*r20);
IkReal x9347=((-1.0)*px);
CheckValue<IkReal> x9349 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9346),IKFAST_ATAN2_MAGTHRESH);
if(!x9349.valid){
continue;
}
IkReal x9348=((-1.0)*(x9349.value));
sj5=gconst35;
cj5=gconst36;
j5=x9348;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9347);
rxp1_1=(px*r21);
rxp1_2=(r11*x9347);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x9348;
IkReal gconst35=r21;
IkReal gconst36=x9346;
j4eval[0]=r02;
j4eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9350=((-1.0)*r20);
IkReal x9351=((-1.0)*px);
CheckValue<IkReal> x9353 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9350),IKFAST_ATAN2_MAGTHRESH);
if(!x9353.valid){
continue;
}
IkReal x9352=((-1.0)*(x9353.value));
sj5=gconst35;
cj5=gconst36;
j5=x9352;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9351);
rxp1_1=(px*r21);
rxp1_2=(r11*x9351);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x9352;
IkReal gconst35=r21;
IkReal gconst36=x9350;
j4eval[0]=(((sj3*(r21*r21)))+sj3+(((-1.0)*sj3*(r10*r10))));
j4eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9354=((-1.0)*r20);
IkReal x9355=((-1.0)*px);
CheckValue<IkReal> x9357 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9354),IKFAST_ATAN2_MAGTHRESH);
if(!x9357.valid){
continue;
}
IkReal x9356=((-1.0)*(x9357.value));
sj5=gconst35;
cj5=gconst36;
j5=x9356;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9355);
rxp1_1=(px*r21);
rxp1_2=(r11*x9355);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst34=x9356;
IkReal gconst35=r21;
IkReal gconst36=x9354;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9358=((-1.0)*r20);
IkReal x9359=((-1.0)*px);
CheckValue<IkReal> x9361 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9358),IKFAST_ATAN2_MAGTHRESH);
if(!x9361.valid){
continue;
}
IkReal x9360=((-1.0)*(x9361.value));
sj5=gconst35;
cj5=gconst36;
j5=x9360;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9359);
rxp1_1=(px*r21);
rxp1_2=(r11*x9359);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst34=x9360;
IkReal gconst35=r21;
IkReal gconst36=x9358;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9362=((-1.0)*r20);
IkReal x9363=((-1.0)*px);
CheckValue<IkReal> x9365 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9362),IKFAST_ATAN2_MAGTHRESH);
if(!x9365.valid){
continue;
}
IkReal x9364=((-1.0)*(x9365.value));
sj5=gconst35;
cj5=gconst36;
j5=x9364;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9363);
rxp1_1=(px*r21);
rxp1_2=(r11*x9363);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst34=x9364;
IkReal gconst35=r21;
IkReal gconst36=x9362;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9366=((-1.0)*r20);
IkReal x9367=((-1.0)*px);
CheckValue<IkReal> x9369 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9366),IKFAST_ATAN2_MAGTHRESH);
if(!x9369.valid){
continue;
}
IkReal x9368=((-1.0)*(x9369.value));
sj5=gconst35;
cj5=gconst36;
j5=x9368;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9367);
rxp1_1=(px*r21);
rxp1_2=(r11*x9367);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst34=x9368;
IkReal gconst35=r21;
IkReal gconst36=x9366;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9372=IKPowWithIntegerCheck(((((-1.0)*gconst35*r11))+((gconst36*r10))),-1);
if(!x9372.valid){
continue;
}
IkReal x9370=x9372.value;
IkReal x9371=(cj0*x9370);
sj4array[0]=(((cj2*sj1*x9371))+((cj1*sj2*x9371)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9373=IKcos(j4);
IkReal x9374=IKsin(j4);
IkReal x9375=(gconst35*r21);
IkReal x9376=((1.0)*gconst36*x9373);
evalcond[0]=(r02*x9373);
evalcond[1]=(cj0+((r02*x9374)));
evalcond[2]=((((-1.0)*r20*x9376))+((x9373*x9375)));
evalcond[3]=(((gconst35*r11*x9373))+(((-1.0)*r10*x9376)));
evalcond[4]=((((-1.0)*x9374*x9375))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst36*r20*x9374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9378=IKPowWithIntegerCheck(((((-1.0)*gconst35*r21))+((gconst36*r20))),-1);
if(!x9378.valid){
continue;
}
IkReal x9377=x9378.value;
sj4array[0]=((((-1.0)*sj1*sj2*x9377))+((cj1*cj2*x9377)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9379=IKcos(j4);
IkReal x9380=IKsin(j4);
IkReal x9381=(gconst35*r11);
IkReal x9382=((1.0)*cj0);
IkReal x9383=((1.0)*gconst36*x9379);
evalcond[0]=(r02*x9379);
evalcond[1]=(((r02*x9380))+cj0);
evalcond[2]=((((-1.0)*r20*x9383))+((gconst35*r21*x9379)));
evalcond[3]=((((-1.0)*r10*x9383))+((x9379*x9381)));
evalcond[4]=((((-1.0)*x9380*x9381))+(((-1.0)*cj2*sj1*x9382))+(((-1.0)*cj1*sj2*x9382))+((gconst36*r10*x9380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9384=IKPowWithIntegerCheck(r02,-1);
if(!x9384.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x9384.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9385=IKcos(j4);
IkReal x9386=IKsin(j4);
IkReal x9387=(gconst36*r20);
IkReal x9388=((1.0)*cj0);
IkReal x9389=(gconst36*r10);
IkReal x9390=((1.0)*x9385);
IkReal x9391=(gconst35*x9385);
IkReal x9392=((1.0)*gconst35*x9386);
evalcond[0]=(r02*x9385);
evalcond[1]=((((-1.0)*x9387*x9390))+((r21*x9391)));
evalcond[2]=(((r11*x9391))+(((-1.0)*x9389*x9390)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9386*x9387))+(((-1.0)*r21*x9392)));
evalcond[4]=((((-1.0)*r11*x9392))+(((-1.0)*cj2*sj1*x9388))+(((-1.0)*cj1*sj2*x9388))+((x9386*x9389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9393=((-1.0)*r20);
IkReal x9394=((-1.0)*px);
CheckValue<IkReal> x9396 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9393),IKFAST_ATAN2_MAGTHRESH);
if(!x9396.valid){
continue;
}
IkReal x9395=((-1.0)*(x9396.value));
sj5=gconst35;
cj5=gconst36;
j5=x9395;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9394);
rxp1_1=(px*r21);
rxp1_2=(r11*x9394);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst34=x9395;
IkReal gconst35=r21;
IkReal gconst36=x9393;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9397=((-1.0)*r20);
IkReal x9398=((-1.0)*px);
CheckValue<IkReal> x9400 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9397),IKFAST_ATAN2_MAGTHRESH);
if(!x9400.valid){
continue;
}
IkReal x9399=((-1.0)*(x9400.value));
sj5=gconst35;
cj5=gconst36;
j5=x9399;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9398);
rxp1_1=(px*r21);
rxp1_2=(r11*x9398);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst34=x9399;
IkReal gconst35=r21;
IkReal gconst36=x9397;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9401=((-1.0)*r20);
IkReal x9402=((-1.0)*px);
CheckValue<IkReal> x9404 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9401),IKFAST_ATAN2_MAGTHRESH);
if(!x9404.valid){
continue;
}
IkReal x9403=((-1.0)*(x9404.value));
sj5=gconst35;
cj5=gconst36;
j5=x9403;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9402);
rxp1_1=(px*r21);
rxp1_2=(r11*x9402);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst34=x9403;
IkReal gconst35=r21;
IkReal gconst36=x9401;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9407=IKPowWithIntegerCheck(((((-1.0)*gconst36*r10))+((gconst35*r11))),-1);
if(!x9407.valid){
continue;
}
IkReal x9405=x9407.value;
IkReal x9406=(cj0*x9405);
sj4array[0]=(((cj2*sj1*x9406))+((cj1*sj2*x9406)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9408=IKcos(j4);
IkReal x9409=IKsin(j4);
IkReal x9410=(gconst35*r21);
IkReal x9411=((1.0)*gconst36*x9408);
evalcond[0]=((-1.0)*r02*x9408);
evalcond[1]=(cj0+((r02*x9409)));
evalcond[2]=((((-1.0)*r20*x9411))+((x9408*x9410)));
evalcond[3]=(((gconst35*r11*x9408))+(((-1.0)*r10*x9411)));
evalcond[4]=(((x9409*x9410))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst36*r20*x9409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9413=IKPowWithIntegerCheck(((((-1.0)*gconst36*r20))+((gconst35*r21))),-1);
if(!x9413.valid){
continue;
}
IkReal x9412=x9413.value;
sj4array[0]=(((cj1*cj2*x9412))+(((-1.0)*sj1*sj2*x9412)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9414=IKcos(j4);
IkReal x9415=IKsin(j4);
IkReal x9416=((1.0)*cj0);
IkReal x9417=(gconst35*r11);
IkReal x9418=((1.0)*gconst36*x9414);
evalcond[0]=((-1.0)*r02*x9414);
evalcond[1]=(cj0+((r02*x9415)));
evalcond[2]=((((-1.0)*r20*x9418))+((gconst35*r21*x9414)));
evalcond[3]=(((x9414*x9417))+(((-1.0)*r10*x9418)));
evalcond[4]=((((-1.0)*gconst36*r10*x9415))+((x9415*x9417))+(((-1.0)*cj2*sj1*x9416))+(((-1.0)*cj1*sj2*x9416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9419=IKPowWithIntegerCheck(r02,-1);
if(!x9419.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x9419.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9420=IKcos(j4);
IkReal x9421=IKsin(j4);
IkReal x9422=((1.0)*cj0);
IkReal x9423=(gconst35*x9421);
IkReal x9424=(gconst35*x9420);
IkReal x9425=((1.0)*gconst36*x9420);
IkReal x9426=((1.0)*gconst36*x9421);
evalcond[0]=((-1.0)*r02*x9420);
evalcond[1]=((((-1.0)*r20*x9425))+((r21*x9424)));
evalcond[2]=((((-1.0)*r10*x9425))+((r11*x9424)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9426))+((r21*x9423)));
evalcond[4]=((((-1.0)*r10*x9426))+(((-1.0)*cj2*sj1*x9422))+(((-1.0)*cj1*sj2*x9422))+((r11*x9423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9428=IKPowWithIntegerCheck(r02,-1);
if(!x9428.valid){
continue;
}
IkReal x9427=x9428.value;
CheckValue<IkReal> x9429=IKPowWithIntegerCheck(sj3,-1);
if(!x9429.valid){
continue;
}
if( IKabs(((-1.0)*cj0*x9427)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x9427*(x9429.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*x9427))+IKsqr((x9427*(x9429.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*x9427), (x9427*(x9429.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9430=IKcos(j4);
IkReal x9431=IKsin(j4);
IkReal x9432=(gconst36*r11);
IkReal x9433=(cj2*sj0);
IkReal x9434=(sj1*sj2);
IkReal x9435=(cj3*gconst35);
IkReal x9436=(cj3*gconst36);
IkReal x9437=(gconst36*r20);
IkReal x9438=(cj2*sj1);
IkReal x9439=((1.0)*cj0);
IkReal x9440=(cj1*sj2);
IkReal x9441=(gconst35*sj3);
IkReal x9442=(gconst36*sj3);
IkReal x9443=(gconst35*x9430);
IkReal x9444=((1.0)*cj1*cj2);
IkReal x9445=(r10*x9431);
IkReal x9446=((1.0)*x9430);
IkReal x9447=((1.0)*x9431);
IkReal x9448=(x9431*x9441);
evalcond[0]=(cj0+((r02*x9431)));
evalcond[1]=(((r21*x9443))+(((-1.0)*x9437*x9446)));
evalcond[2]=(sj0+(((-1.0)*gconst36*r10*x9446))+((r11*x9443)));
evalcond[3]=(((cj3*r02*x9430))+((sj0*x9440))+((sj1*x9433)));
evalcond[4]=((((-1.0)*r02*sj3*x9446))+(((-1.0)*sj0*x9434))+((cj1*x9433)));
evalcond[5]=(((r21*x9448))+((r20*x9435))+((r21*x9436))+x9438+x9440+(((-1.0)*sj3*x9437*x9447)));
evalcond[6]=((((-1.0)*x9444))+((r21*x9442))+x9434+((r20*x9441))+(((-1.0)*r21*x9435*x9447))+((r20*x9431*x9436)));
evalcond[7]=((((-1.0)*cj1*cj2*x9439))+((cj0*x9434))+((cj3*x9432))+((r11*x9448))+((r10*x9435))+(((-1.0)*x9442*x9445)));
evalcond[8]=((((-1.0)*x9438*x9439))+((r10*x9441))+(((-1.0)*x9439*x9440))+(((-1.0)*r11*x9435*x9447))+((sj3*x9432))+((x9436*x9445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9449=((1.0)*gconst36);
CheckValue<IkReal> x9450=IKPowWithIntegerCheck((((gconst35*r21*sj3))+(((-1.0)*r20*sj3*x9449))),-1);
if(!x9450.valid){
continue;
}
CheckValue<IkReal> x9451=IKPowWithIntegerCheck(((((-1.0)*r10*x9449))+((gconst35*r11))),-1);
if(!x9451.valid){
continue;
}
if( IKabs(((x9450.value)*(((((-1.0)*cj3*r21*x9449))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*gconst35*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x9451.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9450.value)*(((((-1.0)*cj3*r21*x9449))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*gconst35*r20))))))+IKsqr(((-1.0)*sj0*(x9451.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9450.value)*(((((-1.0)*cj3*r21*x9449))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*gconst35*r20))))), ((-1.0)*sj0*(x9451.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9452=IKcos(j4);
IkReal x9453=IKsin(j4);
IkReal x9454=(gconst36*r11);
IkReal x9455=(cj2*sj0);
IkReal x9456=(sj1*sj2);
IkReal x9457=(cj3*gconst35);
IkReal x9458=(cj3*gconst36);
IkReal x9459=(gconst36*r20);
IkReal x9460=(cj2*sj1);
IkReal x9461=((1.0)*cj0);
IkReal x9462=(cj1*sj2);
IkReal x9463=(gconst35*sj3);
IkReal x9464=(gconst36*sj3);
IkReal x9465=(gconst35*x9452);
IkReal x9466=((1.0)*cj1*cj2);
IkReal x9467=(r10*x9453);
IkReal x9468=((1.0)*x9452);
IkReal x9469=((1.0)*x9453);
IkReal x9470=(x9453*x9463);
evalcond[0]=(cj0+((r02*x9453)));
evalcond[1]=(((r21*x9465))+(((-1.0)*x9459*x9468)));
evalcond[2]=(sj0+(((-1.0)*gconst36*r10*x9468))+((r11*x9465)));
evalcond[3]=(((sj1*x9455))+((sj0*x9462))+((cj3*r02*x9452)));
evalcond[4]=((((-1.0)*sj0*x9456))+(((-1.0)*r02*sj3*x9468))+((cj1*x9455)));
evalcond[5]=(((r21*x9458))+((r21*x9470))+x9460+x9462+((r20*x9457))+(((-1.0)*sj3*x9459*x9469)));
evalcond[6]=((((-1.0)*x9466))+((r21*x9464))+((r20*x9453*x9458))+((r20*x9463))+x9456+(((-1.0)*r21*x9457*x9469)));
evalcond[7]=(((r10*x9457))+((cj3*x9454))+((cj0*x9456))+(((-1.0)*cj1*cj2*x9461))+(((-1.0)*x9464*x9467))+((r11*x9470)));
evalcond[8]=((((-1.0)*r11*x9457*x9469))+((r10*x9463))+((x9458*x9467))+((sj3*x9454))+(((-1.0)*x9460*x9461))+(((-1.0)*x9461*x9462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9471=IKPowWithIntegerCheck(r02,-1);
if(!x9471.valid){
continue;
}
CheckValue<IkReal> x9472=IKPowWithIntegerCheck(((((-1.0)*gconst36*r10))+((gconst35*r11))),-1);
if(!x9472.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9471.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x9472.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9471.value)))+IKsqr(((-1.0)*sj0*(x9472.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9471.value)), ((-1.0)*sj0*(x9472.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9473=IKcos(j4);
IkReal x9474=IKsin(j4);
IkReal x9475=(gconst36*r11);
IkReal x9476=(cj2*sj0);
IkReal x9477=(sj1*sj2);
IkReal x9478=(cj3*gconst35);
IkReal x9479=(cj3*gconst36);
IkReal x9480=(gconst36*r20);
IkReal x9481=(cj2*sj1);
IkReal x9482=((1.0)*cj0);
IkReal x9483=(cj1*sj2);
IkReal x9484=(gconst35*sj3);
IkReal x9485=(gconst36*sj3);
IkReal x9486=(gconst35*x9473);
IkReal x9487=((1.0)*cj1*cj2);
IkReal x9488=(r10*x9474);
IkReal x9489=((1.0)*x9473);
IkReal x9490=((1.0)*x9474);
IkReal x9491=(x9474*x9484);
evalcond[0]=(cj0+((r02*x9474)));
evalcond[1]=(((r21*x9486))+(((-1.0)*x9480*x9489)));
evalcond[2]=(sj0+(((-1.0)*gconst36*r10*x9489))+((r11*x9486)));
evalcond[3]=(((cj3*r02*x9473))+((sj0*x9483))+((sj1*x9476)));
evalcond[4]=(((cj1*x9476))+(((-1.0)*sj0*x9477))+(((-1.0)*r02*sj3*x9489)));
evalcond[5]=(((r21*x9479))+x9483+x9481+((r20*x9478))+((r21*x9491))+(((-1.0)*sj3*x9480*x9490)));
evalcond[6]=(((r21*x9485))+(((-1.0)*r21*x9478*x9490))+(((-1.0)*x9487))+((r20*x9484))+x9477+((r20*x9474*x9479)));
evalcond[7]=(((cj3*x9475))+((r10*x9478))+(((-1.0)*x9485*x9488))+((cj0*x9477))+((r11*x9491))+(((-1.0)*cj1*cj2*x9482)));
evalcond[8]=((((-1.0)*r11*x9478*x9490))+(((-1.0)*x9481*x9482))+((sj3*x9475))+(((-1.0)*x9482*x9483))+((x9479*x9488))+((r10*x9484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9492=gconst36*gconst36;
IkReal x9493=r20*r20;
IkReal x9494=gconst35*gconst35;
IkReal x9495=r21*r21;
IkReal x9496=((1.0)*gconst36);
IkReal x9497=(sj1*sj2);
IkReal x9498=(gconst35*sj3);
IkReal x9499=(r20*r21);
IkReal x9500=(cj1*cj2);
IkReal x9501=(gconst35*r21);
IkReal x9502=((1.0)*r22);
CheckValue<IkReal> x9503 = IKatan2WithCheck(IkReal((((gconst36*r20*x9500))+(((-1.0)*x9493*x9496*x9498))+(((-1.0)*x9500*x9501))+((x9497*x9501))+((sj3*x9494*x9499))+(((-1.0)*sj3*x9492*x9499))+(((-1.0)*r20*x9496*x9497))+((gconst36*x9495*x9498)))),IkReal(((((-1.0)*r20*x9498*x9502))+(((-1.0)*r21*r22*sj3*x9496))+((r22*x9500))+(((-1.0)*x9497*x9502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9503.valid){
continue;
}
CheckValue<IkReal> x9504=IKPowWithIntegerCheck(IKsign((((cj3*x9494*x9495))+((cj3*(r22*r22)))+(((-2.0)*cj3*gconst35*gconst36*x9499))+((cj3*x9492*x9493)))),-1);
if(!x9504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9503.value)+(((1.5707963267949)*(x9504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9505=IKcos(j4);
IkReal x9506=IKsin(j4);
IkReal x9507=(gconst35*r21);
IkReal x9508=(gconst36*r11);
IkReal x9509=(cj2*sj0);
IkReal x9510=(gconst35*r01);
IkReal x9511=(sj1*sj2);
IkReal x9512=(cj3*gconst35);
IkReal x9513=(cj3*gconst36);
IkReal x9514=((1.0)*gconst36);
IkReal x9515=(cj2*sj1);
IkReal x9516=(gconst36*sj3);
IkReal x9517=((1.0)*cj0);
IkReal x9518=(cj1*sj2);
IkReal x9519=(gconst35*sj3);
IkReal x9520=(gconst35*r11);
IkReal x9521=(sj3*x9506);
IkReal x9522=((1.0)*cj1*cj2);
IkReal x9523=(cj3*x9505);
IkReal x9524=((1.0)*sj3*x9505);
IkReal x9525=((1.0)*cj3*x9506);
evalcond[0]=(((x9505*x9507))+((r22*x9506))+(((-1.0)*r20*x9505*x9514)));
evalcond[1]=(((x9505*x9510))+cj0+(((-1.0)*r00*x9505*x9514))+((r02*x9506)));
evalcond[2]=((((-1.0)*r10*x9505*x9514))+sj0+((r12*x9506))+((x9505*x9520)));
evalcond[3]=(((r21*x9513))+(((-1.0)*r20*x9514*x9521))+(((-1.0)*r22*x9524))+x9515+x9518+((x9507*x9521))+((r20*x9512)));
evalcond[4]=(((r21*x9516))+(((-1.0)*x9507*x9525))+x9511+(((-1.0)*x9522))+((r22*x9523))+((r20*x9519))+((r20*x9506*x9513)));
evalcond[5]=(((r00*x9519))+((r02*x9523))+((r01*x9516))+(((-1.0)*x9510*x9525))+((sj0*x9518))+((r00*x9506*x9513))+((sj1*x9509)));
evalcond[6]=(((r00*x9512))+((r01*x9513))+(((-1.0)*r02*x9524))+(((-1.0)*sj0*x9511))+(((-1.0)*r00*x9514*x9521))+((x9510*x9521))+((cj1*x9509)));
evalcond[7]=((((-1.0)*r12*x9524))+(((-1.0)*cj1*cj2*x9517))+((cj0*x9511))+((r11*x9506*x9519))+((r10*x9512))+(((-1.0)*r10*x9514*x9521))+((cj3*x9508)));
evalcond[8]=((((-1.0)*x9517*x9518))+(((-1.0)*r11*x9506*x9512))+((r12*x9523))+((r10*x9506*x9513))+(((-1.0)*x9515*x9517))+((r10*x9519))+((sj3*x9508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9526=((1.0)*gconst36);
CheckValue<IkReal> x9527=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9526))+(((-1.0)*gconst35*r10)))),-1);
if(!x9527.valid){
continue;
}
CheckValue<IkReal> x9528 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x9526))+((cj0*gconst35*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9527.value)))+(x9528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9529=IKcos(j4);
IkReal x9530=IKsin(j4);
IkReal x9531=(gconst35*r21);
IkReal x9532=(gconst36*r11);
IkReal x9533=(cj2*sj0);
IkReal x9534=(gconst35*r01);
IkReal x9535=(sj1*sj2);
IkReal x9536=(cj3*gconst35);
IkReal x9537=(cj3*gconst36);
IkReal x9538=((1.0)*gconst36);
IkReal x9539=(cj2*sj1);
IkReal x9540=(gconst36*sj3);
IkReal x9541=((1.0)*cj0);
IkReal x9542=(cj1*sj2);
IkReal x9543=(gconst35*sj3);
IkReal x9544=(gconst35*r11);
IkReal x9545=(sj3*x9530);
IkReal x9546=((1.0)*cj1*cj2);
IkReal x9547=(cj3*x9529);
IkReal x9548=((1.0)*sj3*x9529);
IkReal x9549=((1.0)*cj3*x9530);
evalcond[0]=(((x9529*x9531))+(((-1.0)*r20*x9529*x9538))+((r22*x9530)));
evalcond[1]=(((r02*x9530))+((x9529*x9534))+cj0+(((-1.0)*r00*x9529*x9538)));
evalcond[2]=(sj0+((x9529*x9544))+((r12*x9530))+(((-1.0)*r10*x9529*x9538)));
evalcond[3]=(((r20*x9536))+(((-1.0)*r20*x9538*x9545))+(((-1.0)*r22*x9548))+x9539+x9542+((x9531*x9545))+((r21*x9537)));
evalcond[4]=(((r22*x9547))+(((-1.0)*x9531*x9549))+((r20*x9543))+((r21*x9540))+x9535+((r20*x9530*x9537))+(((-1.0)*x9546)));
evalcond[5]=((((-1.0)*x9534*x9549))+((r02*x9547))+((sj1*x9533))+((r00*x9530*x9537))+((r01*x9540))+((r00*x9543))+((sj0*x9542)));
evalcond[6]=(((cj1*x9533))+(((-1.0)*sj0*x9535))+(((-1.0)*r02*x9548))+((x9534*x9545))+((r00*x9536))+((r01*x9537))+(((-1.0)*r00*x9538*x9545)));
evalcond[7]=((((-1.0)*r12*x9548))+((cj3*x9532))+(((-1.0)*cj1*cj2*x9541))+((r10*x9536))+((cj0*x9535))+((r11*x9530*x9543))+(((-1.0)*r10*x9538*x9545)));
evalcond[8]=(((r12*x9547))+(((-1.0)*x9541*x9542))+((sj3*x9532))+(((-1.0)*x9539*x9541))+((r10*x9543))+(((-1.0)*r11*x9530*x9536))+((r10*x9530*x9537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9550 = IKatan2WithCheck(IkReal((((gconst35*r21*sj0))+(((-1.0)*gconst36*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x9550.valid){
continue;
}
CheckValue<IkReal> x9551=IKPowWithIntegerCheck(IKsign((((gconst36*r01))+((gconst35*r00)))),-1);
if(!x9551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9550.value)+(((1.5707963267949)*(x9551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9552=IKcos(j4);
IkReal x9553=IKsin(j4);
IkReal x9554=(gconst35*r21);
IkReal x9555=(gconst36*r11);
IkReal x9556=(cj2*sj0);
IkReal x9557=(gconst35*r01);
IkReal x9558=(sj1*sj2);
IkReal x9559=(cj3*gconst35);
IkReal x9560=(cj3*gconst36);
IkReal x9561=((1.0)*gconst36);
IkReal x9562=(cj2*sj1);
IkReal x9563=(gconst36*sj3);
IkReal x9564=((1.0)*cj0);
IkReal x9565=(cj1*sj2);
IkReal x9566=(gconst35*sj3);
IkReal x9567=(gconst35*r11);
IkReal x9568=(sj3*x9553);
IkReal x9569=((1.0)*cj1*cj2);
IkReal x9570=(cj3*x9552);
IkReal x9571=((1.0)*sj3*x9552);
IkReal x9572=((1.0)*cj3*x9553);
evalcond[0]=(((x9552*x9554))+(((-1.0)*r20*x9552*x9561))+((r22*x9553)));
evalcond[1]=(cj0+((r02*x9553))+(((-1.0)*r00*x9552*x9561))+((x9552*x9557)));
evalcond[2]=(((x9552*x9567))+sj0+((r12*x9553))+(((-1.0)*r10*x9552*x9561)));
evalcond[3]=(((r21*x9560))+((r20*x9559))+(((-1.0)*r22*x9571))+x9562+x9565+((x9554*x9568))+(((-1.0)*r20*x9561*x9568)));
evalcond[4]=(((r21*x9563))+((r22*x9570))+(((-1.0)*x9554*x9572))+(((-1.0)*x9569))+((r20*x9553*x9560))+x9558+((r20*x9566)));
evalcond[5]=(((sj1*x9556))+((r01*x9563))+((r00*x9566))+(((-1.0)*x9557*x9572))+((sj0*x9565))+((r02*x9570))+((r00*x9553*x9560)));
evalcond[6]=(((r01*x9560))+(((-1.0)*r02*x9571))+(((-1.0)*r00*x9561*x9568))+((cj1*x9556))+(((-1.0)*sj0*x9558))+((x9557*x9568))+((r00*x9559)));
evalcond[7]=((((-1.0)*r10*x9561*x9568))+(((-1.0)*cj1*cj2*x9564))+((r11*x9553*x9566))+((r10*x9559))+(((-1.0)*r12*x9571))+((cj0*x9558))+((cj3*x9555)));
evalcond[8]=((((-1.0)*r11*x9553*x9559))+((sj3*x9555))+((r12*x9570))+((r10*x9553*x9560))+(((-1.0)*x9564*x9565))+(((-1.0)*x9562*x9564))+((r10*x9566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9573=((-1.0)*r21);
IkReal x9575 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9575)==0){
continue;
}
IkReal x9574=pow(x9575,-0.5);
CheckValue<IkReal> x9576 = IKatan2WithCheck(IkReal(x9573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9576.valid){
continue;
}
IkReal gconst37=((3.14159265358979)+(((-1.0)*(x9576.value))));
IkReal gconst38=(x9573*x9574);
IkReal gconst39=((1.0)*r20*x9574);
CheckValue<IkReal> x9577 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9577.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9577.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9578=((-1.0)*r21);
CheckValue<IkReal> x9581 = IKatan2WithCheck(IkReal(x9578),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9581.valid){
continue;
}
IkReal x9579=((1.0)*(x9581.value));
IkReal x9580=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9579)));
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9579)));
IkReal gconst38=(x9578*x9580);
IkReal gconst39=((1.0)*r20*x9580);
IkReal x9582=r22*r22;
IkReal x9583=((1.0)*x9582);
CheckValue<IkReal> x9587=IKPowWithIntegerCheck(((-1.0)+x9582),-1);
if(!x9587.valid){
continue;
}
IkReal x9584=x9587.value;
if((((1.0)+(((-1.0)*x9583)))) < -0.00001)
continue;
IkReal x9585=IKsqrt(((1.0)+(((-1.0)*x9583))));
IkReal x9586=(sj0*x9584*x9585);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x9586+(((-1.0)*x9583*x9586))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9588=((-1.0)*r21);
CheckValue<IkReal> x9591 = IKatan2WithCheck(IkReal(x9588),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9591.valid){
continue;
}
IkReal x9589=((1.0)*(x9591.value));
IkReal x9590=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9589)));
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9589)));
IkReal gconst38=(x9588*x9590);
IkReal gconst39=((1.0)*r20*x9590);
IkReal x9592=r22*r22;
IkReal x9593=((1.0)*x9592);
CheckValue<IkReal> x9597=IKPowWithIntegerCheck(((-1.0)+x9592),-1);
if(!x9597.valid){
continue;
}
IkReal x9594=x9597.value;
if((((1.0)+(((-1.0)*x9593)))) < -0.00001)
continue;
IkReal x9595=IKsqrt(((1.0)+(((-1.0)*x9593))));
IkReal x9596=(cj0*x9594*x9595);
j4eval[0]=((IKabs(((((-1.0)*x9593*x9596))+x9596)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9598=((-1.0)*r21);
CheckValue<IkReal> x9601 = IKatan2WithCheck(IkReal(x9598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9601.valid){
continue;
}
IkReal x9599=((1.0)*(x9601.value));
IkReal x9600=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9599)));
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9599)));
IkReal gconst38=(x9598*x9600);
IkReal gconst39=((1.0)*r20*x9600);
IkReal x9602=r22*r22;
IkReal x9603=(cj0*r12);
IkReal x9604=((1.0)*r02*sj0);
CheckValue<IkReal> x9608=IKPowWithIntegerCheck(((-1.0)+x9602),-1);
if(!x9608.valid){
continue;
}
IkReal x9605=x9608.value;
if((((1.0)+(((-1.0)*x9602)))) < -0.00001)
continue;
IkReal x9606=IKsqrt(((1.0)+(((-1.0)*x9602))));
IkReal x9607=(r22*x9605*x9606);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x9604))+x9603)))+(IKabs((((x9603*x9607))+(((-1.0)*x9604*x9607))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9609=((-1.0)*r21);
CheckValue<IkReal> x9612 = IKatan2WithCheck(IkReal(x9609),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9612.valid){
continue;
}
IkReal x9610=((1.0)*(x9612.value));
IkReal x9611=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9610)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9610)));
IkReal gconst38=(x9609*x9611);
IkReal gconst39=((1.0)*r20*x9611);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9613=((-1.0)*r21);
CheckValue<IkReal> x9616 = IKatan2WithCheck(IkReal(x9613),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9616.valid){
continue;
}
IkReal x9614=((1.0)*(x9616.value));
IkReal x9615=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9614)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9614)));
IkReal gconst38=(x9613*x9615);
IkReal gconst39=((1.0)*r20*x9615);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9617=((-1.0)*r21);
CheckValue<IkReal> x9620 = IKatan2WithCheck(IkReal(x9617),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9620.valid){
continue;
}
IkReal x9618=((1.0)*(x9620.value));
IkReal x9619=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9618)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9618)));
IkReal gconst38=(x9617*x9619);
IkReal gconst39=((1.0)*r20*x9619);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9621=((-1.0)*r21);
CheckValue<IkReal> x9624 = IKatan2WithCheck(IkReal(x9621),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9624.valid){
continue;
}
IkReal x9622=((1.0)*(x9624.value));
IkReal x9623=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9622)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9622)));
IkReal gconst38=(x9621*x9623);
IkReal gconst39=((1.0)*r20*x9623);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9625=((-1.0)*r21);
CheckValue<IkReal> x9628 = IKatan2WithCheck(IkReal(x9625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9628.valid){
continue;
}
IkReal x9626=((1.0)*(x9628.value));
IkReal x9627=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9626)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9626)));
IkReal gconst38=(x9625*x9627);
IkReal gconst39=((1.0)*r20*x9627);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9629=((-1.0)*r21);
CheckValue<IkReal> x9632 = IKatan2WithCheck(IkReal(x9629),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9632.valid){
continue;
}
IkReal x9630=((1.0)*(x9632.value));
IkReal x9631=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9630)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9630)));
IkReal gconst38=(x9629*x9631);
IkReal gconst39=((1.0)*r20*x9631);
IkReal x9633=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9637=IKPowWithIntegerCheck(x9633,-1);
if(!x9637.valid){
continue;
}
IkReal x9634=x9637.value;
IkReal x9635=((1.0)*x9634);
IkReal x9636=((((-2.0)*r10*r11*r20*r21*x9634))+(((-1.0)*x9635*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9635*(r11*r11)*(r21*r21))));
j4eval[0]=x9636;
j4eval[1]=r12;
j4eval[2]=x9633;
j4eval[3]=IKsign(x9636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9638=(gconst38*r11);
IkReal x9639=(gconst39*r10);
CheckValue<IkReal> x9640=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9638*x9638)))+(((-1.0)*(x9639*x9639)))+(((-1.0)*(r12*r12)))+(((2.0)*x9638*x9639)))),-1);
if(!x9640.valid){
continue;
}
CheckValue<IkReal> x9641 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9639))+x9638)),IKFAST_ATAN2_MAGTHRESH);
if(!x9641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9640.value)))+(x9641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9642=IKcos(j4);
IkReal x9643=IKsin(j4);
IkReal x9644=(gconst39*r10);
IkReal x9645=(gconst39*r20);
IkReal x9646=(gconst39*r00);
IkReal x9647=((1.0)*x9642);
IkReal x9648=((1.0)*x9643);
IkReal x9649=(gconst38*x9642);
IkReal x9650=(gconst38*x9643);
evalcond[0]=(((r22*x9643))+((r21*x9649))+(((-1.0)*x9645*x9647)));
evalcond[1]=(((r02*x9643))+(((-1.0)*x9646*x9647))+((r01*x9649)));
evalcond[2]=((1.0)+((r11*x9649))+((r12*x9643))+(((-1.0)*x9644*x9647)));
evalcond[3]=((((-1.0)*r12*x9647))+((r11*x9650))+(((-1.0)*x9644*x9648)));
evalcond[4]=(((cj2*sj1))+((r21*x9650))+((cj1*sj2))+(((-1.0)*r22*x9647))+(((-1.0)*x9645*x9648)));
evalcond[5]=((((-1.0)*x9646*x9648))+(((-1.0)*sj1*sj2))+((r01*x9650))+((cj1*cj2))+(((-1.0)*r02*x9647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9651=((1.0)*gconst39);
CheckValue<IkReal> x9652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9651))+(((-1.0)*gconst38*r20)))),-1);
if(!x9652.valid){
continue;
}
CheckValue<IkReal> x9653 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9651))+((gconst38*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9652.value)))+(x9653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9654=IKcos(j4);
IkReal x9655=IKsin(j4);
IkReal x9656=(gconst39*r10);
IkReal x9657=(gconst39*r20);
IkReal x9658=(gconst39*r00);
IkReal x9659=((1.0)*x9654);
IkReal x9660=((1.0)*x9655);
IkReal x9661=(gconst38*x9654);
IkReal x9662=(gconst38*x9655);
evalcond[0]=(((r21*x9661))+(((-1.0)*x9657*x9659))+((r22*x9655)));
evalcond[1]=(((r01*x9661))+(((-1.0)*x9658*x9659))+((r02*x9655)));
evalcond[2]=((1.0)+((r11*x9661))+((r12*x9655))+(((-1.0)*x9656*x9659)));
evalcond[3]=(((r11*x9662))+(((-1.0)*r12*x9659))+(((-1.0)*x9656*x9660)));
evalcond[4]=(((cj2*sj1))+((r21*x9662))+((cj1*sj2))+(((-1.0)*x9657*x9660))+(((-1.0)*r22*x9659)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9658*x9660))+((r01*x9662))+(((-1.0)*r02*x9659))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9663=IKPowWithIntegerCheck(IKsign((((gconst39*r01))+((gconst38*r00)))),-1);
if(!x9663.valid){
continue;
}
CheckValue<IkReal> x9664 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r20))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9663.value)))+(x9664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9665=IKcos(j4);
IkReal x9666=IKsin(j4);
IkReal x9667=(gconst39*r10);
IkReal x9668=(gconst39*r20);
IkReal x9669=(gconst39*r00);
IkReal x9670=((1.0)*x9665);
IkReal x9671=((1.0)*x9666);
IkReal x9672=(gconst38*x9665);
IkReal x9673=(gconst38*x9666);
evalcond[0]=(((r21*x9672))+((r22*x9666))+(((-1.0)*x9668*x9670)));
evalcond[1]=(((r01*x9672))+((r02*x9666))+(((-1.0)*x9669*x9670)));
evalcond[2]=((1.0)+((r11*x9672))+((r12*x9666))+(((-1.0)*x9667*x9670)));
evalcond[3]=(((r11*x9673))+(((-1.0)*r12*x9670))+(((-1.0)*x9667*x9671)));
evalcond[4]=(((r21*x9673))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9668*x9671))+(((-1.0)*r22*x9670)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9673))+(((-1.0)*r02*x9670))+((cj1*cj2))+(((-1.0)*x9669*x9671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9674=((-1.0)*r21);
CheckValue<IkReal> x9677 = IKatan2WithCheck(IkReal(x9674),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9677.valid){
continue;
}
IkReal x9675=((1.0)*(x9677.value));
IkReal x9676=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9675)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9675)));
IkReal gconst38=(x9674*x9676);
IkReal gconst39=((1.0)*r20*x9676);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9678=((-1.0)*r21);
CheckValue<IkReal> x9681 = IKatan2WithCheck(IkReal(x9678),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9681.valid){
continue;
}
IkReal x9679=((1.0)*(x9681.value));
IkReal x9680=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9679)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9679)));
IkReal gconst38=(x9678*x9680);
IkReal gconst39=((1.0)*r20*x9680);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9682=((-1.0)*r21);
CheckValue<IkReal> x9685 = IKatan2WithCheck(IkReal(x9682),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9685.valid){
continue;
}
IkReal x9683=((1.0)*(x9685.value));
IkReal x9684=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9683)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9683)));
IkReal gconst38=(x9682*x9684);
IkReal gconst39=((1.0)*r20*x9684);
IkReal x9686=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9690=IKPowWithIntegerCheck(x9686,-1);
if(!x9690.valid){
continue;
}
IkReal x9687=x9690.value;
IkReal x9688=((1.0)*x9687);
IkReal x9689=((((-2.0)*r10*r11*r20*r21*x9687))+(((-1.0)*x9688*(r11*r11)*(r21*r21)))+(((-1.0)*x9688*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x9689;
j4eval[1]=r12;
j4eval[2]=x9686;
j4eval[3]=IKsign(x9689);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9691=(gconst38*r11);
IkReal x9692=(gconst39*r10);
CheckValue<IkReal> x9693=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9692*x9692)))+(((2.0)*x9691*x9692))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9691*x9691))))),-1);
if(!x9693.valid){
continue;
}
CheckValue<IkReal> x9694 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9692))+x9691)),IKFAST_ATAN2_MAGTHRESH);
if(!x9694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9693.value)))+(x9694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9695=IKcos(j4);
IkReal x9696=IKsin(j4);
IkReal x9697=(gconst39*r10);
IkReal x9698=(gconst38*x9695);
IkReal x9699=((1.0)*x9695);
IkReal x9700=(gconst39*x9696);
IkReal x9701=((1.0)*gconst38*x9696);
evalcond[0]=(((r22*x9696))+(((-1.0)*gconst39*r20*x9699))+((r21*x9698)));
evalcond[1]=((((-1.0)*gconst39*r00*x9699))+((r02*x9696))+((r01*x9698)));
evalcond[2]=(((x9696*x9697))+(((-1.0)*r11*x9701))+((r12*x9695)));
evalcond[3]=((1.0)+(((-1.0)*x9697*x9699))+((r12*x9696))+((r11*x9698)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9695))+((r20*x9700))+(((-1.0)*r21*x9701)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9695))+((r00*x9700))+((cj1*cj2))+(((-1.0)*r01*x9701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9702=((1.0)*gconst39);
CheckValue<IkReal> x9703 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9702))+((gconst38*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9703.valid){
continue;
}
CheckValue<IkReal> x9704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9702))+(((-1.0)*gconst38*r20)))),-1);
if(!x9704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9703.value)+(((1.5707963267949)*(x9704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9705=IKcos(j4);
IkReal x9706=IKsin(j4);
IkReal x9707=(gconst39*r10);
IkReal x9708=(gconst38*x9705);
IkReal x9709=((1.0)*x9705);
IkReal x9710=(gconst39*x9706);
IkReal x9711=((1.0)*gconst38*x9706);
evalcond[0]=((((-1.0)*gconst39*r20*x9709))+((r21*x9708))+((r22*x9706)));
evalcond[1]=(((r02*x9706))+((r01*x9708))+(((-1.0)*gconst39*r00*x9709)));
evalcond[2]=(((r12*x9705))+((x9706*x9707))+(((-1.0)*r11*x9711)));
evalcond[3]=((1.0)+(((-1.0)*x9707*x9709))+((r12*x9706))+((r11*x9708)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x9711))+((cj1*sj2))+((r20*x9710))+((r22*x9705)));
evalcond[5]=((((-1.0)*r01*x9711))+((r02*x9705))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r00*x9710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9712=IKPowWithIntegerCheck(IKsign((((gconst39*r01))+((gconst38*r00)))),-1);
if(!x9712.valid){
continue;
}
CheckValue<IkReal> x9713 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r20))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9712.value)))+(x9713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9714=IKcos(j4);
IkReal x9715=IKsin(j4);
IkReal x9716=(gconst39*r10);
IkReal x9717=(gconst38*x9714);
IkReal x9718=((1.0)*x9714);
IkReal x9719=(gconst39*x9715);
IkReal x9720=((1.0)*gconst38*x9715);
evalcond[0]=(((r22*x9715))+(((-1.0)*gconst39*r20*x9718))+((r21*x9717)));
evalcond[1]=(((r02*x9715))+(((-1.0)*gconst39*r00*x9718))+((r01*x9717)));
evalcond[2]=(((r12*x9714))+(((-1.0)*r11*x9720))+((x9715*x9716)));
evalcond[3]=((1.0)+((r12*x9715))+((r11*x9717))+(((-1.0)*x9716*x9718)));
evalcond[4]=(((cj2*sj1))+((r22*x9714))+((cj1*sj2))+(((-1.0)*r21*x9720))+((r20*x9719)));
evalcond[5]=((((-1.0)*r01*x9720))+(((-1.0)*sj1*sj2))+((r02*x9714))+((cj1*cj2))+((r00*x9719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9721=((-1.0)*r21);
CheckValue<IkReal> x9724 = IKatan2WithCheck(IkReal(x9721),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9724.valid){
continue;
}
IkReal x9722=((1.0)*(x9724.value));
IkReal x9723=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9722)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9722)));
IkReal gconst38=(x9721*x9723);
IkReal gconst39=((1.0)*r20*x9723);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9725=((-1.0)*r21);
CheckValue<IkReal> x9728 = IKatan2WithCheck(IkReal(x9725),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9728.valid){
continue;
}
IkReal x9726=((1.0)*(x9728.value));
IkReal x9727=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9726)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9726)));
IkReal gconst38=(x9725*x9727);
IkReal gconst39=((1.0)*r20*x9727);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9729=((-1.0)*r21);
CheckValue<IkReal> x9732 = IKatan2WithCheck(IkReal(x9729),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9732.valid){
continue;
}
IkReal x9730=((1.0)*(x9732.value));
IkReal x9731=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9730)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9730)));
IkReal gconst38=(x9729*x9731);
IkReal gconst39=((1.0)*r20*x9731);
IkReal x9733=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9737=IKPowWithIntegerCheck(x9733,-1);
if(!x9737.valid){
continue;
}
IkReal x9734=x9737.value;
IkReal x9735=((1.0)*x9734);
IkReal x9736=((((-1.0)*x9735*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9734))+(((-1.0)*x9735*(r11*r11)*(r21*r21))));
j4eval[0]=x9736;
j4eval[1]=r12;
j4eval[2]=x9733;
j4eval[3]=IKsign(x9736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9738=(gconst38*r11);
IkReal x9739=(gconst39*r10);
CheckValue<IkReal> x9740=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9739*x9739)))+(((2.0)*x9738*x9739))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9738*x9738))))),-1);
if(!x9740.valid){
continue;
}
CheckValue<IkReal> x9741 = IKatan2WithCheck(IkReal(r12),IkReal((x9738+(((-1.0)*x9739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9740.value)))+(x9741.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9742=IKcos(j4);
IkReal x9743=IKsin(j4);
IkReal x9744=(gconst39*r10);
IkReal x9745=(gconst38*x9742);
IkReal x9746=((1.0)*x9742);
IkReal x9747=(gconst39*x9743);
IkReal x9748=((1.0)*gconst38*x9743);
evalcond[0]=(((r21*x9745))+((r22*x9743))+(((-1.0)*gconst39*r20*x9746)));
evalcond[1]=(((r02*x9743))+((r01*x9745))+(((-1.0)*gconst39*r00*x9746)));
evalcond[2]=(((x9743*x9744))+((r12*x9742))+(((-1.0)*r11*x9748)));
evalcond[3]=((1.0)+((r11*x9745))+(((-1.0)*x9744*x9746))+((r12*x9743)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x9742))+(((-1.0)*r01*x9748))+((r00*x9747)));
evalcond[5]=(((r22*x9742))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x9747))+(((-1.0)*r21*x9748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9749=((1.0)*gconst39);
CheckValue<IkReal> x9750=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r20))+(((-1.0)*r21*x9749)))),-1);
if(!x9750.valid){
continue;
}
CheckValue<IkReal> x9751 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9749))+((gconst38*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9750.value)))+(x9751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9752=IKcos(j4);
IkReal x9753=IKsin(j4);
IkReal x9754=(gconst39*r10);
IkReal x9755=(gconst38*x9752);
IkReal x9756=((1.0)*x9752);
IkReal x9757=(gconst39*x9753);
IkReal x9758=((1.0)*gconst38*x9753);
evalcond[0]=(((r22*x9753))+((r21*x9755))+(((-1.0)*gconst39*r20*x9756)));
evalcond[1]=((((-1.0)*gconst39*r00*x9756))+((r01*x9755))+((r02*x9753)));
evalcond[2]=(((x9753*x9754))+(((-1.0)*r11*x9758))+((r12*x9752)));
evalcond[3]=((1.0)+((r11*x9755))+(((-1.0)*x9754*x9756))+((r12*x9753)));
evalcond[4]=(((cj2*sj1))+((r00*x9757))+((cj1*sj2))+((r02*x9752))+(((-1.0)*r01*x9758)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r22*x9752))+((sj1*sj2))+(((-1.0)*r21*x9758))+((r20*x9757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9759=IKPowWithIntegerCheck(IKsign((((gconst39*r01))+((gconst38*r00)))),-1);
if(!x9759.valid){
continue;
}
CheckValue<IkReal> x9760 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r20))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9759.value)))+(x9760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9761=IKcos(j4);
IkReal x9762=IKsin(j4);
IkReal x9763=(gconst39*r10);
IkReal x9764=(gconst38*x9761);
IkReal x9765=((1.0)*x9761);
IkReal x9766=(gconst39*x9762);
IkReal x9767=((1.0)*gconst38*x9762);
evalcond[0]=((((-1.0)*gconst39*r20*x9765))+((r22*x9762))+((r21*x9764)));
evalcond[1]=(((r01*x9764))+((r02*x9762))+(((-1.0)*gconst39*r00*x9765)));
evalcond[2]=(((r12*x9761))+((x9762*x9763))+(((-1.0)*r11*x9767)));
evalcond[3]=((1.0)+(((-1.0)*x9763*x9765))+((r12*x9762))+((r11*x9764)));
evalcond[4]=(((cj2*sj1))+((r00*x9766))+((cj1*sj2))+((r02*x9761))+(((-1.0)*r01*x9767)));
evalcond[5]=(((r22*x9761))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x9767))+((r20*x9766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9768=((-1.0)*r21);
CheckValue<IkReal> x9771 = IKatan2WithCheck(IkReal(x9768),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9771.valid){
continue;
}
IkReal x9769=((1.0)*(x9771.value));
IkReal x9770=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9769)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9769)));
IkReal gconst38=(x9768*x9770);
IkReal gconst39=((1.0)*r20*x9770);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9772=((-1.0)*r21);
CheckValue<IkReal> x9775 = IKatan2WithCheck(IkReal(x9772),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9775.valid){
continue;
}
IkReal x9773=((1.0)*(x9775.value));
IkReal x9774=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9773)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9773)));
IkReal gconst38=(x9772*x9774);
IkReal gconst39=((1.0)*r20*x9774);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9776=((-1.0)*r21);
CheckValue<IkReal> x9779 = IKatan2WithCheck(IkReal(x9776),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9779.valid){
continue;
}
IkReal x9777=((1.0)*(x9779.value));
IkReal x9778=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9777)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9777)));
IkReal gconst38=(x9776*x9778);
IkReal gconst39=((1.0)*r20*x9778);
IkReal x9780=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9784=IKPowWithIntegerCheck(x9780,-1);
if(!x9784.valid){
continue;
}
IkReal x9781=x9784.value;
IkReal x9782=((1.0)*x9781);
IkReal x9783=((((-1.0)*x9782*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9782*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9781)));
j4eval[0]=x9783;
j4eval[1]=r12;
j4eval[2]=x9780;
j4eval[3]=IKsign(x9783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9785=(gconst38*r11);
IkReal x9786=(gconst39*r10);
CheckValue<IkReal> x9787 = IKatan2WithCheck(IkReal(r12),IkReal((x9785+(((-1.0)*x9786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9787.valid){
continue;
}
CheckValue<IkReal> x9788=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9786*x9786)))+(((2.0)*x9785*x9786))+(((-1.0)*(x9785*x9785)))+(((-1.0)*(r12*r12))))),-1);
if(!x9788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9787.value)+(((1.5707963267949)*(x9788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9789=IKcos(j4);
IkReal x9790=IKsin(j4);
IkReal x9791=(gconst39*r10);
IkReal x9792=(gconst39*r20);
IkReal x9793=(gconst39*r00);
IkReal x9794=((1.0)*x9789);
IkReal x9795=((1.0)*x9790);
IkReal x9796=(gconst38*x9789);
IkReal x9797=(gconst38*x9790);
evalcond[0]=((((-1.0)*x9792*x9794))+((r21*x9796))+((r22*x9790)));
evalcond[1]=(((r02*x9790))+(((-1.0)*x9793*x9794))+((r01*x9796)));
evalcond[2]=((1.0)+((r11*x9796))+(((-1.0)*x9791*x9794))+((r12*x9790)));
evalcond[3]=(((r11*x9797))+(((-1.0)*x9791*x9795))+(((-1.0)*r12*x9794)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x9794))+(((-1.0)*x9793*x9795))+((r01*x9797)));
evalcond[5]=((((-1.0)*x9792*x9795))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x9797))+(((-1.0)*r22*x9794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9798=((1.0)*gconst39);
CheckValue<IkReal> x9799=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r20))+(((-1.0)*r21*x9798)))),-1);
if(!x9799.valid){
continue;
}
CheckValue<IkReal> x9800 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9798))+((gconst38*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9799.value)))+(x9800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9801=IKcos(j4);
IkReal x9802=IKsin(j4);
IkReal x9803=(gconst39*r10);
IkReal x9804=(gconst39*r20);
IkReal x9805=(gconst39*r00);
IkReal x9806=((1.0)*x9801);
IkReal x9807=((1.0)*x9802);
IkReal x9808=(gconst38*x9801);
IkReal x9809=(gconst38*x9802);
evalcond[0]=(((r21*x9808))+((r22*x9802))+(((-1.0)*x9804*x9806)));
evalcond[1]=(((r02*x9802))+(((-1.0)*x9805*x9806))+((r01*x9808)));
evalcond[2]=((1.0)+((r12*x9802))+((r11*x9808))+(((-1.0)*x9803*x9806)));
evalcond[3]=(((r11*x9809))+(((-1.0)*x9803*x9807))+(((-1.0)*r12*x9806)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x9806))+((cj1*sj2))+(((-1.0)*x9805*x9807))+((r01*x9809)));
evalcond[5]=(((r21*x9809))+(((-1.0)*r22*x9806))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9804*x9807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9810=IKPowWithIntegerCheck(IKsign((((gconst39*r01))+((gconst38*r00)))),-1);
if(!x9810.valid){
continue;
}
CheckValue<IkReal> x9811 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r20))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9810.value)))+(x9811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9812=IKcos(j4);
IkReal x9813=IKsin(j4);
IkReal x9814=(gconst39*r10);
IkReal x9815=(gconst39*r20);
IkReal x9816=(gconst39*r00);
IkReal x9817=((1.0)*x9812);
IkReal x9818=((1.0)*x9813);
IkReal x9819=(gconst38*x9812);
IkReal x9820=(gconst38*x9813);
evalcond[0]=(((r21*x9819))+((r22*x9813))+(((-1.0)*x9815*x9817)));
evalcond[1]=(((r02*x9813))+(((-1.0)*x9816*x9817))+((r01*x9819)));
evalcond[2]=((1.0)+(((-1.0)*x9814*x9817))+((r12*x9813))+((r11*x9819)));
evalcond[3]=(((r11*x9820))+(((-1.0)*x9814*x9818))+(((-1.0)*r12*x9817)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x9817))+((cj1*sj2))+((r01*x9820))+(((-1.0)*x9816*x9818)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x9817))+((r21*x9820))+(((-1.0)*x9815*x9818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9821=((-1.0)*r21);
IkReal x9822=((-1.0)*px);
CheckValue<IkReal> x9824 = IKatan2WithCheck(IkReal(x9821),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9824.valid){
continue;
}
IkReal x9823=((1.0)*(x9824.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9823)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9822);
rxp1_1=(px*r21);
rxp1_2=(r11*x9822);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9823)));
IkReal gconst38=x9821;
IkReal gconst39=((1.0)*r20);
IkReal x9825=((1.0)*sj3);
IkReal x9826=(r11*r21);
IkReal x9827=(r10*r20);
j4eval[0]=((((-1.0)*x9825*x9826))+(((-1.0)*x9825*x9827)));
j4eval[1]=((((-1.0)*x9827))+(((-1.0)*x9826)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9828=((-1.0)*r21);
IkReal x9829=((-1.0)*px);
CheckValue<IkReal> x9831 = IKatan2WithCheck(IkReal(x9828),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9831.valid){
continue;
}
IkReal x9830=((1.0)*(x9831.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9830)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9829);
rxp1_1=(px*r21);
rxp1_2=(r11*x9829);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9830)));
IkReal gconst38=x9828;
IkReal gconst39=((1.0)*r20);
IkReal x9832=((1.0)*cj3);
IkReal x9833=(r10*r20);
IkReal x9834=(r11*r21);
j4eval[0]=(((x9832*x9834))+((x9832*x9833)));
j4eval[1]=((((-1.0)*x9834))+(((-1.0)*x9833)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9835=((-1.0)*r21);
IkReal x9836=((-1.0)*px);
CheckValue<IkReal> x9838 = IKatan2WithCheck(IkReal(x9835),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9838.valid){
continue;
}
IkReal x9837=((1.0)*(x9838.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9837)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9836);
rxp1_1=(px*r21);
rxp1_2=(r11*x9836);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9837)));
IkReal gconst38=x9835;
IkReal gconst39=((1.0)*r20);
IkReal x9839=((1.0)*sj3);
j4eval[0]=((((-1.0)*r11*r21*x9839))+(((-1.0)*r10*r20*x9839)));
j4eval[1]=cj3;
j4eval[2]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9840=((1.0)*r10);
CheckValue<IkReal> x9841=IKPowWithIntegerCheck((((gconst38*r11*sj3))+(((-1.0)*gconst39*sj3*x9840))),-1);
if(!x9841.valid){
continue;
}
CheckValue<IkReal> x9842=IKPowWithIntegerCheck(cj3,-1);
if(!x9842.valid){
continue;
}
CheckValue<IkReal> x9843=IKPowWithIntegerCheck(r02,-1);
if(!x9843.valid){
continue;
}
if( IKabs(((x9841.value)*(((((-1.0)*cj3*gconst39*r11))+(((-1.0)*cj3*gconst38*x9840)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9842.value)*(x9843.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9841.value)*(((((-1.0)*cj3*gconst39*r11))+(((-1.0)*cj3*gconst38*x9840))))))+IKsqr(((x9842.value)*(x9843.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9841.value)*(((((-1.0)*cj3*gconst39*r11))+(((-1.0)*cj3*gconst38*x9840))))), ((x9842.value)*(x9843.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9844=IKcos(j4);
IkReal x9845=IKsin(j4);
IkReal x9846=(cj2*sj1);
IkReal x9847=(cj1*sj2);
IkReal x9848=(gconst39*sj3);
IkReal x9849=(sj1*sj2);
IkReal x9850=(cj3*gconst39);
IkReal x9851=(gconst38*r20);
IkReal x9852=((1.0)*cj3);
IkReal x9853=(cj1*cj2);
IkReal x9854=(gconst38*r10);
IkReal x9855=(r20*x9845);
IkReal x9856=(gconst38*x9844);
IkReal x9857=(gconst38*x9845);
IkReal x9858=((1.0)*x9844);
IkReal x9859=(r10*x9845);
IkReal x9860=(x9847+x9846);
evalcond[0]=(r02*x9845);
evalcond[1]=(((cj3*r02*x9844))+x9860);
evalcond[2]=(((r21*x9856))+(((-1.0)*gconst39*r20*x9858)));
evalcond[3]=((1.0)+((r11*x9856))+(((-1.0)*gconst39*r10*x9858)));
evalcond[4]=((((-1.0)*x9849))+(((-1.0)*r02*sj3*x9858))+x9853);
evalcond[5]=(((r11*x9850))+((r11*sj3*x9857))+(((-1.0)*x9848*x9859))+((cj3*x9854)));
evalcond[6]=(((r11*x9848))+(((-1.0)*r11*x9852*x9857))+((x9850*x9859))+((sj3*x9854)));
evalcond[7]=(((r21*x9850))+(((-1.0)*x9848*x9855))+((cj3*x9851))+x9860+((r21*sj3*x9857)));
evalcond[8]=((((-1.0)*x9853))+(((-1.0)*r21*x9852*x9857))+((x9850*x9855))+x9849+((sj3*x9851))+((r21*x9848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9861=((1.0)*sj3);
IkReal x9862=(gconst39*r10);
IkReal x9863=(gconst38*r11);
CheckValue<IkReal> x9864=IKPowWithIntegerCheck((((cj3*x9862))+(((-1.0)*cj3*x9863))),-1);
if(!x9864.valid){
continue;
}
CheckValue<IkReal> x9865=IKPowWithIntegerCheck(((((-1.0)*x9862))+x9863),-1);
if(!x9865.valid){
continue;
}
if( IKabs(((x9864.value)*(((((-1.0)*gconst38*r10*x9861))+(((-1.0)*gconst39*r11*x9861)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9865.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9864.value)*(((((-1.0)*gconst38*r10*x9861))+(((-1.0)*gconst39*r11*x9861))))))+IKsqr(((-1.0)*(x9865.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9864.value)*(((((-1.0)*gconst38*r10*x9861))+(((-1.0)*gconst39*r11*x9861))))), ((-1.0)*(x9865.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9866=IKcos(j4);
IkReal x9867=IKsin(j4);
IkReal x9868=(cj2*sj1);
IkReal x9869=(cj1*sj2);
IkReal x9870=(gconst39*sj3);
IkReal x9871=(sj1*sj2);
IkReal x9872=(cj3*gconst39);
IkReal x9873=(gconst38*r20);
IkReal x9874=((1.0)*cj3);
IkReal x9875=(cj1*cj2);
IkReal x9876=(gconst38*r10);
IkReal x9877=(r20*x9867);
IkReal x9878=(gconst38*x9866);
IkReal x9879=(gconst38*x9867);
IkReal x9880=((1.0)*x9866);
IkReal x9881=(r10*x9867);
IkReal x9882=(x9869+x9868);
evalcond[0]=(r02*x9867);
evalcond[1]=(((cj3*r02*x9866))+x9882);
evalcond[2]=((((-1.0)*gconst39*r20*x9880))+((r21*x9878)));
evalcond[3]=((1.0)+(((-1.0)*gconst39*r10*x9880))+((r11*x9878)));
evalcond[4]=((((-1.0)*x9871))+(((-1.0)*r02*sj3*x9880))+x9875);
evalcond[5]=((((-1.0)*x9870*x9881))+((r11*sj3*x9879))+((cj3*x9876))+((r11*x9872)));
evalcond[6]=(((x9872*x9881))+(((-1.0)*r11*x9874*x9879))+((sj3*x9876))+((r11*x9870)));
evalcond[7]=((((-1.0)*x9870*x9877))+((r21*x9872))+((cj3*x9873))+x9882+((r21*sj3*x9879)));
evalcond[8]=((((-1.0)*x9875))+((r21*x9870))+((x9872*x9877))+(((-1.0)*r21*x9874*x9879))+((sj3*x9873))+x9871);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9883=(gconst38*r11);
IkReal x9884=((1.0)*r10);
CheckValue<IkReal> x9885=IKPowWithIntegerCheck(((((-1.0)*gconst39*sj3*x9884))+((sj3*x9883))),-1);
if(!x9885.valid){
continue;
}
CheckValue<IkReal> x9886=IKPowWithIntegerCheck(((((-1.0)*gconst39*x9884))+x9883),-1);
if(!x9886.valid){
continue;
}
if( IKabs(((x9885.value)*(((((-1.0)*cj3*gconst38*x9884))+(((-1.0)*cj3*gconst39*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9886.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9885.value)*(((((-1.0)*cj3*gconst38*x9884))+(((-1.0)*cj3*gconst39*r11))))))+IKsqr(((-1.0)*(x9886.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9885.value)*(((((-1.0)*cj3*gconst38*x9884))+(((-1.0)*cj3*gconst39*r11))))), ((-1.0)*(x9886.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9887=IKcos(j4);
IkReal x9888=IKsin(j4);
IkReal x9889=(cj2*sj1);
IkReal x9890=(cj1*sj2);
IkReal x9891=(gconst39*sj3);
IkReal x9892=(sj1*sj2);
IkReal x9893=(cj3*gconst39);
IkReal x9894=(gconst38*r20);
IkReal x9895=((1.0)*cj3);
IkReal x9896=(cj1*cj2);
IkReal x9897=(gconst38*r10);
IkReal x9898=(r20*x9888);
IkReal x9899=(gconst38*x9887);
IkReal x9900=(gconst38*x9888);
IkReal x9901=((1.0)*x9887);
IkReal x9902=(r10*x9888);
IkReal x9903=(x9890+x9889);
evalcond[0]=(r02*x9888);
evalcond[1]=(((cj3*r02*x9887))+x9903);
evalcond[2]=((((-1.0)*gconst39*r20*x9901))+((r21*x9899)));
evalcond[3]=((1.0)+((r11*x9899))+(((-1.0)*gconst39*r10*x9901)));
evalcond[4]=((((-1.0)*x9892))+x9896+(((-1.0)*r02*sj3*x9901)));
evalcond[5]=(((cj3*x9897))+(((-1.0)*x9891*x9902))+((r11*x9893))+((r11*sj3*x9900)));
evalcond[6]=(((x9893*x9902))+((sj3*x9897))+((r11*x9891))+(((-1.0)*r11*x9895*x9900)));
evalcond[7]=(((cj3*x9894))+((r21*sj3*x9900))+(((-1.0)*x9891*x9898))+((r21*x9893))+x9903);
evalcond[8]=(((sj3*x9894))+((r21*x9891))+(((-1.0)*x9896))+(((-1.0)*r21*x9895*x9900))+x9892+((x9893*x9898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9904=gconst39*gconst39;
IkReal x9905=gconst38*gconst38;
IkReal x9906=((1.0)*r20);
IkReal x9907=(r21*sj3);
IkReal x9908=(cj3*r21);
IkReal x9909=((1.0)*r22);
IkReal x9910=(r11*sj3);
IkReal x9911=(gconst38*gconst39*r11);
IkReal x9912=(gconst38*r10*sj3);
CheckValue<IkReal> x9913 = IKatan2WithCheck(IkReal((((x9907*x9911))+(((-1.0)*x9904*x9906*x9910))+((r10*x9905*x9907))+(((-1.0)*gconst39*x9906*x9912)))),IkReal(((((-1.0)*x9909*x9912))+(((-1.0)*gconst39*x9909*x9910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9913.valid){
continue;
}
CheckValue<IkReal> x9914=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*gconst39*r10*x9908))+((cj3*r12*r22))+(((-1.0)*cj3*x9906*x9911))+((cj3*r10*r20*x9904))+((r11*x9905*x9908)))),-1);
if(!x9914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9913.value)+(((1.5707963267949)*(x9914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9915=IKcos(j4);
IkReal x9916=IKsin(j4);
IkReal x9917=(cj2*sj1);
IkReal x9918=(cj1*sj2);
IkReal x9919=(gconst39*r21);
IkReal x9920=(sj1*sj2);
IkReal x9921=(cj3*gconst39);
IkReal x9922=(r01*sj3);
IkReal x9923=((1.0)*cj3);
IkReal x9924=(cj1*cj2);
IkReal x9925=(gconst38*r20);
IkReal x9926=(cj3*gconst38);
IkReal x9927=(r11*sj3);
IkReal x9928=(gconst38*sj3);
IkReal x9929=(gconst38*x9915);
IkReal x9930=(gconst38*x9916);
IkReal x9931=((1.0)*x9915);
IkReal x9932=(cj3*x9915);
IkReal x9933=(x9917+x9918);
IkReal x9934=((1.0)*gconst39*sj3*x9916);
evalcond[0]=(((r22*x9916))+((r21*x9929))+(((-1.0)*gconst39*r20*x9931)));
evalcond[1]=((((-1.0)*gconst39*r00*x9931))+((r01*x9929))+((r02*x9916)));
evalcond[2]=((1.0)+(((-1.0)*gconst39*r10*x9931))+((r12*x9916))+((r11*x9929)));
evalcond[3]=(((r10*x9928))+((r12*x9932))+((r10*x9916*x9921))+((gconst39*x9927))+(((-1.0)*r11*x9923*x9930)));
evalcond[4]=(((r10*x9926))+(((-1.0)*r10*x9934))+((x9927*x9930))+((r11*x9921))+(((-1.0)*r12*sj3*x9931)));
evalcond[5]=(((gconst39*x9922))+(((-1.0)*r01*x9923*x9930))+((r00*x9916*x9921))+((r02*x9932))+x9933+((r00*x9928)));
evalcond[6]=(((cj3*x9919))+(((-1.0)*r22*sj3*x9931))+((cj3*x9925))+(((-1.0)*r20*x9934))+((r21*x9916*x9928))+x9933);
evalcond[7]=(((sj3*x9919))+((sj3*x9925))+((r20*x9916*x9921))+((r22*x9932))+(((-1.0)*x9924))+x9920+(((-1.0)*r21*x9923*x9930)));
evalcond[8]=((((-1.0)*r00*x9934))+(((-1.0)*r02*sj3*x9931))+(((-1.0)*x9920))+((x9922*x9930))+x9924+((r01*x9921))+((r00*x9926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9935=((1.0)*gconst39);
CheckValue<IkReal> x9936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9935))+(((-1.0)*gconst38*r20)))),-1);
if(!x9936.valid){
continue;
}
CheckValue<IkReal> x9937 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9935))+((gconst38*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9936.value)))+(x9937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9938=IKcos(j4);
IkReal x9939=IKsin(j4);
IkReal x9940=(cj2*sj1);
IkReal x9941=(cj1*sj2);
IkReal x9942=(gconst39*r21);
IkReal x9943=(sj1*sj2);
IkReal x9944=(cj3*gconst39);
IkReal x9945=(r01*sj3);
IkReal x9946=((1.0)*cj3);
IkReal x9947=(cj1*cj2);
IkReal x9948=(gconst38*r20);
IkReal x9949=(cj3*gconst38);
IkReal x9950=(r11*sj3);
IkReal x9951=(gconst38*sj3);
IkReal x9952=(gconst38*x9938);
IkReal x9953=(gconst38*x9939);
IkReal x9954=((1.0)*x9938);
IkReal x9955=(cj3*x9938);
IkReal x9956=(x9940+x9941);
IkReal x9957=((1.0)*gconst39*sj3*x9939);
evalcond[0]=(((r22*x9939))+(((-1.0)*gconst39*r20*x9954))+((r21*x9952)));
evalcond[1]=((((-1.0)*gconst39*r00*x9954))+((r02*x9939))+((r01*x9952)));
evalcond[2]=((1.0)+(((-1.0)*gconst39*r10*x9954))+((r12*x9939))+((r11*x9952)));
evalcond[3]=(((gconst39*x9950))+((r10*x9939*x9944))+((r12*x9955))+(((-1.0)*r11*x9946*x9953))+((r10*x9951)));
evalcond[4]=(((x9950*x9953))+(((-1.0)*r10*x9957))+((r11*x9944))+(((-1.0)*r12*sj3*x9954))+((r10*x9949)));
evalcond[5]=((((-1.0)*r01*x9946*x9953))+((gconst39*x9945))+((r02*x9955))+((r00*x9939*x9944))+x9956+((r00*x9951)));
evalcond[6]=((((-1.0)*r22*sj3*x9954))+(((-1.0)*r20*x9957))+((cj3*x9942))+((cj3*x9948))+((r21*x9939*x9951))+x9956);
evalcond[7]=(((r20*x9939*x9944))+(((-1.0)*x9947))+((sj3*x9942))+((sj3*x9948))+(((-1.0)*r21*x9946*x9953))+x9943+((r22*x9955)));
evalcond[8]=((((-1.0)*x9943))+(((-1.0)*r00*x9957))+((x9945*x9953))+((r01*x9944))+x9947+(((-1.0)*r02*sj3*x9954))+((r00*x9949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9958=IKPowWithIntegerCheck(IKsign((((gconst39*r01))+((gconst38*r00)))),-1);
if(!x9958.valid){
continue;
}
CheckValue<IkReal> x9959 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r20))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9958.value)))+(x9959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9960=IKcos(j4);
IkReal x9961=IKsin(j4);
IkReal x9962=(cj2*sj1);
IkReal x9963=(cj1*sj2);
IkReal x9964=(gconst39*r21);
IkReal x9965=(sj1*sj2);
IkReal x9966=(cj3*gconst39);
IkReal x9967=(r01*sj3);
IkReal x9968=((1.0)*cj3);
IkReal x9969=(cj1*cj2);
IkReal x9970=(gconst38*r20);
IkReal x9971=(cj3*gconst38);
IkReal x9972=(r11*sj3);
IkReal x9973=(gconst38*sj3);
IkReal x9974=(gconst38*x9960);
IkReal x9975=(gconst38*x9961);
IkReal x9976=((1.0)*x9960);
IkReal x9977=(cj3*x9960);
IkReal x9978=(x9962+x9963);
IkReal x9979=((1.0)*gconst39*sj3*x9961);
evalcond[0]=((((-1.0)*gconst39*r20*x9976))+((r22*x9961))+((r21*x9974)));
evalcond[1]=(((r02*x9961))+(((-1.0)*gconst39*r00*x9976))+((r01*x9974)));
evalcond[2]=((1.0)+((r11*x9974))+(((-1.0)*gconst39*r10*x9976))+((r12*x9961)));
evalcond[3]=(((gconst39*x9972))+((r12*x9977))+(((-1.0)*r11*x9968*x9975))+((r10*x9961*x9966))+((r10*x9973)));
evalcond[4]=(((x9972*x9975))+(((-1.0)*r10*x9979))+(((-1.0)*r12*sj3*x9976))+((r10*x9971))+((r11*x9966)));
evalcond[5]=((((-1.0)*r01*x9968*x9975))+((r02*x9977))+((gconst39*x9967))+((r00*x9973))+x9978+((r00*x9961*x9966)));
evalcond[6]=((((-1.0)*r20*x9979))+((r21*x9961*x9973))+((cj3*x9970))+x9978+((cj3*x9964))+(((-1.0)*r22*sj3*x9976)));
evalcond[7]=(((r22*x9977))+((sj3*x9970))+x9965+(((-1.0)*x9969))+(((-1.0)*r21*x9968*x9975))+((sj3*x9964))+((r20*x9961*x9966)));
evalcond[8]=((((-1.0)*r00*x9979))+((r01*x9966))+(((-1.0)*r02*sj3*x9976))+((r00*x9971))+x9969+((x9967*x9975))+(((-1.0)*x9965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9980=((-1.0)*r21);
CheckValue<IkReal> x9983 = IKatan2WithCheck(IkReal(x9980),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9983.valid){
continue;
}
IkReal x9981=((1.0)*(x9983.value));
IkReal x9982=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9981)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9981)));
IkReal gconst38=(x9980*x9982);
IkReal gconst39=((1.0)*r20*x9982);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9984=((-1.0)*r21);
CheckValue<IkReal> x9987 = IKatan2WithCheck(IkReal(x9984),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9987.valid){
continue;
}
IkReal x9985=((1.0)*(x9987.value));
IkReal x9986=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9985)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9985)));
IkReal gconst38=(x9984*x9986);
IkReal gconst39=((1.0)*r20*x9986);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9988=((-1.0)*r21);
CheckValue<IkReal> x9991 = IKatan2WithCheck(IkReal(x9988),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9991.valid){
continue;
}
IkReal x9989=((1.0)*(x9991.value));
IkReal x9990=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9989)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9989)));
IkReal gconst38=(x9988*x9990);
IkReal gconst39=((1.0)*r20*x9990);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9992=((-1.0)*r21);
CheckValue<IkReal> x9995 = IKatan2WithCheck(IkReal(x9992),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9995.valid){
continue;
}
IkReal x9993=((1.0)*(x9995.value));
IkReal x9994=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9993)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9993)));
IkReal gconst38=(x9992*x9994);
IkReal gconst39=((1.0)*r20*x9994);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9996=((-1.0)*r21);
CheckValue<IkReal> x9999 = IKatan2WithCheck(IkReal(x9996),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9999.valid){
continue;
}
IkReal x9997=((1.0)*(x9999.value));
IkReal x9998=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x9997)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x9997)));
IkReal gconst38=(x9996*x9998);
IkReal gconst39=((1.0)*r20*x9998);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10000=((-1.0)*r21);
CheckValue<IkReal> x10003 = IKatan2WithCheck(IkReal(x10000),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10003.valid){
continue;
}
IkReal x10001=((1.0)*(x10003.value));
IkReal x10002=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10001)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10001)));
IkReal gconst38=(x10000*x10002);
IkReal gconst39=((1.0)*r20*x10002);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10004=(gconst38*r11);
IkReal x10005=(gconst39*r10);
CheckValue<IkReal> x10006 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10005))+x10004)),IKFAST_ATAN2_MAGTHRESH);
if(!x10006.valid){
continue;
}
CheckValue<IkReal> x10007=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10004*x10005))+(x10005*x10005)+(x10004*x10004))),-1);
if(!x10007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10006.value)+(((1.5707963267949)*(x10007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10008=IKcos(j4);
IkReal x10009=IKsin(j4);
IkReal x10010=(gconst39*r10);
IkReal x10011=(gconst39*r20);
IkReal x10012=(gconst39*r00);
IkReal x10013=((1.0)*x10008);
IkReal x10014=((1.0)*x10009);
IkReal x10015=(gconst38*x10008);
IkReal x10016=(gconst38*x10009);
evalcond[0]=(((r21*x10015))+((r22*x10009))+(((-1.0)*x10011*x10013)));
evalcond[1]=((((-1.0)*x10012*x10013))+((r02*x10009))+((r01*x10015)));
evalcond[2]=((-1.0)+((r12*x10009))+((r11*x10015))+(((-1.0)*x10010*x10013)));
evalcond[3]=((((-1.0)*r12*x10013))+((r11*x10016))+(((-1.0)*x10010*x10014)));
evalcond[4]=(((r21*x10016))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10011*x10014))+(((-1.0)*r22*x10013)));
evalcond[5]=((((-1.0)*x10012*x10014))+(((-1.0)*r02*x10013))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x10016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10017=((1.0)*gconst39);
CheckValue<IkReal> x10018=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10017))+(((-1.0)*gconst38*r00)))),-1);
if(!x10018.valid){
continue;
}
CheckValue<IkReal> x10019 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10017))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10018.value)))+(x10019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10020=IKcos(j4);
IkReal x10021=IKsin(j4);
IkReal x10022=(gconst39*r10);
IkReal x10023=(gconst39*r20);
IkReal x10024=(gconst39*r00);
IkReal x10025=((1.0)*x10020);
IkReal x10026=((1.0)*x10021);
IkReal x10027=(gconst38*x10020);
IkReal x10028=(gconst38*x10021);
evalcond[0]=(((r21*x10027))+(((-1.0)*x10023*x10025))+((r22*x10021)));
evalcond[1]=((((-1.0)*x10024*x10025))+((r01*x10027))+((r02*x10021)));
evalcond[2]=((-1.0)+(((-1.0)*x10022*x10025))+((r11*x10027))+((r12*x10021)));
evalcond[3]=((((-1.0)*r12*x10025))+(((-1.0)*x10022*x10026))+((r11*x10028)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10028))+(((-1.0)*r22*x10025))+(((-1.0)*x10023*x10026)));
evalcond[5]=((((-1.0)*r02*x10025))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10024*x10026))+((r01*x10028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10029=IKPowWithIntegerCheck(IKsign((((gconst39*r21))+((gconst38*r20)))),-1);
if(!x10029.valid){
continue;
}
CheckValue<IkReal> x10030 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r00))+((gconst38*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10029.value)))+(x10030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10031=IKcos(j4);
IkReal x10032=IKsin(j4);
IkReal x10033=(gconst39*r10);
IkReal x10034=(gconst39*r20);
IkReal x10035=(gconst39*r00);
IkReal x10036=((1.0)*x10031);
IkReal x10037=((1.0)*x10032);
IkReal x10038=(gconst38*x10031);
IkReal x10039=(gconst38*x10032);
evalcond[0]=((((-1.0)*x10034*x10036))+((r21*x10038))+((r22*x10032)));
evalcond[1]=((((-1.0)*x10035*x10036))+((r01*x10038))+((r02*x10032)));
evalcond[2]=((-1.0)+((r11*x10038))+((r12*x10032))+(((-1.0)*x10033*x10036)));
evalcond[3]=(((r11*x10039))+(((-1.0)*x10033*x10037))+(((-1.0)*r12*x10036)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10034*x10037))+((r21*x10039))+(((-1.0)*r22*x10036)));
evalcond[5]=((((-1.0)*r02*x10036))+(((-1.0)*x10035*x10037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x10039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10040=((-1.0)*r21);
CheckValue<IkReal> x10043 = IKatan2WithCheck(IkReal(x10040),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10043.valid){
continue;
}
IkReal x10041=((1.0)*(x10043.value));
IkReal x10042=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10041)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10041)));
IkReal gconst38=(x10040*x10042);
IkReal gconst39=((1.0)*r20*x10042);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10044=((-1.0)*r21);
CheckValue<IkReal> x10047 = IKatan2WithCheck(IkReal(x10044),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10047.valid){
continue;
}
IkReal x10045=((1.0)*(x10047.value));
IkReal x10046=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10045)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10045)));
IkReal gconst38=(x10044*x10046);
IkReal gconst39=((1.0)*r20*x10046);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10048=((-1.0)*r21);
CheckValue<IkReal> x10051 = IKatan2WithCheck(IkReal(x10048),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10051.valid){
continue;
}
IkReal x10049=((1.0)*(x10051.value));
IkReal x10050=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10049)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10049)));
IkReal gconst38=(x10048*x10050);
IkReal gconst39=((1.0)*r20*x10050);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10052=(gconst38*r11);
IkReal x10053=(gconst39*r10);
CheckValue<IkReal> x10054=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10052*x10052)+(((-2.0)*x10052*x10053))+(x10053*x10053))),-1);
if(!x10054.valid){
continue;
}
CheckValue<IkReal> x10055 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10053))+x10052)),IKFAST_ATAN2_MAGTHRESH);
if(!x10055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10054.value)))+(x10055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10056=IKcos(j4);
IkReal x10057=IKsin(j4);
IkReal x10058=(gconst39*r10);
IkReal x10059=(gconst38*x10056);
IkReal x10060=((1.0)*x10056);
IkReal x10061=(gconst39*x10057);
IkReal x10062=((1.0)*gconst38*x10057);
evalcond[0]=((((-1.0)*gconst39*r20*x10060))+((r22*x10057))+((r21*x10059)));
evalcond[1]=(((r01*x10059))+((r02*x10057))+(((-1.0)*gconst39*r00*x10060)));
evalcond[2]=(((x10057*x10058))+(((-1.0)*r11*x10062))+((r12*x10056)));
evalcond[3]=((-1.0)+((r11*x10059))+(((-1.0)*x10058*x10060))+((r12*x10057)));
evalcond[4]=(((cj2*sj1))+((r20*x10061))+((cj1*sj2))+((r22*x10056))+(((-1.0)*r21*x10062)));
evalcond[5]=(((r00*x10061))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10056))+(((-1.0)*r01*x10062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10063=((1.0)*gconst39);
CheckValue<IkReal> x10064 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10063))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10064.valid){
continue;
}
CheckValue<IkReal> x10065=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r00))+(((-1.0)*r01*x10063)))),-1);
if(!x10065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10064.value)+(((1.5707963267949)*(x10065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10066=IKcos(j4);
IkReal x10067=IKsin(j4);
IkReal x10068=(gconst39*r10);
IkReal x10069=(gconst38*x10066);
IkReal x10070=((1.0)*x10066);
IkReal x10071=(gconst39*x10067);
IkReal x10072=((1.0)*gconst38*x10067);
evalcond[0]=((((-1.0)*gconst39*r20*x10070))+((r22*x10067))+((r21*x10069)));
evalcond[1]=(((r01*x10069))+((r02*x10067))+(((-1.0)*gconst39*r00*x10070)));
evalcond[2]=(((r12*x10066))+((x10067*x10068))+(((-1.0)*r11*x10072)));
evalcond[3]=((-1.0)+((r12*x10067))+(((-1.0)*x10068*x10070))+((r11*x10069)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x10071))+((r22*x10066))+(((-1.0)*r21*x10072)));
evalcond[5]=(((r00*x10071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10066))+(((-1.0)*r01*x10072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10073=IKPowWithIntegerCheck(IKsign((((gconst39*r21))+((gconst38*r20)))),-1);
if(!x10073.valid){
continue;
}
CheckValue<IkReal> x10074 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r00))+((gconst38*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10073.value)))+(x10074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10075=IKcos(j4);
IkReal x10076=IKsin(j4);
IkReal x10077=(gconst39*r10);
IkReal x10078=(gconst38*x10075);
IkReal x10079=((1.0)*x10075);
IkReal x10080=(gconst39*x10076);
IkReal x10081=((1.0)*gconst38*x10076);
evalcond[0]=((((-1.0)*gconst39*r20*x10079))+((r22*x10076))+((r21*x10078)));
evalcond[1]=(((r01*x10078))+((r02*x10076))+(((-1.0)*gconst39*r00*x10079)));
evalcond[2]=(((x10076*x10077))+((r12*x10075))+(((-1.0)*r11*x10081)));
evalcond[3]=((-1.0)+((r12*x10076))+(((-1.0)*x10077*x10079))+((r11*x10078)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x10080))+(((-1.0)*r21*x10081))+((r22*x10075)));
evalcond[5]=(((r00*x10080))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x10081))+((r02*x10075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10082=((-1.0)*r21);
CheckValue<IkReal> x10085 = IKatan2WithCheck(IkReal(x10082),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10085.valid){
continue;
}
IkReal x10083=((1.0)*(x10085.value));
IkReal x10084=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10083)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10083)));
IkReal gconst38=(x10082*x10084);
IkReal gconst39=((1.0)*r20*x10084);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10086=((-1.0)*r21);
CheckValue<IkReal> x10089 = IKatan2WithCheck(IkReal(x10086),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10089.valid){
continue;
}
IkReal x10087=((1.0)*(x10089.value));
IkReal x10088=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10087)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10087)));
IkReal gconst38=(x10086*x10088);
IkReal gconst39=((1.0)*r20*x10088);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10090=((-1.0)*r21);
CheckValue<IkReal> x10093 = IKatan2WithCheck(IkReal(x10090),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10093.valid){
continue;
}
IkReal x10091=((1.0)*(x10093.value));
IkReal x10092=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10091)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10091)));
IkReal gconst38=(x10090*x10092);
IkReal gconst39=((1.0)*r20*x10092);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10094=(gconst38*r11);
IkReal x10095=(gconst39*r10);
CheckValue<IkReal> x10096 = IKatan2WithCheck(IkReal(r12),IkReal((x10094+(((-1.0)*x10095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10096.valid){
continue;
}
CheckValue<IkReal> x10097=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10095*x10095)+(((-2.0)*x10094*x10095))+(x10094*x10094))),-1);
if(!x10097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10096.value)+(((1.5707963267949)*(x10097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10098=IKcos(j4);
IkReal x10099=IKsin(j4);
IkReal x10100=(gconst39*r10);
IkReal x10101=((1.0)*cj1);
IkReal x10102=(gconst38*x10098);
IkReal x10103=((1.0)*x10098);
IkReal x10104=(gconst39*x10099);
IkReal x10105=((1.0)*gconst38*x10099);
evalcond[0]=(((r21*x10102))+(((-1.0)*gconst39*r20*x10103))+((r22*x10099)));
evalcond[1]=(((r01*x10102))+(((-1.0)*gconst39*r00*x10103))+((r02*x10099)));
evalcond[2]=((((-1.0)*r11*x10105))+((r12*x10098))+((x10099*x10100)));
evalcond[3]=((-1.0)+((r12*x10099))+(((-1.0)*x10100*x10103))+((r11*x10102)));
evalcond[4]=(((r20*x10104))+((sj1*sj2))+((r22*x10098))+(((-1.0)*cj2*x10101))+(((-1.0)*r21*x10105)));
evalcond[5]=(((r00*x10104))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*x10105))+((r02*x10098))+(((-1.0)*sj2*x10101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10106=((1.0)*gconst39);
CheckValue<IkReal> x10107=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10106))+(((-1.0)*gconst38*r00)))),-1);
if(!x10107.valid){
continue;
}
CheckValue<IkReal> x10108 = IKatan2WithCheck(IkReal((((gconst38*r21))+(((-1.0)*r20*x10106)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10107.value)))+(x10108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10109=IKcos(j4);
IkReal x10110=IKsin(j4);
IkReal x10111=(gconst39*r10);
IkReal x10112=((1.0)*cj1);
IkReal x10113=(gconst38*x10109);
IkReal x10114=((1.0)*x10109);
IkReal x10115=(gconst39*x10110);
IkReal x10116=((1.0)*gconst38*x10110);
evalcond[0]=(((r21*x10113))+(((-1.0)*gconst39*r20*x10114))+((r22*x10110)));
evalcond[1]=(((r01*x10113))+(((-1.0)*gconst39*r00*x10114))+((r02*x10110)));
evalcond[2]=(((x10110*x10111))+((r12*x10109))+(((-1.0)*r11*x10116)));
evalcond[3]=((-1.0)+((r11*x10113))+((r12*x10110))+(((-1.0)*x10111*x10114)));
evalcond[4]=(((r20*x10115))+((sj1*sj2))+(((-1.0)*cj2*x10112))+(((-1.0)*r21*x10116))+((r22*x10109)));
evalcond[5]=(((r00*x10115))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*x10116))+((r02*x10109))+(((-1.0)*sj2*x10112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10117=IKPowWithIntegerCheck(IKsign((((gconst39*r21))+((gconst38*r20)))),-1);
if(!x10117.valid){
continue;
}
CheckValue<IkReal> x10118 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r00))+((gconst38*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10117.value)))+(x10118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10119=IKcos(j4);
IkReal x10120=IKsin(j4);
IkReal x10121=(gconst39*r10);
IkReal x10122=((1.0)*cj1);
IkReal x10123=(gconst38*x10119);
IkReal x10124=((1.0)*x10119);
IkReal x10125=(gconst39*x10120);
IkReal x10126=((1.0)*gconst38*x10120);
evalcond[0]=(((r21*x10123))+(((-1.0)*gconst39*r20*x10124))+((r22*x10120)));
evalcond[1]=((((-1.0)*gconst39*r00*x10124))+((r02*x10120))+((r01*x10123)));
evalcond[2]=(((r12*x10119))+((x10120*x10121))+(((-1.0)*r11*x10126)));
evalcond[3]=((-1.0)+(((-1.0)*x10121*x10124))+((r12*x10120))+((r11*x10123)));
evalcond[4]=(((r20*x10125))+(((-1.0)*cj2*x10122))+((sj1*sj2))+(((-1.0)*r21*x10126))+((r22*x10119)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r02*x10119))+((r00*x10125))+(((-1.0)*sj2*x10122))+(((-1.0)*r01*x10126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10127=((-1.0)*r21);
CheckValue<IkReal> x10130 = IKatan2WithCheck(IkReal(x10127),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10130.valid){
continue;
}
IkReal x10128=((1.0)*(x10130.value));
IkReal x10129=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10128)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10128)));
IkReal gconst38=(x10127*x10129);
IkReal gconst39=((1.0)*r20*x10129);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10131=((-1.0)*r21);
CheckValue<IkReal> x10134 = IKatan2WithCheck(IkReal(x10131),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10134.valid){
continue;
}
IkReal x10132=((1.0)*(x10134.value));
IkReal x10133=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10132)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10132)));
IkReal gconst38=(x10131*x10133);
IkReal gconst39=((1.0)*r20*x10133);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10135=((-1.0)*r21);
CheckValue<IkReal> x10138 = IKatan2WithCheck(IkReal(x10135),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10138.valid){
continue;
}
IkReal x10136=((1.0)*(x10138.value));
IkReal x10137=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10136)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10136)));
IkReal gconst38=(x10135*x10137);
IkReal gconst39=((1.0)*r20*x10137);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10139=(gconst38*r11);
IkReal x10140=(gconst39*r10);
CheckValue<IkReal> x10141 = IKatan2WithCheck(IkReal(r12),IkReal((x10139+(((-1.0)*x10140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10141.valid){
continue;
}
CheckValue<IkReal> x10142=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10139*x10140))+(x10139*x10139)+(x10140*x10140))),-1);
if(!x10142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10141.value)+(((1.5707963267949)*(x10142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10143=IKcos(j4);
IkReal x10144=IKsin(j4);
IkReal x10145=(gconst39*r10);
IkReal x10146=((1.0)*cj1);
IkReal x10147=(gconst39*r20);
IkReal x10148=(gconst39*r00);
IkReal x10149=((1.0)*x10143);
IkReal x10150=((1.0)*x10144);
IkReal x10151=(gconst38*x10143);
IkReal x10152=(gconst38*x10144);
evalcond[0]=(((r21*x10151))+((r22*x10144))+(((-1.0)*x10147*x10149)));
evalcond[1]=((((-1.0)*x10148*x10149))+((r02*x10144))+((r01*x10151)));
evalcond[2]=((-1.0)+((r12*x10144))+(((-1.0)*x10145*x10149))+((r11*x10151)));
evalcond[3]=((((-1.0)*x10145*x10150))+(((-1.0)*r12*x10149))+((r11*x10152)));
evalcond[4]=((((-1.0)*cj2*x10146))+((r21*x10152))+((sj1*sj2))+(((-1.0)*x10147*x10150))+(((-1.0)*r22*x10149)));
evalcond[5]=((((-1.0)*x10148*x10150))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10149))+(((-1.0)*sj2*x10146))+((r01*x10152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10153=((1.0)*gconst39);
CheckValue<IkReal> x10154=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r00))+(((-1.0)*r01*x10153)))),-1);
if(!x10154.valid){
continue;
}
CheckValue<IkReal> x10155 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10153))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10154.value)))+(x10155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10156=IKcos(j4);
IkReal x10157=IKsin(j4);
IkReal x10158=(gconst39*r10);
IkReal x10159=((1.0)*cj1);
IkReal x10160=(gconst39*r20);
IkReal x10161=(gconst39*r00);
IkReal x10162=((1.0)*x10156);
IkReal x10163=((1.0)*x10157);
IkReal x10164=(gconst38*x10156);
IkReal x10165=(gconst38*x10157);
evalcond[0]=((((-1.0)*x10160*x10162))+((r22*x10157))+((r21*x10164)));
evalcond[1]=((((-1.0)*x10161*x10162))+((r02*x10157))+((r01*x10164)));
evalcond[2]=((-1.0)+((r12*x10157))+(((-1.0)*x10158*x10162))+((r11*x10164)));
evalcond[3]=((((-1.0)*r12*x10162))+(((-1.0)*x10158*x10163))+((r11*x10165)));
evalcond[4]=((((-1.0)*cj2*x10159))+(((-1.0)*r22*x10162))+(((-1.0)*x10160*x10163))+((sj1*sj2))+((r21*x10165)));
evalcond[5]=((((-1.0)*x10161*x10163))+(((-1.0)*cj2*sj1))+((r01*x10165))+(((-1.0)*sj2*x10159))+(((-1.0)*r02*x10162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10166=IKPowWithIntegerCheck(IKsign((((gconst39*r21))+((gconst38*r20)))),-1);
if(!x10166.valid){
continue;
}
CheckValue<IkReal> x10167 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r00))+((gconst38*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10166.value)))+(x10167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10168=IKcos(j4);
IkReal x10169=IKsin(j4);
IkReal x10170=(gconst39*r10);
IkReal x10171=((1.0)*cj1);
IkReal x10172=(gconst39*r20);
IkReal x10173=(gconst39*r00);
IkReal x10174=((1.0)*x10168);
IkReal x10175=((1.0)*x10169);
IkReal x10176=(gconst38*x10168);
IkReal x10177=(gconst38*x10169);
evalcond[0]=(((r22*x10169))+(((-1.0)*x10172*x10174))+((r21*x10176)));
evalcond[1]=(((r01*x10176))+((r02*x10169))+(((-1.0)*x10173*x10174)));
evalcond[2]=((-1.0)+((r11*x10176))+((r12*x10169))+(((-1.0)*x10170*x10174)));
evalcond[3]=(((r11*x10177))+(((-1.0)*r12*x10174))+(((-1.0)*x10170*x10175)));
evalcond[4]=((((-1.0)*r22*x10174))+(((-1.0)*x10172*x10175))+(((-1.0)*cj2*x10171))+((sj1*sj2))+((r21*x10177)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10171))+((r01*x10177))+(((-1.0)*x10173*x10175))+(((-1.0)*r02*x10174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10178=((-1.0)*r21);
CheckValue<IkReal> x10181 = IKatan2WithCheck(IkReal(x10178),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10181.valid){
continue;
}
IkReal x10179=((1.0)*(x10181.value));
IkReal x10180=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10179)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r02=0;
npz=(((py*r12))+((pz*r22)));
rxp2_1=(px*r22);
rxp2_2=((-1.0)*px*r12);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10179)));
IkReal gconst38=(x10178*x10180);
IkReal gconst39=((1.0)*r20*x10180);
IkReal x10182=x9574;
IkReal x10183=((2.0)*cj3*x10182);
j4eval[0]=((IKabs(((((-1.0)*cj3*r22))+(((-1.0)*cj1*cj2))+((sj1*sj2)))))+(IKabs((((x10183*(r20*r20)))+((x10183*(r21*r21)))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x10184=(sj1*sj2);
IkReal x10185=((2.0)*cj3);
IkReal x10186=(cj3*r22);
IkReal x10187=(gconst38*r20*sj3);
IkReal x10188=(gconst39*r21*sj3);
IkReal x10189=((1.0)*cj1*cj2);
IkReal x10190=(x10187+x10184+x10188);
op[0]=((((-1.0)*x10186))+x10190+(((-1.0)*x10189)));
op[1]=(((gconst39*r20*x10185))+(((-1.0)*gconst38*r21*x10185)));
op[2]=(x10186+x10190+(((-1.0)*x10189)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10191=gconst39*gconst39;
IkReal x10192=gconst38*gconst38;
IkReal x10193=((1.0)*r20);
IkReal x10194=(r21*sj3);
IkReal x10195=(cj3*r21);
IkReal x10196=((1.0)*r22);
IkReal x10197=(r11*sj3);
IkReal x10198=(gconst38*gconst39*r11);
IkReal x10199=(gconst38*r10*sj3);
CheckValue<IkReal> x10200 = IKatan2WithCheck(IkReal(((((-1.0)*x10191*x10193*x10197))+((r10*x10192*x10194))+(((-1.0)*gconst39*x10193*x10199))+((x10194*x10198)))),IkReal(((((-1.0)*gconst39*x10196*x10197))+(((-1.0)*x10196*x10199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10200.valid){
continue;
}
CheckValue<IkReal> x10201=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*gconst38*gconst39*r10*x10195))+((cj3*r10*r20*x10191))+(((-1.0)*cj3*x10193*x10198))+((r11*x10192*x10195)))),-1);
if(!x10201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10200.value)+(((1.5707963267949)*(x10201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10202=IKcos(j4);
IkReal x10203=IKsin(j4);
IkReal x10204=(sj1*sj2);
IkReal x10205=(gconst39*r21);
IkReal x10206=(cj3*gconst39);
IkReal x10207=(r01*sj3);
IkReal x10208=(cj2*sj1);
IkReal x10209=((1.0)*cj1);
IkReal x10210=((1.0)*cj3);
IkReal x10211=(gconst38*sj3);
IkReal x10212=(cj3*gconst38);
IkReal x10213=(r11*sj3);
IkReal x10214=(cj2*x10209);
IkReal x10215=(gconst38*x10202);
IkReal x10216=(gconst38*x10203);
IkReal x10217=((1.0)*x10202);
IkReal x10218=(cj3*x10202);
IkReal x10219=((1.0)*gconst39*sj3*x10203);
evalcond[0]=(((r22*x10203))+(((-1.0)*gconst39*r20*x10217))+((r21*x10215)));
evalcond[1]=(((r02*x10203))+(((-1.0)*gconst39*r00*x10217))+((r01*x10215)));
evalcond[2]=((-1.0)+((r11*x10215))+((r12*x10203))+(((-1.0)*gconst39*r10*x10217)));
evalcond[3]=(((r10*x10211))+((r12*x10218))+(((-1.0)*r11*x10210*x10216))+((r10*x10203*x10206))+((gconst39*x10213)));
evalcond[4]=(((r10*x10212))+(((-1.0)*r10*x10219))+(((-1.0)*r12*sj3*x10217))+((r11*x10206))+((r11*x10203*x10211)));
evalcond[5]=((((-1.0)*r20*x10219))+((r20*x10212))+((cj1*sj2))+((r21*x10203*x10211))+(((-1.0)*r22*sj3*x10217))+x10208+((cj3*x10205)));
evalcond[6]=(((r20*x10203*x10206))+((sj3*x10205))+(((-1.0)*x10214))+((r20*x10211))+x10204+(((-1.0)*r21*x10210*x10216))+((r22*x10218)));
evalcond[7]=((((-1.0)*x10208))+(((-1.0)*r01*x10210*x10216))+((r00*x10211))+(((-1.0)*sj2*x10209))+((r02*x10218))+((gconst39*x10207))+((r00*x10203*x10206)));
evalcond[8]=((((-1.0)*x10214))+(((-1.0)*r02*sj3*x10217))+((r00*x10212))+(((-1.0)*r00*x10219))+((x10207*x10216))+((r01*x10206))+x10204);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10220=((1.0)*gconst39);
CheckValue<IkReal> x10221 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10220))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10221.valid){
continue;
}
CheckValue<IkReal> x10222=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r00))+(((-1.0)*r01*x10220)))),-1);
if(!x10222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10221.value)+(((1.5707963267949)*(x10222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10223=IKcos(j4);
IkReal x10224=IKsin(j4);
IkReal x10225=(sj1*sj2);
IkReal x10226=(gconst39*r21);
IkReal x10227=(cj3*gconst39);
IkReal x10228=(r01*sj3);
IkReal x10229=(cj2*sj1);
IkReal x10230=((1.0)*cj1);
IkReal x10231=((1.0)*cj3);
IkReal x10232=(gconst38*sj3);
IkReal x10233=(cj3*gconst38);
IkReal x10234=(r11*sj3);
IkReal x10235=(cj2*x10230);
IkReal x10236=(gconst38*x10223);
IkReal x10237=(gconst38*x10224);
IkReal x10238=((1.0)*x10223);
IkReal x10239=(cj3*x10223);
IkReal x10240=((1.0)*gconst39*sj3*x10224);
evalcond[0]=(((r22*x10224))+((r21*x10236))+(((-1.0)*gconst39*r20*x10238)));
evalcond[1]=(((r02*x10224))+((r01*x10236))+(((-1.0)*gconst39*r00*x10238)));
evalcond[2]=((-1.0)+((r12*x10224))+(((-1.0)*gconst39*r10*x10238))+((r11*x10236)));
evalcond[3]=(((gconst39*x10234))+(((-1.0)*r11*x10231*x10237))+((r10*x10224*x10227))+((r12*x10239))+((r10*x10232)));
evalcond[4]=(((r11*x10224*x10232))+(((-1.0)*r12*sj3*x10238))+((r11*x10227))+(((-1.0)*r10*x10240))+((r10*x10233)));
evalcond[5]=(((r21*x10224*x10232))+(((-1.0)*r20*x10240))+((cj1*sj2))+((cj3*x10226))+(((-1.0)*r22*sj3*x10238))+x10229+((r20*x10233)));
evalcond[6]=(((r22*x10239))+((sj3*x10226))+x10225+(((-1.0)*x10235))+(((-1.0)*r21*x10231*x10237))+((r20*x10232))+((r20*x10224*x10227)));
evalcond[7]=(((r00*x10224*x10227))+((r02*x10239))+((gconst39*x10228))+(((-1.0)*r01*x10231*x10237))+((r00*x10232))+(((-1.0)*x10229))+(((-1.0)*sj2*x10230)));
evalcond[8]=((((-1.0)*r02*sj3*x10238))+(((-1.0)*r00*x10240))+x10225+((x10228*x10237))+((r00*x10233))+(((-1.0)*x10235))+((r01*x10227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10241=IKPowWithIntegerCheck(IKsign((((gconst39*r21))+((gconst38*r20)))),-1);
if(!x10241.valid){
continue;
}
CheckValue<IkReal> x10242 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r00))+((gconst38*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10241.value)))+(x10242.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10243=IKcos(j4);
IkReal x10244=IKsin(j4);
IkReal x10245=(sj1*sj2);
IkReal x10246=(gconst39*r21);
IkReal x10247=(cj3*gconst39);
IkReal x10248=(r01*sj3);
IkReal x10249=(cj2*sj1);
IkReal x10250=((1.0)*cj1);
IkReal x10251=((1.0)*cj3);
IkReal x10252=(gconst38*sj3);
IkReal x10253=(cj3*gconst38);
IkReal x10254=(r11*sj3);
IkReal x10255=(cj2*x10250);
IkReal x10256=(gconst38*x10243);
IkReal x10257=(gconst38*x10244);
IkReal x10258=((1.0)*x10243);
IkReal x10259=(cj3*x10243);
IkReal x10260=((1.0)*gconst39*sj3*x10244);
evalcond[0]=((((-1.0)*gconst39*r20*x10258))+((r22*x10244))+((r21*x10256)));
evalcond[1]=(((r02*x10244))+(((-1.0)*gconst39*r00*x10258))+((r01*x10256)));
evalcond[2]=((-1.0)+(((-1.0)*gconst39*r10*x10258))+((r11*x10256))+((r12*x10244)));
evalcond[3]=(((r12*x10259))+((r10*x10252))+((gconst39*x10254))+(((-1.0)*r11*x10251*x10257))+((r10*x10244*x10247)));
evalcond[4]=(((r10*x10253))+(((-1.0)*r10*x10260))+((r11*x10244*x10252))+(((-1.0)*r12*sj3*x10258))+((r11*x10247)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x10260))+((cj3*x10246))+((r21*x10244*x10252))+x10249+(((-1.0)*r22*sj3*x10258))+((r20*x10253)));
evalcond[6]=(((r22*x10259))+((sj3*x10246))+(((-1.0)*x10255))+x10245+((r20*x10244*x10247))+((r20*x10252))+(((-1.0)*r21*x10251*x10257)));
evalcond[7]=((((-1.0)*r01*x10251*x10257))+((r02*x10259))+((gconst39*x10248))+((r00*x10244*x10247))+(((-1.0)*sj2*x10250))+(((-1.0)*x10249))+((r00*x10252)));
evalcond[8]=(((x10248*x10257))+(((-1.0)*r02*sj3*x10258))+(((-1.0)*r00*x10260))+(((-1.0)*x10255))+x10245+((r00*x10253))+((r01*x10247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10261=((-1.0)*r21);
CheckValue<IkReal> x10264 = IKatan2WithCheck(IkReal(x10261),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10264.valid){
continue;
}
IkReal x10262=((1.0)*(x10264.value));
IkReal x10263=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10262)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10262)));
IkReal gconst38=(x10261*x10263);
IkReal gconst39=((1.0)*r20*x10263);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10265=((-1.0)*r21);
CheckValue<IkReal> x10268 = IKatan2WithCheck(IkReal(x10265),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10268.valid){
continue;
}
IkReal x10266=((1.0)*(x10268.value));
IkReal x10267=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10266)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10266)));
IkReal gconst38=(x10265*x10267);
IkReal gconst39=((1.0)*r20*x10267);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10269=((-1.0)*r21);
CheckValue<IkReal> x10272 = IKatan2WithCheck(IkReal(x10269),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10272.valid){
continue;
}
IkReal x10270=((1.0)*(x10272.value));
IkReal x10271=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10270)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10270)));
IkReal gconst38=(x10269*x10271);
IkReal gconst39=((1.0)*r20*x10271);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10273=((-1.0)*r21);
CheckValue<IkReal> x10276 = IKatan2WithCheck(IkReal(x10273),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10276.valid){
continue;
}
IkReal x10274=((1.0)*(x10276.value));
IkReal x10275=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10274)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10274)));
IkReal gconst38=(x10273*x10275);
IkReal gconst39=((1.0)*r20*x10275);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10277=((-1.0)*r21);
CheckValue<IkReal> x10280 = IKatan2WithCheck(IkReal(x10277),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10280.valid){
continue;
}
IkReal x10278=((1.0)*(x10280.value));
IkReal x10279=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10278)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10278)));
IkReal gconst38=(x10277*x10279);
IkReal gconst39=((1.0)*r20*x10279);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10281=((-1.0)*r21);
CheckValue<IkReal> x10284 = IKatan2WithCheck(IkReal(x10281),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10284.valid){
continue;
}
IkReal x10282=((1.0)*(x10284.value));
IkReal x10283=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10282)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10282)));
IkReal gconst38=(x10281*x10283);
IkReal gconst39=((1.0)*r20*x10283);
IkReal x10285=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10289=IKPowWithIntegerCheck(x10285,-1);
if(!x10289.valid){
continue;
}
IkReal x10286=x10289.value;
IkReal x10287=((1.0)*x10286);
IkReal x10288=((((-1.0)*x10287*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10286))+(((-1.0)*x10287*(r00*r00)*(r20*r20))));
j4eval[0]=x10288;
j4eval[1]=IKsign(x10288);
j4eval[2]=r02;
j4eval[3]=x10285;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10290=(gconst38*r01);
IkReal x10291=(gconst39*r00);
CheckValue<IkReal> x10292 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10291))+x10290)),IKFAST_ATAN2_MAGTHRESH);
if(!x10292.valid){
continue;
}
CheckValue<IkReal> x10293=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10291*x10291)))+(((-1.0)*(r02*r02)))+(((2.0)*x10290*x10291))+(((-1.0)*(x10290*x10290))))),-1);
if(!x10293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10292.value)+(((1.5707963267949)*(x10293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10294=IKcos(j4);
IkReal x10295=IKsin(j4);
IkReal x10296=(gconst39*r10);
IkReal x10297=(gconst39*r20);
IkReal x10298=(gconst39*r00);
IkReal x10299=((1.0)*x10294);
IkReal x10300=((1.0)*x10295);
IkReal x10301=(gconst38*x10294);
IkReal x10302=(gconst38*x10295);
evalcond[0]=((((-1.0)*x10297*x10299))+((r21*x10301))+((r22*x10295)));
evalcond[1]=(((r12*x10295))+((r11*x10301))+(((-1.0)*x10296*x10299)));
evalcond[2]=((1.0)+(((-1.0)*x10298*x10299))+((r01*x10301))+((r02*x10295)));
evalcond[3]=((((-1.0)*x10298*x10300))+(((-1.0)*r02*x10299))+((r01*x10302)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10297*x10300))+((r21*x10302))+(((-1.0)*r22*x10299)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x10302))+(((-1.0)*r12*x10299))+(((-1.0)*x10296*x10300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10303=((1.0)*gconst39);
CheckValue<IkReal> x10304=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10303))+(((-1.0)*gconst38*r10)))),-1);
if(!x10304.valid){
continue;
}
CheckValue<IkReal> x10305 = IKatan2WithCheck(IkReal((((gconst38*r21))+(((-1.0)*r20*x10303)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10304.value)))+(x10305.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10306=IKcos(j4);
IkReal x10307=IKsin(j4);
IkReal x10308=(gconst39*r10);
IkReal x10309=(gconst39*r20);
IkReal x10310=(gconst39*r00);
IkReal x10311=((1.0)*x10306);
IkReal x10312=((1.0)*x10307);
IkReal x10313=(gconst38*x10306);
IkReal x10314=(gconst38*x10307);
evalcond[0]=(((r21*x10313))+(((-1.0)*x10309*x10311))+((r22*x10307)));
evalcond[1]=(((r11*x10313))+(((-1.0)*x10308*x10311))+((r12*x10307)));
evalcond[2]=((1.0)+((r02*x10307))+((r01*x10313))+(((-1.0)*x10310*x10311)));
evalcond[3]=(((r01*x10314))+(((-1.0)*x10310*x10312))+(((-1.0)*r02*x10311)));
evalcond[4]=(((cj2*sj1))+((r21*x10314))+((cj1*sj2))+(((-1.0)*x10309*x10312))+(((-1.0)*r22*x10311)));
evalcond[5]=(((r11*x10314))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x10311))+(((-1.0)*x10308*x10312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10315=IKPowWithIntegerCheck(IKsign((((gconst39*r21))+((gconst38*r20)))),-1);
if(!x10315.valid){
continue;
}
CheckValue<IkReal> x10316 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r10))+((gconst38*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10315.value)))+(x10316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10317=IKcos(j4);
IkReal x10318=IKsin(j4);
IkReal x10319=(gconst39*r10);
IkReal x10320=(gconst39*r20);
IkReal x10321=(gconst39*r00);
IkReal x10322=((1.0)*x10317);
IkReal x10323=((1.0)*x10318);
IkReal x10324=(gconst38*x10317);
IkReal x10325=(gconst38*x10318);
evalcond[0]=(((r22*x10318))+((r21*x10324))+(((-1.0)*x10320*x10322)));
evalcond[1]=(((r12*x10318))+(((-1.0)*x10319*x10322))+((r11*x10324)));
evalcond[2]=((1.0)+(((-1.0)*x10321*x10322))+((r01*x10324))+((r02*x10318)));
evalcond[3]=((((-1.0)*r02*x10322))+(((-1.0)*x10321*x10323))+((r01*x10325)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10322))+((r21*x10325))+(((-1.0)*x10320*x10323)));
evalcond[5]=((((-1.0)*r12*x10322))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10319*x10323))+((r11*x10325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10326=((-1.0)*r21);
CheckValue<IkReal> x10329 = IKatan2WithCheck(IkReal(x10326),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10329.valid){
continue;
}
IkReal x10327=((1.0)*(x10329.value));
IkReal x10328=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10327)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10327)));
IkReal gconst38=(x10326*x10328);
IkReal gconst39=((1.0)*r20*x10328);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10330=((-1.0)*r21);
CheckValue<IkReal> x10333 = IKatan2WithCheck(IkReal(x10330),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10333.valid){
continue;
}
IkReal x10331=((1.0)*(x10333.value));
IkReal x10332=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10331)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10331)));
IkReal gconst38=(x10330*x10332);
IkReal gconst39=((1.0)*r20*x10332);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10334=((-1.0)*r21);
CheckValue<IkReal> x10337 = IKatan2WithCheck(IkReal(x10334),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10337.valid){
continue;
}
IkReal x10335=((1.0)*(x10337.value));
IkReal x10336=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10335)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10335)));
IkReal gconst38=(x10334*x10336);
IkReal gconst39=((1.0)*r20*x10336);
IkReal x10338=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10342=IKPowWithIntegerCheck(x10338,-1);
if(!x10342.valid){
continue;
}
IkReal x10339=x10342.value;
IkReal x10340=((1.0)*x10339);
IkReal x10341=((((-1.0)*x10340*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10340*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10339)));
j4eval[0]=x10341;
j4eval[1]=IKsign(x10341);
j4eval[2]=r02;
j4eval[3]=x10338;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10343=(gconst38*r01);
IkReal x10344=(gconst39*r00);
CheckValue<IkReal> x10345=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10344*x10344)))+(((-1.0)*(x10343*x10343)))+(((2.0)*x10343*x10344)))),-1);
if(!x10345.valid){
continue;
}
CheckValue<IkReal> x10346 = IKatan2WithCheck(IkReal(r02),IkReal((x10343+(((-1.0)*x10344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10345.value)))+(x10346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10347=IKcos(j4);
IkReal x10348=IKsin(j4);
IkReal x10349=(gconst39*r10);
IkReal x10350=(gconst38*x10347);
IkReal x10351=((1.0)*x10347);
IkReal x10352=(gconst39*x10348);
IkReal x10353=((1.0)*gconst38*x10348);
evalcond[0]=(((r21*x10350))+(((-1.0)*gconst39*r20*x10351))+((r22*x10348)));
evalcond[1]=(((r12*x10348))+((r11*x10350))+(((-1.0)*x10349*x10351)));
evalcond[2]=(((r00*x10352))+(((-1.0)*r01*x10353))+((r02*x10347)));
evalcond[3]=((1.0)+(((-1.0)*gconst39*r00*x10351))+((r01*x10350))+((r02*x10348)));
evalcond[4]=(((cj2*sj1))+((r20*x10352))+((cj1*sj2))+((r22*x10347))+(((-1.0)*r21*x10353)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x10347))+(((-1.0)*r11*x10353))+((x10348*x10349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10354=((1.0)*gconst39);
CheckValue<IkReal> x10355=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r10))+(((-1.0)*r11*x10354)))),-1);
if(!x10355.valid){
continue;
}
CheckValue<IkReal> x10356 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10354))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10355.value)))+(x10356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10357=IKcos(j4);
IkReal x10358=IKsin(j4);
IkReal x10359=(gconst39*r10);
IkReal x10360=(gconst38*x10357);
IkReal x10361=((1.0)*x10357);
IkReal x10362=(gconst39*x10358);
IkReal x10363=((1.0)*gconst38*x10358);
evalcond[0]=(((r21*x10360))+(((-1.0)*gconst39*r20*x10361))+((r22*x10358)));
evalcond[1]=((((-1.0)*x10359*x10361))+((r11*x10360))+((r12*x10358)));
evalcond[2]=(((r00*x10362))+(((-1.0)*r01*x10363))+((r02*x10357)));
evalcond[3]=((1.0)+((r01*x10360))+(((-1.0)*gconst39*r00*x10361))+((r02*x10358)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10357))+((r20*x10362))+(((-1.0)*r21*x10363)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10358*x10359))+(((-1.0)*r11*x10363))+((r12*x10357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10364=IKPowWithIntegerCheck(IKsign((((gconst39*r21))+((gconst38*r20)))),-1);
if(!x10364.valid){
continue;
}
CheckValue<IkReal> x10365 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r10))+((gconst38*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10364.value)))+(x10365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10366=IKcos(j4);
IkReal x10367=IKsin(j4);
IkReal x10368=(gconst39*r10);
IkReal x10369=(gconst38*x10366);
IkReal x10370=((1.0)*x10366);
IkReal x10371=(gconst39*x10367);
IkReal x10372=((1.0)*gconst38*x10367);
evalcond[0]=(((r22*x10367))+((r21*x10369))+(((-1.0)*gconst39*r20*x10370)));
evalcond[1]=((((-1.0)*x10368*x10370))+((r11*x10369))+((r12*x10367)));
evalcond[2]=(((r00*x10371))+(((-1.0)*r01*x10372))+((r02*x10366)));
evalcond[3]=((1.0)+((r01*x10369))+(((-1.0)*gconst39*r00*x10370))+((r02*x10367)));
evalcond[4]=(((r22*x10366))+((cj2*sj1))+((cj1*sj2))+((r20*x10371))+(((-1.0)*r21*x10372)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10367*x10368))+(((-1.0)*r11*x10372))+((r12*x10366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10373=((-1.0)*r21);
CheckValue<IkReal> x10376 = IKatan2WithCheck(IkReal(x10373),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10376.valid){
continue;
}
IkReal x10374=((1.0)*(x10376.value));
IkReal x10375=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10374)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10374)));
IkReal gconst38=(x10373*x10375);
IkReal gconst39=((1.0)*r20*x10375);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10377=((-1.0)*r21);
CheckValue<IkReal> x10380 = IKatan2WithCheck(IkReal(x10377),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10380.valid){
continue;
}
IkReal x10378=((1.0)*(x10380.value));
IkReal x10379=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10378)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10378)));
IkReal gconst38=(x10377*x10379);
IkReal gconst39=((1.0)*r20*x10379);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10381=((-1.0)*r21);
CheckValue<IkReal> x10384 = IKatan2WithCheck(IkReal(x10381),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10384.valid){
continue;
}
IkReal x10382=((1.0)*(x10384.value));
IkReal x10383=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10382)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10382)));
IkReal gconst38=(x10381*x10383);
IkReal gconst39=((1.0)*r20*x10383);
IkReal x10385=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10389=IKPowWithIntegerCheck(x10385,-1);
if(!x10389.valid){
continue;
}
IkReal x10386=x10389.value;
IkReal x10387=((1.0)*x10386);
IkReal x10388=((((-1.0)*x10387*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10386))+(((-1.0)*x10387*(r01*r01)*(r21*r21))));
j4eval[0]=x10388;
j4eval[1]=IKsign(x10388);
j4eval[2]=r02;
j4eval[3]=x10385;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10390=(gconst38*r01);
IkReal x10391=(gconst39*r00);
CheckValue<IkReal> x10392 = IKatan2WithCheck(IkReal(r02),IkReal((x10390+(((-1.0)*x10391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10392.valid){
continue;
}
CheckValue<IkReal> x10393=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10390*x10390)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10391*x10391)))+(((2.0)*x10390*x10391)))),-1);
if(!x10393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10392.value)+(((1.5707963267949)*(x10393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10394=IKcos(j4);
IkReal x10395=IKsin(j4);
IkReal x10396=(gconst39*r10);
IkReal x10397=((1.0)*cj1);
IkReal x10398=(gconst38*x10394);
IkReal x10399=((1.0)*x10394);
IkReal x10400=(gconst39*x10395);
IkReal x10401=((1.0)*gconst38*x10395);
evalcond[0]=((((-1.0)*gconst39*r20*x10399))+((r21*x10398))+((r22*x10395)));
evalcond[1]=((((-1.0)*x10396*x10399))+((r11*x10398))+((r12*x10395)));
evalcond[2]=(((r00*x10400))+((r02*x10394))+(((-1.0)*r01*x10401)));
evalcond[3]=((1.0)+((r01*x10398))+((r02*x10395))+(((-1.0)*gconst39*r00*x10399)));
evalcond[4]=(((r22*x10394))+((sj1*sj2))+(((-1.0)*r21*x10401))+(((-1.0)*cj2*x10397))+((r20*x10400)));
evalcond[5]=(((x10395*x10396))+((r12*x10394))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*x10401))+(((-1.0)*sj2*x10397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10402=((1.0)*gconst39);
CheckValue<IkReal> x10403 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10402))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10403.valid){
continue;
}
CheckValue<IkReal> x10404=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r10))+(((-1.0)*r11*x10402)))),-1);
if(!x10404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10403.value)+(((1.5707963267949)*(x10404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10405=IKcos(j4);
IkReal x10406=IKsin(j4);
IkReal x10407=(gconst39*r10);
IkReal x10408=((1.0)*cj1);
IkReal x10409=(gconst38*x10405);
IkReal x10410=((1.0)*x10405);
IkReal x10411=(gconst39*x10406);
IkReal x10412=((1.0)*gconst38*x10406);
evalcond[0]=(((r21*x10409))+((r22*x10406))+(((-1.0)*gconst39*r20*x10410)));
evalcond[1]=((((-1.0)*x10407*x10410))+((r11*x10409))+((r12*x10406)));
evalcond[2]=(((r00*x10411))+((r02*x10405))+(((-1.0)*r01*x10412)));
evalcond[3]=((1.0)+((r01*x10409))+(((-1.0)*gconst39*r00*x10410))+((r02*x10406)));
evalcond[4]=(((r22*x10405))+((sj1*sj2))+(((-1.0)*r21*x10412))+((r20*x10411))+(((-1.0)*cj2*x10408)));
evalcond[5]=(((x10406*x10407))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10408))+(((-1.0)*r11*x10412))+((r12*x10405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10413=IKPowWithIntegerCheck(IKsign((((gconst39*r21))+((gconst38*r20)))),-1);
if(!x10413.valid){
continue;
}
CheckValue<IkReal> x10414 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r10))+((gconst38*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10413.value)))+(x10414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10415=IKcos(j4);
IkReal x10416=IKsin(j4);
IkReal x10417=(gconst39*r10);
IkReal x10418=((1.0)*cj1);
IkReal x10419=(gconst38*x10415);
IkReal x10420=((1.0)*x10415);
IkReal x10421=(gconst39*x10416);
IkReal x10422=((1.0)*gconst38*x10416);
evalcond[0]=(((r22*x10416))+((r21*x10419))+(((-1.0)*gconst39*r20*x10420)));
evalcond[1]=(((r11*x10419))+(((-1.0)*x10417*x10420))+((r12*x10416)));
evalcond[2]=(((r00*x10421))+((r02*x10415))+(((-1.0)*r01*x10422)));
evalcond[3]=((1.0)+((r01*x10419))+((r02*x10416))+(((-1.0)*gconst39*r00*x10420)));
evalcond[4]=(((r22*x10415))+(((-1.0)*r21*x10422))+((sj1*sj2))+((r20*x10421))+(((-1.0)*cj2*x10418)));
evalcond[5]=(((x10416*x10417))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10418))+(((-1.0)*r11*x10422))+((r12*x10415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10423=((-1.0)*r21);
CheckValue<IkReal> x10426 = IKatan2WithCheck(IkReal(x10423),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10426.valid){
continue;
}
IkReal x10424=((1.0)*(x10426.value));
IkReal x10425=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10424)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10424)));
IkReal gconst38=(x10423*x10425);
IkReal gconst39=((1.0)*r20*x10425);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10427=((-1.0)*r21);
CheckValue<IkReal> x10430 = IKatan2WithCheck(IkReal(x10427),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10430.valid){
continue;
}
IkReal x10428=((1.0)*(x10430.value));
IkReal x10429=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10428)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10428)));
IkReal gconst38=(x10427*x10429);
IkReal gconst39=((1.0)*r20*x10429);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10431=((-1.0)*r21);
CheckValue<IkReal> x10434 = IKatan2WithCheck(IkReal(x10431),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10434.valid){
continue;
}
IkReal x10432=((1.0)*(x10434.value));
IkReal x10433=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10432)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10432)));
IkReal gconst38=(x10431*x10433);
IkReal gconst39=((1.0)*r20*x10433);
IkReal x10435=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10439=IKPowWithIntegerCheck(x10435,-1);
if(!x10439.valid){
continue;
}
IkReal x10436=x10439.value;
IkReal x10437=((1.0)*x10436);
IkReal x10438=((((-1.0)*x10437*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10436))+(((-1.0)*x10437*(r01*r01)*(r21*r21))));
j4eval[0]=x10438;
j4eval[1]=IKsign(x10438);
j4eval[2]=r02;
j4eval[3]=x10435;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10440=(gconst38*r01);
IkReal x10441=(gconst39*r00);
CheckValue<IkReal> x10442 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10441))+x10440)),IKFAST_ATAN2_MAGTHRESH);
if(!x10442.valid){
continue;
}
CheckValue<IkReal> x10443=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10441*x10441)))+(((-1.0)*(x10440*x10440)))+(((-1.0)*(r02*r02)))+(((2.0)*x10440*x10441)))),-1);
if(!x10443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10442.value)+(((1.5707963267949)*(x10443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10444=IKcos(j4);
IkReal x10445=IKsin(j4);
IkReal x10446=(gconst39*r10);
IkReal x10447=((1.0)*cj1);
IkReal x10448=(gconst39*r20);
IkReal x10449=(gconst39*r00);
IkReal x10450=((1.0)*x10444);
IkReal x10451=((1.0)*x10445);
IkReal x10452=(gconst38*x10444);
IkReal x10453=(gconst38*x10445);
evalcond[0]=(((r22*x10445))+(((-1.0)*x10448*x10450))+((r21*x10452)));
evalcond[1]=(((r11*x10452))+((r12*x10445))+(((-1.0)*x10446*x10450)));
evalcond[2]=((1.0)+(((-1.0)*x10449*x10450))+((r02*x10445))+((r01*x10452)));
evalcond[3]=((((-1.0)*x10449*x10451))+(((-1.0)*r02*x10450))+((r01*x10453)));
evalcond[4]=((((-1.0)*r22*x10450))+((sj1*sj2))+(((-1.0)*x10448*x10451))+((r21*x10453))+(((-1.0)*cj2*x10447)));
evalcond[5]=(((r11*x10453))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10447))+(((-1.0)*r12*x10450))+(((-1.0)*x10446*x10451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10454=((1.0)*gconst39);
CheckValue<IkReal> x10455=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r10))+(((-1.0)*r11*x10454)))),-1);
if(!x10455.valid){
continue;
}
CheckValue<IkReal> x10456 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10454))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10455.value)))+(x10456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10457=IKcos(j4);
IkReal x10458=IKsin(j4);
IkReal x10459=(gconst39*r10);
IkReal x10460=((1.0)*cj1);
IkReal x10461=(gconst39*r20);
IkReal x10462=(gconst39*r00);
IkReal x10463=((1.0)*x10457);
IkReal x10464=((1.0)*x10458);
IkReal x10465=(gconst38*x10457);
IkReal x10466=(gconst38*x10458);
evalcond[0]=((((-1.0)*x10461*x10463))+((r22*x10458))+((r21*x10465)));
evalcond[1]=((((-1.0)*x10459*x10463))+((r12*x10458))+((r11*x10465)));
evalcond[2]=((1.0)+((r01*x10465))+(((-1.0)*x10462*x10463))+((r02*x10458)));
evalcond[3]=((((-1.0)*r02*x10463))+((r01*x10466))+(((-1.0)*x10462*x10464)));
evalcond[4]=((((-1.0)*x10461*x10464))+((sj1*sj2))+(((-1.0)*r22*x10463))+((r21*x10466))+(((-1.0)*cj2*x10460)));
evalcond[5]=((((-1.0)*x10459*x10464))+(((-1.0)*cj2*sj1))+((r11*x10466))+(((-1.0)*sj2*x10460))+(((-1.0)*r12*x10463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10467=IKPowWithIntegerCheck(IKsign((((gconst39*r21))+((gconst38*r20)))),-1);
if(!x10467.valid){
continue;
}
CheckValue<IkReal> x10468 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r10))+((gconst38*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10467.value)))+(x10468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10469=IKcos(j4);
IkReal x10470=IKsin(j4);
IkReal x10471=(gconst39*r10);
IkReal x10472=((1.0)*cj1);
IkReal x10473=(gconst39*r20);
IkReal x10474=(gconst39*r00);
IkReal x10475=((1.0)*x10469);
IkReal x10476=((1.0)*x10470);
IkReal x10477=(gconst38*x10469);
IkReal x10478=(gconst38*x10470);
evalcond[0]=(((r22*x10470))+((r21*x10477))+(((-1.0)*x10473*x10475)));
evalcond[1]=(((r12*x10470))+((r11*x10477))+(((-1.0)*x10471*x10475)));
evalcond[2]=((1.0)+((r01*x10477))+(((-1.0)*x10474*x10475))+((r02*x10470)));
evalcond[3]=((((-1.0)*r02*x10475))+((r01*x10478))+(((-1.0)*x10474*x10476)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x10475))+((r21*x10478))+(((-1.0)*cj2*x10472))+(((-1.0)*x10473*x10476)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r11*x10478))+(((-1.0)*sj2*x10472))+(((-1.0)*x10471*x10476))+(((-1.0)*r12*x10475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10479=((-1.0)*r21);
CheckValue<IkReal> x10482 = IKatan2WithCheck(IkReal(x10479),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10482.valid){
continue;
}
IkReal x10480=((1.0)*(x10482.value));
IkReal x10481=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10480)));
sj0=0;
cj0=1.0;
j0=0;
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10480)));
IkReal gconst38=(x10479*x10481);
IkReal gconst39=((1.0)*r20*x10481);
IkReal x10483=x9574;
IkReal x10484=((2.0)*cj3*x10483);
j4eval[0]=((IKabs((((x10484*(r21*r21)))+((x10484*(r20*r20))))))+(IKabs(((((-1.0)*cj3*r22))+(((-1.0)*cj1*cj2))+((sj1*sj2))))));
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x10485=(sj1*sj2);
IkReal x10486=((2.0)*cj3);
IkReal x10487=(cj3*r22);
IkReal x10488=(gconst38*r20*sj3);
IkReal x10489=(gconst39*r21*sj3);
IkReal x10490=((1.0)*cj1*cj2);
IkReal x10491=(x10488+x10489+x10485);
op[0]=((((-1.0)*x10487))+(((-1.0)*x10490))+x10491);
op[1]=((((-1.0)*gconst38*r21*x10486))+((gconst39*r20*x10486)));
op[2]=((((-1.0)*x10490))+x10491+x10487);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10492=gconst39*gconst39;
IkReal x10493=gconst38*gconst38;
IkReal x10494=((1.0)*r00);
IkReal x10495=(gconst38*sj3);
IkReal x10496=(gconst39*r20);
IkReal x10497=(cj3*r01);
IkReal x10498=((1.0)*r01*sj3);
IkReal x10499=(r20*x10492);
IkReal x10500=(gconst38*gconst39*r21);
IkReal x10501=(r21*x10493);
CheckValue<IkReal> x10502=IKPowWithIntegerCheck(IKsign((((cj3*r00*x10499))+((x10497*x10501))+(((-1.0)*cj3*x10494*x10500))+((cj3*r02*r22))+(((-1.0)*gconst38*x10496*x10497)))),-1);
if(!x10502.valid){
continue;
}
CheckValue<IkReal> x10503 = IKatan2WithCheck(IkReal((((r00*sj3*x10501))+((gconst39*r01*r21*x10495))+(((-1.0)*x10494*x10495*x10496))+(((-1.0)*x10498*x10499)))),IkReal(((((-1.0)*gconst39*r22*x10498))+(((-1.0)*r22*x10494*x10495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10502.value)))+(x10503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10504=IKcos(j4);
IkReal x10505=IKsin(j4);
IkReal x10506=(sj1*sj2);
IkReal x10507=((1.0)*cj1);
IkReal x10508=(gconst39*r21);
IkReal x10509=(cj3*gconst39);
IkReal x10510=(cj3*gconst38);
IkReal x10511=(cj2*sj1);
IkReal x10512=(gconst38*sj3);
IkReal x10513=(gconst39*sj3);
IkReal x10514=(cj2*x10507);
IkReal x10515=(gconst38*x10504);
IkReal x10516=((1.0)*x10504);
IkReal x10517=(cj3*x10504);
IkReal x10518=((1.0)*x10505);
IkReal x10519=(x10505*x10512);
IkReal x10520=(x10513*x10518);
evalcond[0]=((((-1.0)*gconst39*r20*x10516))+((r22*x10505))+((r21*x10515)));
evalcond[1]=(((r12*x10505))+(((-1.0)*gconst39*r10*x10516))+((r11*x10515)));
evalcond[2]=((1.0)+(((-1.0)*gconst39*r00*x10516))+((r01*x10515))+((r02*x10505)));
evalcond[3]=((((-1.0)*r01*x10510*x10518))+((r01*x10513))+((r00*x10512))+((r00*x10505*x10509))+((r02*x10517)));
evalcond[4]=((((-1.0)*r02*sj3*x10516))+((r01*x10509))+((r01*x10519))+((r00*x10510))+(((-1.0)*r00*x10520)));
evalcond[5]=((((-1.0)*r22*sj3*x10516))+(((-1.0)*r20*x10520))+((cj1*sj2))+((r20*x10510))+((cj3*x10508))+x10511+((r21*x10519)));
evalcond[6]=(((r20*x10512))+(((-1.0)*x10514))+x10506+(((-1.0)*r21*x10510*x10518))+((r22*x10517))+((r20*x10505*x10509))+((sj3*x10508)));
evalcond[7]=(((r10*x10510))+(((-1.0)*r10*x10520))+(((-1.0)*x10514))+x10506+(((-1.0)*r12*sj3*x10516))+((r11*x10509))+((r11*x10519)));
evalcond[8]=(((r12*x10517))+(((-1.0)*sj2*x10507))+((r10*x10512))+(((-1.0)*x10511))+(((-1.0)*r11*x10510*x10518))+((r10*x10505*x10509))+((r11*x10513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10521=((1.0)*gconst39);
CheckValue<IkReal> x10522=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r10))+(((-1.0)*r11*x10521)))),-1);
if(!x10522.valid){
continue;
}
CheckValue<IkReal> x10523 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10521))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10522.value)))+(x10523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10524=IKcos(j4);
IkReal x10525=IKsin(j4);
IkReal x10526=(sj1*sj2);
IkReal x10527=((1.0)*cj1);
IkReal x10528=(gconst39*r21);
IkReal x10529=(cj3*gconst39);
IkReal x10530=(cj3*gconst38);
IkReal x10531=(cj2*sj1);
IkReal x10532=(gconst38*sj3);
IkReal x10533=(gconst39*sj3);
IkReal x10534=(cj2*x10527);
IkReal x10535=(gconst38*x10524);
IkReal x10536=((1.0)*x10524);
IkReal x10537=(cj3*x10524);
IkReal x10538=((1.0)*x10525);
IkReal x10539=(x10525*x10532);
IkReal x10540=(x10533*x10538);
evalcond[0]=(((r22*x10525))+((r21*x10535))+(((-1.0)*gconst39*r20*x10536)));
evalcond[1]=((((-1.0)*gconst39*r10*x10536))+((r12*x10525))+((r11*x10535)));
evalcond[2]=((1.0)+((r02*x10525))+((r01*x10535))+(((-1.0)*gconst39*r00*x10536)));
evalcond[3]=(((r02*x10537))+((r01*x10533))+((r00*x10525*x10529))+((r00*x10532))+(((-1.0)*r01*x10530*x10538)));
evalcond[4]=((((-1.0)*r00*x10540))+((r01*x10539))+(((-1.0)*r02*sj3*x10536))+((r00*x10530))+((r01*x10529)));
evalcond[5]=(((cj3*x10528))+((cj1*sj2))+(((-1.0)*r22*sj3*x10536))+((r21*x10539))+x10531+((r20*x10530))+(((-1.0)*r20*x10540)));
evalcond[6]=((((-1.0)*x10534))+((r22*x10537))+((r20*x10525*x10529))+x10526+((sj3*x10528))+(((-1.0)*r21*x10530*x10538))+((r20*x10532)));
evalcond[7]=((((-1.0)*x10534))+(((-1.0)*r10*x10540))+((r10*x10530))+x10526+((r11*x10529))+((r11*x10539))+(((-1.0)*r12*sj3*x10536)));
evalcond[8]=((((-1.0)*r11*x10530*x10538))+((r10*x10532))+(((-1.0)*sj2*x10527))+((r12*x10537))+(((-1.0)*x10531))+((r11*x10533))+((r10*x10525*x10529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10541=IKPowWithIntegerCheck(IKsign((((gconst39*r21))+((gconst38*r20)))),-1);
if(!x10541.valid){
continue;
}
CheckValue<IkReal> x10542 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r10))+((gconst38*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10541.value)))+(x10542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10543=IKcos(j4);
IkReal x10544=IKsin(j4);
IkReal x10545=(sj1*sj2);
IkReal x10546=((1.0)*cj1);
IkReal x10547=(gconst39*r21);
IkReal x10548=(cj3*gconst39);
IkReal x10549=(cj3*gconst38);
IkReal x10550=(cj2*sj1);
IkReal x10551=(gconst38*sj3);
IkReal x10552=(gconst39*sj3);
IkReal x10553=(cj2*x10546);
IkReal x10554=(gconst38*x10543);
IkReal x10555=((1.0)*x10543);
IkReal x10556=(cj3*x10543);
IkReal x10557=((1.0)*x10544);
IkReal x10558=(x10544*x10551);
IkReal x10559=(x10552*x10557);
evalcond[0]=(((r22*x10544))+((r21*x10554))+(((-1.0)*gconst39*r20*x10555)));
evalcond[1]=((((-1.0)*gconst39*r10*x10555))+((r12*x10544))+((r11*x10554)));
evalcond[2]=((1.0)+((r02*x10544))+(((-1.0)*gconst39*r00*x10555))+((r01*x10554)));
evalcond[3]=(((r00*x10544*x10548))+((r02*x10556))+(((-1.0)*r01*x10549*x10557))+((r01*x10552))+((r00*x10551)));
evalcond[4]=(((r00*x10549))+((r01*x10548))+(((-1.0)*r00*x10559))+((r01*x10558))+(((-1.0)*r02*sj3*x10555)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r22*sj3*x10555))+(((-1.0)*r20*x10559))+((r21*x10558))+x10550+((cj3*x10547))+((r20*x10549)));
evalcond[6]=(((r22*x10556))+((sj3*x10547))+(((-1.0)*r21*x10549*x10557))+((r20*x10551))+x10545+((r20*x10544*x10548))+(((-1.0)*x10553)));
evalcond[7]=((((-1.0)*r12*sj3*x10555))+(((-1.0)*r10*x10559))+((r11*x10548))+((r11*x10558))+x10545+((r10*x10549))+(((-1.0)*x10553)));
evalcond[8]=((((-1.0)*r11*x10549*x10557))+((r10*x10544*x10548))+((r10*x10551))+(((-1.0)*x10550))+((r11*x10552))+((r12*x10556))+(((-1.0)*sj2*x10546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10560=((-1.0)*r21);
CheckValue<IkReal> x10563 = IKatan2WithCheck(IkReal(x10560),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10563.valid){
continue;
}
IkReal x10561=((1.0)*(x10563.value));
IkReal x10562=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10561)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10561)));
IkReal gconst38=(x10560*x10562);
IkReal gconst39=((1.0)*r20*x10562);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10564=((-1.0)*r21);
CheckValue<IkReal> x10567 = IKatan2WithCheck(IkReal(x10564),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10567.valid){
continue;
}
IkReal x10565=((1.0)*(x10567.value));
IkReal x10566=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10565)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10565)));
IkReal gconst38=(x10564*x10566);
IkReal gconst39=((1.0)*r20*x10566);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10568=((-1.0)*r21);
CheckValue<IkReal> x10571 = IKatan2WithCheck(IkReal(x10568),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10571.valid){
continue;
}
IkReal x10569=((1.0)*(x10571.value));
IkReal x10570=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10569)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10569)));
IkReal gconst38=(x10568*x10570);
IkReal gconst39=((1.0)*r20*x10570);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10572=((-1.0)*r21);
CheckValue<IkReal> x10575 = IKatan2WithCheck(IkReal(x10572),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10575.valid){
continue;
}
IkReal x10573=((1.0)*(x10575.value));
IkReal x10574=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10573)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10573)));
IkReal gconst38=(x10572*x10574);
IkReal gconst39=((1.0)*r20*x10574);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10576=((-1.0)*r21);
CheckValue<IkReal> x10579 = IKatan2WithCheck(IkReal(x10576),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10579.valid){
continue;
}
IkReal x10577=((1.0)*(x10579.value));
IkReal x10578=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10577)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10577)));
IkReal gconst38=(x10576*x10578);
IkReal gconst39=((1.0)*r20*x10578);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10580=((-1.0)*r21);
CheckValue<IkReal> x10583 = IKatan2WithCheck(IkReal(x10580),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10583.valid){
continue;
}
IkReal x10581=((1.0)*(x10583.value));
IkReal x10582=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10581)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10581)));
IkReal gconst38=(x10580*x10582);
IkReal gconst39=((1.0)*r20*x10582);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10584=(gconst38*r01);
IkReal x10585=(gconst39*r00);
CheckValue<IkReal> x10586=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10584*x10585))+(r02*r02)+(x10585*x10585)+(x10584*x10584))),-1);
if(!x10586.valid){
continue;
}
CheckValue<IkReal> x10587 = IKatan2WithCheck(IkReal(r02),IkReal((x10584+(((-1.0)*x10585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10586.value)))+(x10587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10588=IKcos(j4);
IkReal x10589=IKsin(j4);
IkReal x10590=(gconst39*r10);
IkReal x10591=(gconst39*r20);
IkReal x10592=(gconst39*r00);
IkReal x10593=((1.0)*x10588);
IkReal x10594=((1.0)*x10589);
IkReal x10595=(gconst38*x10588);
IkReal x10596=(gconst38*x10589);
evalcond[0]=(((r21*x10595))+(((-1.0)*x10591*x10593))+((r22*x10589)));
evalcond[1]=(((r12*x10589))+((r11*x10595))+(((-1.0)*x10590*x10593)));
evalcond[2]=((-1.0)+(((-1.0)*x10592*x10593))+((r01*x10595))+((r02*x10589)));
evalcond[3]=((((-1.0)*x10592*x10594))+(((-1.0)*r02*x10593))+((r01*x10596)));
evalcond[4]=(((r21*x10596))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10593))+(((-1.0)*x10591*x10594)));
evalcond[5]=((((-1.0)*r12*x10593))+((r11*x10596))+(((-1.0)*sj1*sj2))+(((-1.0)*x10590*x10594))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10597=((1.0)*gconst39);
CheckValue<IkReal> x10598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10597))+(((-1.0)*gconst38*r20)))),-1);
if(!x10598.valid){
continue;
}
CheckValue<IkReal> x10599 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10597))+((gconst38*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10598.value)))+(x10599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10600=IKcos(j4);
IkReal x10601=IKsin(j4);
IkReal x10602=(gconst39*r10);
IkReal x10603=(gconst39*r20);
IkReal x10604=(gconst39*r00);
IkReal x10605=((1.0)*x10600);
IkReal x10606=((1.0)*x10601);
IkReal x10607=(gconst38*x10600);
IkReal x10608=(gconst38*x10601);
evalcond[0]=(((r21*x10607))+((r22*x10601))+(((-1.0)*x10603*x10605)));
evalcond[1]=(((r11*x10607))+((r12*x10601))+(((-1.0)*x10602*x10605)));
evalcond[2]=((-1.0)+((r01*x10607))+((r02*x10601))+(((-1.0)*x10604*x10605)));
evalcond[3]=(((r01*x10608))+(((-1.0)*x10604*x10606))+(((-1.0)*r02*x10605)));
evalcond[4]=(((cj2*sj1))+((r21*x10608))+((cj1*sj2))+(((-1.0)*r22*x10605))+(((-1.0)*x10603*x10606)));
evalcond[5]=(((r11*x10608))+(((-1.0)*r12*x10605))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x10602*x10606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10609=IKPowWithIntegerCheck(IKsign((((gconst39*r11))+((gconst38*r10)))),-1);
if(!x10609.valid){
continue;
}
CheckValue<IkReal> x10610 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r20))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10609.value)))+(x10610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10611=IKcos(j4);
IkReal x10612=IKsin(j4);
IkReal x10613=(gconst39*r10);
IkReal x10614=(gconst39*r20);
IkReal x10615=(gconst39*r00);
IkReal x10616=((1.0)*x10611);
IkReal x10617=((1.0)*x10612);
IkReal x10618=(gconst38*x10611);
IkReal x10619=(gconst38*x10612);
evalcond[0]=(((r22*x10612))+(((-1.0)*x10614*x10616))+((r21*x10618)));
evalcond[1]=(((r12*x10612))+(((-1.0)*x10613*x10616))+((r11*x10618)));
evalcond[2]=((-1.0)+((r02*x10612))+(((-1.0)*x10615*x10616))+((r01*x10618)));
evalcond[3]=((((-1.0)*x10615*x10617))+(((-1.0)*r02*x10616))+((r01*x10619)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10614*x10617))+(((-1.0)*r22*x10616))+((r21*x10619)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x10616))+((cj1*cj2))+(((-1.0)*x10613*x10617))+((r11*x10619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10620=((-1.0)*r21);
CheckValue<IkReal> x10623 = IKatan2WithCheck(IkReal(x10620),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10623.valid){
continue;
}
IkReal x10621=((1.0)*(x10623.value));
IkReal x10622=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10621)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10621)));
IkReal gconst38=(x10620*x10622);
IkReal gconst39=((1.0)*r20*x10622);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10624=((-1.0)*r21);
CheckValue<IkReal> x10627 = IKatan2WithCheck(IkReal(x10624),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10627.valid){
continue;
}
IkReal x10625=((1.0)*(x10627.value));
IkReal x10626=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10625)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10625)));
IkReal gconst38=(x10624*x10626);
IkReal gconst39=((1.0)*r20*x10626);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10628=((-1.0)*r21);
CheckValue<IkReal> x10631 = IKatan2WithCheck(IkReal(x10628),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10631.valid){
continue;
}
IkReal x10629=((1.0)*(x10631.value));
IkReal x10630=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10629)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10629)));
IkReal gconst38=(x10628*x10630);
IkReal gconst39=((1.0)*r20*x10630);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10632=(gconst38*r01);
IkReal x10633=(gconst39*r00);
CheckValue<IkReal> x10634=IKPowWithIntegerCheck(IKsign(((r02*r02)+(x10632*x10632)+(x10633*x10633)+(((-2.0)*x10632*x10633)))),-1);
if(!x10634.valid){
continue;
}
CheckValue<IkReal> x10635 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10633))+x10632)),IKFAST_ATAN2_MAGTHRESH);
if(!x10635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10634.value)))+(x10635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10636=IKcos(j4);
IkReal x10637=IKsin(j4);
IkReal x10638=(gconst39*r10);
IkReal x10639=(gconst38*x10636);
IkReal x10640=((1.0)*x10636);
IkReal x10641=(gconst39*x10637);
IkReal x10642=((1.0)*gconst38*x10637);
evalcond[0]=(((r22*x10637))+(((-1.0)*gconst39*r20*x10640))+((r21*x10639)));
evalcond[1]=((((-1.0)*x10638*x10640))+((r12*x10637))+((r11*x10639)));
evalcond[2]=((((-1.0)*r01*x10642))+((r00*x10641))+((r02*x10636)));
evalcond[3]=((-1.0)+((r01*x10639))+(((-1.0)*gconst39*r00*x10640))+((r02*x10637)));
evalcond[4]=(((cj2*sj1))+((r20*x10641))+((cj1*sj2))+((r22*x10636))+(((-1.0)*r21*x10642)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*x10642))+((x10637*x10638))+((cj1*cj2))+((r12*x10636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10643=((1.0)*gconst39);
CheckValue<IkReal> x10644=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r20))+(((-1.0)*r21*x10643)))),-1);
if(!x10644.valid){
continue;
}
CheckValue<IkReal> x10645 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10643))+((gconst38*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10644.value)))+(x10645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10646=IKcos(j4);
IkReal x10647=IKsin(j4);
IkReal x10648=(gconst39*r10);
IkReal x10649=(gconst38*x10646);
IkReal x10650=((1.0)*x10646);
IkReal x10651=(gconst39*x10647);
IkReal x10652=((1.0)*gconst38*x10647);
evalcond[0]=(((r21*x10649))+(((-1.0)*gconst39*r20*x10650))+((r22*x10647)));
evalcond[1]=((((-1.0)*x10648*x10650))+((r11*x10649))+((r12*x10647)));
evalcond[2]=(((r00*x10651))+(((-1.0)*r01*x10652))+((r02*x10646)));
evalcond[3]=((-1.0)+((r01*x10649))+(((-1.0)*gconst39*r00*x10650))+((r02*x10647)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10646))+(((-1.0)*r21*x10652))+((r20*x10651)));
evalcond[5]=(((x10647*x10648))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x10646))+(((-1.0)*r11*x10652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10653=IKPowWithIntegerCheck(IKsign((((gconst39*r11))+((gconst38*r10)))),-1);
if(!x10653.valid){
continue;
}
CheckValue<IkReal> x10654 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r20))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10653.value)))+(x10654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10655=IKcos(j4);
IkReal x10656=IKsin(j4);
IkReal x10657=(gconst39*r10);
IkReal x10658=(gconst38*x10655);
IkReal x10659=((1.0)*x10655);
IkReal x10660=(gconst39*x10656);
IkReal x10661=((1.0)*gconst38*x10656);
evalcond[0]=(((r22*x10656))+(((-1.0)*gconst39*r20*x10659))+((r21*x10658)));
evalcond[1]=((((-1.0)*x10657*x10659))+((r11*x10658))+((r12*x10656)));
evalcond[2]=(((r02*x10655))+((r00*x10660))+(((-1.0)*r01*x10661)));
evalcond[3]=((-1.0)+((r02*x10656))+(((-1.0)*gconst39*r00*x10659))+((r01*x10658)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10655))+(((-1.0)*r21*x10661))+((r20*x10660)));
evalcond[5]=(((x10656*x10657))+(((-1.0)*sj1*sj2))+((r12*x10655))+((cj1*cj2))+(((-1.0)*r11*x10661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10662=((-1.0)*r21);
CheckValue<IkReal> x10665 = IKatan2WithCheck(IkReal(x10662),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10665.valid){
continue;
}
IkReal x10663=((1.0)*(x10665.value));
IkReal x10664=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10663)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10663)));
IkReal gconst38=(x10662*x10664);
IkReal gconst39=((1.0)*r20*x10664);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10666=((-1.0)*r21);
CheckValue<IkReal> x10669 = IKatan2WithCheck(IkReal(x10666),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10669.valid){
continue;
}
IkReal x10667=((1.0)*(x10669.value));
IkReal x10668=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10667)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10667)));
IkReal gconst38=(x10666*x10668);
IkReal gconst39=((1.0)*r20*x10668);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10670=((-1.0)*r21);
CheckValue<IkReal> x10673 = IKatan2WithCheck(IkReal(x10670),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10673.valid){
continue;
}
IkReal x10671=((1.0)*(x10673.value));
IkReal x10672=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10671)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10671)));
IkReal gconst38=(x10670*x10672);
IkReal gconst39=((1.0)*r20*x10672);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10674=(gconst38*r01);
IkReal x10675=(gconst39*r00);
CheckValue<IkReal> x10676=IKPowWithIntegerCheck(IKsign(((x10675*x10675)+(x10674*x10674)+(((-2.0)*x10674*x10675))+(r02*r02))),-1);
if(!x10676.valid){
continue;
}
CheckValue<IkReal> x10677 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10675))+x10674)),IKFAST_ATAN2_MAGTHRESH);
if(!x10677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10676.value)))+(x10677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10678=IKcos(j4);
IkReal x10679=IKsin(j4);
IkReal x10680=(gconst39*r10);
IkReal x10681=(gconst38*x10678);
IkReal x10682=((1.0)*x10678);
IkReal x10683=(gconst39*x10679);
IkReal x10684=((1.0)*gconst38*x10679);
evalcond[0]=(((r22*x10679))+((r21*x10681))+(((-1.0)*gconst39*r20*x10682)));
evalcond[1]=(((r11*x10681))+(((-1.0)*x10680*x10682))+((r12*x10679)));
evalcond[2]=((((-1.0)*r01*x10684))+((r02*x10678))+((r00*x10683)));
evalcond[3]=((-1.0)+((r02*x10679))+((r01*x10681))+(((-1.0)*gconst39*r00*x10682)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x10684))+((x10679*x10680))+((r12*x10678)));
evalcond[5]=((((-1.0)*r21*x10684))+((r22*x10678))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x10683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10685=((1.0)*gconst39);
CheckValue<IkReal> x10686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10685))+(((-1.0)*gconst38*r20)))),-1);
if(!x10686.valid){
continue;
}
CheckValue<IkReal> x10687 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10685))+((gconst38*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10686.value)))+(x10687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10688=IKcos(j4);
IkReal x10689=IKsin(j4);
IkReal x10690=(gconst39*r10);
IkReal x10691=(gconst38*x10688);
IkReal x10692=((1.0)*x10688);
IkReal x10693=(gconst39*x10689);
IkReal x10694=((1.0)*gconst38*x10689);
evalcond[0]=(((r21*x10691))+(((-1.0)*gconst39*r20*x10692))+((r22*x10689)));
evalcond[1]=(((r11*x10691))+(((-1.0)*x10690*x10692))+((r12*x10689)));
evalcond[2]=((((-1.0)*r01*x10694))+((r02*x10688))+((r00*x10693)));
evalcond[3]=((-1.0)+(((-1.0)*gconst39*r00*x10692))+((r01*x10691))+((r02*x10689)));
evalcond[4]=(((cj2*sj1))+((x10689*x10690))+(((-1.0)*r11*x10694))+((cj1*sj2))+((r12*x10688)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x10694))+((r22*x10688))+((r20*x10693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10695=IKPowWithIntegerCheck(IKsign((((gconst39*r11))+((gconst38*r10)))),-1);
if(!x10695.valid){
continue;
}
CheckValue<IkReal> x10696 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r20))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10695.value)))+(x10696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10697=IKcos(j4);
IkReal x10698=IKsin(j4);
IkReal x10699=(gconst39*r10);
IkReal x10700=(gconst38*x10697);
IkReal x10701=((1.0)*x10697);
IkReal x10702=(gconst39*x10698);
IkReal x10703=((1.0)*gconst38*x10698);
evalcond[0]=(((r22*x10698))+(((-1.0)*gconst39*r20*x10701))+((r21*x10700)));
evalcond[1]=(((r11*x10700))+(((-1.0)*x10699*x10701))+((r12*x10698)));
evalcond[2]=(((r00*x10702))+((r02*x10697))+(((-1.0)*r01*x10703)));
evalcond[3]=((-1.0)+((r01*x10700))+((r02*x10698))+(((-1.0)*gconst39*r00*x10701)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10698*x10699))+(((-1.0)*r11*x10703))+((r12*x10697)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10697))+((r20*x10702))+(((-1.0)*r21*x10703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10704=((-1.0)*r21);
CheckValue<IkReal> x10707 = IKatan2WithCheck(IkReal(x10704),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10707.valid){
continue;
}
IkReal x10705=((1.0)*(x10707.value));
IkReal x10706=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10705)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10705)));
IkReal gconst38=(x10704*x10706);
IkReal gconst39=((1.0)*r20*x10706);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10708=((-1.0)*r21);
CheckValue<IkReal> x10711 = IKatan2WithCheck(IkReal(x10708),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10711.valid){
continue;
}
IkReal x10709=((1.0)*(x10711.value));
IkReal x10710=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10709)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10709)));
IkReal gconst38=(x10708*x10710);
IkReal gconst39=((1.0)*r20*x10710);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10712=((-1.0)*r21);
CheckValue<IkReal> x10715 = IKatan2WithCheck(IkReal(x10712),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10715.valid){
continue;
}
IkReal x10713=((1.0)*(x10715.value));
IkReal x10714=x9574;
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10713)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10713)));
IkReal gconst38=(x10712*x10714);
IkReal gconst39=((1.0)*r20*x10714);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10716=(gconst38*r01);
IkReal x10717=(gconst39*r00);
CheckValue<IkReal> x10718 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10717))+x10716)),IKFAST_ATAN2_MAGTHRESH);
if(!x10718.valid){
continue;
}
CheckValue<IkReal> x10719=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10716*x10717))+(x10717*x10717)+(x10716*x10716)+(r02*r02))),-1);
if(!x10719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10718.value)+(((1.5707963267949)*(x10719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10720=IKcos(j4);
IkReal x10721=IKsin(j4);
IkReal x10722=(gconst39*r10);
IkReal x10723=(gconst39*r20);
IkReal x10724=(gconst39*r00);
IkReal x10725=((1.0)*x10720);
IkReal x10726=((1.0)*x10721);
IkReal x10727=(gconst38*x10720);
IkReal x10728=(gconst38*x10721);
evalcond[0]=(((r22*x10721))+((r21*x10727))+(((-1.0)*x10723*x10725)));
evalcond[1]=((((-1.0)*x10722*x10725))+((r12*x10721))+((r11*x10727)));
evalcond[2]=((-1.0)+((r02*x10721))+((r01*x10727))+(((-1.0)*x10724*x10725)));
evalcond[3]=((((-1.0)*r02*x10725))+((r01*x10728))+(((-1.0)*x10724*x10726)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10722*x10726))+(((-1.0)*r12*x10725))+((r11*x10728)));
evalcond[5]=((((-1.0)*r22*x10725))+((r21*x10728))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10723*x10726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10729=((1.0)*gconst39);
CheckValue<IkReal> x10730=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10729))+(((-1.0)*gconst38*r20)))),-1);
if(!x10730.valid){
continue;
}
CheckValue<IkReal> x10731 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10729))+((gconst38*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10730.value)))+(x10731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10732=IKcos(j4);
IkReal x10733=IKsin(j4);
IkReal x10734=(gconst39*r10);
IkReal x10735=(gconst39*r20);
IkReal x10736=(gconst39*r00);
IkReal x10737=((1.0)*x10732);
IkReal x10738=((1.0)*x10733);
IkReal x10739=(gconst38*x10732);
IkReal x10740=(gconst38*x10733);
evalcond[0]=((((-1.0)*x10735*x10737))+((r21*x10739))+((r22*x10733)));
evalcond[1]=((((-1.0)*x10734*x10737))+((r11*x10739))+((r12*x10733)));
evalcond[2]=((-1.0)+((r02*x10733))+(((-1.0)*x10736*x10737))+((r01*x10739)));
evalcond[3]=((((-1.0)*r02*x10737))+(((-1.0)*x10736*x10738))+((r01*x10740)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10734*x10738))+((cj1*sj2))+(((-1.0)*r12*x10737))+((r11*x10740)));
evalcond[5]=((((-1.0)*r22*x10737))+(((-1.0)*x10735*x10738))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10741=IKPowWithIntegerCheck(IKsign((((gconst39*r11))+((gconst38*r10)))),-1);
if(!x10741.valid){
continue;
}
CheckValue<IkReal> x10742 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r20))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10741.value)))+(x10742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10743=IKcos(j4);
IkReal x10744=IKsin(j4);
IkReal x10745=(gconst39*r10);
IkReal x10746=(gconst39*r20);
IkReal x10747=(gconst39*r00);
IkReal x10748=((1.0)*x10743);
IkReal x10749=((1.0)*x10744);
IkReal x10750=(gconst38*x10743);
IkReal x10751=(gconst38*x10744);
evalcond[0]=((((-1.0)*x10746*x10748))+((r22*x10744))+((r21*x10750)));
evalcond[1]=((((-1.0)*x10745*x10748))+((r11*x10750))+((r12*x10744)));
evalcond[2]=((-1.0)+(((-1.0)*x10747*x10748))+((r02*x10744))+((r01*x10750)));
evalcond[3]=((((-1.0)*x10747*x10749))+(((-1.0)*r02*x10748))+((r01*x10751)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10745*x10749))+(((-1.0)*r12*x10748))+((r11*x10751)));
evalcond[5]=((((-1.0)*x10746*x10749))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10748))+((r21*x10751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10752=((-1.0)*r21);
IkReal x10753=((-1.0)*r20);
CheckValue<IkReal> x10755 = IKatan2WithCheck(IkReal(x10752),IkReal(x10753),IKFAST_ATAN2_MAGTHRESH);
if(!x10755.valid){
continue;
}
IkReal x10754=((1.0)*(x10755.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10754)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10753);
rxp0_2=(py*r00);
rxp1_0=(py*x10752);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10754)));
IkReal gconst38=x10752;
IkReal gconst39=((1.0)*r20);
IkReal x10756=((1.0)*r01*r21);
IkReal x10757=((1.0)*r00*r20);
j4eval[0]=(((cj3*x10756))+((cj3*x10757)));
j4eval[1]=((((-1.0)*x10757))+(((-1.0)*x10756)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10758=((-1.0)*r21);
IkReal x10759=((-1.0)*r20);
CheckValue<IkReal> x10761 = IKatan2WithCheck(IkReal(x10758),IkReal(x10759),IKFAST_ATAN2_MAGTHRESH);
if(!x10761.valid){
continue;
}
IkReal x10760=((1.0)*(x10761.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10760)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10759);
rxp0_2=(py*r00);
rxp1_0=(py*x10758);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10760)));
IkReal gconst38=x10758;
IkReal gconst39=((1.0)*r20);
IkReal x10762=((1.0)*r01*r21);
IkReal x10763=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*sj3*x10762))+(((-1.0)*sj3*x10763)));
j4eval[1]=((((-1.0)*x10762))+(((-1.0)*x10763)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10764=((-1.0)*r21);
IkReal x10765=((-1.0)*r20);
CheckValue<IkReal> x10767 = IKatan2WithCheck(IkReal(x10764),IkReal(x10765),IKFAST_ATAN2_MAGTHRESH);
if(!x10767.valid){
continue;
}
IkReal x10766=((1.0)*(x10767.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10766)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10765);
rxp0_2=(py*r00);
rxp1_0=(py*x10764);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10766)));
IkReal gconst38=x10764;
IkReal gconst39=((1.0)*r20);
IkReal x10768=((1.0)*cj3);
j4eval[0]=(((r01*r21*x10768))+((r00*r20*x10768)));
j4eval[1]=cj3;
j4eval[2]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10769=((1.0)*gconst38);
CheckValue<IkReal> x10770=IKPowWithIntegerCheck(((((-1.0)*cj3*r01*x10769))+((cj3*gconst39*r00))),-1);
if(!x10770.valid){
continue;
}
CheckValue<IkReal> x10771=IKPowWithIntegerCheck(cj3,-1);
if(!x10771.valid){
continue;
}
CheckValue<IkReal> x10772=IKPowWithIntegerCheck(r12,-1);
if(!x10772.valid){
continue;
}
if( IKabs(((x10770.value)*(((((-1.0)*gconst39*r01*sj3))+(((-1.0)*r00*sj3*x10769)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10771.value)*(x10772.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10770.value)*(((((-1.0)*gconst39*r01*sj3))+(((-1.0)*r00*sj3*x10769))))))+IKsqr(((x10771.value)*(x10772.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10770.value)*(((((-1.0)*gconst39*r01*sj3))+(((-1.0)*r00*sj3*x10769))))), ((x10771.value)*(x10772.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10773=IKcos(j4);
IkReal x10774=IKsin(j4);
IkReal x10775=(cj2*sj1);
IkReal x10776=(cj1*sj2);
IkReal x10777=(gconst38*r21);
IkReal x10778=(gconst39*r21);
IkReal x10779=(sj1*sj2);
IkReal x10780=(cj3*gconst39);
IkReal x10781=(gconst38*sj3);
IkReal x10782=(cj3*gconst38);
IkReal x10783=(cj1*cj2);
IkReal x10784=(r01*x10774);
IkReal x10785=(r12*x10773);
IkReal x10786=(x10775+x10776);
IkReal x10787=((1.0)*gconst39*x10773);
IkReal x10788=((1.0)*gconst39*sj3*x10774);
evalcond[0]=(r12*x10774);
evalcond[1]=(x10786+((cj3*x10785)));
evalcond[2]=(((x10773*x10777))+(((-1.0)*r20*x10787)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x10787))+((gconst38*r01*x10773)));
evalcond[4]=((((-1.0)*sj3*x10785))+(((-1.0)*x10779))+x10783);
evalcond[5]=(((r00*x10774*x10780))+((gconst39*r01*sj3))+(((-1.0)*x10782*x10784))+((r00*x10781)));
evalcond[6]=((((-1.0)*r00*x10788))+((r01*x10780))+((r00*x10782))+((x10781*x10784)));
evalcond[7]=(((cj3*x10778))+((sj3*x10774*x10777))+(((-1.0)*r20*x10788))+((r20*x10782))+x10786);
evalcond[8]=(((r20*x10781))+((sj3*x10778))+(((-1.0)*x10783))+((r20*x10774*x10780))+x10779+(((-1.0)*cj3*x10774*x10777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10789=((1.0)*r00);
IkReal x10790=(gconst38*r01);
CheckValue<IkReal> x10791=IKPowWithIntegerCheck((((sj3*x10790))+(((-1.0)*gconst39*sj3*x10789))),-1);
if(!x10791.valid){
continue;
}
CheckValue<IkReal> x10792=IKPowWithIntegerCheck(((((-1.0)*gconst39*x10789))+x10790),-1);
if(!x10792.valid){
continue;
}
if( IKabs(((x10791.value)*(((((-1.0)*cj3*gconst38*x10789))+(((-1.0)*cj3*gconst39*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x10792.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10791.value)*(((((-1.0)*cj3*gconst38*x10789))+(((-1.0)*cj3*gconst39*r01))))))+IKsqr(x10792.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10791.value)*(((((-1.0)*cj3*gconst38*x10789))+(((-1.0)*cj3*gconst39*r01))))), x10792.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10793=IKcos(j4);
IkReal x10794=IKsin(j4);
IkReal x10795=(cj2*sj1);
IkReal x10796=(cj1*sj2);
IkReal x10797=(gconst38*r21);
IkReal x10798=(gconst39*r21);
IkReal x10799=(sj1*sj2);
IkReal x10800=(cj3*gconst39);
IkReal x10801=(gconst38*sj3);
IkReal x10802=(cj3*gconst38);
IkReal x10803=(cj1*cj2);
IkReal x10804=(r01*x10794);
IkReal x10805=(r12*x10793);
IkReal x10806=(x10796+x10795);
IkReal x10807=((1.0)*gconst39*x10793);
IkReal x10808=((1.0)*gconst39*sj3*x10794);
evalcond[0]=(r12*x10794);
evalcond[1]=(((cj3*x10805))+x10806);
evalcond[2]=((((-1.0)*r20*x10807))+((x10793*x10797)));
evalcond[3]=((-1.0)+((gconst38*r01*x10793))+(((-1.0)*r00*x10807)));
evalcond[4]=((((-1.0)*sj3*x10805))+(((-1.0)*x10799))+x10803);
evalcond[5]=(((r00*x10794*x10800))+((r00*x10801))+((gconst39*r01*sj3))+(((-1.0)*x10802*x10804)));
evalcond[6]=(((r01*x10800))+((x10801*x10804))+((r00*x10802))+(((-1.0)*r00*x10808)));
evalcond[7]=(((r20*x10802))+((sj3*x10794*x10797))+(((-1.0)*r20*x10808))+((cj3*x10798))+x10806);
evalcond[8]=(((r20*x10801))+((r20*x10794*x10800))+(((-1.0)*x10803))+(((-1.0)*cj3*x10794*x10797))+((sj3*x10798))+x10799);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10809=(gconst39*r00);
IkReal x10810=(gconst38*r01);
IkReal x10811=((1.0)*sj3);
CheckValue<IkReal> x10812=IKPowWithIntegerCheck((((cj3*x10809))+(((-1.0)*cj3*x10810))),-1);
if(!x10812.valid){
continue;
}
CheckValue<IkReal> x10813=IKPowWithIntegerCheck(((((-1.0)*x10809))+x10810),-1);
if(!x10813.valid){
continue;
}
if( IKabs(((x10812.value)*(((((-1.0)*gconst39*r01*x10811))+(((-1.0)*gconst38*r00*x10811)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x10813.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10812.value)*(((((-1.0)*gconst39*r01*x10811))+(((-1.0)*gconst38*r00*x10811))))))+IKsqr(x10813.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10812.value)*(((((-1.0)*gconst39*r01*x10811))+(((-1.0)*gconst38*r00*x10811))))), x10813.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10814=IKcos(j4);
IkReal x10815=IKsin(j4);
IkReal x10816=(cj2*sj1);
IkReal x10817=(cj1*sj2);
IkReal x10818=(gconst38*r21);
IkReal x10819=(gconst39*r21);
IkReal x10820=(sj1*sj2);
IkReal x10821=(cj3*gconst39);
IkReal x10822=(gconst38*sj3);
IkReal x10823=(cj3*gconst38);
IkReal x10824=(cj1*cj2);
IkReal x10825=(r01*x10815);
IkReal x10826=(r12*x10814);
IkReal x10827=(x10817+x10816);
IkReal x10828=((1.0)*gconst39*x10814);
IkReal x10829=((1.0)*gconst39*sj3*x10815);
evalcond[0]=(r12*x10815);
evalcond[1]=(((cj3*x10826))+x10827);
evalcond[2]=(((x10814*x10818))+(((-1.0)*r20*x10828)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x10828))+((gconst38*r01*x10814)));
evalcond[4]=((((-1.0)*x10820))+(((-1.0)*sj3*x10826))+x10824);
evalcond[5]=(((r00*x10815*x10821))+((gconst39*r01*sj3))+((r00*x10822))+(((-1.0)*x10823*x10825)));
evalcond[6]=((((-1.0)*r00*x10829))+((x10822*x10825))+((r00*x10823))+((r01*x10821)));
evalcond[7]=(((sj3*x10815*x10818))+((r20*x10823))+(((-1.0)*r20*x10829))+((cj3*x10819))+x10827);
evalcond[8]=((((-1.0)*x10824))+((r20*x10822))+(((-1.0)*cj3*x10815*x10818))+((sj3*x10819))+((r20*x10815*x10821))+x10820);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10830=gconst39*gconst39;
IkReal x10831=gconst38*gconst38;
IkReal x10832=((1.0)*r00);
IkReal x10833=(gconst38*sj3);
IkReal x10834=(gconst39*r20);
IkReal x10835=(cj3*r01);
IkReal x10836=((1.0)*r01*sj3);
IkReal x10837=(r20*x10830);
IkReal x10838=(gconst38*gconst39*r21);
IkReal x10839=(r21*x10831);
CheckValue<IkReal> x10840 = IKatan2WithCheck(IkReal(((((-1.0)*x10836*x10837))+(((-1.0)*x10832*x10833*x10834))+((gconst39*r01*r21*x10833))+((r00*sj3*x10839)))),IkReal(((((-1.0)*gconst39*r22*x10836))+(((-1.0)*r22*x10832*x10833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10840.valid){
continue;
}
CheckValue<IkReal> x10841=IKPowWithIntegerCheck(IKsign((((cj3*r00*x10837))+((x10835*x10839))+(((-1.0)*gconst38*x10834*x10835))+((cj3*r02*r22))+(((-1.0)*cj3*x10832*x10838)))),-1);
if(!x10841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10840.value)+(((1.5707963267949)*(x10841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10842=IKcos(j4);
IkReal x10843=IKsin(j4);
IkReal x10844=(cj2*sj1);
IkReal x10845=(cj1*sj2);
IkReal x10846=(cj1*cj2);
IkReal x10847=(gconst39*r21);
IkReal x10848=(sj1*sj2);
IkReal x10849=(cj3*gconst39);
IkReal x10850=(cj3*gconst38);
IkReal x10851=(gconst38*sj3);
IkReal x10852=(gconst39*sj3);
IkReal x10853=(gconst38*x10842);
IkReal x10854=((1.0)*x10842);
IkReal x10855=(cj3*x10842);
IkReal x10856=((1.0)*x10843);
IkReal x10857=(x10844+x10845);
IkReal x10858=(x10843*x10851);
IkReal x10859=(x10852*x10856);
evalcond[0]=(((r21*x10853))+((r22*x10843))+(((-1.0)*gconst39*r20*x10854)));
evalcond[1]=(((r11*x10853))+(((-1.0)*gconst39*r10*x10854))+((r12*x10843)));
evalcond[2]=((-1.0)+(((-1.0)*gconst39*r00*x10854))+((r02*x10843))+((r01*x10853)));
evalcond[3]=(((r01*x10852))+((r00*x10843*x10849))+((r00*x10851))+((r02*x10855))+(((-1.0)*r01*x10850*x10856)));
evalcond[4]=(((r01*x10849))+((r01*x10858))+(((-1.0)*r00*x10859))+((r00*x10850))+(((-1.0)*r02*sj3*x10854)));
evalcond[5]=(((r11*x10852))+((r12*x10855))+(((-1.0)*r11*x10850*x10856))+((r10*x10851))+((r10*x10843*x10849))+x10857);
evalcond[6]=((((-1.0)*r22*sj3*x10854))+((r21*x10858))+((cj3*x10847))+((r20*x10850))+(((-1.0)*r20*x10859))+x10857);
evalcond[7]=(((r20*x10843*x10849))+((r20*x10851))+(((-1.0)*x10846))+((r22*x10855))+((sj3*x10847))+(((-1.0)*r21*x10850*x10856))+x10848);
evalcond[8]=(((r11*x10858))+((r10*x10850))+(((-1.0)*r10*x10859))+(((-1.0)*x10848))+(((-1.0)*r12*sj3*x10854))+((r11*x10849))+x10846);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10860=((1.0)*gconst39);
CheckValue<IkReal> x10861 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10860))+((gconst38*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10861.valid){
continue;
}
CheckValue<IkReal> x10862=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10860))+(((-1.0)*gconst38*r20)))),-1);
if(!x10862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10861.value)+(((1.5707963267949)*(x10862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10863=IKcos(j4);
IkReal x10864=IKsin(j4);
IkReal x10865=(cj2*sj1);
IkReal x10866=(cj1*sj2);
IkReal x10867=(cj1*cj2);
IkReal x10868=(gconst39*r21);
IkReal x10869=(sj1*sj2);
IkReal x10870=(cj3*gconst39);
IkReal x10871=(cj3*gconst38);
IkReal x10872=(gconst38*sj3);
IkReal x10873=(gconst39*sj3);
IkReal x10874=(gconst38*x10863);
IkReal x10875=((1.0)*x10863);
IkReal x10876=(cj3*x10863);
IkReal x10877=((1.0)*x10864);
IkReal x10878=(x10865+x10866);
IkReal x10879=(x10864*x10872);
IkReal x10880=(x10873*x10877);
evalcond[0]=(((r21*x10874))+(((-1.0)*gconst39*r20*x10875))+((r22*x10864)));
evalcond[1]=(((r12*x10864))+((r11*x10874))+(((-1.0)*gconst39*r10*x10875)));
evalcond[2]=((-1.0)+(((-1.0)*gconst39*r00*x10875))+((r01*x10874))+((r02*x10864)));
evalcond[3]=((((-1.0)*r01*x10871*x10877))+((r02*x10876))+((r00*x10864*x10870))+((r01*x10873))+((r00*x10872)));
evalcond[4]=((((-1.0)*r00*x10880))+((r01*x10879))+((r01*x10870))+((r00*x10871))+(((-1.0)*r02*sj3*x10875)));
evalcond[5]=(((r12*x10876))+((r11*x10873))+((r10*x10872))+((r10*x10864*x10870))+(((-1.0)*r11*x10871*x10877))+x10878);
evalcond[6]=(((r21*x10879))+((r20*x10871))+((cj3*x10868))+(((-1.0)*r20*x10880))+(((-1.0)*r22*sj3*x10875))+x10878);
evalcond[7]=((((-1.0)*r21*x10871*x10877))+((r20*x10864*x10870))+((sj3*x10868))+((r20*x10872))+(((-1.0)*x10867))+((r22*x10876))+x10869);
evalcond[8]=(((r11*x10879))+((r11*x10870))+((r10*x10871))+(((-1.0)*r12*sj3*x10875))+(((-1.0)*r10*x10880))+(((-1.0)*x10869))+x10867);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10881=IKPowWithIntegerCheck(IKsign((((gconst39*r11))+((gconst38*r10)))),-1);
if(!x10881.valid){
continue;
}
CheckValue<IkReal> x10882 = IKatan2WithCheck(IkReal(((((-1.0)*gconst39*r20))+((gconst38*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10881.value)))+(x10882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10883=IKcos(j4);
IkReal x10884=IKsin(j4);
IkReal x10885=(cj2*sj1);
IkReal x10886=(cj1*sj2);
IkReal x10887=(cj1*cj2);
IkReal x10888=(gconst39*r21);
IkReal x10889=(sj1*sj2);
IkReal x10890=(cj3*gconst39);
IkReal x10891=(cj3*gconst38);
IkReal x10892=(gconst38*sj3);
IkReal x10893=(gconst39*sj3);
IkReal x10894=(gconst38*x10883);
IkReal x10895=((1.0)*x10883);
IkReal x10896=(cj3*x10883);
IkReal x10897=((1.0)*x10884);
IkReal x10898=(x10886+x10885);
IkReal x10899=(x10884*x10892);
IkReal x10900=(x10893*x10897);
evalcond[0]=((((-1.0)*gconst39*r20*x10895))+((r22*x10884))+((r21*x10894)));
evalcond[1]=(((r12*x10884))+((r11*x10894))+(((-1.0)*gconst39*r10*x10895)));
evalcond[2]=((-1.0)+((r01*x10894))+((r02*x10884))+(((-1.0)*gconst39*r00*x10895)));
evalcond[3]=((((-1.0)*r01*x10891*x10897))+((r01*x10893))+((r00*x10884*x10890))+((r02*x10896))+((r00*x10892)));
evalcond[4]=((((-1.0)*r02*sj3*x10895))+((r01*x10890))+((r01*x10899))+(((-1.0)*r00*x10900))+((r00*x10891)));
evalcond[5]=(((r12*x10896))+((r10*x10892))+((r11*x10893))+((r10*x10884*x10890))+(((-1.0)*r11*x10891*x10897))+x10898);
evalcond[6]=(((r20*x10891))+(((-1.0)*r20*x10900))+((r21*x10899))+((cj3*x10888))+(((-1.0)*r22*sj3*x10895))+x10898);
evalcond[7]=(((r20*x10892))+((r20*x10884*x10890))+((sj3*x10888))+(((-1.0)*x10887))+((r22*x10896))+(((-1.0)*r21*x10891*x10897))+x10889);
evalcond[8]=((((-1.0)*x10889))+(((-1.0)*r10*x10900))+((r10*x10891))+((r11*x10890))+((r11*x10899))+(((-1.0)*r12*sj3*x10895))+x10887);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10901=((-1.0)*r21);
IkReal x10902=((-1.0)*px);
CheckValue<IkReal> x10904 = IKatan2WithCheck(IkReal(x10901),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10904.valid){
continue;
}
IkReal x10903=((1.0)*(x10904.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10903)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10902);
rxp1_1=(px*r21);
rxp1_2=(r11*x10902);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10903)));
IkReal gconst38=x10901;
IkReal gconst39=((1.0)*r20);
j4eval[0]=r02;
j4eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10905=((-1.0)*r21);
IkReal x10906=((-1.0)*px);
CheckValue<IkReal> x10908 = IKatan2WithCheck(IkReal(x10905),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10908.valid){
continue;
}
IkReal x10907=((1.0)*(x10908.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10907)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10906);
rxp1_1=(px*r21);
rxp1_2=(r11*x10906);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10907)));
IkReal gconst38=x10905;
IkReal gconst39=((1.0)*r20);
IkReal x10909=((1.0)*sj3);
j4eval[0]=(((x10909*(r10*r10)))+(((-1.0)*x10909))+(((-1.0)*x10909*(r21*r21))));
j4eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10910=((-1.0)*r21);
IkReal x10911=((-1.0)*px);
CheckValue<IkReal> x10913 = IKatan2WithCheck(IkReal(x10910),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10913.valid){
continue;
}
IkReal x10912=((1.0)*(x10913.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10912)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10911);
rxp1_1=(px*r21);
rxp1_2=(r11*x10911);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10912)));
IkReal gconst38=x10910;
IkReal gconst39=((1.0)*r20);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10914=((-1.0)*r21);
IkReal x10915=((-1.0)*px);
CheckValue<IkReal> x10917 = IKatan2WithCheck(IkReal(x10914),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10917.valid){
continue;
}
IkReal x10916=((1.0)*(x10917.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10916)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10915);
rxp1_1=(px*r21);
rxp1_2=(r11*x10915);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10916)));
IkReal gconst38=x10914;
IkReal gconst39=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10918=((-1.0)*r21);
IkReal x10919=((-1.0)*px);
CheckValue<IkReal> x10921 = IKatan2WithCheck(IkReal(x10918),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10921.valid){
continue;
}
IkReal x10920=((1.0)*(x10921.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10920)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10919);
rxp1_1=(px*r21);
rxp1_2=(r11*x10919);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10920)));
IkReal gconst38=x10918;
IkReal gconst39=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10922=((-1.0)*r21);
IkReal x10923=((-1.0)*px);
CheckValue<IkReal> x10925 = IKatan2WithCheck(IkReal(x10922),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10925.valid){
continue;
}
IkReal x10924=((1.0)*(x10925.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10924)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10923);
rxp1_1=(px*r21);
rxp1_2=(r11*x10923);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10924)));
IkReal gconst38=x10922;
IkReal gconst39=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10928=IKPowWithIntegerCheck(((((-1.0)*gconst38*r11))+((gconst39*r10))),-1);
if(!x10928.valid){
continue;
}
IkReal x10926=x10928.value;
IkReal x10927=(cj0*x10926);
sj4array[0]=(((cj2*sj1*x10927))+((cj1*sj2*x10927)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10929=IKcos(j4);
IkReal x10930=IKsin(j4);
IkReal x10931=(gconst38*x10929);
IkReal x10932=((1.0)*gconst39*x10929);
evalcond[0]=(r02*x10929);
evalcond[1]=(cj0+((r02*x10930)));
evalcond[2]=(((r21*x10931))+(((-1.0)*r20*x10932)));
evalcond[3]=((((-1.0)*r10*x10932))+((r11*x10931)));
evalcond[4]=((((-1.0)*gconst38*r21*x10930))+((gconst39*r20*x10930))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10934=IKPowWithIntegerCheck((((gconst39*r20))+(((-1.0)*gconst38*r21))),-1);
if(!x10934.valid){
continue;
}
IkReal x10933=x10934.value;
sj4array[0]=((((-1.0)*sj1*sj2*x10933))+((cj1*cj2*x10933)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10935=IKcos(j4);
IkReal x10936=IKsin(j4);
IkReal x10937=(gconst39*r10);
IkReal x10938=((1.0)*cj0);
IkReal x10939=((1.0)*x10935);
IkReal x10940=(gconst38*x10935);
evalcond[0]=(r02*x10935);
evalcond[1]=(cj0+((r02*x10936)));
evalcond[2]=(((r21*x10940))+(((-1.0)*gconst39*r20*x10939)));
evalcond[3]=(((r11*x10940))+(((-1.0)*x10937*x10939)));
evalcond[4]=((((-1.0)*cj1*sj2*x10938))+(((-1.0)*cj2*sj1*x10938))+(((-1.0)*gconst38*r11*x10936))+((x10936*x10937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10941=IKPowWithIntegerCheck(r02,-1);
if(!x10941.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x10941.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10942=IKcos(j4);
IkReal x10943=IKsin(j4);
IkReal x10944=(gconst39*r10);
IkReal x10945=((1.0)*cj0);
IkReal x10946=(gconst39*r20);
IkReal x10947=((1.0)*x10942);
IkReal x10948=(gconst38*x10942);
IkReal x10949=((1.0)*gconst38*x10943);
evalcond[0]=(r02*x10942);
evalcond[1]=(((r21*x10948))+(((-1.0)*x10946*x10947)));
evalcond[2]=(((r11*x10948))+(((-1.0)*x10944*x10947)));
evalcond[3]=(((x10943*x10946))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x10949)));
evalcond[4]=((((-1.0)*cj2*sj1*x10945))+((x10943*x10944))+(((-1.0)*r11*x10949))+(((-1.0)*cj1*sj2*x10945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10950=((-1.0)*r21);
IkReal x10951=((-1.0)*px);
CheckValue<IkReal> x10953 = IKatan2WithCheck(IkReal(x10950),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10953.valid){
continue;
}
IkReal x10952=((1.0)*(x10953.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10952)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10951);
rxp1_1=(px*r21);
rxp1_2=(r11*x10951);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10952)));
IkReal gconst38=x10950;
IkReal gconst39=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10954=((-1.0)*r21);
IkReal x10955=((-1.0)*px);
CheckValue<IkReal> x10957 = IKatan2WithCheck(IkReal(x10954),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10957.valid){
continue;
}
IkReal x10956=((1.0)*(x10957.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10956)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10955);
rxp1_1=(px*r21);
rxp1_2=(r11*x10955);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10956)));
IkReal gconst38=x10954;
IkReal gconst39=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10958=((-1.0)*r21);
IkReal x10959=((-1.0)*px);
CheckValue<IkReal> x10961 = IKatan2WithCheck(IkReal(x10958),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10961.valid){
continue;
}
IkReal x10960=((1.0)*(x10961.value));
sj5=gconst38;
cj5=gconst39;
j5=((3.14159265)+(((-1.0)*x10960)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10959);
rxp1_1=(px*r21);
rxp1_2=(r11*x10959);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst37=((3.14159265358979)+(((-1.0)*x10960)));
IkReal gconst38=x10958;
IkReal gconst39=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10964=IKPowWithIntegerCheck(((((-1.0)*gconst39*r10))+((gconst38*r11))),-1);
if(!x10964.valid){
continue;
}
IkReal x10962=x10964.value;
IkReal x10963=(cj0*x10962);
sj4array[0]=(((cj1*sj2*x10963))+((cj2*sj1*x10963)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10965=IKcos(j4);
IkReal x10966=IKsin(j4);
IkReal x10967=((1.0)*gconst39);
IkReal x10968=(gconst38*x10965);
evalcond[0]=((-1.0)*r02*x10965);
evalcond[1]=(((r02*x10966))+cj0);
evalcond[2]=((((-1.0)*r20*x10965*x10967))+((r21*x10968)));
evalcond[3]=(((r11*x10968))+(((-1.0)*r10*x10965*x10967)));
evalcond[4]=(((gconst38*r21*x10966))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x10966*x10967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10970=IKPowWithIntegerCheck(((((-1.0)*gconst39*r20))+((gconst38*r21))),-1);
if(!x10970.valid){
continue;
}
IkReal x10969=x10970.value;
sj4array[0]=(((cj1*cj2*x10969))+(((-1.0)*sj1*sj2*x10969)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10971=IKcos(j4);
IkReal x10972=IKsin(j4);
IkReal x10973=((1.0)*cj0);
IkReal x10974=((1.0)*gconst39*r10);
IkReal x10975=(gconst38*x10971);
evalcond[0]=((-1.0)*r02*x10971);
evalcond[1]=(((r02*x10972))+cj0);
evalcond[2]=((((-1.0)*gconst39*r20*x10971))+((r21*x10975)));
evalcond[3]=((((-1.0)*x10971*x10974))+((r11*x10975)));
evalcond[4]=((((-1.0)*cj1*sj2*x10973))+(((-1.0)*x10972*x10974))+(((-1.0)*cj2*sj1*x10973))+((gconst38*r11*x10972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10976=IKPowWithIntegerCheck(r02,-1);
if(!x10976.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x10976.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10977=IKcos(j4);
IkReal x10978=IKsin(j4);
IkReal x10979=((1.0)*cj1);
IkReal x10980=((1.0)*gconst39*r10);
IkReal x10981=(gconst38*x10977);
IkReal x10982=(gconst38*x10978);
IkReal x10983=((1.0)*gconst39*r20);
evalcond[0]=((-1.0)*r02*x10977);
evalcond[1]=(((r21*x10981))+(((-1.0)*x10977*x10983)));
evalcond[2]=(((r11*x10981))+(((-1.0)*x10977*x10980)));
evalcond[3]=((((-1.0)*cj2*x10979))+((r21*x10982))+((sj1*sj2))+(((-1.0)*x10978*x10983)));
evalcond[4]=(((r11*x10982))+(((-1.0)*cj0*cj2*sj1))+(((-1.0)*cj0*sj2*x10979))+(((-1.0)*x10978*x10980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10985=IKPowWithIntegerCheck(r02,-1);
if(!x10985.valid){
continue;
}
IkReal x10984=x10985.value;
CheckValue<IkReal> x10986=IKPowWithIntegerCheck(sj3,-1);
if(!x10986.valid){
continue;
}
if( IKabs(((-1.0)*cj0*x10984)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10984*(x10986.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*x10984))+IKsqr((x10984*(x10986.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*x10984), (x10984*(x10986.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10987=IKcos(j4);
IkReal x10988=IKsin(j4);
IkReal x10989=(gconst39*sj3);
IkReal x10990=(cj2*sj0);
IkReal x10991=(sj1*sj2);
IkReal x10992=(cj3*gconst39);
IkReal x10993=(cj1*sj2);
IkReal x10994=(cj3*gconst38);
IkReal x10995=(gconst38*sj3);
IkReal x10996=(cj2*sj1);
IkReal x10997=((1.0)*cj0);
IkReal x10998=(cj1*cj2);
IkReal x10999=(r20*x10988);
IkReal x11000=(gconst38*x10987);
IkReal x11001=((1.0)*x10987);
IkReal x11002=(r11*x10988);
IkReal x11003=(r21*x10988);
IkReal x11004=(r10*x10988);
evalcond[0]=(cj0+((r02*x10988)));
evalcond[1]=(((r21*x11000))+(((-1.0)*gconst39*r20*x11001)));
evalcond[2]=(sj0+(((-1.0)*gconst39*r10*x11001))+((r11*x11000)));
evalcond[3]=(((cj3*r02*x10987))+((sj0*x10993))+((sj1*x10990)));
evalcond[4]=(((cj1*x10990))+(((-1.0)*r02*sj3*x11001))+(((-1.0)*sj0*x10991)));
evalcond[5]=((((-1.0)*x10989*x10999))+((r21*x10992))+((r20*x10994))+((x10995*x11003))+x10996+x10993);
evalcond[6]=(((r21*x10989))+((x10992*x10999))+(((-1.0)*x10998))+((r20*x10995))+(((-1.0)*x10994*x11003))+x10991);
evalcond[7]=((((-1.0)*x10997*x10998))+((r11*x10992))+(((-1.0)*x10989*x11004))+((cj0*x10991))+((x10995*x11002))+((r10*x10994)));
evalcond[8]=((((-1.0)*x10993*x10997))+((r11*x10989))+((x10992*x11004))+((r10*x10995))+(((-1.0)*x10994*x11002))+(((-1.0)*x10996*x10997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11005=((1.0)*cj3);
IkReal x11006=((1.0)*gconst39);
CheckValue<IkReal> x11007=IKPowWithIntegerCheck((((gconst38*r21*sj3))+(((-1.0)*r20*sj3*x11006))),-1);
if(!x11007.valid){
continue;
}
CheckValue<IkReal> x11008=IKPowWithIntegerCheck(((((-1.0)*r10*x11006))+((gconst38*r11))),-1);
if(!x11008.valid){
continue;
}
if( IKabs(((x11007.value)*(((((-1.0)*gconst38*r20*x11005))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst39*r21*x11005)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11008.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11007.value)*(((((-1.0)*gconst38*r20*x11005))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst39*r21*x11005))))))+IKsqr(((-1.0)*sj0*(x11008.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11007.value)*(((((-1.0)*gconst38*r20*x11005))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst39*r21*x11005))))), ((-1.0)*sj0*(x11008.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11009=IKcos(j4);
IkReal x11010=IKsin(j4);
IkReal x11011=(gconst39*sj3);
IkReal x11012=(cj2*sj0);
IkReal x11013=(sj1*sj2);
IkReal x11014=(cj3*gconst39);
IkReal x11015=(cj1*sj2);
IkReal x11016=(cj3*gconst38);
IkReal x11017=(gconst38*sj3);
IkReal x11018=(cj2*sj1);
IkReal x11019=((1.0)*cj0);
IkReal x11020=(cj1*cj2);
IkReal x11021=(r20*x11010);
IkReal x11022=(gconst38*x11009);
IkReal x11023=((1.0)*x11009);
IkReal x11024=(r11*x11010);
IkReal x11025=(r21*x11010);
IkReal x11026=(r10*x11010);
evalcond[0]=(cj0+((r02*x11010)));
evalcond[1]=(((r21*x11022))+(((-1.0)*gconst39*r20*x11023)));
evalcond[2]=(sj0+(((-1.0)*gconst39*r10*x11023))+((r11*x11022)));
evalcond[3]=(((sj1*x11012))+((sj0*x11015))+((cj3*r02*x11009)));
evalcond[4]=(((cj1*x11012))+(((-1.0)*sj0*x11013))+(((-1.0)*r02*sj3*x11023)));
evalcond[5]=(((x11017*x11025))+((r20*x11016))+x11018+x11015+(((-1.0)*x11011*x11021))+((r21*x11014)));
evalcond[6]=((((-1.0)*x11020))+((r20*x11017))+((x11014*x11021))+x11013+(((-1.0)*x11016*x11025))+((r21*x11011)));
evalcond[7]=(((x11017*x11024))+((r10*x11016))+(((-1.0)*x11011*x11026))+((r11*x11014))+((cj0*x11013))+(((-1.0)*x11019*x11020)));
evalcond[8]=((((-1.0)*x11018*x11019))+((x11014*x11026))+(((-1.0)*x11015*x11019))+((r10*x11017))+((r11*x11011))+(((-1.0)*x11016*x11024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11027=IKPowWithIntegerCheck(r02,-1);
if(!x11027.valid){
continue;
}
CheckValue<IkReal> x11028=IKPowWithIntegerCheck(((((-1.0)*gconst39*r10))+((gconst38*r11))),-1);
if(!x11028.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11027.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11028.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11027.value)))+IKsqr(((-1.0)*sj0*(x11028.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11027.value)), ((-1.0)*sj0*(x11028.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11029=IKcos(j4);
IkReal x11030=IKsin(j4);
IkReal x11031=(gconst39*sj3);
IkReal x11032=(cj2*sj0);
IkReal x11033=(sj1*sj2);
IkReal x11034=(cj3*gconst39);
IkReal x11035=(cj1*sj2);
IkReal x11036=(cj3*gconst38);
IkReal x11037=(gconst38*sj3);
IkReal x11038=(cj2*sj1);
IkReal x11039=((1.0)*cj0);
IkReal x11040=(cj1*cj2);
IkReal x11041=(r20*x11030);
IkReal x11042=(gconst38*x11029);
IkReal x11043=((1.0)*x11029);
IkReal x11044=(r11*x11030);
IkReal x11045=(r21*x11030);
IkReal x11046=(r10*x11030);
evalcond[0]=(cj0+((r02*x11030)));
evalcond[1]=((((-1.0)*gconst39*r20*x11043))+((r21*x11042)));
evalcond[2]=(((r11*x11042))+sj0+(((-1.0)*gconst39*r10*x11043)));
evalcond[3]=(((cj3*r02*x11029))+((sj0*x11035))+((sj1*x11032)));
evalcond[4]=(((cj1*x11032))+(((-1.0)*r02*sj3*x11043))+(((-1.0)*sj0*x11033)));
evalcond[5]=(((r20*x11036))+(((-1.0)*x11031*x11041))+((r21*x11034))+x11035+x11038+((x11037*x11045)));
evalcond[6]=(((r20*x11037))+((r21*x11031))+((x11034*x11041))+x11033+(((-1.0)*x11036*x11045))+(((-1.0)*x11040)));
evalcond[7]=((((-1.0)*x11031*x11046))+((r10*x11036))+((x11037*x11044))+((cj0*x11033))+((r11*x11034))+(((-1.0)*x11039*x11040)));
evalcond[8]=(((x11034*x11046))+(((-1.0)*x11036*x11044))+((r10*x11037))+(((-1.0)*x11035*x11039))+((r11*x11031))+(((-1.0)*x11038*x11039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11047=((1.0)*sj0);
IkReal x11048=((1.0)*gconst38);
CheckValue<IkReal> x11049=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11048))+(((-1.0)*gconst39*r21)))),-1);
if(!x11049.valid){
continue;
}
CheckValue<IkReal> x11050 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x11048))+(((-1.0)*gconst39*r00*x11047))+((cj0*gconst39*r10))+((gconst38*r01*sj0)))),IkReal(((((-1.0)*r02*x11047))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11049.value)))+(x11050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11051=IKcos(j4);
IkReal x11052=IKsin(j4);
IkReal x11053=(cj2*sj0);
IkReal x11054=(gconst39*r21);
IkReal x11055=(sj1*sj2);
IkReal x11056=(cj3*gconst39);
IkReal x11057=((1.0)*cj2);
IkReal x11058=(cj3*gconst38);
IkReal x11059=(cj0*cj1);
IkReal x11060=(gconst38*sj3);
IkReal x11061=(gconst39*sj3);
IkReal x11062=(cj1*sj2);
IkReal x11063=(gconst38*x11051);
IkReal x11064=((1.0)*x11051);
IkReal x11065=(cj3*x11051);
IkReal x11066=((1.0)*x11052);
IkReal x11067=(x11052*x11060);
IkReal x11068=(x11061*x11066);
evalcond[0]=(((r22*x11052))+((r21*x11063))+(((-1.0)*gconst39*r20*x11064)));
evalcond[1]=(cj0+(((-1.0)*gconst39*r00*x11064))+((r01*x11063))+((r02*x11052)));
evalcond[2]=(((r12*x11052))+sj0+((r11*x11063))+(((-1.0)*gconst39*r10*x11064)));
evalcond[3]=(((r20*x11058))+((cj2*sj1))+((cj3*x11054))+(((-1.0)*r22*sj3*x11064))+x11062+((r21*x11067))+(((-1.0)*r20*x11068)));
evalcond[4]=(((r20*x11060))+(((-1.0)*r21*x11058*x11066))+((sj3*x11054))+x11055+((r22*x11065))+((r20*x11052*x11056))+(((-1.0)*cj1*x11057)));
evalcond[5]=(((sj0*x11062))+((sj1*x11053))+(((-1.0)*r01*x11058*x11066))+((r01*x11061))+((r00*x11052*x11056))+((r00*x11060))+((r02*x11065)));
evalcond[6]=((((-1.0)*r00*x11068))+(((-1.0)*r02*sj3*x11064))+((r00*x11058))+(((-1.0)*sj0*x11055))+((r01*x11056))+((r01*x11067))+((cj1*x11053)));
evalcond[7]=(((r10*x11058))+(((-1.0)*r12*sj3*x11064))+(((-1.0)*r10*x11068))+((cj0*x11055))+((r11*x11067))+((r11*x11056))+(((-1.0)*x11057*x11059)));
evalcond[8]=((((-1.0)*sj2*x11059))+((r10*x11052*x11056))+(((-1.0)*cj0*sj1*x11057))+((r10*x11060))+(((-1.0)*r11*x11058*x11066))+((r11*x11061))+((r12*x11065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11069=((1.0)*gconst39);
CheckValue<IkReal> x11070 = IKatan2WithCheck(IkReal((((cj0*gconst38*r21))+(((-1.0)*cj0*r20*x11069)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11070.valid){
continue;
}
CheckValue<IkReal> x11071=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r10))+(((-1.0)*r11*x11069)))),-1);
if(!x11071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11070.value)+(((1.5707963267949)*(x11071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11072=IKcos(j4);
IkReal x11073=IKsin(j4);
IkReal x11074=(cj2*sj0);
IkReal x11075=(gconst39*r21);
IkReal x11076=(sj1*sj2);
IkReal x11077=(cj3*gconst39);
IkReal x11078=((1.0)*cj2);
IkReal x11079=(cj3*gconst38);
IkReal x11080=(cj0*cj1);
IkReal x11081=(gconst38*sj3);
IkReal x11082=(gconst39*sj3);
IkReal x11083=(cj1*sj2);
IkReal x11084=(gconst38*x11072);
IkReal x11085=((1.0)*x11072);
IkReal x11086=(cj3*x11072);
IkReal x11087=((1.0)*x11073);
IkReal x11088=(x11073*x11081);
IkReal x11089=(x11082*x11087);
evalcond[0]=(((r21*x11084))+(((-1.0)*gconst39*r20*x11085))+((r22*x11073)));
evalcond[1]=((((-1.0)*gconst39*r00*x11085))+cj0+((r01*x11084))+((r02*x11073)));
evalcond[2]=(sj0+((r12*x11073))+(((-1.0)*gconst39*r10*x11085))+((r11*x11084)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x11089))+((r21*x11088))+(((-1.0)*r22*sj3*x11085))+x11083+((r20*x11079))+((cj3*x11075)));
evalcond[4]=(((r20*x11073*x11077))+((sj3*x11075))+(((-1.0)*cj1*x11078))+(((-1.0)*r21*x11079*x11087))+x11076+((r22*x11086))+((r20*x11081)));
evalcond[5]=(((r01*x11082))+((r00*x11081))+((r02*x11086))+((sj1*x11074))+((sj0*x11083))+(((-1.0)*r01*x11079*x11087))+((r00*x11073*x11077)));
evalcond[6]=(((cj1*x11074))+((r01*x11088))+((r00*x11079))+(((-1.0)*r02*sj3*x11085))+((r01*x11077))+(((-1.0)*r00*x11089))+(((-1.0)*sj0*x11076)));
evalcond[7]=((((-1.0)*r12*sj3*x11085))+(((-1.0)*x11078*x11080))+((r11*x11077))+((r10*x11079))+(((-1.0)*r10*x11089))+((r11*x11088))+((cj0*x11076)));
evalcond[8]=((((-1.0)*r11*x11079*x11087))+(((-1.0)*cj0*sj1*x11078))+((r10*x11081))+((r11*x11082))+((r12*x11086))+(((-1.0)*sj2*x11080))+((r10*x11073*x11077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11090 = IKatan2WithCheck(IkReal((((gconst38*r21*sj0))+(((-1.0)*gconst39*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x11090.valid){
continue;
}
CheckValue<IkReal> x11091=IKPowWithIntegerCheck(IKsign((((gconst39*r01))+((gconst38*r00)))),-1);
if(!x11091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11090.value)+(((1.5707963267949)*(x11091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11092=IKcos(j4);
IkReal x11093=IKsin(j4);
IkReal x11094=(cj2*sj0);
IkReal x11095=(gconst39*r21);
IkReal x11096=(sj1*sj2);
IkReal x11097=(cj3*gconst39);
IkReal x11098=((1.0)*cj2);
IkReal x11099=(cj3*gconst38);
IkReal x11100=(cj0*cj1);
IkReal x11101=(gconst38*sj3);
IkReal x11102=(gconst39*sj3);
IkReal x11103=(cj1*sj2);
IkReal x11104=(gconst38*x11092);
IkReal x11105=((1.0)*x11092);
IkReal x11106=(cj3*x11092);
IkReal x11107=((1.0)*x11093);
IkReal x11108=(x11093*x11101);
IkReal x11109=(x11102*x11107);
evalcond[0]=((((-1.0)*gconst39*r20*x11105))+((r21*x11104))+((r22*x11093)));
evalcond[1]=(cj0+((r02*x11093))+(((-1.0)*gconst39*r00*x11105))+((r01*x11104)));
evalcond[2]=(sj0+(((-1.0)*gconst39*r10*x11105))+((r12*x11093))+((r11*x11104)));
evalcond[3]=(((cj2*sj1))+((r20*x11099))+x11103+((r21*x11108))+(((-1.0)*r22*sj3*x11105))+((cj3*x11095))+(((-1.0)*r20*x11109)));
evalcond[4]=(((r20*x11093*x11097))+(((-1.0)*cj1*x11098))+(((-1.0)*r21*x11099*x11107))+x11096+((r20*x11101))+((sj3*x11095))+((r22*x11106)));
evalcond[5]=(((r02*x11106))+((r00*x11093*x11097))+(((-1.0)*r01*x11099*x11107))+((sj0*x11103))+((sj1*x11094))+((r00*x11101))+((r01*x11102)));
evalcond[6]=((((-1.0)*r02*sj3*x11105))+(((-1.0)*sj0*x11096))+((r00*x11099))+((r01*x11097))+((cj1*x11094))+(((-1.0)*r00*x11109))+((r01*x11108)));
evalcond[7]=(((cj0*x11096))+(((-1.0)*r10*x11109))+(((-1.0)*x11098*x11100))+(((-1.0)*r12*sj3*x11105))+((r11*x11097))+((r10*x11099))+((r11*x11108)));
evalcond[8]=(((r10*x11093*x11097))+(((-1.0)*sj2*x11100))+((r10*x11101))+(((-1.0)*r11*x11099*x11107))+((r11*x11102))+(((-1.0)*cj0*sj1*x11098))+((r12*x11106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11110=((-1.0)*r10);
IkReal x11112 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11112)==0){
continue;
}
IkReal x11111=pow(x11112,-0.5);
CheckValue<IkReal> x11113 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11110),IKFAST_ATAN2_MAGTHRESH);
if(!x11113.valid){
continue;
}
IkReal gconst40=((-1.0)*(x11113.value));
IkReal gconst41=(r11*x11111);
IkReal gconst42=(x11110*x11111);
CheckValue<IkReal> x11114 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11114.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11114.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11115=((-1.0)*r10);
IkReal x11116=x11111;
CheckValue<IkReal> x11118 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11115),IKFAST_ATAN2_MAGTHRESH);
if(!x11118.valid){
continue;
}
IkReal x11117=((-1.0)*(x11118.value));
sj5=gconst41;
cj5=gconst42;
j5=x11117;
IkReal gconst40=x11117;
IkReal gconst41=(r11*x11116);
IkReal gconst42=(x11115*x11116);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11119=((-1.0)*r10);
IkReal x11120=x11111;
CheckValue<IkReal> x11122 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11119),IKFAST_ATAN2_MAGTHRESH);
if(!x11122.valid){
continue;
}
IkReal x11121=((-1.0)*(x11122.value));
sj5=gconst41;
cj5=gconst42;
j5=x11121;
IkReal gconst40=x11121;
IkReal gconst41=(r11*x11120);
IkReal gconst42=(x11119*x11120);
IkReal x11123=r12*r12;
IkReal x11124=(r02*sj0);
IkReal x11125=((1.0)*x11123);
CheckValue<IkReal> x11129=IKPowWithIntegerCheck(((-1.0)+x11123),-1);
if(!x11129.valid){
continue;
}
IkReal x11126=x11129.value;
if((((1.0)+(((-1.0)*x11125)))) < -0.00001)
continue;
IkReal x11127=IKsqrt(((1.0)+(((-1.0)*x11125))));
IkReal x11128=(cj0*x11126*x11127);
j4eval[0]=((IKabs(((((-1.0)*x11124))+((cj0*r12)))))+(IKabs((((r12*x11124*x11126*x11127))+x11128+(((-1.0)*x11125*x11128))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11130=((-1.0)*r10);
IkReal x11131=x11111;
CheckValue<IkReal> x11133 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11130),IKFAST_ATAN2_MAGTHRESH);
if(!x11133.valid){
continue;
}
IkReal x11132=((-1.0)*(x11133.value));
sj5=gconst41;
cj5=gconst42;
j5=x11132;
IkReal gconst40=x11132;
IkReal gconst41=(r11*x11131);
IkReal gconst42=(x11130*x11131);
CheckValue<IkReal> x11137=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11137.valid){
continue;
}
IkReal x11134=x11137.value;
IkReal x11135=(cj3*x11134);
IkReal x11136=((((2.0)*r10*r11*r20*r21*x11135))+((cj3*(r22*r22)))+((x11135*(r11*r11)*(r21*r21)))+((x11135*(r10*r10)*(r20*r20))));
j4eval[0]=x11136;
j4eval[1]=IKsign(x11136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11138=((-1.0)*r10);
IkReal x11139=x11111;
CheckValue<IkReal> x11141 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11138),IKFAST_ATAN2_MAGTHRESH);
if(!x11141.valid){
continue;
}
IkReal x11140=((-1.0)*(x11141.value));
sj5=gconst41;
cj5=gconst42;
j5=x11140;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst40=x11140;
IkReal gconst41=(r11*x11139);
IkReal gconst42=(x11138*x11139);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11142=((-1.0)*r10);
IkReal x11143=x11111;
CheckValue<IkReal> x11145 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11142),IKFAST_ATAN2_MAGTHRESH);
if(!x11145.valid){
continue;
}
IkReal x11144=((-1.0)*(x11145.value));
sj5=gconst41;
cj5=gconst42;
j5=x11144;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst40=x11144;
IkReal gconst41=(r11*x11143);
IkReal gconst42=(x11142*x11143);
IkReal x11146=r12*r12;
IkReal x11147=(r02*sj0);
IkReal x11148=((1.0)*x11146);
CheckValue<IkReal> x11152=IKPowWithIntegerCheck(((-1.0)+x11146),-1);
if(!x11152.valid){
continue;
}
IkReal x11149=x11152.value;
if((((1.0)+(((-1.0)*x11148)))) < -0.00001)
continue;
IkReal x11150=IKsqrt(((1.0)+(((-1.0)*x11148))));
IkReal x11151=(cj0*x11149*x11150);
j4eval[0]=((IKabs(((((-1.0)*x11147))+((cj0*r12)))))+(IKabs(((((-1.0)*x11148*x11151))+x11151+((r12*x11147*x11149*x11150))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11153=((-1.0)*r10);
IkReal x11154=x11111;
CheckValue<IkReal> x11156 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11153),IKFAST_ATAN2_MAGTHRESH);
if(!x11156.valid){
continue;
}
IkReal x11155=((-1.0)*(x11156.value));
sj5=gconst41;
cj5=gconst42;
j5=x11155;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst40=x11155;
IkReal gconst41=(r11*x11154);
IkReal gconst42=(x11153*x11154);
IkReal x11157=((1.0)+(((-1.0)*(r12*r12))));
IkReal x11158=(cj1*r22*sj2);
IkReal x11159=(cj2*r22*sj1);
CheckValue<IkReal> x11165=IKPowWithIntegerCheck(x11157,-1);
if(!x11165.valid){
continue;
}
IkReal x11160=x11165.value;
IkReal x11161=((1.0)*x11160);
IkReal x11162=x11111;
IkReal x11163=(r12*x11162);
IkReal x11164=((((-1.0)*x11161*(r11*r11)*(r21*r21)))+(((-1.0)*x11161*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x11160)));
j4eval[0]=x11164;
j4eval[1]=((IKabs(((((-1.0)*x11159))+(((-1.0)*x11158)))))+(IKabs((((x11158*x11163))+((x11159*x11163))))));
j4eval[2]=IKsign(x11164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11166=((-1.0)*r10);
IkReal x11167=x11111;
CheckValue<IkReal> x11169 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11166),IKFAST_ATAN2_MAGTHRESH);
if(!x11169.valid){
continue;
}
IkReal x11168=((-1.0)*(x11169.value));
sj5=gconst41;
cj5=gconst42;
j5=x11168;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst40=x11168;
IkReal gconst41=(r11*x11167);
IkReal gconst42=(x11166*x11167);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11170=((-1.0)*r10);
IkReal x11171=x11111;
CheckValue<IkReal> x11173 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11170),IKFAST_ATAN2_MAGTHRESH);
if(!x11173.valid){
continue;
}
IkReal x11172=((-1.0)*(x11173.value));
sj5=gconst41;
cj5=gconst42;
j5=x11172;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst40=x11172;
IkReal gconst41=(r11*x11171);
IkReal gconst42=(x11170*x11171);
IkReal x11174=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11178=IKPowWithIntegerCheck(x11174,-1);
if(!x11178.valid){
continue;
}
IkReal x11175=x11178.value;
IkReal x11176=((1.0)*x11175);
IkReal x11177=((((-1.0)*x11176*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11175))+(((-1.0)*x11176*(r01*r01)*(r11*r11))));
j4eval[0]=x11177;
j4eval[1]=IKsign(x11177);
j4eval[2]=r02;
j4eval[3]=x11174;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11179=((-1.0)*r10);
IkReal x11180=x11111;
CheckValue<IkReal> x11182 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11179),IKFAST_ATAN2_MAGTHRESH);
if(!x11182.valid){
continue;
}
IkReal x11181=((-1.0)*(x11182.value));
sj5=gconst41;
cj5=gconst42;
j5=x11181;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst40=x11181;
IkReal gconst41=(r11*x11180);
IkReal gconst42=(x11179*x11180);
IkReal x11183=((1.0)*(r12*r12));
CheckValue<IkReal> x11187=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11183))),-1);
if(!x11187.valid){
continue;
}
IkReal x11184=x11187.value;
IkReal x11185=((1.0)*x11184);
IkReal x11186=((((-1.0)*x11185*(r10*r10*r10*r10)))+(((-1.0)*x11183))+(((-2.0)*x11184*(r10*r10)*(r11*r11)))+(((-1.0)*x11185*(r11*r11*r11*r11))));
j4eval[0]=x11186;
j4eval[1]=IKsign(x11186);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11188=(gconst42*r10);
IkReal x11189=(cj1*cj2);
IkReal x11190=(sj1*sj2);
IkReal x11191=(gconst41*r11);
CheckValue<IkReal> x11192=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11188*x11188)))+(((2.0)*x11188*x11191))+(((-1.0)*(x11191*x11191)))+(((-1.0)*(r12*r12))))),-1);
if(!x11192.valid){
continue;
}
CheckValue<IkReal> x11193 = IKatan2WithCheck(IkReal((((x11190*x11191))+(((-1.0)*x11189*x11191))+((x11188*x11189))+(((-1.0)*x11188*x11190)))),IkReal((((r12*x11189))+(((-1.0)*r12*x11190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11192.value)))+(x11193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11194=IKcos(j4);
IkReal x11195=IKsin(j4);
IkReal x11196=(gconst42*r20);
IkReal x11197=(gconst42*r10);
IkReal x11198=(gconst42*r00);
IkReal x11199=((1.0)*x11194);
IkReal x11200=((1.0)*x11195);
IkReal x11201=(gconst41*x11194);
IkReal x11202=(gconst41*x11195);
evalcond[0]=(((r21*x11201))+(((-1.0)*x11196*x11199))+((r22*x11195)));
evalcond[1]=((((-1.0)*x11197*x11199))+((r12*x11195))+((r11*x11201)));
evalcond[2]=((1.0)+(((-1.0)*x11198*x11199))+((r02*x11195))+((r01*x11201)));
evalcond[3]=((((-1.0)*r02*x11199))+(((-1.0)*x11198*x11200))+((r01*x11202)));
evalcond[4]=(((cj2*sj1))+((r21*x11202))+(((-1.0)*x11196*x11200))+(((-1.0)*r22*x11199))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x11197*x11200))+(((-1.0)*r12*x11199))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x11202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11203=(gconst42*r00);
IkReal x11204=(gconst41*r01);
CheckValue<IkReal> x11205 = IKatan2WithCheck(IkReal(r02),IkReal((x11204+(((-1.0)*x11203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11205.valid){
continue;
}
CheckValue<IkReal> x11206=IKPowWithIntegerCheck(IKsign(((((2.0)*x11203*x11204))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11203*x11203)))+(((-1.0)*(x11204*x11204))))),-1);
if(!x11206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11205.value)+(((1.5707963267949)*(x11206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11207=IKcos(j4);
IkReal x11208=IKsin(j4);
IkReal x11209=(gconst42*r20);
IkReal x11210=(gconst42*r10);
IkReal x11211=(gconst42*r00);
IkReal x11212=((1.0)*x11207);
IkReal x11213=((1.0)*x11208);
IkReal x11214=(gconst41*x11207);
IkReal x11215=(gconst41*x11208);
evalcond[0]=(((r21*x11214))+(((-1.0)*x11209*x11212))+((r22*x11208)));
evalcond[1]=(((r11*x11214))+((r12*x11208))+(((-1.0)*x11210*x11212)));
evalcond[2]=((1.0)+((r02*x11208))+((r01*x11214))+(((-1.0)*x11211*x11212)));
evalcond[3]=(((r01*x11215))+(((-1.0)*r02*x11212))+(((-1.0)*x11211*x11213)));
evalcond[4]=(((r21*x11215))+((cj2*sj1))+(((-1.0)*x11209*x11213))+((cj1*sj2))+(((-1.0)*r22*x11212)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11212))+((r11*x11215))+(((-1.0)*x11210*x11213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11216 = IKatan2WithCheck(IkReal((((gconst41*r11))+(((-1.0)*gconst42*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11216.valid){
continue;
}
CheckValue<IkReal> x11217=IKPowWithIntegerCheck(IKsign((((gconst42*r21))+((gconst41*r20)))),-1);
if(!x11217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11216.value)+(((1.5707963267949)*(x11217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11218=IKcos(j4);
IkReal x11219=IKsin(j4);
IkReal x11220=(gconst42*r20);
IkReal x11221=(gconst42*r10);
IkReal x11222=(gconst42*r00);
IkReal x11223=((1.0)*x11218);
IkReal x11224=((1.0)*x11219);
IkReal x11225=(gconst41*x11218);
IkReal x11226=(gconst41*x11219);
evalcond[0]=((((-1.0)*x11220*x11223))+((r21*x11225))+((r22*x11219)));
evalcond[1]=(((r11*x11225))+((r12*x11219))+(((-1.0)*x11221*x11223)));
evalcond[2]=((1.0)+((r02*x11219))+(((-1.0)*x11222*x11223))+((r01*x11225)));
evalcond[3]=((((-1.0)*x11222*x11224))+((r01*x11226))+(((-1.0)*r02*x11223)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11220*x11224))+((r21*x11226))+(((-1.0)*r22*x11223)));
evalcond[5]=(((r11*x11226))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11221*x11224))+(((-1.0)*r12*x11223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11227=((-1.0)*r10);
IkReal x11228=x11111;
CheckValue<IkReal> x11230 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11227),IKFAST_ATAN2_MAGTHRESH);
if(!x11230.valid){
continue;
}
IkReal x11229=((-1.0)*(x11230.value));
sj5=gconst41;
cj5=gconst42;
j5=x11229;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst40=x11229;
IkReal gconst41=(r11*x11228);
IkReal gconst42=(x11227*x11228);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11231=((-1.0)*r10);
IkReal x11232=x11111;
CheckValue<IkReal> x11234 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11231),IKFAST_ATAN2_MAGTHRESH);
if(!x11234.valid){
continue;
}
IkReal x11233=((-1.0)*(x11234.value));
sj5=gconst41;
cj5=gconst42;
j5=x11233;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst40=x11233;
IkReal gconst41=(r11*x11232);
IkReal gconst42=(x11231*x11232);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11235=((-1.0)*r10);
IkReal x11236=x11111;
CheckValue<IkReal> x11238 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11235),IKFAST_ATAN2_MAGTHRESH);
if(!x11238.valid){
continue;
}
IkReal x11237=((-1.0)*(x11238.value));
sj5=gconst41;
cj5=gconst42;
j5=x11237;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst40=x11237;
IkReal gconst41=(r11*x11236);
IkReal gconst42=(x11235*x11236);
IkReal x11239=((1.0)*(r12*r12));
CheckValue<IkReal> x11243=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11239))),-1);
if(!x11243.valid){
continue;
}
IkReal x11240=x11243.value;
IkReal x11241=((1.0)*x11240);
IkReal x11242=((((-1.0)*x11241*(r10*r10*r10*r10)))+(((-1.0)*x11241*(r11*r11*r11*r11)))+(((-2.0)*x11240*(r10*r10)*(r11*r11)))+(((-1.0)*x11239)));
j4eval[0]=x11242;
j4eval[1]=IKsign(x11242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11244=(sj1*sj2);
IkReal x11245=(gconst41*r11);
IkReal x11246=(gconst42*r10);
IkReal x11247=((1.0)*cj1*cj2);
CheckValue<IkReal> x11248 = IKatan2WithCheck(IkReal((((cj1*cj2*x11245))+(((-1.0)*x11244*x11245))+((x11244*x11246))+(((-1.0)*x11246*x11247)))),IkReal((((r12*x11244))+(((-1.0)*r12*x11247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11248.valid){
continue;
}
CheckValue<IkReal> x11249=IKPowWithIntegerCheck(IKsign(((((2.0)*x11245*x11246))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11245*x11245)))+(((-1.0)*(x11246*x11246))))),-1);
if(!x11249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11248.value)+(((1.5707963267949)*(x11249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11250=IKcos(j4);
IkReal x11251=IKsin(j4);
IkReal x11252=(gconst42*r20);
IkReal x11253=(gconst42*r10);
IkReal x11254=(gconst42*r00);
IkReal x11255=((1.0)*x11250);
IkReal x11256=((1.0)*x11251);
IkReal x11257=(gconst41*x11250);
IkReal x11258=(gconst41*x11251);
evalcond[0]=(((r22*x11251))+((r21*x11257))+(((-1.0)*x11252*x11255)));
evalcond[1]=(((r11*x11257))+((r12*x11251))+(((-1.0)*x11253*x11255)));
evalcond[2]=((-1.0)+((r02*x11251))+((r01*x11257))+(((-1.0)*x11254*x11255)));
evalcond[3]=((((-1.0)*r02*x11255))+((r01*x11258))+(((-1.0)*x11254*x11256)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11258))+(((-1.0)*r22*x11255))+(((-1.0)*x11252*x11256)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x11258))+(((-1.0)*x11253*x11256))+((cj1*cj2))+(((-1.0)*r12*x11255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11259=(gconst42*r00);
IkReal x11260=(gconst41*r01);
CheckValue<IkReal> x11261=IKPowWithIntegerCheck(IKsign(((x11260*x11260)+(x11259*x11259)+(r02*r02)+(((-2.0)*x11259*x11260)))),-1);
if(!x11261.valid){
continue;
}
CheckValue<IkReal> x11262 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x11259))+x11260)),IKFAST_ATAN2_MAGTHRESH);
if(!x11262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11261.value)))+(x11262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11263=IKcos(j4);
IkReal x11264=IKsin(j4);
IkReal x11265=(gconst42*r20);
IkReal x11266=(gconst42*r10);
IkReal x11267=(gconst42*r00);
IkReal x11268=((1.0)*x11263);
IkReal x11269=((1.0)*x11264);
IkReal x11270=(gconst41*x11263);
IkReal x11271=(gconst41*x11264);
evalcond[0]=(((r22*x11264))+((r21*x11270))+(((-1.0)*x11265*x11268)));
evalcond[1]=((((-1.0)*x11266*x11268))+((r11*x11270))+((r12*x11264)));
evalcond[2]=((-1.0)+((r01*x11270))+((r02*x11264))+(((-1.0)*x11267*x11268)));
evalcond[3]=((((-1.0)*r02*x11268))+((r01*x11271))+(((-1.0)*x11267*x11269)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11271))+(((-1.0)*r22*x11268))+(((-1.0)*x11265*x11269)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x11268))+((cj1*cj2))+(((-1.0)*x11266*x11269))+((r11*x11271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11272=((1.0)*gconst42);
CheckValue<IkReal> x11273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11272))+(((-1.0)*gconst41*r20)))),-1);
if(!x11273.valid){
continue;
}
CheckValue<IkReal> x11274 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x11272))+((gconst41*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11273.value)))+(x11274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11275=IKcos(j4);
IkReal x11276=IKsin(j4);
IkReal x11277=(gconst42*r20);
IkReal x11278=(gconst42*r10);
IkReal x11279=(gconst42*r00);
IkReal x11280=((1.0)*x11275);
IkReal x11281=((1.0)*x11276);
IkReal x11282=(gconst41*x11275);
IkReal x11283=(gconst41*x11276);
evalcond[0]=(((r22*x11276))+((r21*x11282))+(((-1.0)*x11277*x11280)));
evalcond[1]=((((-1.0)*x11278*x11280))+((r12*x11276))+((r11*x11282)));
evalcond[2]=((-1.0)+(((-1.0)*x11279*x11280))+((r02*x11276))+((r01*x11282)));
evalcond[3]=((((-1.0)*r02*x11280))+(((-1.0)*x11279*x11281))+((r01*x11283)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11280))+((r21*x11283))+(((-1.0)*x11277*x11281)));
evalcond[5]=((((-1.0)*r12*x11280))+(((-1.0)*x11278*x11281))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x11283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11284=((-1.0)*r10);
IkReal x11285=((-1.0)*r11);
CheckValue<IkReal> x11287 = IKatan2WithCheck(IkReal(x11285),IkReal(x11284),IKFAST_ATAN2_MAGTHRESH);
if(!x11287.valid){
continue;
}
IkReal x11286=((-1.0)*(x11287.value));
sj5=gconst41;
cj5=gconst42;
j5=x11286;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11284);
rxp1_1=(px*r21);
rxp1_2=(px*x11285);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst40=x11286;
IkReal gconst41=r11;
IkReal gconst42=x11284;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11288=((-1.0)*r10);
IkReal x11289=((-1.0)*r11);
CheckValue<IkReal> x11291 = IKatan2WithCheck(IkReal(x11289),IkReal(x11288),IKFAST_ATAN2_MAGTHRESH);
if(!x11291.valid){
continue;
}
IkReal x11290=((-1.0)*(x11291.value));
sj5=gconst41;
cj5=gconst42;
j5=x11290;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11288);
rxp1_1=(px*r21);
rxp1_2=(px*x11289);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst40=x11290;
IkReal gconst41=r11;
IkReal gconst42=x11288;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11292=((-1.0)*r10);
IkReal x11293=((-1.0)*r11);
CheckValue<IkReal> x11295 = IKatan2WithCheck(IkReal(x11293),IkReal(x11292),IKFAST_ATAN2_MAGTHRESH);
if(!x11295.valid){
continue;
}
IkReal x11294=((-1.0)*(x11295.value));
sj5=gconst41;
cj5=gconst42;
j5=x11294;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11292);
rxp1_1=(px*r21);
rxp1_2=(px*x11293);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst40=x11294;
IkReal gconst41=r11;
IkReal gconst42=x11292;
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11298=IKPowWithIntegerCheck((((gconst41*r11))+(((-1.0)*gconst42*r10))),-1);
if(!x11298.valid){
continue;
}
IkReal x11296=x11298.value;
IkReal x11297=(cj0*x11296);
sj4array[0]=((((-1.0)*sj1*sj2*x11297))+((cj1*cj2*x11297)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11299=IKcos(j4);
IkReal x11300=IKsin(j4);
IkReal x11301=(gconst41*r21);
IkReal x11302=((1.0)*gconst42);
evalcond[0]=((-1.0)*r02*x11299);
evalcond[1]=(((r02*x11300))+cj0);
evalcond[2]=((((-1.0)*r20*x11299*x11302))+((x11299*x11301)));
evalcond[3]=(((gconst41*r11*x11299))+(((-1.0)*r10*x11299*x11302)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11300*x11301))+(((-1.0)*r20*x11300*x11302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11305=IKPowWithIntegerCheck((((gconst41*r21))+(((-1.0)*gconst42*r20))),-1);
if(!x11305.valid){
continue;
}
IkReal x11303=x11305.value;
IkReal x11304=((1.0)*x11303);
sj4array[0]=((((-1.0)*cj1*sj2*x11304))+(((-1.0)*cj2*sj1*x11304)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11306=IKcos(j4);
IkReal x11307=IKsin(j4);
IkReal x11308=(gconst41*r11);
IkReal x11309=((1.0)*gconst42*x11306);
evalcond[0]=((-1.0)*r02*x11306);
evalcond[1]=(((r02*x11307))+cj0);
evalcond[2]=(((gconst41*r21*x11306))+(((-1.0)*r20*x11309)));
evalcond[3]=(((x11306*x11308))+(((-1.0)*r10*x11309)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*gconst42*r10*x11307))+((cj0*sj1*sj2))+((x11307*x11308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11310=IKPowWithIntegerCheck(r02,-1);
if(!x11310.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x11310.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11311=IKcos(j4);
IkReal x11312=IKsin(j4);
IkReal x11313=((1.0)*gconst42);
IkReal x11314=(gconst41*x11312);
IkReal x11315=(gconst41*x11311);
evalcond[0]=((-1.0)*r02*x11311);
evalcond[1]=(((r21*x11315))+(((-1.0)*r20*x11311*x11313)));
evalcond[2]=(((r11*x11315))+(((-1.0)*r10*x11311*x11313)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x11312*x11313))+((cj1*sj2))+((r21*x11314)));
evalcond[4]=(((r11*x11314))+(((-1.0)*cj0*cj1*cj2))+(((-1.0)*r10*x11312*x11313))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11316=((-1.0)*r10);
IkReal x11317=x11111;
CheckValue<IkReal> x11319 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11316),IKFAST_ATAN2_MAGTHRESH);
if(!x11319.valid){
continue;
}
IkReal x11318=((-1.0)*(x11319.value));
sj5=gconst41;
cj5=gconst42;
j5=x11318;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst40=x11318;
IkReal gconst41=(r11*x11317);
IkReal gconst42=(x11316*x11317);
IkReal x11320=r12*r12;
IkReal x11321=(r02*sj0);
IkReal x11322=((1.0)*x11320);
CheckValue<IkReal> x11326=IKPowWithIntegerCheck(((-1.0)+x11320),-1);
if(!x11326.valid){
continue;
}
IkReal x11323=x11326.value;
if((((1.0)+(((-1.0)*x11322)))) < -0.00001)
continue;
IkReal x11324=IKsqrt(((1.0)+(((-1.0)*x11322))));
IkReal x11325=(cj0*x11323*x11324);
j4eval[0]=((IKabs(((((-1.0)*x11321))+((cj0*r12)))))+(IKabs(((((-1.0)*x11322*x11325))+x11325+((r12*x11321*x11323*x11324))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11327=((-1.0)*r10);
IkReal x11328=x11111;
CheckValue<IkReal> x11330 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11327),IKFAST_ATAN2_MAGTHRESH);
if(!x11330.valid){
continue;
}
IkReal x11329=((-1.0)*(x11330.value));
sj5=gconst41;
cj5=gconst42;
j5=x11329;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst40=x11329;
IkReal gconst41=(r11*x11328);
IkReal gconst42=(x11327*x11328);
CheckValue<IkReal> x11334=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11334.valid){
continue;
}
IkReal x11331=x11334.value;
IkReal x11332=((1.0)*x11331);
IkReal x11333=((((-1.0)*x11332*(r01*r01)*(r11*r11)))+(((-1.0)*x11332*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11331)));
j4eval[0]=x11333;
j4eval[1]=IKsign(x11333);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11335=(gconst42*r20);
IkReal x11336=(cj2*sj1);
IkReal x11337=(cj1*sj2);
IkReal x11338=(gconst41*r21);
IkReal x11339=((1.0)*gconst41*gconst42);
CheckValue<IkReal> x11340=IKPowWithIntegerCheck((x11338+(((-1.0)*x11335))),-1);
if(!x11340.valid){
continue;
}
CheckValue<IkReal> x11341=IKPowWithIntegerCheck((((gconst41*r01*x11338))+(((-1.0)*gconst41*r01*x11335))+((gconst42*r00*x11335))+(((-1.0)*gconst42*r00*x11338))),-1);
if(!x11341.valid){
continue;
}
if( IKabs(((x11340.value)*(((((-1.0)*x11336))+(((-1.0)*x11337)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11341.value)*((((cj0*x11335))+(((-1.0)*cj0*x11338))+((r02*x11336))+((r02*x11337)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11340.value)*(((((-1.0)*x11336))+(((-1.0)*x11337))))))+IKsqr(((x11341.value)*((((cj0*x11335))+(((-1.0)*cj0*x11338))+((r02*x11336))+((r02*x11337))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11340.value)*(((((-1.0)*x11336))+(((-1.0)*x11337))))), ((x11341.value)*((((cj0*x11335))+(((-1.0)*cj0*x11338))+((r02*x11336))+((r02*x11337))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11342=IKcos(j4);
IkReal x11343=IKsin(j4);
IkReal x11344=(cj1*cj2);
IkReal x11345=(sj1*sj2);
IkReal x11346=(gconst42*r00);
IkReal x11347=(gconst42*r10);
IkReal x11348=((1.0)*gconst42*r20);
IkReal x11349=(gconst41*x11342);
IkReal x11350=((1.0)*x11342);
IkReal x11351=(gconst41*x11343);
IkReal x11352=((1.0)*x11343);
evalcond[0]=((((-1.0)*x11342*x11348))+((r21*x11349)));
evalcond[1]=(cj0+(((-1.0)*x11346*x11350))+((r01*x11349))+((r02*x11343)));
evalcond[2]=(((r11*x11349))+sj0+((r12*x11343))+(((-1.0)*x11347*x11350)));
evalcond[3]=((((-1.0)*x11343*x11348))+((cj2*sj1))+((cj1*sj2))+((r21*x11351)));
evalcond[4]=((((-1.0)*x11346*x11352))+(((-1.0)*sj0*x11345))+((r01*x11351))+((sj0*x11344))+(((-1.0)*r02*x11350)));
evalcond[5]=((((-1.0)*r12*x11350))+((r11*x11351))+((cj0*x11345))+(((-1.0)*x11347*x11352))+(((-1.0)*cj0*x11344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11353=(gconst41*r01);
IkReal x11354=(gconst42*r00);
IkReal x11355=(sj0*sj1*sj2);
IkReal x11356=(cj1*cj2*sj0);
CheckValue<IkReal> x11357 = IKatan2WithCheck(IkReal(((((-1.0)*x11354*x11356))+((x11353*x11356))+(((-1.0)*x11353*x11355))+((x11354*x11355))+((cj0*r02)))),IkReal((((r02*x11355))+((cj0*x11353))+(((-1.0)*cj0*x11354))+(((-1.0)*r02*x11356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11357.valid){
continue;
}
CheckValue<IkReal> x11358=IKPowWithIntegerCheck(IKsign(((((2.0)*x11353*x11354))+(((-1.0)*(x11353*x11353)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11354*x11354))))),-1);
if(!x11358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11357.value)+(((1.5707963267949)*(x11358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11359=IKcos(j4);
IkReal x11360=IKsin(j4);
IkReal x11361=(cj1*cj2);
IkReal x11362=(sj1*sj2);
IkReal x11363=(gconst42*r00);
IkReal x11364=(gconst42*r10);
IkReal x11365=((1.0)*gconst42*r20);
IkReal x11366=(gconst41*x11359);
IkReal x11367=((1.0)*x11359);
IkReal x11368=(gconst41*x11360);
IkReal x11369=((1.0)*x11360);
evalcond[0]=(((r21*x11366))+(((-1.0)*x11359*x11365)));
evalcond[1]=(((r01*x11366))+cj0+(((-1.0)*x11363*x11367))+((r02*x11360)));
evalcond[2]=(sj0+((r12*x11360))+((r11*x11366))+(((-1.0)*x11364*x11367)));
evalcond[3]=(((cj2*sj1))+((r21*x11368))+((cj1*sj2))+(((-1.0)*x11360*x11365)));
evalcond[4]=(((r01*x11368))+(((-1.0)*sj0*x11362))+(((-1.0)*x11363*x11369))+(((-1.0)*r02*x11367))+((sj0*x11361)));
evalcond[5]=((((-1.0)*cj0*x11361))+(((-1.0)*r12*x11367))+((r11*x11368))+((cj0*x11362))+(((-1.0)*x11364*x11369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11370=((1.0)*sj0);
IkReal x11371=((1.0)*gconst41);
CheckValue<IkReal> x11372=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11371))+(((-1.0)*gconst42*r21)))),-1);
if(!x11372.valid){
continue;
}
CheckValue<IkReal> x11373 = IKatan2WithCheck(IkReal(((((-1.0)*gconst42*r00*x11370))+(((-1.0)*cj0*r11*x11371))+((gconst41*r01*sj0))+((cj0*gconst42*r10)))),IkReal(((((-1.0)*r02*x11370))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11372.value)))+(x11373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11374=IKcos(j4);
IkReal x11375=IKsin(j4);
IkReal x11376=(cj1*cj2);
IkReal x11377=(sj1*sj2);
IkReal x11378=(gconst42*r00);
IkReal x11379=(gconst42*r10);
IkReal x11380=((1.0)*gconst42*r20);
IkReal x11381=(gconst41*x11374);
IkReal x11382=((1.0)*x11374);
IkReal x11383=(gconst41*x11375);
IkReal x11384=((1.0)*x11375);
evalcond[0]=((((-1.0)*x11374*x11380))+((r21*x11381)));
evalcond[1]=(cj0+(((-1.0)*x11378*x11382))+((r01*x11381))+((r02*x11375)));
evalcond[2]=(((r11*x11381))+sj0+(((-1.0)*x11379*x11382))+((r12*x11375)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11375*x11380))+((r21*x11383)));
evalcond[4]=((((-1.0)*sj0*x11377))+((sj0*x11376))+(((-1.0)*x11378*x11384))+((r01*x11383))+(((-1.0)*r02*x11382)));
evalcond[5]=(((r11*x11383))+(((-1.0)*cj0*x11376))+(((-1.0)*x11379*x11384))+(((-1.0)*r12*x11382))+((cj0*x11377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11385=(cj2*sj1);
IkReal x11386=(gconst42*r20);
IkReal x11387=(cj1*sj2);
IkReal x11388=((1.0)*r22);
IkReal x11389=(gconst41*r21);
CheckValue<IkReal> x11390=IKPowWithIntegerCheck(IKsign(((((2.0)*x11386*x11389))+(((-1.0)*r22*x11388))+(((-1.0)*(x11386*x11386)))+(((-1.0)*(x11389*x11389))))),-1);
if(!x11390.valid){
continue;
}
CheckValue<IkReal> x11391 = IKatan2WithCheck(IkReal((((x11385*x11389))+((x11387*x11389))+(((-1.0)*x11386*x11387))+(((-1.0)*x11385*x11386)))),IkReal(((((-1.0)*x11387*x11388))+(((-1.0)*x11385*x11388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11390.value)))+(x11391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11392=IKcos(j4);
IkReal x11393=IKsin(j4);
IkReal x11394=(gconst42*r20);
IkReal x11395=(cj1*cj2);
IkReal x11396=(sj1*sj2);
IkReal x11397=(gconst42*r00);
IkReal x11398=(gconst42*r10);
IkReal x11399=((1.0)*x11392);
IkReal x11400=((1.0)*x11393);
IkReal x11401=(gconst41*x11392);
IkReal x11402=(gconst41*x11393);
evalcond[0]=(((r21*x11401))+((r22*x11393))+(((-1.0)*x11394*x11399)));
evalcond[1]=(((r02*x11393))+cj0+((r01*x11401))+(((-1.0)*x11397*x11399)));
evalcond[2]=(sj0+((r12*x11393))+(((-1.0)*x11398*x11399))+((r11*x11401)));
evalcond[3]=(((cj2*sj1))+((r21*x11402))+((cj1*sj2))+(((-1.0)*x11394*x11400))+(((-1.0)*r22*x11399)));
evalcond[4]=((((-1.0)*x11397*x11400))+(((-1.0)*r02*x11399))+((sj0*x11395))+((r01*x11402))+(((-1.0)*sj0*x11396)));
evalcond[5]=((((-1.0)*cj0*x11395))+((r11*x11402))+(((-1.0)*r12*x11399))+((cj0*x11396))+(((-1.0)*x11398*x11400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11403=((1.0)*sj0);
IkReal x11404=((1.0)*gconst41);
CheckValue<IkReal> x11405 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x11404))+((gconst41*r01*sj0))+((cj0*gconst42*r10))+(((-1.0)*gconst42*r00*x11403)))),IkReal(((((-1.0)*r02*x11403))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11405.valid){
continue;
}
CheckValue<IkReal> x11406=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst42*r21))+(((-1.0)*r20*x11404)))),-1);
if(!x11406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11405.value)+(((1.5707963267949)*(x11406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11407=IKcos(j4);
IkReal x11408=IKsin(j4);
IkReal x11409=(gconst42*r20);
IkReal x11410=(cj1*cj2);
IkReal x11411=(sj1*sj2);
IkReal x11412=(gconst42*r00);
IkReal x11413=(gconst42*r10);
IkReal x11414=((1.0)*x11407);
IkReal x11415=((1.0)*x11408);
IkReal x11416=(gconst41*x11407);
IkReal x11417=(gconst41*x11408);
evalcond[0]=(((r22*x11408))+((r21*x11416))+(((-1.0)*x11409*x11414)));
evalcond[1]=((((-1.0)*x11412*x11414))+((r01*x11416))+cj0+((r02*x11408)));
evalcond[2]=((((-1.0)*x11413*x11414))+sj0+((r12*x11408))+((r11*x11416)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x11417))+(((-1.0)*x11409*x11415))+(((-1.0)*r22*x11414)));
evalcond[4]=((((-1.0)*x11412*x11415))+(((-1.0)*sj0*x11411))+((r01*x11417))+((sj0*x11410))+(((-1.0)*r02*x11414)));
evalcond[5]=((((-1.0)*x11413*x11415))+((cj0*x11411))+(((-1.0)*r12*x11414))+((r11*x11417))+(((-1.0)*cj0*x11410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11418=IKPowWithIntegerCheck(IKsign((((gconst42*r01))+((gconst41*r00)))),-1);
if(!x11418.valid){
continue;
}
CheckValue<IkReal> x11419 = IKatan2WithCheck(IkReal(((((-1.0)*gconst42*r20*sj0))+((gconst41*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x11419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11418.value)))+(x11419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11420=IKcos(j4);
IkReal x11421=IKsin(j4);
IkReal x11422=(gconst42*r20);
IkReal x11423=(cj1*cj2);
IkReal x11424=(sj1*sj2);
IkReal x11425=(gconst42*r00);
IkReal x11426=(gconst42*r10);
IkReal x11427=((1.0)*x11420);
IkReal x11428=((1.0)*x11421);
IkReal x11429=(gconst41*x11420);
IkReal x11430=(gconst41*x11421);
evalcond[0]=(((r21*x11429))+((r22*x11421))+(((-1.0)*x11422*x11427)));
evalcond[1]=(((r02*x11421))+cj0+(((-1.0)*x11425*x11427))+((r01*x11429)));
evalcond[2]=(sj0+(((-1.0)*x11426*x11427))+((r11*x11429))+((r12*x11421)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x11430))+(((-1.0)*r22*x11427))+(((-1.0)*x11422*x11428)));
evalcond[4]=((((-1.0)*x11425*x11428))+(((-1.0)*r02*x11427))+((sj0*x11423))+(((-1.0)*sj0*x11424))+((r01*x11430)));
evalcond[5]=(((cj0*x11424))+(((-1.0)*x11426*x11428))+(((-1.0)*r12*x11427))+(((-1.0)*cj0*x11423))+((r11*x11430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11431=((-1.0)*r10);
IkReal x11432=x11111;
CheckValue<IkReal> x11434 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11431),IKFAST_ATAN2_MAGTHRESH);
if(!x11434.valid){
continue;
}
IkReal x11433=((-1.0)*(x11434.value));
sj5=gconst41;
cj5=gconst42;
j5=x11433;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst40=x11433;
IkReal gconst41=(r11*x11432);
IkReal gconst42=(x11431*x11432);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11435=((-1.0)*r10);
IkReal x11436=x11111;
CheckValue<IkReal> x11438 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11435),IKFAST_ATAN2_MAGTHRESH);
if(!x11438.valid){
continue;
}
IkReal x11437=((-1.0)*(x11438.value));
sj5=gconst41;
cj5=gconst42;
j5=x11437;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst40=x11437;
IkReal gconst41=(r11*x11436);
IkReal gconst42=(x11435*x11436);
IkReal x11439=r12*r12;
IkReal x11440=(r02*sj0);
IkReal x11441=((1.0)*x11439);
CheckValue<IkReal> x11445=IKPowWithIntegerCheck(((-1.0)+x11439),-1);
if(!x11445.valid){
continue;
}
IkReal x11442=x11445.value;
if((((1.0)+(((-1.0)*x11441)))) < -0.00001)
continue;
IkReal x11443=IKsqrt(((1.0)+(((-1.0)*x11441))));
IkReal x11444=(cj0*x11442*x11443);
j4eval[0]=((IKabs(((((-1.0)*x11440))+((cj0*r12)))))+(IKabs((x11444+(((-1.0)*x11441*x11444))+((r12*x11440*x11442*x11443))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11446=((-1.0)*r10);
IkReal x11447=x11111;
CheckValue<IkReal> x11449 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11446),IKFAST_ATAN2_MAGTHRESH);
if(!x11449.valid){
continue;
}
IkReal x11448=((-1.0)*(x11449.value));
sj5=gconst41;
cj5=gconst42;
j5=x11448;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst40=x11448;
IkReal gconst41=(r11*x11447);
IkReal gconst42=(x11446*x11447);
IkReal x11450=((1.0)*r22);
IkReal x11451=(cj1*sj2);
IkReal x11452=(cj2*sj1);
IkReal x11453=x11111;
IkReal x11454=(r12*r22*x11453);
j4eval[0]=((IKabs(((((-1.0)*x11450*x11451))+(((-1.0)*x11450*x11452)))))+(IKabs((((x11452*x11454))+((x11451*x11454))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11455=((-1.0)*r10);
IkReal x11456=x11111;
CheckValue<IkReal> x11458 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11455),IKFAST_ATAN2_MAGTHRESH);
if(!x11458.valid){
continue;
}
IkReal x11457=((-1.0)*(x11458.value));
sj5=gconst41;
cj5=gconst42;
j5=x11457;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst40=x11457;
IkReal gconst41=(r11*x11456);
IkReal gconst42=(x11455*x11456);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11459=((-1.0)*r10);
IkReal x11460=x11111;
CheckValue<IkReal> x11462 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11459),IKFAST_ATAN2_MAGTHRESH);
if(!x11462.valid){
continue;
}
IkReal x11461=((-1.0)*(x11462.value));
sj5=gconst41;
cj5=gconst42;
j5=x11461;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst40=x11461;
IkReal gconst41=(r11*x11460);
IkReal gconst42=(x11459*x11460);
IkReal x11463=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11467=IKPowWithIntegerCheck(x11463,-1);
if(!x11467.valid){
continue;
}
IkReal x11464=x11467.value;
IkReal x11465=((1.0)*x11464);
IkReal x11466=((((-1.0)*x11465*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11465*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11464)));
j4eval[0]=x11466;
j4eval[1]=IKsign(x11466);
j4eval[2]=r02;
j4eval[3]=x11463;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11468=((-1.0)*r10);
IkReal x11469=x11111;
CheckValue<IkReal> x11471 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11468),IKFAST_ATAN2_MAGTHRESH);
if(!x11471.valid){
continue;
}
IkReal x11470=((-1.0)*(x11471.value));
sj5=gconst41;
cj5=gconst42;
j5=x11470;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst40=x11470;
IkReal gconst41=(r11*x11469);
IkReal gconst42=(x11468*x11469);
IkReal x11472=r12*r12;
CheckValue<IkReal> x11475=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11472))),-1);
if(!x11475.valid){
continue;
}
IkReal x11473=x11475.value;
IkReal x11474=(x11472+(((2.0)*x11473*(r10*r10)*(r11*r11)))+((x11473*(r11*r11*r11*r11)))+((x11473*(r10*r10*r10*r10))));
j4eval[0]=x11474;
j4eval[1]=IKsign(x11474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11476=(gconst42*r10);
IkReal x11477=(cj1*cj2);
IkReal x11478=(sj1*sj2);
IkReal x11479=(gconst41*r11);
CheckValue<IkReal> x11480 = IKatan2WithCheck(IkReal((((x11476*x11477))+(((-1.0)*x11477*x11479))+(((-1.0)*x11476*x11478))+((x11478*x11479)))),IkReal((((r12*x11477))+(((-1.0)*r12*x11478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11480.valid){
continue;
}
CheckValue<IkReal> x11481=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11479*x11479)+(x11476*x11476)+(((-2.0)*x11476*x11479)))),-1);
if(!x11481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11480.value)+(((1.5707963267949)*(x11481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11482=IKcos(j4);
IkReal x11483=IKsin(j4);
IkReal x11484=(gconst41*r21);
IkReal x11485=(gconst42*r10);
IkReal x11486=(gconst42*r20);
IkReal x11487=(gconst42*r00);
IkReal x11488=((1.0)*x11483);
IkReal x11489=((1.0)*x11482);
IkReal x11490=(gconst41*x11482);
evalcond[0]=(((x11482*x11484))+((r22*x11483))+(((-1.0)*x11486*x11489)));
evalcond[1]=((((-1.0)*x11485*x11489))+((r11*x11490))+((r12*x11483)));
evalcond[2]=((((-1.0)*gconst41*r01*x11488))+((x11483*x11487))+((r02*x11482)));
evalcond[3]=((1.0)+((r02*x11483))+(((-1.0)*x11487*x11489))+((r01*x11490)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11483*x11486))+((r22*x11482))+(((-1.0)*x11484*x11488)));
evalcond[5]=(((x11483*x11485))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst41*r11*x11488))+((r12*x11482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11491=(gconst42*r00);
IkReal x11492=(gconst41*r01);
CheckValue<IkReal> x11493=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11491*x11491)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11492*x11492)))+(((2.0)*x11491*x11492)))),-1);
if(!x11493.valid){
continue;
}
CheckValue<IkReal> x11494 = IKatan2WithCheck(IkReal(r02),IkReal((x11492+(((-1.0)*x11491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11493.value)))+(x11494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11495=IKcos(j4);
IkReal x11496=IKsin(j4);
IkReal x11497=(gconst41*r21);
IkReal x11498=(gconst42*r10);
IkReal x11499=(gconst42*r20);
IkReal x11500=(gconst42*r00);
IkReal x11501=((1.0)*x11496);
IkReal x11502=((1.0)*x11495);
IkReal x11503=(gconst41*x11495);
evalcond[0]=(((r22*x11496))+((x11495*x11497))+(((-1.0)*x11499*x11502)));
evalcond[1]=((((-1.0)*x11498*x11502))+((r11*x11503))+((r12*x11496)));
evalcond[2]=(((x11496*x11500))+(((-1.0)*gconst41*r01*x11501))+((r02*x11495)));
evalcond[3]=((1.0)+(((-1.0)*x11500*x11502))+((r02*x11496))+((r01*x11503)));
evalcond[4]=(((r22*x11495))+((cj2*sj1))+((cj1*sj2))+((x11496*x11499))+(((-1.0)*x11497*x11501)));
evalcond[5]=((((-1.0)*gconst41*r11*x11501))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11495))+((x11496*x11498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11504 = IKatan2WithCheck(IkReal((((gconst41*r11))+(((-1.0)*gconst42*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11504.valid){
continue;
}
CheckValue<IkReal> x11505=IKPowWithIntegerCheck(IKsign((((gconst42*r21))+((gconst41*r20)))),-1);
if(!x11505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11504.value)+(((1.5707963267949)*(x11505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11506=IKcos(j4);
IkReal x11507=IKsin(j4);
IkReal x11508=(gconst41*r21);
IkReal x11509=(gconst42*r10);
IkReal x11510=(gconst42*r20);
IkReal x11511=(gconst42*r00);
IkReal x11512=((1.0)*x11507);
IkReal x11513=((1.0)*x11506);
IkReal x11514=(gconst41*x11506);
evalcond[0]=(((x11506*x11508))+(((-1.0)*x11510*x11513))+((r22*x11507)));
evalcond[1]=((((-1.0)*x11509*x11513))+((r12*x11507))+((r11*x11514)));
evalcond[2]=(((x11507*x11511))+(((-1.0)*gconst41*r01*x11512))+((r02*x11506)));
evalcond[3]=((1.0)+((r01*x11514))+(((-1.0)*x11511*x11513))+((r02*x11507)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11508*x11512))+((x11507*x11510))+((r22*x11506)));
evalcond[5]=(((x11507*x11509))+((r12*x11506))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst41*r11*x11512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11515=((-1.0)*r10);
IkReal x11516=x11111;
CheckValue<IkReal> x11518 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11515),IKFAST_ATAN2_MAGTHRESH);
if(!x11518.valid){
continue;
}
IkReal x11517=((-1.0)*(x11518.value));
sj5=gconst41;
cj5=gconst42;
j5=x11517;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst40=x11517;
IkReal gconst41=(r11*x11516);
IkReal gconst42=(x11515*x11516);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11519=((-1.0)*r10);
IkReal x11520=x11111;
CheckValue<IkReal> x11522 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11519),IKFAST_ATAN2_MAGTHRESH);
if(!x11522.valid){
continue;
}
IkReal x11521=((-1.0)*(x11522.value));
sj5=gconst41;
cj5=gconst42;
j5=x11521;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst40=x11521;
IkReal gconst41=(r11*x11520);
IkReal gconst42=(x11519*x11520);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11523=((-1.0)*r10);
IkReal x11524=x11111;
CheckValue<IkReal> x11526 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11523),IKFAST_ATAN2_MAGTHRESH);
if(!x11526.valid){
continue;
}
IkReal x11525=((-1.0)*(x11526.value));
sj5=gconst41;
cj5=gconst42;
j5=x11525;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst40=x11525;
IkReal gconst41=(r11*x11524);
IkReal gconst42=(x11523*x11524);
IkReal x11527=r12*r12;
CheckValue<IkReal> x11530=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11527))),-1);
if(!x11530.valid){
continue;
}
IkReal x11528=x11530.value;
IkReal x11529=(x11527+((x11528*(r10*r10*r10*r10)))+(((2.0)*x11528*(r10*r10)*(r11*r11)))+((x11528*(r11*r11*r11*r11))));
j4eval[0]=x11529;
j4eval[1]=IKsign(x11529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11531=(sj1*sj2);
IkReal x11532=(gconst41*r11);
IkReal x11533=(gconst42*r10);
IkReal x11534=((1.0)*cj1*cj2);
CheckValue<IkReal> x11535=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11532*x11532)+(((-2.0)*x11532*x11533))+(x11533*x11533))),-1);
if(!x11535.valid){
continue;
}
CheckValue<IkReal> x11536 = IKatan2WithCheck(IkReal((((x11531*x11533))+(((-1.0)*x11531*x11532))+(((-1.0)*x11533*x11534))+((cj1*cj2*x11532)))),IkReal(((((-1.0)*r12*x11534))+((r12*x11531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11535.value)))+(x11536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11537=IKcos(j4);
IkReal x11538=IKsin(j4);
IkReal x11539=(gconst41*r21);
IkReal x11540=(gconst42*r10);
IkReal x11541=(gconst42*r20);
IkReal x11542=(gconst42*r00);
IkReal x11543=((1.0)*x11538);
IkReal x11544=((1.0)*x11537);
IkReal x11545=(gconst41*x11537);
evalcond[0]=(((r22*x11538))+(((-1.0)*x11541*x11544))+((x11537*x11539)));
evalcond[1]=((((-1.0)*x11540*x11544))+((r12*x11538))+((r11*x11545)));
evalcond[2]=(((x11538*x11542))+(((-1.0)*gconst41*r01*x11543))+((r02*x11537)));
evalcond[3]=((-1.0)+((r01*x11545))+(((-1.0)*x11542*x11544))+((r02*x11538)));
evalcond[4]=(((cj2*sj1))+((r22*x11537))+((x11538*x11541))+((cj1*sj2))+(((-1.0)*x11539*x11543)));
evalcond[5]=(((r12*x11537))+((x11538*x11540))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst41*r11*x11543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11546=(gconst42*r00);
IkReal x11547=(gconst41*r01);
CheckValue<IkReal> x11548=IKPowWithIntegerCheck(IKsign(((x11547*x11547)+(x11546*x11546)+(r02*r02)+(((-2.0)*x11546*x11547)))),-1);
if(!x11548.valid){
continue;
}
CheckValue<IkReal> x11549 = IKatan2WithCheck(IkReal(r02),IkReal((x11547+(((-1.0)*x11546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11548.value)))+(x11549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11550=IKcos(j4);
IkReal x11551=IKsin(j4);
IkReal x11552=(gconst41*r21);
IkReal x11553=(gconst42*r10);
IkReal x11554=(gconst42*r20);
IkReal x11555=(gconst42*r00);
IkReal x11556=((1.0)*x11551);
IkReal x11557=((1.0)*x11550);
IkReal x11558=(gconst41*x11550);
evalcond[0]=((((-1.0)*x11554*x11557))+((x11550*x11552))+((r22*x11551)));
evalcond[1]=(((r12*x11551))+((r11*x11558))+(((-1.0)*x11553*x11557)));
evalcond[2]=((((-1.0)*gconst41*r01*x11556))+((x11551*x11555))+((r02*x11550)));
evalcond[3]=((-1.0)+(((-1.0)*x11555*x11557))+((r02*x11551))+((r01*x11558)));
evalcond[4]=(((cj2*sj1))+((x11551*x11554))+((r22*x11550))+((cj1*sj2))+(((-1.0)*x11552*x11556)));
evalcond[5]=(((r12*x11550))+((x11551*x11553))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst41*r11*x11556))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11559=((1.0)*gconst42);
CheckValue<IkReal> x11560 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x11559))+((gconst41*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11560.valid){
continue;
}
CheckValue<IkReal> x11561=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11559))+(((-1.0)*gconst41*r20)))),-1);
if(!x11561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11560.value)+(((1.5707963267949)*(x11561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11562=IKcos(j4);
IkReal x11563=IKsin(j4);
IkReal x11564=(gconst41*r21);
IkReal x11565=(gconst42*r10);
IkReal x11566=(gconst42*r20);
IkReal x11567=(gconst42*r00);
IkReal x11568=((1.0)*x11563);
IkReal x11569=((1.0)*x11562);
IkReal x11570=(gconst41*x11562);
evalcond[0]=((((-1.0)*x11566*x11569))+((x11562*x11564))+((r22*x11563)));
evalcond[1]=((((-1.0)*x11565*x11569))+((r11*x11570))+((r12*x11563)));
evalcond[2]=(((x11563*x11567))+(((-1.0)*gconst41*r01*x11568))+((r02*x11562)));
evalcond[3]=((-1.0)+((r01*x11570))+((r02*x11563))+(((-1.0)*x11567*x11569)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11563*x11566))+((r22*x11562))+(((-1.0)*x11564*x11568)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x11563*x11565))+(((-1.0)*gconst41*r11*x11568))+((r12*x11562))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11571=((-1.0)*r10);
IkReal x11572=((-1.0)*r11);
CheckValue<IkReal> x11574 = IKatan2WithCheck(IkReal(x11572),IkReal(x11571),IKFAST_ATAN2_MAGTHRESH);
if(!x11574.valid){
continue;
}
IkReal x11573=((-1.0)*(x11574.value));
sj5=gconst41;
cj5=gconst42;
j5=x11573;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11571);
rxp1_1=(px*r21);
rxp1_2=(px*x11572);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst40=x11573;
IkReal gconst41=r11;
IkReal gconst42=x11571;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11575=((-1.0)*r10);
IkReal x11576=((-1.0)*r11);
CheckValue<IkReal> x11578 = IKatan2WithCheck(IkReal(x11576),IkReal(x11575),IKFAST_ATAN2_MAGTHRESH);
if(!x11578.valid){
continue;
}
IkReal x11577=((-1.0)*(x11578.value));
sj5=gconst41;
cj5=gconst42;
j5=x11577;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11575);
rxp1_1=(px*r21);
rxp1_2=(px*x11576);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst40=x11577;
IkReal gconst41=r11;
IkReal gconst42=x11575;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11579=((-1.0)*r10);
IkReal x11580=((-1.0)*r11);
CheckValue<IkReal> x11582 = IKatan2WithCheck(IkReal(x11580),IkReal(x11579),IKFAST_ATAN2_MAGTHRESH);
if(!x11582.valid){
continue;
}
IkReal x11581=((-1.0)*(x11582.value));
sj5=gconst41;
cj5=gconst42;
j5=x11581;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11579);
rxp1_1=(px*r21);
rxp1_2=(px*x11580);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst40=x11581;
IkReal gconst41=r11;
IkReal gconst42=x11579;
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11585=IKPowWithIntegerCheck((((gconst42*r10))+(((-1.0)*gconst41*r11))),-1);
if(!x11585.valid){
continue;
}
IkReal x11583=x11585.value;
IkReal x11584=(cj0*x11583);
sj4array[0]=(((cj1*cj2*x11584))+(((-1.0)*sj1*sj2*x11584)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11586=IKcos(j4);
IkReal x11587=IKsin(j4);
IkReal x11588=(gconst41*r21);
IkReal x11589=((1.0)*gconst42*x11586);
evalcond[0]=(r02*x11586);
evalcond[1]=(cj0+((r02*x11587)));
evalcond[2]=(((x11586*x11588))+(((-1.0)*r20*x11589)));
evalcond[3]=(((gconst41*r11*x11586))+(((-1.0)*r10*x11589)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11587*x11588))+((gconst42*r20*x11587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11592=IKPowWithIntegerCheck((((gconst42*r20))+(((-1.0)*gconst41*r21))),-1);
if(!x11592.valid){
continue;
}
IkReal x11590=x11592.value;
IkReal x11591=((1.0)*x11590);
sj4array[0]=((((-1.0)*cj2*sj1*x11591))+(((-1.0)*cj1*sj2*x11591)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11593=IKcos(j4);
IkReal x11594=IKsin(j4);
IkReal x11595=(gconst42*r10);
IkReal x11596=(gconst41*r11);
IkReal x11597=((1.0)*x11593);
evalcond[0]=(r02*x11593);
evalcond[1]=(cj0+((r02*x11594)));
evalcond[2]=(((gconst41*r21*x11593))+(((-1.0)*gconst42*r20*x11597)));
evalcond[3]=((((-1.0)*x11595*x11597))+((x11593*x11596)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+((x11594*x11595))+(((-1.0)*x11594*x11596))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11598=IKPowWithIntegerCheck(r02,-1);
if(!x11598.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x11598.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11599=IKcos(j4);
IkReal x11600=IKsin(j4);
IkReal x11601=(gconst42*r10);
IkReal x11602=(gconst42*r20);
IkReal x11603=(gconst41*x11599);
IkReal x11604=((1.0)*x11599);
IkReal x11605=((1.0)*gconst41*x11600);
evalcond[0]=(r02*x11599);
evalcond[1]=((((-1.0)*x11602*x11604))+((r21*x11603)));
evalcond[2]=(((r11*x11603))+(((-1.0)*x11601*x11604)));
evalcond[3]=((((-1.0)*r21*x11605))+((cj2*sj1))+((cj1*sj2))+((x11600*x11602)));
evalcond[4]=((((-1.0)*cj0*cj1*cj2))+(((-1.0)*r11*x11605))+((x11600*x11601))+((cj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11606=((-1.0)*r10);
IkReal x11607=x11111;
CheckValue<IkReal> x11609 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11606),IKFAST_ATAN2_MAGTHRESH);
if(!x11609.valid){
continue;
}
IkReal x11608=((-1.0)*(x11609.value));
sj5=gconst41;
cj5=gconst42;
j5=x11608;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst40=x11608;
IkReal gconst41=(r11*x11607);
IkReal gconst42=(x11606*x11607);
IkReal x11610=r12*r12;
IkReal x11611=(r02*sj0);
IkReal x11612=((1.0)*x11610);
CheckValue<IkReal> x11616=IKPowWithIntegerCheck(((-1.0)+x11610),-1);
if(!x11616.valid){
continue;
}
IkReal x11613=x11616.value;
if((((1.0)+(((-1.0)*x11612)))) < -0.00001)
continue;
IkReal x11614=IKsqrt(((1.0)+(((-1.0)*x11612))));
IkReal x11615=(cj0*x11613*x11614);
j4eval[0]=((IKabs((x11615+((r12*x11611*x11613*x11614))+(((-1.0)*x11612*x11615)))))+(IKabs(((((-1.0)*x11611))+((cj0*r12))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11617=(gconst41*r01);
IkReal x11618=((1.0)*r02);
IkReal x11619=(gconst42*r00);
IkReal x11620=(sj0*sj1*sj2);
IkReal x11621=(cj1*cj2*sj0);
CheckValue<IkReal> x11622 = IKatan2WithCheck(IkReal((((x11617*x11621))+(((-1.0)*cj0*x11618))+((x11619*x11620))+(((-1.0)*x11617*x11620))+(((-1.0)*x11619*x11621)))),IkReal((((cj0*x11619))+((r02*x11620))+(((-1.0)*x11618*x11621))+(((-1.0)*cj0*x11617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11622.valid){
continue;
}
CheckValue<IkReal> x11623=IKPowWithIntegerCheck(IKsign(((x11617*x11617)+(((-2.0)*x11617*x11619))+(r02*r02)+(x11619*x11619))),-1);
if(!x11623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11622.value)+(((1.5707963267949)*(x11623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11624=IKcos(j4);
IkReal x11625=IKsin(j4);
IkReal x11626=(gconst41*r21);
IkReal x11627=(cj1*cj2);
IkReal x11628=(sj1*sj2);
IkReal x11629=(gconst42*r10);
IkReal x11630=((1.0)*x11625);
IkReal x11631=(gconst41*x11624);
IkReal x11632=(gconst42*x11625);
IkReal x11633=((1.0)*gconst42*x11624);
evalcond[0]=(((x11624*x11626))+(((-1.0)*r20*x11633)));
evalcond[1]=(cj0+((r02*x11625))+(((-1.0)*r00*x11633))+((r01*x11631)));
evalcond[2]=(((r11*x11631))+((r12*x11625))+(((-1.0)*x11624*x11629))+sj0);
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x11632))+(((-1.0)*x11626*x11630)));
evalcond[4]=((((-1.0)*gconst41*r01*x11630))+((sj0*x11627))+((r02*x11624))+((r00*x11632))+(((-1.0)*sj0*x11628)));
evalcond[5]=(((x11625*x11629))+((r12*x11624))+(((-1.0)*gconst41*r11*x11630))+((cj0*x11628))+(((-1.0)*cj0*x11627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11634=((1.0)*sj0);
IkReal x11635=((1.0)*gconst41);
CheckValue<IkReal> x11636 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x11635))+((gconst41*r01*sj0))+((cj0*gconst42*r10))+(((-1.0)*gconst42*r00*x11634)))),IkReal(((((-1.0)*r02*x11634))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11636.valid){
continue;
}
CheckValue<IkReal> x11637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11635))+(((-1.0)*gconst42*r21)))),-1);
if(!x11637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11636.value)+(((1.5707963267949)*(x11637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11638=IKcos(j4);
IkReal x11639=IKsin(j4);
IkReal x11640=(gconst41*r21);
IkReal x11641=(cj1*cj2);
IkReal x11642=(sj1*sj2);
IkReal x11643=(gconst42*r10);
IkReal x11644=((1.0)*x11639);
IkReal x11645=(gconst41*x11638);
IkReal x11646=(gconst42*x11639);
IkReal x11647=((1.0)*gconst42*x11638);
evalcond[0]=((((-1.0)*r20*x11647))+((x11638*x11640)));
evalcond[1]=(cj0+((r02*x11639))+(((-1.0)*r00*x11647))+((r01*x11645)));
evalcond[2]=(((r11*x11645))+sj0+((r12*x11639))+(((-1.0)*x11638*x11643)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x11640*x11644))+((cj1*sj2))+((r20*x11646)));
evalcond[4]=((((-1.0)*gconst41*r01*x11644))+(((-1.0)*sj0*x11642))+((sj0*x11641))+((r02*x11638))+((r00*x11646)));
evalcond[5]=(((r12*x11638))+(((-1.0)*gconst41*r11*x11644))+((cj0*x11642))+((x11639*x11643))+(((-1.0)*cj0*x11641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11648=(cj2*sj1);
IkReal x11649=(gconst42*r20);
IkReal x11650=(cj1*sj2);
IkReal x11651=((1.0)*r22);
IkReal x11652=(gconst41*r21);
CheckValue<IkReal> x11653 = IKatan2WithCheck(IkReal(((((-1.0)*x11649*x11650))+(((-1.0)*x11648*x11649))+((x11650*x11652))+((x11648*x11652)))),IkReal(((((-1.0)*x11650*x11651))+(((-1.0)*x11648*x11651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11653.valid){
continue;
}
CheckValue<IkReal> x11654=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11649*x11652))+(r22*r22)+(x11649*x11649)+(x11652*x11652))),-1);
if(!x11654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11653.value)+(((1.5707963267949)*(x11654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11655=IKcos(j4);
IkReal x11656=IKsin(j4);
IkReal x11657=(gconst41*r21);
IkReal x11658=(cj1*cj2);
IkReal x11659=(sj1*sj2);
IkReal x11660=(gconst42*r10);
IkReal x11661=((1.0)*x11656);
IkReal x11662=(gconst41*x11655);
IkReal x11663=(gconst42*x11656);
IkReal x11664=((1.0)*gconst42*x11655);
evalcond[0]=((((-1.0)*r20*x11664))+((r22*x11656))+((x11655*x11657)));
evalcond[1]=(cj0+(((-1.0)*r00*x11664))+((r02*x11656))+((r01*x11662)));
evalcond[2]=(sj0+((r12*x11656))+(((-1.0)*x11655*x11660))+((r11*x11662)));
evalcond[3]=(((cj2*sj1))+((r20*x11663))+((cj1*sj2))+((r22*x11655))+(((-1.0)*x11657*x11661)));
evalcond[4]=((((-1.0)*sj0*x11659))+(((-1.0)*gconst41*r01*x11661))+((r02*x11655))+((sj0*x11658))+((r00*x11663)));
evalcond[5]=(((r12*x11655))+((cj0*x11659))+(((-1.0)*gconst41*r11*x11661))+(((-1.0)*cj0*x11658))+((x11656*x11660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11665=((1.0)*sj0);
IkReal x11666=((1.0)*gconst41);
CheckValue<IkReal> x11667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11666))+(((-1.0)*gconst42*r21)))),-1);
if(!x11667.valid){
continue;
}
CheckValue<IkReal> x11668 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x11666))+((gconst41*r01*sj0))+((cj0*gconst42*r10))+(((-1.0)*gconst42*r00*x11665)))),IkReal(((((-1.0)*r02*x11665))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11667.value)))+(x11668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11669=IKcos(j4);
IkReal x11670=IKsin(j4);
IkReal x11671=(gconst41*r21);
IkReal x11672=(cj1*cj2);
IkReal x11673=(sj1*sj2);
IkReal x11674=(gconst42*r10);
IkReal x11675=((1.0)*x11670);
IkReal x11676=(gconst41*x11669);
IkReal x11677=(gconst42*x11670);
IkReal x11678=((1.0)*gconst42*x11669);
evalcond[0]=(((r22*x11670))+(((-1.0)*r20*x11678))+((x11669*x11671)));
evalcond[1]=(cj0+((r02*x11670))+((r01*x11676))+(((-1.0)*r00*x11678)));
evalcond[2]=(sj0+(((-1.0)*x11669*x11674))+((r12*x11670))+((r11*x11676)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x11671*x11675))+((cj1*sj2))+((r20*x11677))+((r22*x11669)));
evalcond[4]=((((-1.0)*sj0*x11673))+((r00*x11677))+(((-1.0)*gconst41*r01*x11675))+((sj0*x11672))+((r02*x11669)));
evalcond[5]=(((cj0*x11673))+((x11670*x11674))+(((-1.0)*gconst41*r11*x11675))+(((-1.0)*cj0*x11672))+((r12*x11669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11679=IKPowWithIntegerCheck(IKsign((((gconst42*r01))+((gconst41*r00)))),-1);
if(!x11679.valid){
continue;
}
CheckValue<IkReal> x11680 = IKatan2WithCheck(IkReal(((((-1.0)*gconst42*r20*sj0))+((gconst41*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x11680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11679.value)))+(x11680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11681=IKcos(j4);
IkReal x11682=IKsin(j4);
IkReal x11683=(gconst41*r21);
IkReal x11684=(cj1*cj2);
IkReal x11685=(sj1*sj2);
IkReal x11686=(gconst42*r10);
IkReal x11687=((1.0)*x11682);
IkReal x11688=(gconst41*x11681);
IkReal x11689=(gconst42*x11682);
IkReal x11690=((1.0)*gconst42*x11681);
evalcond[0]=((((-1.0)*r20*x11690))+((r22*x11682))+((x11681*x11683)));
evalcond[1]=(cj0+((r02*x11682))+(((-1.0)*r00*x11690))+((r01*x11688)));
evalcond[2]=(((r12*x11682))+sj0+((r11*x11688))+(((-1.0)*x11681*x11686)));
evalcond[3]=(((cj2*sj1))+((r22*x11681))+((cj1*sj2))+(((-1.0)*x11683*x11687))+((r20*x11689)));
evalcond[4]=((((-1.0)*gconst41*r01*x11687))+((r00*x11689))+((sj0*x11684))+((r02*x11681))+(((-1.0)*sj0*x11685)));
evalcond[5]=((((-1.0)*gconst41*r11*x11687))+((r12*x11681))+((x11682*x11686))+((cj0*x11685))+(((-1.0)*cj0*x11684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11691=((-1.0)*r10);
IkReal x11692=x11111;
CheckValue<IkReal> x11694 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11691),IKFAST_ATAN2_MAGTHRESH);
if(!x11694.valid){
continue;
}
IkReal x11693=((-1.0)*(x11694.value));
sj5=gconst41;
cj5=gconst42;
j5=x11693;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst40=x11693;
IkReal gconst41=(r11*x11692);
IkReal gconst42=(x11691*x11692);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11695=((-1.0)*r10);
IkReal x11696=x11111;
CheckValue<IkReal> x11698 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11695),IKFAST_ATAN2_MAGTHRESH);
if(!x11698.valid){
continue;
}
IkReal x11697=((-1.0)*(x11698.value));
sj5=gconst41;
cj5=gconst42;
j5=x11697;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst40=x11697;
IkReal gconst41=(r11*x11696);
IkReal gconst42=(x11695*x11696);
CheckValue<IkReal> x11706=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11706.valid){
continue;
}
IkReal x11699=x11706.value;
IkReal x11700=(cj3*x11699);
IkReal x11701=(r00*x11700);
IkReal x11702=(r21*x11700);
IkReal x11703=(r20*x11700);
IkReal x11704=(r01*x11700);
IkReal x11705=(r10*r11*x11700);
j4eval[0]=IKsign((((r01*r10*r11*x11703))+((r20*x11701*(r10*r10)))+((r10*r11*r21*x11701))+((cj3*r02*r22))+((r01*x11702*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11707=gconst41*gconst41;
IkReal x11708=gconst42*gconst42;
IkReal x11709=((1.0)*sj3);
IkReal x11710=((1.0)*r00);
IkReal x11711=(r01*r21);
IkReal x11712=(r00*r21);
IkReal x11713=(r20*x11708);
IkReal x11714=((1.0)*cj3*r01);
IkReal x11715=(cj3*gconst41*gconst42);
IkReal x11716=(gconst41*gconst42*sj3);
CheckValue<IkReal> x11717=IKPowWithIntegerCheck(IKsign((((x11712*x11716))+((r01*r20*x11716))+(((-1.0)*x11707*x11709*x11711))+(((-1.0)*r00*x11709*x11713))+(((-1.0)*r02*r22*x11709)))),-1);
if(!x11717.valid){
continue;
}
CheckValue<IkReal> x11718 = IKatan2WithCheck(IkReal((((cj3*x11707*x11712))+(((-1.0)*x11713*x11714))+(((-1.0)*r20*x11710*x11715))+((x11711*x11715)))),IkReal(((((-1.0)*gconst42*r22*x11714))+(((-1.0)*cj3*gconst41*r22*x11710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11717.value)))+(x11718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11719=IKcos(j4);
IkReal x11720=IKsin(j4);
IkReal x11721=(sj1*sj2);
IkReal x11722=(gconst41*r11);
IkReal x11723=(gconst42*sj3);
IkReal x11724=(gconst42*r10);
IkReal x11725=(gconst41*sj3);
IkReal x11726=((1.0)*cj1);
IkReal x11727=(gconst42*r20);
IkReal x11728=(cj2*sj1);
IkReal x11729=(cj3*gconst41);
IkReal x11730=(cj3*gconst42);
IkReal x11731=(gconst42*r00);
IkReal x11732=((1.0)*gconst41);
IkReal x11733=(cj2*x11726);
IkReal x11734=(cj3*x11720);
IkReal x11735=(cj3*x11719);
IkReal x11736=(gconst41*x11719);
IkReal x11737=((1.0)*x11720);
IkReal x11738=((1.0)*x11719);
IkReal x11739=(sj3*x11738);
evalcond[0]=(((r21*x11736))+((r22*x11720))+(((-1.0)*x11727*x11738)));
evalcond[1]=(((r12*x11720))+((x11719*x11722))+(((-1.0)*x11724*x11738)));
evalcond[2]=((1.0)+((r01*x11736))+((r02*x11720))+(((-1.0)*x11731*x11738)));
evalcond[3]=(((r00*x11725))+((r01*x11723))+((r02*x11735))+(((-1.0)*r01*x11729*x11737))+((r00*x11720*x11730)));
evalcond[4]=(((r01*x11730))+((r01*x11720*x11725))+((r00*x11729))+(((-1.0)*r00*x11723*x11737))+(((-1.0)*r02*x11739)));
evalcond[5]=(x11728+(((-1.0)*r20*x11723*x11737))+((cj1*sj2))+((r21*x11720*x11725))+((r20*x11729))+(((-1.0)*r22*x11739))+((r21*x11730)));
evalcond[6]=(x11721+((x11727*x11734))+(((-1.0)*x11733))+((r20*x11725))+(((-1.0)*r21*x11729*x11737))+((r21*x11723))+((r22*x11735)));
evalcond[7]=(x11721+((r11*x11730))+((sj3*x11720*x11722))+(((-1.0)*x11733))+(((-1.0)*r12*x11739))+(((-1.0)*r10*x11723*x11737))+((r10*x11729)));
evalcond[8]=((((-1.0)*sj2*x11726))+(((-1.0)*x11728))+(((-1.0)*x11722*x11734))+((r10*x11725))+((x11724*x11734))+((r12*x11735))+((r11*x11723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11740=gconst41*gconst41;
IkReal x11741=gconst42*gconst42;
IkReal x11742=(cj3*r20);
IkReal x11743=(gconst41*sj3);
IkReal x11744=((1.0)*r00);
IkReal x11745=(r01*r21);
IkReal x11746=((1.0)*r01);
IkReal x11747=(gconst41*gconst42);
CheckValue<IkReal> x11748 = IKatan2WithCheck(IkReal((((gconst42*x11743*x11745))+(((-1.0)*r20*sj3*x11741*x11746))+(((-1.0)*gconst42*r20*x11743*x11744))+((r00*r21*sj3*x11740)))),IkReal(((((-1.0)*r22*x11743*x11744))+(((-1.0)*gconst42*r22*sj3*x11746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11748.valid){
continue;
}
CheckValue<IkReal> x11749=IKPowWithIntegerCheck(IKsign((((r00*x11741*x11742))+(((-1.0)*cj3*r21*x11744*x11747))+((cj3*x11740*x11745))+(((-1.0)*x11742*x11746*x11747))+((cj3*r02*r22)))),-1);
if(!x11749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11748.value)+(((1.5707963267949)*(x11749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11750=IKcos(j4);
IkReal x11751=IKsin(j4);
IkReal x11752=(sj1*sj2);
IkReal x11753=(gconst41*r11);
IkReal x11754=(gconst42*sj3);
IkReal x11755=(gconst42*r10);
IkReal x11756=(gconst41*sj3);
IkReal x11757=((1.0)*cj1);
IkReal x11758=(gconst42*r20);
IkReal x11759=(cj2*sj1);
IkReal x11760=(cj3*gconst41);
IkReal x11761=(cj3*gconst42);
IkReal x11762=(gconst42*r00);
IkReal x11763=((1.0)*gconst41);
IkReal x11764=(cj2*x11757);
IkReal x11765=(cj3*x11751);
IkReal x11766=(cj3*x11750);
IkReal x11767=(gconst41*x11750);
IkReal x11768=((1.0)*x11751);
IkReal x11769=((1.0)*x11750);
IkReal x11770=(sj3*x11769);
evalcond[0]=((((-1.0)*x11758*x11769))+((r22*x11751))+((r21*x11767)));
evalcond[1]=((((-1.0)*x11755*x11769))+((r12*x11751))+((x11750*x11753)));
evalcond[2]=((1.0)+((r02*x11751))+(((-1.0)*x11762*x11769))+((r01*x11767)));
evalcond[3]=(((r02*x11766))+(((-1.0)*r01*x11760*x11768))+((r00*x11751*x11761))+((r01*x11754))+((r00*x11756)));
evalcond[4]=(((r01*x11751*x11756))+(((-1.0)*r02*x11770))+(((-1.0)*r00*x11754*x11768))+((r00*x11760))+((r01*x11761)));
evalcond[5]=(x11759+((r20*x11760))+((cj1*sj2))+((r21*x11751*x11756))+(((-1.0)*r22*x11770))+(((-1.0)*r20*x11754*x11768))+((r21*x11761)));
evalcond[6]=(x11752+(((-1.0)*r21*x11760*x11768))+((r22*x11766))+(((-1.0)*x11764))+((x11758*x11765))+((r21*x11754))+((r20*x11756)));
evalcond[7]=(x11752+((r11*x11761))+(((-1.0)*r10*x11754*x11768))+((r10*x11760))+(((-1.0)*r12*x11770))+((sj3*x11751*x11753))+(((-1.0)*x11764)));
evalcond[8]=(((r11*x11754))+((r10*x11756))+(((-1.0)*x11753*x11765))+((r12*x11766))+(((-1.0)*sj2*x11757))+(((-1.0)*x11759))+((x11755*x11765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11771 = IKatan2WithCheck(IkReal((((gconst41*r11))+(((-1.0)*gconst42*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11771.valid){
continue;
}
CheckValue<IkReal> x11772=IKPowWithIntegerCheck(IKsign((((gconst42*r21))+((gconst41*r20)))),-1);
if(!x11772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11771.value)+(((1.5707963267949)*(x11772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11773=IKcos(j4);
IkReal x11774=IKsin(j4);
IkReal x11775=(sj1*sj2);
IkReal x11776=(gconst41*r11);
IkReal x11777=(gconst42*sj3);
IkReal x11778=(gconst42*r10);
IkReal x11779=(gconst41*sj3);
IkReal x11780=((1.0)*cj1);
IkReal x11781=(gconst42*r20);
IkReal x11782=(cj2*sj1);
IkReal x11783=(cj3*gconst41);
IkReal x11784=(cj3*gconst42);
IkReal x11785=(gconst42*r00);
IkReal x11786=((1.0)*gconst41);
IkReal x11787=(cj2*x11780);
IkReal x11788=(cj3*x11774);
IkReal x11789=(cj3*x11773);
IkReal x11790=(gconst41*x11773);
IkReal x11791=((1.0)*x11774);
IkReal x11792=((1.0)*x11773);
IkReal x11793=(sj3*x11792);
evalcond[0]=((((-1.0)*x11781*x11792))+((r21*x11790))+((r22*x11774)));
evalcond[1]=(((r12*x11774))+(((-1.0)*x11778*x11792))+((x11773*x11776)));
evalcond[2]=((1.0)+(((-1.0)*x11785*x11792))+((r02*x11774))+((r01*x11790)));
evalcond[3]=(((r00*x11774*x11784))+((r02*x11789))+(((-1.0)*r01*x11783*x11791))+((r01*x11777))+((r00*x11779)));
evalcond[4]=((((-1.0)*r00*x11777*x11791))+((r01*x11774*x11779))+(((-1.0)*r02*x11793))+((r00*x11783))+((r01*x11784)));
evalcond[5]=(((r21*x11784))+x11782+((r20*x11783))+((cj1*sj2))+(((-1.0)*r20*x11777*x11791))+(((-1.0)*r22*x11793))+((r21*x11774*x11779)));
evalcond[6]=(x11775+((r20*x11779))+(((-1.0)*r21*x11783*x11791))+((r22*x11789))+((r21*x11777))+(((-1.0)*x11787))+((x11781*x11788)));
evalcond[7]=(((r11*x11784))+x11775+((r10*x11783))+(((-1.0)*r12*x11793))+((sj3*x11774*x11776))+(((-1.0)*x11787))+(((-1.0)*r10*x11777*x11791)));
evalcond[8]=((((-1.0)*sj2*x11780))+((r10*x11779))+((r12*x11789))+(((-1.0)*x11782))+((r11*x11777))+(((-1.0)*x11776*x11788))+((x11778*x11788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11794=((-1.0)*r10);
IkReal x11795=x11111;
CheckValue<IkReal> x11797 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11794),IKFAST_ATAN2_MAGTHRESH);
if(!x11797.valid){
continue;
}
IkReal x11796=((-1.0)*(x11797.value));
sj5=gconst41;
cj5=gconst42;
j5=x11796;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst40=x11796;
IkReal gconst41=(r11*x11795);
IkReal gconst42=(x11794*x11795);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11798=((-1.0)*r10);
IkReal x11799=x11111;
CheckValue<IkReal> x11801 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11798),IKFAST_ATAN2_MAGTHRESH);
if(!x11801.valid){
continue;
}
IkReal x11800=((-1.0)*(x11801.value));
sj5=gconst41;
cj5=gconst42;
j5=x11800;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst40=x11800;
IkReal gconst41=(r11*x11799);
IkReal gconst42=(x11798*x11799);
CheckValue<IkReal> x11809=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11809.valid){
continue;
}
IkReal x11802=x11809.value;
IkReal x11803=(cj3*x11802);
IkReal x11804=(r00*x11803);
IkReal x11805=(r21*x11803);
IkReal x11806=(r20*x11803);
IkReal x11807=(r01*x11803);
IkReal x11808=(r10*r11*x11803);
j4eval[0]=IKsign((((r01*r10*r11*x11806))+((r01*x11805*(r11*r11)))+((r10*r11*r21*x11804))+((cj3*r02*r22))+((r20*x11804*(r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11810=gconst41*gconst41;
IkReal x11811=gconst42*gconst42;
IkReal x11812=((1.0)*sj3);
IkReal x11813=((1.0)*r00);
IkReal x11814=(r01*r21);
IkReal x11815=(r00*r21);
IkReal x11816=(r20*x11811);
IkReal x11817=((1.0)*cj3*r01);
IkReal x11818=(cj3*gconst41*gconst42);
IkReal x11819=(gconst41*gconst42*sj3);
CheckValue<IkReal> x11820=IKPowWithIntegerCheck(IKsign((((x11815*x11819))+(((-1.0)*r02*r22*x11812))+(((-1.0)*x11810*x11812*x11814))+((r01*r20*x11819))+(((-1.0)*r00*x11812*x11816)))),-1);
if(!x11820.valid){
continue;
}
CheckValue<IkReal> x11821 = IKatan2WithCheck(IkReal((((x11814*x11818))+(((-1.0)*x11816*x11817))+((cj3*x11810*x11815))+(((-1.0)*r20*x11813*x11818)))),IkReal(((((-1.0)*cj3*gconst41*r22*x11813))+(((-1.0)*gconst42*r22*x11817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11820.value)))+(x11821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11822=IKcos(j4);
IkReal x11823=IKsin(j4);
IkReal x11824=(cj2*sj1);
IkReal x11825=(cj1*sj2);
IkReal x11826=(gconst42*sj3);
IkReal x11827=(sj1*sj2);
IkReal x11828=(gconst42*r10);
IkReal x11829=(gconst41*sj3);
IkReal x11830=(gconst41*r11);
IkReal x11831=(cj1*cj2);
IkReal x11832=(gconst42*r20);
IkReal x11833=(cj3*gconst41);
IkReal x11834=(cj3*gconst42);
IkReal x11835=(gconst42*r00);
IkReal x11836=((1.0)*sj3);
IkReal x11837=((1.0)*gconst41);
IkReal x11838=(cj3*x11823);
IkReal x11839=(r22*x11822);
IkReal x11840=(gconst41*x11822);
IkReal x11841=((1.0)*x11823);
IkReal x11842=(r12*x11822);
IkReal x11843=((1.0)*x11822);
IkReal x11844=(r02*x11822);
IkReal x11845=(x11825+x11824);
evalcond[0]=(((r21*x11840))+((r22*x11823))+(((-1.0)*x11832*x11843)));
evalcond[1]=(((x11822*x11830))+((r12*x11823))+(((-1.0)*x11828*x11843)));
evalcond[2]=((-1.0)+(((-1.0)*x11835*x11843))+((r02*x11823))+((r01*x11840)));
evalcond[3]=((((-1.0)*r01*x11833*x11841))+((r00*x11823*x11834))+((cj3*x11844))+((r01*x11826))+((r00*x11829)));
evalcond[4]=(((r01*x11823*x11829))+(((-1.0)*x11836*x11844))+(((-1.0)*r00*x11826*x11841))+((r00*x11833))+((r01*x11834)));
evalcond[5]=(((r10*x11829))+((cj3*x11842))+((x11828*x11838))+((r11*x11826))+x11845+(((-1.0)*x11830*x11838)));
evalcond[6]=(((r21*x11834))+((r21*x11823*x11829))+(((-1.0)*x11836*x11839))+(((-1.0)*r20*x11826*x11841))+((r20*x11833))+x11845);
evalcond[7]=(((x11832*x11838))+(((-1.0)*x11831))+((r20*x11829))+(((-1.0)*r21*x11833*x11841))+((r21*x11826))+((cj3*x11839))+x11827);
evalcond[8]=((((-1.0)*x11827))+((r11*x11834))+((r10*x11833))+(((-1.0)*x11836*x11842))+((r11*x11823*x11829))+(((-1.0)*r10*x11826*x11841))+x11831);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11846=gconst41*gconst41;
IkReal x11847=gconst42*gconst42;
IkReal x11848=(cj3*r20);
IkReal x11849=(gconst41*sj3);
IkReal x11850=((1.0)*r00);
IkReal x11851=(r01*r21);
IkReal x11852=((1.0)*r01);
IkReal x11853=(gconst41*gconst42);
CheckValue<IkReal> x11854=IKPowWithIntegerCheck(IKsign((((r00*x11847*x11848))+((cj3*x11846*x11851))+(((-1.0)*x11848*x11852*x11853))+(((-1.0)*cj3*r21*x11850*x11853))+((cj3*r02*r22)))),-1);
if(!x11854.valid){
continue;
}
CheckValue<IkReal> x11855 = IKatan2WithCheck(IkReal(((((-1.0)*gconst42*r20*x11849*x11850))+((gconst42*x11849*x11851))+(((-1.0)*r20*sj3*x11847*x11852))+((r00*r21*sj3*x11846)))),IkReal(((((-1.0)*r22*x11849*x11850))+(((-1.0)*gconst42*r22*sj3*x11852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11854.value)))+(x11855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11856=IKcos(j4);
IkReal x11857=IKsin(j4);
IkReal x11858=(cj2*sj1);
IkReal x11859=(cj1*sj2);
IkReal x11860=(gconst42*sj3);
IkReal x11861=(sj1*sj2);
IkReal x11862=(gconst42*r10);
IkReal x11863=(gconst41*sj3);
IkReal x11864=(gconst41*r11);
IkReal x11865=(cj1*cj2);
IkReal x11866=(gconst42*r20);
IkReal x11867=(cj3*gconst41);
IkReal x11868=(cj3*gconst42);
IkReal x11869=(gconst42*r00);
IkReal x11870=((1.0)*sj3);
IkReal x11871=((1.0)*gconst41);
IkReal x11872=(cj3*x11857);
IkReal x11873=(r22*x11856);
IkReal x11874=(gconst41*x11856);
IkReal x11875=((1.0)*x11857);
IkReal x11876=(r12*x11856);
IkReal x11877=((1.0)*x11856);
IkReal x11878=(r02*x11856);
IkReal x11879=(x11858+x11859);
evalcond[0]=((((-1.0)*x11866*x11877))+((r22*x11857))+((r21*x11874)));
evalcond[1]=((((-1.0)*x11862*x11877))+((r12*x11857))+((x11856*x11864)));
evalcond[2]=((-1.0)+((r01*x11874))+(((-1.0)*x11869*x11877))+((r02*x11857)));
evalcond[3]=((((-1.0)*r01*x11867*x11875))+((r00*x11863))+((r01*x11860))+((r00*x11857*x11868))+((cj3*x11878)));
evalcond[4]=((((-1.0)*x11870*x11878))+((r00*x11867))+((r01*x11868))+(((-1.0)*r00*x11860*x11875))+((r01*x11857*x11863)));
evalcond[5]=((((-1.0)*x11864*x11872))+((x11862*x11872))+((r11*x11860))+((r10*x11863))+((cj3*x11876))+x11879);
evalcond[6]=((((-1.0)*r20*x11860*x11875))+((r21*x11857*x11863))+((r20*x11867))+(((-1.0)*x11870*x11873))+x11879+((r21*x11868)));
evalcond[7]=((((-1.0)*x11865))+((r20*x11863))+((x11866*x11872))+(((-1.0)*r21*x11867*x11875))+((cj3*x11873))+x11861+((r21*x11860)));
evalcond[8]=((((-1.0)*x11861))+(((-1.0)*r10*x11860*x11875))+((r11*x11857*x11863))+(((-1.0)*x11870*x11876))+((r11*x11868))+((r10*x11867))+x11865);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11880=((1.0)*gconst42);
CheckValue<IkReal> x11881=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst41*r20))+(((-1.0)*r21*x11880)))),-1);
if(!x11881.valid){
continue;
}
CheckValue<IkReal> x11882 = IKatan2WithCheck(IkReal((((gconst41*r11))+(((-1.0)*r10*x11880)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11881.value)))+(x11882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11883=IKcos(j4);
IkReal x11884=IKsin(j4);
IkReal x11885=(cj2*sj1);
IkReal x11886=(cj1*sj2);
IkReal x11887=(gconst42*sj3);
IkReal x11888=(sj1*sj2);
IkReal x11889=(gconst42*r10);
IkReal x11890=(gconst41*sj3);
IkReal x11891=(gconst41*r11);
IkReal x11892=(cj1*cj2);
IkReal x11893=(gconst42*r20);
IkReal x11894=(cj3*gconst41);
IkReal x11895=(cj3*gconst42);
IkReal x11896=(gconst42*r00);
IkReal x11897=((1.0)*sj3);
IkReal x11898=((1.0)*gconst41);
IkReal x11899=(cj3*x11884);
IkReal x11900=(r22*x11883);
IkReal x11901=(gconst41*x11883);
IkReal x11902=((1.0)*x11884);
IkReal x11903=(r12*x11883);
IkReal x11904=((1.0)*x11883);
IkReal x11905=(r02*x11883);
IkReal x11906=(x11885+x11886);
evalcond[0]=((((-1.0)*x11893*x11904))+((r22*x11884))+((r21*x11901)));
evalcond[1]=(((x11883*x11891))+(((-1.0)*x11889*x11904))+((r12*x11884)));
evalcond[2]=((-1.0)+((r01*x11901))+(((-1.0)*x11896*x11904))+((r02*x11884)));
evalcond[3]=(((cj3*x11905))+((r01*x11887))+((r00*x11890))+((r00*x11884*x11895))+(((-1.0)*r01*x11894*x11902)));
evalcond[4]=((((-1.0)*x11897*x11905))+((r01*x11895))+((r00*x11894))+((r01*x11884*x11890))+(((-1.0)*r00*x11887*x11902)));
evalcond[5]=(x11906+((cj3*x11903))+((x11889*x11899))+((r10*x11890))+(((-1.0)*x11891*x11899))+((r11*x11887)));
evalcond[6]=(x11906+(((-1.0)*x11897*x11900))+((r21*x11895))+(((-1.0)*r20*x11887*x11902))+((r20*x11894))+((r21*x11884*x11890)));
evalcond[7]=(((cj3*x11900))+((r21*x11887))+(((-1.0)*x11892))+((x11893*x11899))+((r20*x11890))+x11888+(((-1.0)*r21*x11894*x11902)));
evalcond[8]=((((-1.0)*r10*x11887*x11902))+(((-1.0)*x11888))+(((-1.0)*x11897*x11903))+((r10*x11894))+((r11*x11884*x11890))+((r11*x11895))+x11892);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11907=((-1.0)*r10);
IkReal x11908=((-1.0)*r11);
CheckValue<IkReal> x11910 = IKatan2WithCheck(IkReal(x11908),IkReal(x11907),IKFAST_ATAN2_MAGTHRESH);
if(!x11910.valid){
continue;
}
IkReal x11909=((-1.0)*(x11910.value));
sj5=gconst41;
cj5=gconst42;
j5=x11909;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11907);
rxp1_1=(px*r21);
rxp1_2=(px*x11908);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst40=x11909;
IkReal gconst41=r11;
IkReal gconst42=x11907;
j4eval[0]=r02;
j4eval[1]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11911=((-1.0)*r10);
IkReal x11912=((-1.0)*r11);
CheckValue<IkReal> x11914 = IKatan2WithCheck(IkReal(x11912),IkReal(x11911),IKFAST_ATAN2_MAGTHRESH);
if(!x11914.valid){
continue;
}
IkReal x11913=((-1.0)*(x11914.value));
sj5=gconst41;
cj5=gconst42;
j5=x11913;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11911);
rxp1_1=(px*r21);
rxp1_2=(px*x11912);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst40=x11913;
IkReal gconst41=r11;
IkReal gconst42=x11911;
j4eval[0]=(((r11*r21*sj3))+((r10*r20*sj3)));
j4eval[1]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11915=((-1.0)*r10);
IkReal x11916=((-1.0)*r11);
CheckValue<IkReal> x11918 = IKatan2WithCheck(IkReal(x11916),IkReal(x11915),IKFAST_ATAN2_MAGTHRESH);
if(!x11918.valid){
continue;
}
IkReal x11917=((-1.0)*(x11918.value));
sj5=gconst41;
cj5=gconst42;
j5=x11917;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11915);
rxp1_1=(px*r21);
rxp1_2=(px*x11916);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst40=x11917;
IkReal gconst41=r11;
IkReal gconst42=x11915;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11919=((-1.0)*r10);
IkReal x11920=((-1.0)*r11);
CheckValue<IkReal> x11922 = IKatan2WithCheck(IkReal(x11920),IkReal(x11919),IKFAST_ATAN2_MAGTHRESH);
if(!x11922.valid){
continue;
}
IkReal x11921=((-1.0)*(x11922.value));
sj5=gconst41;
cj5=gconst42;
j5=x11921;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11919);
rxp1_1=(px*r21);
rxp1_2=(px*x11920);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst40=x11921;
IkReal gconst41=r11;
IkReal gconst42=x11919;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11923=((-1.0)*r10);
IkReal x11924=((-1.0)*r11);
CheckValue<IkReal> x11926 = IKatan2WithCheck(IkReal(x11924),IkReal(x11923),IKFAST_ATAN2_MAGTHRESH);
if(!x11926.valid){
continue;
}
IkReal x11925=((-1.0)*(x11926.value));
sj5=gconst41;
cj5=gconst42;
j5=x11925;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11923);
rxp1_1=(px*r21);
rxp1_2=(px*x11924);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst40=x11925;
IkReal gconst41=r11;
IkReal gconst42=x11923;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11927=((-1.0)*r10);
IkReal x11928=((-1.0)*r11);
CheckValue<IkReal> x11930 = IKatan2WithCheck(IkReal(x11928),IkReal(x11927),IKFAST_ATAN2_MAGTHRESH);
if(!x11930.valid){
continue;
}
IkReal x11929=((-1.0)*(x11930.value));
sj5=gconst41;
cj5=gconst42;
j5=x11929;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11927);
rxp1_1=(px*r21);
rxp1_2=(px*x11928);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst40=x11929;
IkReal gconst41=r11;
IkReal gconst42=x11927;
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11933=IKPowWithIntegerCheck((((gconst42*r10))+(((-1.0)*gconst41*r11))),-1);
if(!x11933.valid){
continue;
}
IkReal x11931=x11933.value;
IkReal x11932=(cj0*x11931);
sj4array[0]=(((cj1*sj2*x11932))+((cj2*sj1*x11932)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11934=IKcos(j4);
IkReal x11935=IKsin(j4);
IkReal x11936=(gconst41*x11934);
IkReal x11937=((1.0)*gconst42*x11934);
evalcond[0]=(r02*x11934);
evalcond[1]=(((r02*x11935))+cj0);
evalcond[2]=(((r21*x11936))+(((-1.0)*r20*x11937)));
evalcond[3]=((((-1.0)*r10*x11937))+((r11*x11936)));
evalcond[4]=((((-1.0)*gconst41*r21*x11935))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst42*r20*x11935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11939=IKPowWithIntegerCheck((((gconst42*r20))+(((-1.0)*gconst41*r21))),-1);
if(!x11939.valid){
continue;
}
IkReal x11938=x11939.value;
sj4array[0]=((((-1.0)*sj1*sj2*x11938))+((cj1*cj2*x11938)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11940=IKcos(j4);
IkReal x11941=IKsin(j4);
IkReal x11942=(gconst42*r10);
IkReal x11943=(gconst41*r11);
IkReal x11944=((1.0)*cj0);
IkReal x11945=((1.0)*x11940);
evalcond[0]=(r02*x11940);
evalcond[1]=(cj0+((r02*x11941)));
evalcond[2]=((((-1.0)*gconst42*r20*x11945))+((gconst41*r21*x11940)));
evalcond[3]=((((-1.0)*x11942*x11945))+((x11940*x11943)));
evalcond[4]=((((-1.0)*cj1*sj2*x11944))+(((-1.0)*x11941*x11943))+(((-1.0)*cj2*sj1*x11944))+((x11941*x11942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11946=IKPowWithIntegerCheck(r02,-1);
if(!x11946.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x11946.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11947=IKcos(j4);
IkReal x11948=IKsin(j4);
IkReal x11949=(gconst42*r10);
IkReal x11950=(gconst42*r20);
IkReal x11951=((1.0)*cj0);
IkReal x11952=(gconst41*x11947);
IkReal x11953=((1.0)*x11947);
IkReal x11954=((1.0)*gconst41*x11948);
evalcond[0]=(r02*x11947);
evalcond[1]=(((r21*x11952))+(((-1.0)*x11950*x11953)));
evalcond[2]=(((r11*x11952))+(((-1.0)*x11949*x11953)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11948*x11950))+(((-1.0)*r21*x11954)));
evalcond[4]=(((x11948*x11949))+(((-1.0)*cj2*sj1*x11951))+(((-1.0)*cj1*sj2*x11951))+(((-1.0)*r11*x11954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11955=((-1.0)*r10);
IkReal x11956=((-1.0)*r11);
CheckValue<IkReal> x11958 = IKatan2WithCheck(IkReal(x11956),IkReal(x11955),IKFAST_ATAN2_MAGTHRESH);
if(!x11958.valid){
continue;
}
IkReal x11957=((-1.0)*(x11958.value));
sj5=gconst41;
cj5=gconst42;
j5=x11957;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11955);
rxp1_1=(px*r21);
rxp1_2=(px*x11956);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst40=x11957;
IkReal gconst41=r11;
IkReal gconst42=x11955;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11959=((-1.0)*r10);
IkReal x11960=((-1.0)*r11);
CheckValue<IkReal> x11962 = IKatan2WithCheck(IkReal(x11960),IkReal(x11959),IKFAST_ATAN2_MAGTHRESH);
if(!x11962.valid){
continue;
}
IkReal x11961=((-1.0)*(x11962.value));
sj5=gconst41;
cj5=gconst42;
j5=x11961;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11959);
rxp1_1=(px*r21);
rxp1_2=(px*x11960);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst40=x11961;
IkReal gconst41=r11;
IkReal gconst42=x11959;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11963=((-1.0)*r10);
IkReal x11964=((-1.0)*r11);
CheckValue<IkReal> x11966 = IKatan2WithCheck(IkReal(x11964),IkReal(x11963),IKFAST_ATAN2_MAGTHRESH);
if(!x11966.valid){
continue;
}
IkReal x11965=((-1.0)*(x11966.value));
sj5=gconst41;
cj5=gconst42;
j5=x11965;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11963);
rxp1_1=(px*r21);
rxp1_2=(px*x11964);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst40=x11965;
IkReal gconst41=r11;
IkReal gconst42=x11963;
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11969=IKPowWithIntegerCheck((((gconst41*r11))+(((-1.0)*gconst42*r10))),-1);
if(!x11969.valid){
continue;
}
IkReal x11967=x11969.value;
IkReal x11968=(cj0*x11967);
sj4array[0]=(((cj1*sj2*x11968))+((cj2*sj1*x11968)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11970=IKcos(j4);
IkReal x11971=IKsin(j4);
IkReal x11972=(gconst41*r21);
IkReal x11973=((1.0)*gconst42);
evalcond[0]=((-1.0)*r02*x11970);
evalcond[1]=(cj0+((r02*x11971)));
evalcond[2]=(((x11970*x11972))+(((-1.0)*r20*x11970*x11973)));
evalcond[3]=((((-1.0)*r10*x11970*x11973))+((gconst41*r11*x11970)));
evalcond[4]=((((-1.0)*r20*x11971*x11973))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11971*x11972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11975=IKPowWithIntegerCheck((((gconst41*r21))+(((-1.0)*gconst42*r20))),-1);
if(!x11975.valid){
continue;
}
IkReal x11974=x11975.value;
sj4array[0]=(((cj1*cj2*x11974))+(((-1.0)*sj1*sj2*x11974)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11976=IKcos(j4);
IkReal x11977=IKsin(j4);
IkReal x11978=(gconst41*r11);
IkReal x11979=((1.0)*cj0);
IkReal x11980=((1.0)*gconst42*x11976);
evalcond[0]=((-1.0)*r02*x11976);
evalcond[1]=(cj0+((r02*x11977)));
evalcond[2]=(((gconst41*r21*x11976))+(((-1.0)*r20*x11980)));
evalcond[3]=(((x11976*x11978))+(((-1.0)*r10*x11980)));
evalcond[4]=(((x11977*x11978))+(((-1.0)*cj2*sj1*x11979))+(((-1.0)*gconst42*r10*x11977))+(((-1.0)*cj1*sj2*x11979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11981=IKPowWithIntegerCheck(r02,-1);
if(!x11981.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x11981.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11982=IKcos(j4);
IkReal x11983=IKsin(j4);
IkReal x11984=((1.0)*gconst42);
IkReal x11985=((1.0)*cj0);
IkReal x11986=(gconst41*x11983);
IkReal x11987=(gconst41*x11982);
evalcond[0]=((-1.0)*r02*x11982);
evalcond[1]=(((r21*x11987))+(((-1.0)*r20*x11982*x11984)));
evalcond[2]=(((r11*x11987))+(((-1.0)*r10*x11982*x11984)));
evalcond[3]=(((r21*x11986))+(((-1.0)*r20*x11983*x11984))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj2*sj1*x11985))+((r11*x11986))+(((-1.0)*cj1*sj2*x11985))+(((-1.0)*r10*x11983*x11984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11989=IKPowWithIntegerCheck(r02,-1);
if(!x11989.valid){
continue;
}
IkReal x11988=x11989.value;
CheckValue<IkReal> x11990=IKPowWithIntegerCheck(sj3,-1);
if(!x11990.valid){
continue;
}
if( IKabs(((-1.0)*cj0*x11988)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11988*(x11990.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*x11988))+IKsqr((x11988*(x11990.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*x11988), (x11988*(x11990.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11991=IKcos(j4);
IkReal x11992=IKsin(j4);
IkReal x11993=(gconst41*r11);
IkReal x11994=(cj2*sj0);
IkReal x11995=(gconst42*sj3);
IkReal x11996=(sj1*sj2);
IkReal x11997=(gconst42*r10);
IkReal x11998=(gconst41*sj3);
IkReal x11999=(cj1*sj2);
IkReal x12000=(gconst42*r20);
IkReal x12001=(gconst41*r21);
IkReal x12002=(cj2*sj1);
IkReal x12003=((1.0)*cj0);
IkReal x12004=(cj3*gconst42);
IkReal x12005=(cj3*gconst41);
IkReal x12006=(cj3*x11992);
IkReal x12007=((1.0)*x11991);
IkReal x12008=((1.0)*cj1*cj2);
IkReal x12009=((1.0)*x11992);
evalcond[0]=(cj0+((r02*x11992)));
evalcond[1]=((((-1.0)*x12000*x12007))+((x11991*x12001)));
evalcond[2]=(sj0+((x11991*x11993))+(((-1.0)*x11997*x12007)));
evalcond[3]=(((sj0*x11999))+((sj1*x11994))+((cj3*r02*x11991)));
evalcond[4]=(((cj1*x11994))+(((-1.0)*sj0*x11996))+(((-1.0)*r02*sj3*x12007)));
evalcond[5]=(x11999+(((-1.0)*r20*x11995*x12009))+((r21*x11992*x11998))+((r20*x12005))+x12002+((r21*x12004)));
evalcond[6]=(((r20*x11998))+((x12000*x12006))+x11996+(((-1.0)*x12008))+((r21*x11995))+(((-1.0)*x12001*x12006)));
evalcond[7]=(((sj3*x11992*x11993))+(((-1.0)*cj1*cj2*x12003))+((cj0*x11996))+((r10*x12005))+(((-1.0)*r10*x11995*x12009))+((r11*x12004)));
evalcond[8]=((((-1.0)*x11999*x12003))+(((-1.0)*x11993*x12006))+((x11997*x12006))+(((-1.0)*x12002*x12003))+((r11*x11995))+((r10*x11998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12010=((1.0)*r20);
IkReal x12011=((1.0)*gconst42);
CheckValue<IkReal> x12012=IKPowWithIntegerCheck(((((-1.0)*gconst42*sj3*x12010))+((gconst41*r21*sj3))),-1);
if(!x12012.valid){
continue;
}
CheckValue<IkReal> x12013=IKPowWithIntegerCheck(((((-1.0)*r10*x12011))+((gconst41*r11))),-1);
if(!x12013.valid){
continue;
}
if( IKabs(((x12012.value)*(((((-1.0)*cj3*gconst41*x12010))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r21*x12011)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12013.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12012.value)*(((((-1.0)*cj3*gconst41*x12010))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r21*x12011))))))+IKsqr(((-1.0)*sj0*(x12013.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12012.value)*(((((-1.0)*cj3*gconst41*x12010))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r21*x12011))))), ((-1.0)*sj0*(x12013.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12014=IKcos(j4);
IkReal x12015=IKsin(j4);
IkReal x12016=(gconst41*r11);
IkReal x12017=(cj2*sj0);
IkReal x12018=(gconst42*sj3);
IkReal x12019=(sj1*sj2);
IkReal x12020=(gconst42*r10);
IkReal x12021=(gconst41*sj3);
IkReal x12022=(cj1*sj2);
IkReal x12023=(gconst42*r20);
IkReal x12024=(gconst41*r21);
IkReal x12025=(cj2*sj1);
IkReal x12026=((1.0)*cj0);
IkReal x12027=(cj3*gconst42);
IkReal x12028=(cj3*gconst41);
IkReal x12029=(cj3*x12015);
IkReal x12030=((1.0)*x12014);
IkReal x12031=((1.0)*cj1*cj2);
IkReal x12032=((1.0)*x12015);
evalcond[0]=(cj0+((r02*x12015)));
evalcond[1]=((((-1.0)*x12023*x12030))+((x12014*x12024)));
evalcond[2]=(sj0+((x12014*x12016))+(((-1.0)*x12020*x12030)));
evalcond[3]=(((cj3*r02*x12014))+((sj0*x12022))+((sj1*x12017)));
evalcond[4]=((((-1.0)*r02*sj3*x12030))+(((-1.0)*sj0*x12019))+((cj1*x12017)));
evalcond[5]=(((r20*x12028))+x12025+x12022+(((-1.0)*r20*x12018*x12032))+((r21*x12015*x12021))+((r21*x12027)));
evalcond[6]=(((x12023*x12029))+((r20*x12021))+((r21*x12018))+(((-1.0)*x12031))+(((-1.0)*x12024*x12029))+x12019);
evalcond[7]=((((-1.0)*r10*x12018*x12032))+((cj0*x12019))+(((-1.0)*cj1*cj2*x12026))+((sj3*x12015*x12016))+((r11*x12027))+((r10*x12028)));
evalcond[8]=(((x12020*x12029))+(((-1.0)*x12016*x12029))+((r11*x12018))+(((-1.0)*x12025*x12026))+(((-1.0)*x12022*x12026))+((r10*x12021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12033=IKPowWithIntegerCheck(r02,-1);
if(!x12033.valid){
continue;
}
CheckValue<IkReal> x12034=IKPowWithIntegerCheck((((gconst41*r11))+(((-1.0)*gconst42*r10))),-1);
if(!x12034.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12033.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12034.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12033.value)))+IKsqr(((-1.0)*sj0*(x12034.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12033.value)), ((-1.0)*sj0*(x12034.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12035=IKcos(j4);
IkReal x12036=IKsin(j4);
IkReal x12037=(gconst41*r11);
IkReal x12038=(cj2*sj0);
IkReal x12039=(gconst42*sj3);
IkReal x12040=(sj1*sj2);
IkReal x12041=(gconst42*r10);
IkReal x12042=(gconst41*sj3);
IkReal x12043=(cj1*sj2);
IkReal x12044=(gconst42*r20);
IkReal x12045=(gconst41*r21);
IkReal x12046=(cj2*sj1);
IkReal x12047=((1.0)*cj0);
IkReal x12048=(cj3*gconst42);
IkReal x12049=(cj3*gconst41);
IkReal x12050=(cj3*x12036);
IkReal x12051=((1.0)*x12035);
IkReal x12052=((1.0)*cj1*cj2);
IkReal x12053=((1.0)*x12036);
evalcond[0]=(cj0+((r02*x12036)));
evalcond[1]=(((x12035*x12045))+(((-1.0)*x12044*x12051)));
evalcond[2]=((((-1.0)*x12041*x12051))+sj0+((x12035*x12037)));
evalcond[3]=(((sj0*x12043))+((sj1*x12038))+((cj3*r02*x12035)));
evalcond[4]=(((cj1*x12038))+(((-1.0)*r02*sj3*x12051))+(((-1.0)*sj0*x12040)));
evalcond[5]=(((r20*x12049))+(((-1.0)*r20*x12039*x12053))+x12043+x12046+((r21*x12048))+((r21*x12036*x12042)));
evalcond[6]=((((-1.0)*x12052))+((x12044*x12050))+(((-1.0)*x12045*x12050))+((r20*x12042))+x12040+((r21*x12039)));
evalcond[7]=(((r10*x12049))+(((-1.0)*r10*x12039*x12053))+((cj0*x12040))+((r11*x12048))+(((-1.0)*cj1*cj2*x12047))+((sj3*x12036*x12037)));
evalcond[8]=(((r10*x12042))+(((-1.0)*x12037*x12050))+((x12041*x12050))+(((-1.0)*x12046*x12047))+(((-1.0)*x12043*x12047))+((r11*x12039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12054=((-1.0)*r10);
IkReal x12055=x11111;
CheckValue<IkReal> x12057 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12054),IKFAST_ATAN2_MAGTHRESH);
if(!x12057.valid){
continue;
}
IkReal x12056=((-1.0)*(x12057.value));
sj5=gconst41;
cj5=gconst42;
j5=x12056;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst40=x12056;
IkReal gconst41=(r11*x12055);
IkReal gconst42=(x12054*x12055);
IkReal x12058=r12*r12;
IkReal x12059=(r02*sj0);
IkReal x12060=((1.0)*x12058);
CheckValue<IkReal> x12064=IKPowWithIntegerCheck(((-1.0)+x12058),-1);
if(!x12064.valid){
continue;
}
IkReal x12061=x12064.value;
if((((1.0)+(((-1.0)*x12060)))) < -0.00001)
continue;
IkReal x12062=IKsqrt(((1.0)+(((-1.0)*x12060))));
IkReal x12063=(cj0*x12061*x12062);
j4eval[0]=((IKabs((((r12*x12059*x12061*x12062))+x12063+(((-1.0)*x12060*x12063)))))+(IKabs(((((-1.0)*x12059))+((cj0*r12))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12065=(cj0*sj3);
IkReal x12066=(gconst42*r20);
IkReal x12067=(cj2*sj1);
IkReal x12068=(r00*sj3);
IkReal x12069=(cj1*sj2);
IkReal x12070=((1.0)*sj3);
IkReal x12071=((1.0)*cj3);
IkReal x12072=(gconst41*r20);
IkReal x12073=(gconst42*r21);
IkReal x12074=(cj3*r02);
IkReal x12075=(r21*sj3);
IkReal x12076=((1.0)*gconst41*r21);
CheckValue<IkReal> x12077=IKPowWithIntegerCheck(((((-1.0)*x12066*x12070))+((gconst41*x12075))),-1);
if(!x12077.valid){
continue;
}
CheckValue<IkReal> x12078=IKPowWithIntegerCheck(((((-1.0)*gconst41*r01*x12066*x12070))+(((-1.0)*gconst41*x12068*x12073))+((r01*x12075*(gconst41*gconst41)))+((gconst42*x12066*x12068))),-1);
if(!x12078.valid){
continue;
}
if( IKabs(((x12077.value)*(((((-1.0)*x12067))+(((-1.0)*x12069))+(((-1.0)*x12071*x12073))+(((-1.0)*x12071*x12072)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12078.value)*((((x12065*x12066))+((r02*x12069))+((r02*x12067))+((x12073*x12074))+((x12072*x12074))+(((-1.0)*x12065*x12076)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12077.value)*(((((-1.0)*x12067))+(((-1.0)*x12069))+(((-1.0)*x12071*x12073))+(((-1.0)*x12071*x12072))))))+IKsqr(((x12078.value)*((((x12065*x12066))+((r02*x12069))+((r02*x12067))+((x12073*x12074))+((x12072*x12074))+(((-1.0)*x12065*x12076))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12077.value)*(((((-1.0)*x12067))+(((-1.0)*x12069))+(((-1.0)*x12071*x12073))+(((-1.0)*x12071*x12072))))), ((x12078.value)*((((x12065*x12066))+((r02*x12069))+((r02*x12067))+((x12073*x12074))+((x12072*x12074))+(((-1.0)*x12065*x12076))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12079=IKcos(j4);
IkReal x12080=IKsin(j4);
IkReal x12081=(cj2*sj0);
IkReal x12082=(gconst42*sj3);
IkReal x12083=(sj1*sj2);
IkReal x12084=(gconst42*r10);
IkReal x12085=(gconst41*sj3);
IkReal x12086=(gconst41*r11);
IkReal x12087=(gconst42*r20);
IkReal x12088=(cj2*sj1);
IkReal x12089=((1.0)*cj0);
IkReal x12090=(cj3*gconst41);
IkReal x12091=(cj1*sj2);
IkReal x12092=(cj3*gconst42);
IkReal x12093=(gconst42*r00);
IkReal x12094=((1.0)*gconst41);
IkReal x12095=(cj3*x12080);
IkReal x12096=((1.0)*cj1*cj2);
IkReal x12097=(gconst41*x12079);
IkReal x12098=((1.0)*x12080);
IkReal x12099=(cj3*x12079);
IkReal x12100=((1.0)*x12079);
IkReal x12101=(sj3*x12100);
evalcond[0]=((((-1.0)*x12087*x12100))+((r21*x12097)));
evalcond[1]=(((r01*x12097))+((r02*x12080))+(((-1.0)*x12093*x12100))+cj0);
evalcond[2]=(sj0+((x12079*x12086))+((r12*x12080))+(((-1.0)*x12084*x12100)));
evalcond[3]=(x12091+x12088+((r20*x12090))+((r21*x12080*x12085))+(((-1.0)*r20*x12082*x12098))+((r21*x12092)));
evalcond[4]=(((r20*x12085))+((x12087*x12095))+x12083+((r21*x12082))+(((-1.0)*x12096))+(((-1.0)*r21*x12090*x12098)));
evalcond[5]=(((r00*x12085))+((r01*x12082))+((r00*x12080*x12092))+((sj1*x12081))+(((-1.0)*r01*x12090*x12098))+((r02*x12099))+((sj0*x12091)));
evalcond[6]=(((r01*x12092))+((r01*x12080*x12085))+((r00*x12090))+((cj1*x12081))+(((-1.0)*sj0*x12083))+(((-1.0)*r00*x12082*x12098))+(((-1.0)*r02*x12101)));
evalcond[7]=(((r11*x12092))+(((-1.0)*r12*x12101))+((r10*x12090))+((r11*x12080*x12085))+(((-1.0)*cj1*cj2*x12089))+((cj0*x12083))+(((-1.0)*r10*x12082*x12098)));
evalcond[8]=((((-1.0)*x12088*x12089))+((r12*x12099))+(((-1.0)*x12089*x12091))+((x12084*x12095))+((r10*x12085))+(((-1.0)*x12086*x12095))+((r11*x12082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12102=((1.0)*sj0);
IkReal x12103=((1.0)*gconst41);
CheckValue<IkReal> x12104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12103))+(((-1.0)*gconst42*r21)))),-1);
if(!x12104.valid){
continue;
}
CheckValue<IkReal> x12105 = IKatan2WithCheck(IkReal(((((-1.0)*gconst42*r00*x12102))+((gconst41*r01*sj0))+((cj0*gconst42*r10))+(((-1.0)*cj0*r11*x12103)))),IkReal(((((-1.0)*r02*x12102))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12104.value)))+(x12105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12106=IKcos(j4);
IkReal x12107=IKsin(j4);
IkReal x12108=(cj2*sj0);
IkReal x12109=(gconst42*sj3);
IkReal x12110=(sj1*sj2);
IkReal x12111=(gconst42*r10);
IkReal x12112=(gconst41*sj3);
IkReal x12113=(gconst41*r11);
IkReal x12114=(gconst42*r20);
IkReal x12115=(cj2*sj1);
IkReal x12116=((1.0)*cj0);
IkReal x12117=(cj3*gconst41);
IkReal x12118=(cj1*sj2);
IkReal x12119=(cj3*gconst42);
IkReal x12120=(gconst42*r00);
IkReal x12121=((1.0)*gconst41);
IkReal x12122=(cj3*x12107);
IkReal x12123=((1.0)*cj1*cj2);
IkReal x12124=(gconst41*x12106);
IkReal x12125=((1.0)*x12107);
IkReal x12126=(cj3*x12106);
IkReal x12127=((1.0)*x12106);
IkReal x12128=(sj3*x12127);
evalcond[0]=(((r21*x12124))+(((-1.0)*x12114*x12127)));
evalcond[1]=(((r02*x12107))+cj0+((r01*x12124))+(((-1.0)*x12120*x12127)));
evalcond[2]=(sj0+((x12106*x12113))+((r12*x12107))+(((-1.0)*x12111*x12127)));
evalcond[3]=((((-1.0)*r20*x12109*x12125))+((r21*x12107*x12112))+((r20*x12117))+x12115+x12118+((r21*x12119)));
evalcond[4]=(((x12114*x12122))+(((-1.0)*x12123))+((r20*x12112))+x12110+(((-1.0)*r21*x12117*x12125))+((r21*x12109)));
evalcond[5]=(((sj1*x12108))+((sj0*x12118))+((r00*x12107*x12119))+((r00*x12112))+((r01*x12109))+(((-1.0)*r01*x12117*x12125))+((r02*x12126)));
evalcond[6]=(((r01*x12119))+((r00*x12117))+(((-1.0)*r00*x12109*x12125))+((r01*x12107*x12112))+(((-1.0)*r02*x12128))+(((-1.0)*sj0*x12110))+((cj1*x12108)));
evalcond[7]=(((r10*x12117))+((cj0*x12110))+((r11*x12107*x12112))+(((-1.0)*r12*x12128))+(((-1.0)*r10*x12109*x12125))+((r11*x12119))+(((-1.0)*cj1*cj2*x12116)));
evalcond[8]=(((r10*x12112))+((r12*x12126))+(((-1.0)*x12115*x12116))+(((-1.0)*x12116*x12118))+((x12111*x12122))+((r11*x12109))+(((-1.0)*x12113*x12122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12129=gconst41*gconst41;
IkReal x12130=r21*r21;
IkReal x12131=gconst42*gconst42;
IkReal x12132=r20*r20;
IkReal x12133=(r20*r21);
IkReal x12134=(gconst41*gconst42);
IkReal x12135=((1.0)*sj3);
IkReal x12136=(gconst41*r21);
IkReal x12137=(cj1*cj2);
IkReal x12138=(sj1*sj2);
IkReal x12139=(gconst42*r20);
CheckValue<IkReal> x12140 = IKatan2WithCheck(IkReal(((((-1.0)*x12132*x12134*x12135))+(((-1.0)*x12138*x12139))+((sj3*x12129*x12133))+((sj3*x12130*x12134))+(((-1.0)*x12131*x12133*x12135))+((x12137*x12139))+((x12136*x12138))+(((-1.0)*x12136*x12137)))),IkReal(((((-1.0)*gconst41*r20*r22*x12135))+(((-1.0)*r22*x12138))+((r22*x12137))+(((-1.0)*gconst42*r21*r22*x12135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12140.valid){
continue;
}
CheckValue<IkReal> x12141=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*x12133*x12134))+((cj3*(r22*r22)))+((cj3*x12131*x12132))+((cj3*x12129*x12130)))),-1);
if(!x12141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12140.value)+(((1.5707963267949)*(x12141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12142=IKcos(j4);
IkReal x12143=IKsin(j4);
IkReal x12144=(cj2*sj0);
IkReal x12145=(gconst42*sj3);
IkReal x12146=(sj1*sj2);
IkReal x12147=(gconst42*r10);
IkReal x12148=(gconst41*sj3);
IkReal x12149=(gconst41*r11);
IkReal x12150=(gconst42*r20);
IkReal x12151=(cj2*sj1);
IkReal x12152=((1.0)*cj0);
IkReal x12153=(cj3*gconst41);
IkReal x12154=(cj1*sj2);
IkReal x12155=(cj3*gconst42);
IkReal x12156=(gconst42*r00);
IkReal x12157=((1.0)*gconst41);
IkReal x12158=(cj3*x12143);
IkReal x12159=((1.0)*cj1*cj2);
IkReal x12160=(cj3*x12142);
IkReal x12161=(gconst41*x12142);
IkReal x12162=((1.0)*x12143);
IkReal x12163=((1.0)*x12142);
IkReal x12164=(sj3*x12163);
evalcond[0]=(((r21*x12161))+((r22*x12143))+(((-1.0)*x12150*x12163)));
evalcond[1]=((((-1.0)*x12156*x12163))+cj0+((r02*x12143))+((r01*x12161)));
evalcond[2]=(sj0+((r12*x12143))+((x12142*x12149))+(((-1.0)*x12147*x12163)));
evalcond[3]=((((-1.0)*r22*x12164))+(((-1.0)*r20*x12145*x12162))+((r21*x12143*x12148))+x12154+x12151+((r20*x12153))+((r21*x12155)));
evalcond[4]=((((-1.0)*r21*x12153*x12162))+x12146+((x12150*x12158))+((r20*x12148))+((r21*x12145))+((r22*x12160))+(((-1.0)*x12159)));
evalcond[5]=(((r02*x12160))+((sj1*x12144))+((sj0*x12154))+((r00*x12148))+((r01*x12145))+(((-1.0)*r01*x12153*x12162))+((r00*x12143*x12155)));
evalcond[6]=(((cj1*x12144))+((r01*x12143*x12148))+(((-1.0)*sj0*x12146))+((r01*x12155))+((r00*x12153))+(((-1.0)*r00*x12145*x12162))+(((-1.0)*r02*x12164)));
evalcond[7]=((((-1.0)*r10*x12145*x12162))+((r10*x12153))+((cj0*x12146))+((r11*x12155))+((r11*x12143*x12148))+(((-1.0)*r12*x12164))+(((-1.0)*cj1*cj2*x12152)));
evalcond[8]=((((-1.0)*x12152*x12154))+((r10*x12148))+((x12147*x12158))+((r11*x12145))+(((-1.0)*x12151*x12152))+((r12*x12160))+(((-1.0)*x12149*x12158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12165=((1.0)*sj0);
IkReal x12166=((1.0)*gconst41);
CheckValue<IkReal> x12167 = IKatan2WithCheck(IkReal(((((-1.0)*gconst42*r00*x12165))+((gconst41*r01*sj0))+((cj0*gconst42*r10))+(((-1.0)*cj0*r11*x12166)))),IkReal((((cj0*r12))+(((-1.0)*r02*x12165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12167.valid){
continue;
}
CheckValue<IkReal> x12168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12166))+(((-1.0)*gconst42*r21)))),-1);
if(!x12168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12167.value)+(((1.5707963267949)*(x12168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12169=IKcos(j4);
IkReal x12170=IKsin(j4);
IkReal x12171=(cj2*sj0);
IkReal x12172=(gconst42*sj3);
IkReal x12173=(sj1*sj2);
IkReal x12174=(gconst42*r10);
IkReal x12175=(gconst41*sj3);
IkReal x12176=(gconst41*r11);
IkReal x12177=(gconst42*r20);
IkReal x12178=(cj2*sj1);
IkReal x12179=((1.0)*cj0);
IkReal x12180=(cj3*gconst41);
IkReal x12181=(cj1*sj2);
IkReal x12182=(cj3*gconst42);
IkReal x12183=(gconst42*r00);
IkReal x12184=((1.0)*gconst41);
IkReal x12185=(cj3*x12170);
IkReal x12186=((1.0)*cj1*cj2);
IkReal x12187=(cj3*x12169);
IkReal x12188=(gconst41*x12169);
IkReal x12189=((1.0)*x12170);
IkReal x12190=((1.0)*x12169);
IkReal x12191=(sj3*x12190);
evalcond[0]=(((r21*x12188))+(((-1.0)*x12177*x12190))+((r22*x12170)));
evalcond[1]=(cj0+((r01*x12188))+((r02*x12170))+(((-1.0)*x12183*x12190)));
evalcond[2]=(sj0+((x12169*x12176))+(((-1.0)*x12174*x12190))+((r12*x12170)));
evalcond[3]=(((r21*x12170*x12175))+(((-1.0)*r20*x12172*x12189))+((r21*x12182))+x12178+x12181+((r20*x12180))+(((-1.0)*r22*x12191)));
evalcond[4]=(((r21*x12172))+(((-1.0)*x12186))+((r20*x12175))+((r22*x12187))+x12173+((x12177*x12185))+(((-1.0)*r21*x12180*x12189)));
evalcond[5]=((((-1.0)*r01*x12180*x12189))+((r00*x12170*x12182))+((sj1*x12171))+((r01*x12172))+((r00*x12175))+((r02*x12187))+((sj0*x12181)));
evalcond[6]=(((r01*x12170*x12175))+(((-1.0)*r00*x12172*x12189))+(((-1.0)*r02*x12191))+((r00*x12180))+(((-1.0)*sj0*x12173))+((r01*x12182))+((cj1*x12171)));
evalcond[7]=((((-1.0)*cj1*cj2*x12179))+((r11*x12170*x12175))+((r11*x12182))+((cj0*x12173))+((r10*x12180))+(((-1.0)*r10*x12172*x12189))+(((-1.0)*r12*x12191)));
evalcond[8]=((((-1.0)*x12179*x12181))+((r12*x12187))+((r10*x12175))+(((-1.0)*x12176*x12185))+(((-1.0)*x12178*x12179))+((r11*x12172))+((x12174*x12185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12192=IKPowWithIntegerCheck(IKsign((((gconst42*r01))+((gconst41*r00)))),-1);
if(!x12192.valid){
continue;
}
CheckValue<IkReal> x12193 = IKatan2WithCheck(IkReal(((((-1.0)*gconst42*r20*sj0))+((gconst41*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x12193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12192.value)))+(x12193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12194=IKcos(j4);
IkReal x12195=IKsin(j4);
IkReal x12196=(cj2*sj0);
IkReal x12197=(gconst42*sj3);
IkReal x12198=(sj1*sj2);
IkReal x12199=(gconst42*r10);
IkReal x12200=(gconst41*sj3);
IkReal x12201=(gconst41*r11);
IkReal x12202=(gconst42*r20);
IkReal x12203=(cj2*sj1);
IkReal x12204=((1.0)*cj0);
IkReal x12205=(cj3*gconst41);
IkReal x12206=(cj1*sj2);
IkReal x12207=(cj3*gconst42);
IkReal x12208=(gconst42*r00);
IkReal x12209=((1.0)*gconst41);
IkReal x12210=(cj3*x12195);
IkReal x12211=((1.0)*cj1*cj2);
IkReal x12212=(cj3*x12194);
IkReal x12213=(gconst41*x12194);
IkReal x12214=((1.0)*x12195);
IkReal x12215=((1.0)*x12194);
IkReal x12216=(sj3*x12215);
evalcond[0]=((((-1.0)*x12202*x12215))+((r22*x12195))+((r21*x12213)));
evalcond[1]=(cj0+((r02*x12195))+((r01*x12213))+(((-1.0)*x12208*x12215)));
evalcond[2]=(((r12*x12195))+sj0+((x12194*x12201))+(((-1.0)*x12199*x12215)));
evalcond[3]=(x12206+x12203+(((-1.0)*r22*x12216))+((r21*x12207))+((r20*x12205))+((r21*x12195*x12200))+(((-1.0)*r20*x12197*x12214)));
evalcond[4]=((((-1.0)*x12211))+((r22*x12212))+(((-1.0)*r21*x12205*x12214))+((r21*x12197))+x12198+((r20*x12200))+((x12202*x12210)));
evalcond[5]=(((r02*x12212))+((r01*x12197))+(((-1.0)*r01*x12205*x12214))+((sj1*x12196))+((sj0*x12206))+((r00*x12200))+((r00*x12195*x12207)));
evalcond[6]=((((-1.0)*r02*x12216))+(((-1.0)*sj0*x12198))+(((-1.0)*r00*x12197*x12214))+((cj1*x12196))+((r01*x12207))+((r00*x12205))+((r01*x12195*x12200)));
evalcond[7]=((((-1.0)*r12*x12216))+(((-1.0)*r10*x12197*x12214))+(((-1.0)*cj1*cj2*x12204))+((cj0*x12198))+((r11*x12195*x12200))+((r10*x12205))+((r11*x12207)));
evalcond[8]=(((r12*x12212))+(((-1.0)*x12204*x12206))+((r11*x12197))+(((-1.0)*x12201*x12210))+(((-1.0)*x12203*x12204))+((r10*x12200))+((x12199*x12210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12217=((-1.0)*r11);
IkReal x12219 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12219)==0){
continue;
}
IkReal x12218=pow(x12219,-0.5);
CheckValue<IkReal> x12220 = IKatan2WithCheck(IkReal(x12217),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12220.valid){
continue;
}
IkReal gconst43=((3.14159265358979)+(((-1.0)*(x12220.value))));
IkReal gconst44=(x12217*x12218);
IkReal gconst45=((1.0)*r10*x12218);
CheckValue<IkReal> x12221 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12221.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12221.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12222=((-1.0)*r11);
CheckValue<IkReal> x12225 = IKatan2WithCheck(IkReal(x12222),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12225.valid){
continue;
}
IkReal x12223=((1.0)*(x12225.value));
IkReal x12224=x12218;
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x12223)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x12223)));
IkReal gconst44=(x12222*x12224);
IkReal gconst45=((1.0)*r10*x12224);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x12226=((-1.0)*r11);
CheckValue<IkReal> x12229 = IKatan2WithCheck(IkReal(x12226),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12229.valid){
continue;
}
IkReal x12227=((1.0)*(x12229.value));
IkReal x12228=x12218;
sj5=gconst44;
cj5=gconst45;
j5=((3.14159265)+(((-1.0)*x12227)));
IkReal gconst43=((3.14159265358979)+(((-1.0)*x12227)));
IkReal gconst44=(x12226*x12228);
IkReal gconst45=((1.0)*r10*x12228);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12230=((1.0)*sj0);
IkReal x12231=((1.0)*gconst44);
CheckValue<IkReal> x12232=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12231))+(((-1.0)*gconst45*r21)))),-1);
if(!x12232.valid){
continue;
}
CheckValue<IkReal> x12233 = IKatan2WithCheck(IkReal((((cj0*gconst45*r10))+(((-1.0)*cj0*r11*x12231))+(((-1.0)*gconst45*r00*x12230))+((gconst44*r01*sj0)))),IkReal(((((-1.0)*r02*x12230))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12232.value)))+(x12233.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12234=IKcos(j4);
IkReal x12235=IKsin(j4);
IkReal x12236=(gconst44*r10);
IkReal x12237=(cj2*sj0);
IkReal x12238=(cj3*gconst45);
IkReal x12239=(r20*sj3);
IkReal x12240=(sj1*sj2);
IkReal x12241=(r21*sj3);
IkReal x12242=(cj2*sj1);
IkReal x12243=((1.0)*cj0);
IkReal x12244=(cj1*sj2);
IkReal x12245=(r01*sj3);
IkReal x12246=(r00*sj3);
IkReal x12247=(cj3*gconst44);
IkReal x12248=(r11*sj3);
IkReal x12249=((1.0)*cj1*cj2);
IkReal x12250=(r22*x12234);
IkReal x12251=(gconst44*x12234);
IkReal x12252=(gconst44*x12235);
IkReal x12253=(cj3*x12234);
IkReal x12254=((1.0)*gconst45*x12234);
IkReal x12255=((1.0)*sj3*x12234);
IkReal x12256=((1.0)*gconst45*x12235);
IkReal x12257=((1.0)*x12235*x12247);
evalcond[0]=((((-1.0)*r20*x12254))+((r21*x12251))+((r22*x12235)));
evalcond[1]=(cj0+((r01*x12251))+((r02*x12235))+(((-1.0)*r00*x12254)));
evalcond[2]=(sj0+((r12*x12235))+((r11*x12251))+(((-1.0)*r10*x12254)));
evalcond[3]=((((-1.0)*x12239*x12256))+((x12241*x12252))+(((-1.0)*sj3*x12250))+x12242+x12244+((r20*x12247))+((r21*x12238)));
evalcond[4]=(((cj3*x12250))+((gconst45*x12241))+(((-1.0)*r21*x12257))+x12240+(((-1.0)*x12249))+((gconst44*x12239))+((r20*x12235*x12238)));
evalcond[5]=(((r00*x12235*x12238))+((gconst44*x12246))+((sj0*x12244))+((gconst45*x12245))+((sj1*x12237))+(((-1.0)*r01*x12257))+((r02*x12253)));
evalcond[6]=(((x12245*x12252))+((r01*x12238))+(((-1.0)*sj0*x12240))+((r00*x12247))+(((-1.0)*r02*x12255))+(((-1.0)*x12246*x12256))+((cj1*x12237)));
evalcond[7]=((((-1.0)*cj1*cj2*x12243))+(((-1.0)*r12*x12255))+((cj3*x12236))+((r11*x12238))+((x12248*x12252))+((cj0*x12240))+(((-1.0)*r10*sj3*x12256)));
evalcond[8]=((((-1.0)*r11*x12257))+((r12*x12253))+(((-1.0)*x12242*x12243))+((gconst45*x12248))+((r10*x12235*x12238))+((sj3*x12236))+(((-1.0)*x12243*x12244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12258=((1.0)*gconst45);
CheckValue<IkReal> x12259=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12258))+(((-1.0)*gconst44*r10)))),-1);
if(!x12259.valid){
continue;
}
CheckValue<IkReal> x12260 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x12258))+((cj0*gconst44*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12259.value)))+(x12260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12261=IKcos(j4);
IkReal x12262=IKsin(j4);
IkReal x12263=(gconst44*r10);
IkReal x12264=(cj2*sj0);
IkReal x12265=(cj3*gconst45);
IkReal x12266=(r20*sj3);
IkReal x12267=(sj1*sj2);
IkReal x12268=(r21*sj3);
IkReal x12269=(cj2*sj1);
IkReal x12270=((1.0)*cj0);
IkReal x12271=(cj1*sj2);
IkReal x12272=(r01*sj3);
IkReal x12273=(r00*sj3);
IkReal x12274=(cj3*gconst44);
IkReal x12275=(r11*sj3);
IkReal x12276=((1.0)*cj1*cj2);
IkReal x12277=(r22*x12261);
IkReal x12278=(gconst44*x12261);
IkReal x12279=(gconst44*x12262);
IkReal x12280=(cj3*x12261);
IkReal x12281=((1.0)*gconst45*x12261);
IkReal x12282=((1.0)*sj3*x12261);
IkReal x12283=((1.0)*gconst45*x12262);
IkReal x12284=((1.0)*x12262*x12274);
evalcond[0]=(((r21*x12278))+(((-1.0)*r20*x12281))+((r22*x12262)));
evalcond[1]=(cj0+(((-1.0)*r00*x12281))+((r01*x12278))+((r02*x12262)));
evalcond[2]=(sj0+(((-1.0)*r10*x12281))+((r12*x12262))+((r11*x12278)));
evalcond[3]=((((-1.0)*sj3*x12277))+(((-1.0)*x12266*x12283))+((x12268*x12279))+((r20*x12274))+x12269+x12271+((r21*x12265)));
evalcond[4]=(((r20*x12262*x12265))+((gconst45*x12268))+(((-1.0)*x12276))+((gconst44*x12266))+x12267+((cj3*x12277))+(((-1.0)*r21*x12284)));
evalcond[5]=(((sj1*x12264))+((r02*x12280))+((sj0*x12271))+((r00*x12262*x12265))+(((-1.0)*r01*x12284))+((gconst45*x12272))+((gconst44*x12273)));
evalcond[6]=((((-1.0)*sj0*x12267))+((x12272*x12279))+((r01*x12265))+(((-1.0)*x12273*x12283))+((r00*x12274))+(((-1.0)*r02*x12282))+((cj1*x12264)));
evalcond[7]=(((cj3*x12263))+(((-1.0)*r10*sj3*x12283))+((r11*x12265))+(((-1.0)*r12*x12282))+(((-1.0)*cj1*cj2*x12270))+((cj0*x12267))+((x12275*x12279)));
evalcond[8]=((((-1.0)*x12269*x12270))+((r10*x12262*x12265))+(((-1.0)*r11*x12284))+((r12*x12280))+(((-1.0)*x12270*x12271))+((gconst45*x12275))+((sj3*x12263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12285=IKPowWithIntegerCheck(IKsign((((gconst44*r00))+((gconst45*r01)))),-1);
if(!x12285.valid){
continue;
}
CheckValue<IkReal> x12286 = IKatan2WithCheck(IkReal(((((-1.0)*gconst45*r20*sj0))+((gconst44*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x12286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12285.value)))+(x12286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12287=IKcos(j4);
IkReal x12288=IKsin(j4);
IkReal x12289=(gconst44*r10);
IkReal x12290=(cj2*sj0);
IkReal x12291=(cj3*gconst45);
IkReal x12292=(r20*sj3);
IkReal x12293=(sj1*sj2);
IkReal x12294=(r21*sj3);
IkReal x12295=(cj2*sj1);
IkReal x12296=((1.0)*cj0);
IkReal x12297=(cj1*sj2);
IkReal x12298=(r01*sj3);
IkReal x12299=(r00*sj3);
IkReal x12300=(cj3*gconst44);
IkReal x12301=(r11*sj3);
IkReal x12302=((1.0)*cj1*cj2);
IkReal x12303=(r22*x12287);
IkReal x12304=(gconst44*x12287);
IkReal x12305=(gconst44*x12288);
IkReal x12306=(cj3*x12287);
IkReal x12307=((1.0)*gconst45*x12287);
IkReal x12308=((1.0)*sj3*x12287);
IkReal x12309=((1.0)*gconst45*x12288);
IkReal x12310=((1.0)*x12288*x12300);
evalcond[0]=((((-1.0)*r20*x12307))+((r22*x12288))+((r21*x12304)));
evalcond[1]=(cj0+((r02*x12288))+(((-1.0)*r00*x12307))+((r01*x12304)));
evalcond[2]=(sj0+((r11*x12304))+(((-1.0)*r10*x12307))+((r12*x12288)));
evalcond[3]=(((r21*x12291))+(((-1.0)*sj3*x12303))+x12295+x12297+((r20*x12300))+((x12294*x12305))+(((-1.0)*x12292*x12309)));
evalcond[4]=(((cj3*x12303))+(((-1.0)*r21*x12310))+x12293+((gconst44*x12292))+(((-1.0)*x12302))+((gconst45*x12294))+((r20*x12288*x12291)));
evalcond[5]=((((-1.0)*r01*x12310))+((sj0*x12297))+((sj1*x12290))+((r00*x12288*x12291))+((gconst44*x12299))+((gconst45*x12298))+((r02*x12306)));
evalcond[6]=(((cj1*x12290))+((r01*x12291))+(((-1.0)*r02*x12308))+((x12298*x12305))+((r00*x12300))+(((-1.0)*sj0*x12293))+(((-1.0)*x12299*x12309)));
evalcond[7]=(((r11*x12291))+((x12301*x12305))+((cj0*x12293))+(((-1.0)*r10*sj3*x12309))+(((-1.0)*cj1*cj2*x12296))+((cj3*x12289))+(((-1.0)*r12*x12308)));
evalcond[8]=(((gconst45*x12301))+(((-1.0)*x12295*x12296))+(((-1.0)*x12296*x12297))+((r10*x12288*x12291))+(((-1.0)*r11*x12310))+((r12*x12306))+((sj3*x12289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12311=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12311;
j4eval[1]=IKsign(x12311);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12312=((1.0)*cj5);
IkReal x12313=((((-1.0)*r21*x12312))+(((-1.0)*r20*sj5)));
j4eval[0]=x12313;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x12312))))));
j4eval[2]=IKsign(x12313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12314=cj5*cj5;
IkReal x12315=(cj3*r11*r21);
IkReal x12316=((1.0)*cj3*cj5*sj5);
IkReal x12317=(((cj3*r12*r22))+(((-1.0)*r10*r21*x12316))+(((-1.0)*x12314*x12315))+x12315+((cj3*r10*r20*x12314))+(((-1.0)*r11*r20*x12316)));
j4eval[0]=x12317;
j4eval[1]=IKsign(x12317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12318=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12318;
j4eval[1]=IKsign(x12318);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12319=((1.0)*cj5);
IkReal x12320=((((-1.0)*r21*x12319))+(((-1.0)*r20*sj5)));
j4eval[0]=x12320;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x12319))))));
j4eval[2]=IKsign(x12320);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12321=cj5*cj5;
IkReal x12322=r11*r11;
IkReal x12323=(cj5*r10);
IkReal x12324=(r11*sj5);
IkReal x12325=((((2.0)*x12323*x12324))+(((-1.0)*x12321*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x12322))+((x12321*x12322)));
j4eval[0]=x12325;
j4eval[1]=((IKabs(r12))+(IKabs((x12324+(((-1.0)*x12323))))));
j4eval[2]=IKsign(x12325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12326=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12326);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12326);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12327=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12327);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12327);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12328=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12328)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x12328)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12329=((1.0)*cj5);
CheckValue<IkReal> x12330=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x12329))),-1);
if(!x12330.valid){
continue;
}
CheckValue<IkReal> x12331=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12329))),-1);
if(!x12331.valid){
continue;
}
if( IKabs(((x12330.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12331.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12330.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((-1.0)*(x12331.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12330.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((-1.0)*(x12331.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12332=IKcos(j4);
IkReal x12333=IKsin(j4);
IkReal x12334=(cj5*r00);
IkReal x12335=(cj5*r10);
IkReal x12336=((1.0)*x12332);
IkReal x12337=((1.0)*x12333);
IkReal x12338=(sj5*x12332);
IkReal x12339=(sj5*x12333);
evalcond[0]=(r22*x12333);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x12336))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x12334*x12336))+((r01*x12338)));
evalcond[3]=((((-1.0)*x12335*x12337))+((r11*x12339)));
evalcond[4]=((1.0)+(((-1.0)*x12335*x12336))+((r11*x12338)));
evalcond[5]=((((-1.0)*x12334*x12337))+((r01*x12339))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12340=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12340.valid){
continue;
}
CheckValue<IkReal> x12341=IKPowWithIntegerCheck(r22,-1);
if(!x12341.valid){
continue;
}
if( IKabs(((x12340.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12341.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12340.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12341.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12340.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12341.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12342=IKcos(j4);
IkReal x12343=IKsin(j4);
IkReal x12344=(cj5*r00);
IkReal x12345=(cj5*r10);
IkReal x12346=((1.0)*x12342);
IkReal x12347=((1.0)*x12343);
IkReal x12348=(sj5*x12342);
IkReal x12349=(sj5*x12343);
evalcond[0]=(r22*x12343);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x12346)));
evalcond[2]=((((-1.0)*x12344*x12346))+((r01*x12348)));
evalcond[3]=((((-1.0)*x12345*x12347))+((r11*x12349)));
evalcond[4]=((1.0)+(((-1.0)*x12345*x12346))+((r11*x12348)));
evalcond[5]=((((-1.0)*x12344*x12347))+(((-1.0)*sj1*sj2))+((r01*x12349))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12350=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12350);
rxp1_1=(px*r21);
rxp1_2=(r11*x12350);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12351=((1.0)*cj5);
j4eval[0]=(((r21*sj5))+(((-1.0)*r20*x12351)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x12351)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12352=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12352);
rxp1_1=(px*r21);
rxp1_2=(r11*x12352);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12353=((1.0)*sj1);
CheckValue<IkReal> x12354=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12354.valid){
continue;
}
CheckValue<IkReal> x12355=IKPowWithIntegerCheck(r02,-1);
if(!x12355.valid){
continue;
}
if( IKabs(((x12354.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12353)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12355.value)*(((((-1.0)*sj2*x12353))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12354.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12353))))))+IKsqr(((x12355.value)*(((((-1.0)*sj2*x12353))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12354.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12353))))), ((x12355.value)*(((((-1.0)*sj2*x12353))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12356=IKcos(j4);
IkReal x12357=IKsin(j4);
IkReal x12358=(r21*sj5);
IkReal x12359=(cj5*r10);
IkReal x12360=(r11*sj5);
IkReal x12361=((1.0)*cj5*r20);
IkReal x12362=((1.0)*x12356);
evalcond[0]=(r02*x12357);
evalcond[1]=(((x12356*x12358))+(((-1.0)*x12356*x12361)));
evalcond[2]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x12362))+((cj1*cj2)));
evalcond[3]=((((-1.0)*x12357*x12359))+((x12357*x12360)));
evalcond[4]=((1.0)+(((-1.0)*x12359*x12362))+((x12356*x12360)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x12357*x12361))+((cj1*sj2))+((x12357*x12358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12363=((1.0)*cj5);
CheckValue<IkReal> x12364=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12363))),-1);
if(!x12364.valid){
continue;
}
CheckValue<IkReal> x12365=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12363))),-1);
if(!x12365.valid){
continue;
}
if( IKabs(((x12364.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12365.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12364.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((-1.0)*(x12365.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12364.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((-1.0)*(x12365.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12366=IKcos(j4);
IkReal x12367=IKsin(j4);
IkReal x12368=(r21*sj5);
IkReal x12369=(cj5*r10);
IkReal x12370=(r11*sj5);
IkReal x12371=((1.0)*cj5*r20);
IkReal x12372=((1.0)*x12366);
evalcond[0]=(r02*x12367);
evalcond[1]=(((x12366*x12368))+(((-1.0)*x12366*x12371)));
evalcond[2]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x12372))+((cj1*cj2)));
evalcond[3]=(((x12367*x12370))+(((-1.0)*x12367*x12369)));
evalcond[4]=((1.0)+((x12366*x12370))+(((-1.0)*x12369*x12372)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12367*x12368))+(((-1.0)*x12367*x12371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12373=cj5*cj5;
IkReal x12374=r11*r11;
IkReal x12375=(cj5*r10);
IkReal x12376=(r11*sj5);
CheckValue<IkReal> x12377 = IKatan2WithCheck(IkReal(r12),IkReal((x12376+(((-1.0)*x12375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12377.valid){
continue;
}
CheckValue<IkReal> x12378=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*x12373*(r10*r10)))+(((2.0)*x12375*x12376))+(((-1.0)*x12374))+((x12373*x12374)))),-1);
if(!x12378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12377.value)+(((1.5707963267949)*(x12378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12379=IKcos(j4);
IkReal x12380=IKsin(j4);
IkReal x12381=(cj5*r00);
IkReal x12382=(cj5*r10);
IkReal x12383=(cj5*r20);
IkReal x12384=((1.0)*x12379);
IkReal x12385=((1.0)*x12380);
IkReal x12386=(sj5*x12379);
IkReal x12387=(sj5*x12380);
evalcond[0]=((((-1.0)*x12383*x12384))+((r21*x12386))+((r22*x12380)));
evalcond[1]=(((r02*x12380))+(((-1.0)*x12381*x12384))+((r01*x12386)));
evalcond[2]=((1.0)+((r12*x12380))+((r11*x12386))+(((-1.0)*x12382*x12384)));
evalcond[3]=(((r11*x12387))+(((-1.0)*x12382*x12385))+(((-1.0)*r12*x12384)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x12383*x12385))+((cj1*sj2))+((r21*x12387))+(((-1.0)*r22*x12384)));
evalcond[5]=((((-1.0)*r02*x12384))+(((-1.0)*sj1*sj2))+(((-1.0)*x12381*x12385))+((r01*x12387))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12388=((1.0)*cj5);
CheckValue<IkReal> x12389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12388))+(((-1.0)*r20*sj5)))),-1);
if(!x12389.valid){
continue;
}
CheckValue<IkReal> x12390 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x12388)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12389.value)))+(x12390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12391=IKcos(j4);
IkReal x12392=IKsin(j4);
IkReal x12393=(cj5*r00);
IkReal x12394=(cj5*r10);
IkReal x12395=(cj5*r20);
IkReal x12396=((1.0)*x12391);
IkReal x12397=((1.0)*x12392);
IkReal x12398=(sj5*x12391);
IkReal x12399=(sj5*x12392);
evalcond[0]=(((r22*x12392))+((r21*x12398))+(((-1.0)*x12395*x12396)));
evalcond[1]=(((r02*x12392))+((r01*x12398))+(((-1.0)*x12393*x12396)));
evalcond[2]=((1.0)+(((-1.0)*x12394*x12396))+((r11*x12398))+((r12*x12392)));
evalcond[3]=((((-1.0)*r12*x12396))+(((-1.0)*x12394*x12397))+((r11*x12399)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x12396))+((r21*x12399))+(((-1.0)*x12395*x12397)));
evalcond[5]=((((-1.0)*r02*x12396))+(((-1.0)*sj1*sj2))+((r01*x12399))+(((-1.0)*x12393*x12397))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12400=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12400.valid){
continue;
}
CheckValue<IkReal> x12401 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12400.value)))+(x12401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12402=IKcos(j4);
IkReal x12403=IKsin(j4);
IkReal x12404=(cj5*r00);
IkReal x12405=(cj5*r10);
IkReal x12406=(cj5*r20);
IkReal x12407=((1.0)*x12402);
IkReal x12408=((1.0)*x12403);
IkReal x12409=(sj5*x12402);
IkReal x12410=(sj5*x12403);
evalcond[0]=(((r22*x12403))+((r21*x12409))+(((-1.0)*x12406*x12407)));
evalcond[1]=(((r02*x12403))+((r01*x12409))+(((-1.0)*x12404*x12407)));
evalcond[2]=((1.0)+(((-1.0)*x12405*x12407))+((r11*x12409))+((r12*x12403)));
evalcond[3]=(((r11*x12410))+(((-1.0)*r12*x12407))+(((-1.0)*x12405*x12408)));
evalcond[4]=(((cj2*sj1))+((r21*x12410))+((cj1*sj2))+(((-1.0)*r22*x12407))+(((-1.0)*x12406*x12408)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x12410))+(((-1.0)*r02*x12407))+((cj1*cj2))+(((-1.0)*x12404*x12408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12411=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12411;
j4eval[1]=IKsign(x12411);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12412=((1.0)*cj5);
IkReal x12413=((((-1.0)*r21*x12412))+(((-1.0)*r20*sj5)));
j4eval[0]=x12413;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x12412))))));
j4eval[2]=IKsign(x12413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12414=cj5*cj5;
IkReal x12415=r11*r11;
IkReal x12416=(cj5*r10);
IkReal x12417=(r11*sj5);
IkReal x12418=(((x12414*x12415))+(((-1.0)*x12414*(r10*r10)))+(((-1.0)*x12415))+(((2.0)*x12416*x12417))+(((-1.0)*(r12*r12))));
j4eval[0]=x12418;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x12416))+x12417))));
j4eval[2]=IKsign(x12418);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12419=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12419);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12419);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12420=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12420);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12420);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12421=((1.0)*cj1);
CheckValue<IkReal> x12422=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12422.valid){
continue;
}
CheckValue<IkReal> x12423=IKPowWithIntegerCheck(r22,-1);
if(!x12423.valid){
continue;
}
if( IKabs(((x12422.value)*((((sj1*sj2))+(((-1.0)*cj2*x12421)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12423.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12421)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12422.value)*((((sj1*sj2))+(((-1.0)*cj2*x12421))))))+IKsqr(((x12423.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12421))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12422.value)*((((sj1*sj2))+(((-1.0)*cj2*x12421))))), ((x12423.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12421))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12424=IKcos(j4);
IkReal x12425=IKsin(j4);
IkReal x12426=(cj5*r00);
IkReal x12427=(cj5*r10);
IkReal x12428=((1.0)*x12424);
IkReal x12429=(sj5*x12424);
IkReal x12430=((1.0)*sj5*x12425);
evalcond[0]=(r22*x12425);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x12424)));
evalcond[2]=(((r01*x12429))+(((-1.0)*x12426*x12428)));
evalcond[3]=((((-1.0)*r11*x12430))+((x12425*x12427)));
evalcond[4]=((1.0)+(((-1.0)*x12427*x12428))+((r11*x12429)));
evalcond[5]=((((-1.0)*r01*x12430))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x12425*x12426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12431=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12431.valid){
continue;
}
CheckValue<IkReal> x12432=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12432.valid){
continue;
}
if( IKabs(((x12431.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12432.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12431.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((-1.0)*(x12432.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12431.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((-1.0)*(x12432.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12433=IKcos(j4);
IkReal x12434=IKsin(j4);
IkReal x12435=(cj5*r00);
IkReal x12436=(cj5*r10);
IkReal x12437=((1.0)*x12433);
IkReal x12438=(sj5*x12433);
IkReal x12439=((1.0)*sj5*x12434);
evalcond[0]=(r22*x12434);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x12433)));
evalcond[2]=((((-1.0)*x12435*x12437))+((r01*x12438)));
evalcond[3]=((((-1.0)*r11*x12439))+((x12434*x12436)));
evalcond[4]=((1.0)+(((-1.0)*x12436*x12437))+((r11*x12438)));
evalcond[5]=((((-1.0)*r01*x12439))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x12434*x12435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12440=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12440);
rxp1_1=(px*r21);
rxp1_2=(r11*x12440);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12441=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12441);
rxp1_1=(px*r21);
rxp1_2=(r11*x12441);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12442=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12442.valid){
continue;
}
CheckValue<IkReal> x12443=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12443.valid){
continue;
}
if( IKabs(((x12442.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12443.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12442.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((-1.0)*(x12443.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12442.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((-1.0)*(x12443.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12444=IKcos(j4);
IkReal x12445=IKsin(j4);
IkReal x12446=(cj5*r10);
IkReal x12447=(cj5*r20);
IkReal x12448=((1.0)*x12444);
IkReal x12449=(sj5*x12444);
IkReal x12450=((1.0)*sj5*x12445);
evalcond[0]=(r02*x12445);
evalcond[1]=((((-1.0)*sj1*sj2))+((r02*x12444))+((cj1*cj2)));
evalcond[2]=(((r21*x12449))+(((-1.0)*x12447*x12448)));
evalcond[3]=((((-1.0)*r11*x12450))+((x12445*x12446)));
evalcond[4]=((1.0)+(((-1.0)*x12446*x12448))+((r11*x12449)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12445*x12447))+(((-1.0)*r21*x12450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12451=((1.0)*cj2);
CheckValue<IkReal> x12452=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12452.valid){
continue;
}
CheckValue<IkReal> x12453=IKPowWithIntegerCheck(r02,-1);
if(!x12453.valid){
continue;
}
if( IKabs(((x12452.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12451)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12453.value)*((((sj1*sj2))+(((-1.0)*cj1*x12451)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12452.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12451))))))+IKsqr(((x12453.value)*((((sj1*sj2))+(((-1.0)*cj1*x12451))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12452.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12451))))), ((x12453.value)*((((sj1*sj2))+(((-1.0)*cj1*x12451))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12454=IKcos(j4);
IkReal x12455=IKsin(j4);
IkReal x12456=(cj5*r10);
IkReal x12457=(cj5*r20);
IkReal x12458=((1.0)*x12454);
IkReal x12459=(sj5*x12454);
IkReal x12460=((1.0)*sj5*x12455);
evalcond[0]=(r02*x12455);
evalcond[1]=(((r02*x12454))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x12457*x12458))+((r21*x12459)));
evalcond[3]=(((x12455*x12456))+(((-1.0)*r11*x12460)));
evalcond[4]=((1.0)+((r11*x12459))+(((-1.0)*x12456*x12458)));
evalcond[5]=(((cj2*sj1))+((x12455*x12457))+(((-1.0)*r21*x12460))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12461=cj5*cj5;
IkReal x12462=r11*r11;
IkReal x12463=(cj5*r10);
IkReal x12464=(r11*sj5);
CheckValue<IkReal> x12465=IKPowWithIntegerCheck(IKsign((((x12461*x12462))+(((-1.0)*x12462))+(((-1.0)*(r12*r12)))+(((-1.0)*x12461*(r10*r10)))+(((2.0)*x12463*x12464)))),-1);
if(!x12465.valid){
continue;
}
CheckValue<IkReal> x12466 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12463))+x12464)),IKFAST_ATAN2_MAGTHRESH);
if(!x12466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12465.value)))+(x12466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12467=IKcos(j4);
IkReal x12468=IKsin(j4);
IkReal x12469=(cj5*r00);
IkReal x12470=((1.0)*x12467);
IkReal x12471=(sj5*x12467);
IkReal x12472=(cj5*x12468);
IkReal x12473=((1.0)*sj5*x12468);
evalcond[0]=((((-1.0)*cj5*r20*x12470))+((r22*x12468))+((r21*x12471)));
evalcond[1]=(((r01*x12471))+((r02*x12468))+(((-1.0)*x12469*x12470)));
evalcond[2]=((((-1.0)*r11*x12473))+((r12*x12467))+((r10*x12472)));
evalcond[3]=((1.0)+((r12*x12468))+((r11*x12471))+(((-1.0)*cj5*r10*x12470)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x12473))+((r20*x12472))+((r22*x12467)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x12467))+((cj1*cj2))+((x12468*x12469))+(((-1.0)*r01*x12473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12474=((1.0)*cj5);
CheckValue<IkReal> x12475=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12474))+(((-1.0)*r20*sj5)))),-1);
if(!x12475.valid){
continue;
}
CheckValue<IkReal> x12476 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x12474)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12475.value)))+(x12476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12477=IKcos(j4);
IkReal x12478=IKsin(j4);
IkReal x12479=(cj5*r00);
IkReal x12480=((1.0)*x12477);
IkReal x12481=(sj5*x12477);
IkReal x12482=(cj5*x12478);
IkReal x12483=((1.0)*sj5*x12478);
evalcond[0]=((((-1.0)*cj5*r20*x12480))+((r22*x12478))+((r21*x12481)));
evalcond[1]=((((-1.0)*x12479*x12480))+((r01*x12481))+((r02*x12478)));
evalcond[2]=((((-1.0)*r11*x12483))+((r12*x12477))+((r10*x12482)));
evalcond[3]=((1.0)+((r12*x12478))+((r11*x12481))+(((-1.0)*cj5*r10*x12480)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x12482))+((r22*x12477))+(((-1.0)*r21*x12483)));
evalcond[5]=(((x12478*x12479))+(((-1.0)*sj1*sj2))+(((-1.0)*r01*x12483))+((cj1*cj2))+((r02*x12477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12484=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12484.valid){
continue;
}
CheckValue<IkReal> x12485 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12484.value)))+(x12485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12486=IKcos(j4);
IkReal x12487=IKsin(j4);
IkReal x12488=(cj5*r00);
IkReal x12489=((1.0)*x12486);
IkReal x12490=(sj5*x12486);
IkReal x12491=(cj5*x12487);
IkReal x12492=((1.0)*sj5*x12487);
evalcond[0]=((((-1.0)*cj5*r20*x12489))+((r22*x12487))+((r21*x12490)));
evalcond[1]=(((r01*x12490))+(((-1.0)*x12488*x12489))+((r02*x12487)));
evalcond[2]=(((r10*x12491))+((r12*x12486))+(((-1.0)*r11*x12492)));
evalcond[3]=((1.0)+((r12*x12487))+(((-1.0)*cj5*r10*x12489))+((r11*x12490)));
evalcond[4]=(((cj2*sj1))+((r20*x12491))+((r22*x12486))+((cj1*sj2))+(((-1.0)*r21*x12492)));
evalcond[5]=((((-1.0)*r01*x12492))+(((-1.0)*sj1*sj2))+((r02*x12486))+((cj1*cj2))+((x12487*x12488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12494 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12494)==0){
continue;
}
IkReal x12493=pow(x12494,-0.5);
CheckValue<IkReal> x12495 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12495.valid){
continue;
}
IkReal gconst58=((-1.0)*(x12495.value));
IkReal gconst59=((-1.0)*r01*x12493);
IkReal gconst60=(r00*x12493);
CheckValue<IkReal> x12496 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12496.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12496.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12499 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12499.valid){
continue;
}
IkReal x12497=((-1.0)*(x12499.value));
IkReal x12498=x12493;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst59;
cj5=gconst60;
j5=x12497;
IkReal gconst58=x12497;
IkReal gconst59=((-1.0)*r01*x12498);
IkReal gconst60=(r00*x12498);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12502 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12502.valid){
continue;
}
IkReal x12500=((-1.0)*(x12502.value));
IkReal x12501=x12493;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst59;
cj5=gconst60;
j5=x12500;
IkReal gconst58=x12500;
IkReal gconst59=((-1.0)*r01*x12501);
IkReal gconst60=(r00*x12501);
CheckValue<IkReal> x12510=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12510.valid){
continue;
}
IkReal x12503=x12510.value;
IkReal x12504=(cj3*x12503);
IkReal x12505=(r21*x12504);
IkReal x12506=(r10*x12504);
IkReal x12507=(r11*x12504);
IkReal x12508=(r20*x12504);
IkReal x12509=(r00*r01*x12504);
j4eval[0]=IKsign((((cj3*r12*r22))+((r00*r01*r20*x12507))+((r00*r01*r10*x12505))+((r11*x12505*(r01*r01)))+((r20*x12506*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12511=gconst59*gconst59;
IkReal x12512=gconst60*gconst60;
IkReal x12513=((1.0)*cj3);
IkReal x12514=(gconst59*r10);
IkReal x12515=(r11*r20);
IkReal x12516=((1.0)*sj3);
IkReal x12517=(gconst60*r21);
IkReal x12518=(r21*x12511);
CheckValue<IkReal> x12519=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12516*x12518))+((sj3*x12514*x12517))+((gconst59*gconst60*sj3*x12515))+(((-1.0)*r12*r22*x12516))+(((-1.0)*r10*r20*x12512*x12516)))),-1);
if(!x12519.valid){
continue;
}
CheckValue<IkReal> x12520 = IKatan2WithCheck(IkReal((((cj3*gconst59*r11*x12517))+(((-1.0)*x12512*x12513*x12515))+(((-1.0)*gconst60*r20*x12513*x12514))+((cj3*r10*x12518)))),IkReal(((((-1.0)*r22*x12513*x12514))+(((-1.0)*gconst60*r11*r22*x12513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12519.value)))+(x12520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12521=IKcos(j4);
IkReal x12522=IKsin(j4);
IkReal x12523=(cj2*sj1);
IkReal x12524=(cj1*sj2);
IkReal x12525=(gconst59*sj3);
IkReal x12526=(sj1*sj2);
IkReal x12527=(gconst60*r00);
IkReal x12528=(cj3*r21);
IkReal x12529=(gconst60*sj3);
IkReal x12530=(cj3*gconst60);
IkReal x12531=(cj1*cj2);
IkReal x12532=(cj3*gconst59);
IkReal x12533=(gconst60*r10);
IkReal x12534=(gconst60*r20);
IkReal x12535=((1.0)*x12522);
IkReal x12536=(cj3*x12522);
IkReal x12537=(gconst59*x12521);
IkReal x12538=((1.0)*x12521);
IkReal x12539=(cj3*x12521);
IkReal x12540=(x12524+x12523);
evalcond[0]=(((r22*x12522))+((r21*x12537))+(((-1.0)*x12534*x12538)));
evalcond[1]=((((-1.0)*x12527*x12538))+((r01*x12537))+((r02*x12522)));
evalcond[2]=((1.0)+(((-1.0)*x12533*x12538))+((r11*x12537))+((r12*x12522)));
evalcond[3]=(((r10*x12525))+((r10*x12522*x12530))+((r11*x12529))+(((-1.0)*r11*x12532*x12535))+((r12*x12539)));
evalcond[4]=(((r11*x12530))+(((-1.0)*r10*x12529*x12535))+(((-1.0)*r12*sj3*x12538))+((r10*x12532))+((r11*x12522*x12525)));
evalcond[5]=(((x12527*x12536))+(((-1.0)*r01*x12532*x12535))+((r02*x12539))+((r01*x12529))+x12540+((r00*x12525)));
evalcond[6]=((((-1.0)*r20*x12529*x12535))+((r20*x12532))+((gconst60*x12528))+(((-1.0)*r22*sj3*x12538))+((r21*x12522*x12525))+x12540);
evalcond[7]=(((r21*x12529))+((r20*x12525))+((r20*x12522*x12530))+(((-1.0)*gconst59*x12528*x12535))+(((-1.0)*x12531))+((r22*x12539))+x12526);
evalcond[8]=(((r00*x12532))+((r01*x12522*x12525))+(((-1.0)*r02*sj3*x12538))+(((-1.0)*sj3*x12527*x12535))+x12531+(((-1.0)*x12526))+((r01*x12530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12541=gconst59*gconst59;
IkReal x12542=gconst60*gconst60;
IkReal x12543=(r10*sj3);
IkReal x12544=((1.0)*r20);
IkReal x12545=(gconst59*gconst60);
IkReal x12546=(cj3*r10);
IkReal x12547=(r11*sj3);
IkReal x12548=(cj3*r11);
IkReal x12549=((1.0)*r22);
IkReal x12550=(r21*x12541);
CheckValue<IkReal> x12551 = IKatan2WithCheck(IkReal(((((-1.0)*x12542*x12544*x12547))+((r21*x12545*x12547))+((x12543*x12550))+(((-1.0)*x12543*x12544*x12545)))),IkReal(((((-1.0)*gconst60*x12547*x12549))+(((-1.0)*gconst59*x12543*x12549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12551.valid){
continue;
}
CheckValue<IkReal> x12552=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x12548*x12550))+(((-1.0)*r21*x12545*x12546))+((r20*x12542*x12546))+(((-1.0)*x12544*x12545*x12548)))),-1);
if(!x12552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12551.value)+(((1.5707963267949)*(x12552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12553=IKcos(j4);
IkReal x12554=IKsin(j4);
IkReal x12555=(cj2*sj1);
IkReal x12556=(cj1*sj2);
IkReal x12557=(gconst59*sj3);
IkReal x12558=(sj1*sj2);
IkReal x12559=(gconst60*r00);
IkReal x12560=(cj3*r21);
IkReal x12561=(gconst60*sj3);
IkReal x12562=(cj3*gconst60);
IkReal x12563=(cj1*cj2);
IkReal x12564=(cj3*gconst59);
IkReal x12565=(gconst60*r10);
IkReal x12566=(gconst60*r20);
IkReal x12567=((1.0)*x12554);
IkReal x12568=(cj3*x12554);
IkReal x12569=(gconst59*x12553);
IkReal x12570=((1.0)*x12553);
IkReal x12571=(cj3*x12553);
IkReal x12572=(x12556+x12555);
evalcond[0]=(((r22*x12554))+((r21*x12569))+(((-1.0)*x12566*x12570)));
evalcond[1]=(((r01*x12569))+((r02*x12554))+(((-1.0)*x12559*x12570)));
evalcond[2]=((1.0)+((r11*x12569))+(((-1.0)*x12565*x12570))+((r12*x12554)));
evalcond[3]=(((r11*x12561))+(((-1.0)*r11*x12564*x12567))+((r10*x12557))+((r12*x12571))+((r10*x12554*x12562)));
evalcond[4]=(((r11*x12562))+((r11*x12554*x12557))+(((-1.0)*r10*x12561*x12567))+((r10*x12564))+(((-1.0)*r12*sj3*x12570)));
evalcond[5]=(((r00*x12557))+((r02*x12571))+((r01*x12561))+(((-1.0)*r01*x12564*x12567))+((x12559*x12568))+x12572);
evalcond[6]=(((r20*x12564))+(((-1.0)*r22*sj3*x12570))+((r21*x12554*x12557))+x12572+(((-1.0)*r20*x12561*x12567))+((gconst60*x12560)));
evalcond[7]=(((r22*x12571))+((r20*x12557))+(((-1.0)*x12563))+((r20*x12554*x12562))+((r21*x12561))+x12558+(((-1.0)*gconst59*x12560*x12567)));
evalcond[8]=((((-1.0)*x12558))+((r01*x12554*x12557))+((r01*x12562))+((r00*x12564))+x12563+(((-1.0)*r02*sj3*x12570))+(((-1.0)*sj3*x12559*x12567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12573=((1.0)*gconst60);
CheckValue<IkReal> x12574 = IKatan2WithCheck(IkReal((((gconst59*r01))+(((-1.0)*r00*x12573)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12574.valid){
continue;
}
CheckValue<IkReal> x12575=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12573))+(((-1.0)*gconst59*r20)))),-1);
if(!x12575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12574.value)+(((1.5707963267949)*(x12575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12576=IKcos(j4);
IkReal x12577=IKsin(j4);
IkReal x12578=(cj2*sj1);
IkReal x12579=(cj1*sj2);
IkReal x12580=(gconst59*sj3);
IkReal x12581=(sj1*sj2);
IkReal x12582=(gconst60*r00);
IkReal x12583=(cj3*r21);
IkReal x12584=(gconst60*sj3);
IkReal x12585=(cj3*gconst60);
IkReal x12586=(cj1*cj2);
IkReal x12587=(cj3*gconst59);
IkReal x12588=(gconst60*r10);
IkReal x12589=(gconst60*r20);
IkReal x12590=((1.0)*x12577);
IkReal x12591=(cj3*x12577);
IkReal x12592=(gconst59*x12576);
IkReal x12593=((1.0)*x12576);
IkReal x12594=(cj3*x12576);
IkReal x12595=(x12578+x12579);
evalcond[0]=(((r22*x12577))+((r21*x12592))+(((-1.0)*x12589*x12593)));
evalcond[1]=(((r01*x12592))+((r02*x12577))+(((-1.0)*x12582*x12593)));
evalcond[2]=((1.0)+(((-1.0)*x12588*x12593))+((r12*x12577))+((r11*x12592)));
evalcond[3]=((((-1.0)*r11*x12587*x12590))+((r12*x12594))+((r10*x12577*x12585))+((r11*x12584))+((r10*x12580)));
evalcond[4]=((((-1.0)*r10*x12584*x12590))+((r11*x12577*x12580))+(((-1.0)*r12*sj3*x12593))+((r11*x12585))+((r10*x12587)));
evalcond[5]=(((r00*x12580))+((r01*x12584))+((r02*x12594))+((x12582*x12591))+x12595+(((-1.0)*r01*x12587*x12590)));
evalcond[6]=(((r20*x12587))+(((-1.0)*r22*sj3*x12593))+(((-1.0)*r20*x12584*x12590))+((gconst60*x12583))+x12595+((r21*x12577*x12580)));
evalcond[7]=(((r20*x12580))+(((-1.0)*gconst59*x12583*x12590))+((r21*x12584))+((r22*x12594))+((r20*x12577*x12585))+(((-1.0)*x12586))+x12581);
evalcond[8]=(((r00*x12587))+((r01*x12585))+((r01*x12577*x12580))+(((-1.0)*x12581))+x12586+(((-1.0)*r02*sj3*x12593))+(((-1.0)*sj3*x12582*x12590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12597 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12597)==0){
continue;
}
IkReal x12596=pow(x12597,-0.5);
CheckValue<IkReal> x12598 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12598.valid){
continue;
}
IkReal gconst61=((3.14159265358979)+(((-1.0)*(x12598.value))));
IkReal gconst62=((1.0)*r01*x12596);
IkReal gconst63=((-1.0)*r00*x12596);
CheckValue<IkReal> x12599 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12599.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12599.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x12602 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12602.valid){
continue;
}
IkReal x12600=((1.0)*(x12602.value));
IkReal x12601=x12596;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst62;
cj5=gconst63;
j5=((3.14159265)+(((-1.0)*x12600)));
IkReal gconst61=((3.14159265358979)+(((-1.0)*x12600)));
IkReal gconst62=((1.0)*r01*x12601);
IkReal gconst63=((-1.0)*r00*x12601);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12605 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12605.valid){
continue;
}
IkReal x12603=((1.0)*(x12605.value));
IkReal x12604=x12596;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst62;
cj5=gconst63;
j5=((3.14159265)+(((-1.0)*x12603)));
IkReal gconst61=((3.14159265358979)+(((-1.0)*x12603)));
IkReal gconst62=((1.0)*r01*x12604);
IkReal gconst63=((-1.0)*r00*x12604);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12606=gconst63*gconst63;
IkReal x12607=gconst62*gconst62;
IkReal x12608=(r11*r21);
IkReal x12609=((1.0)*r10);
IkReal x12610=(r22*sj3);
IkReal x12611=(cj3*r20);
IkReal x12612=(gconst62*gconst63*sj3);
IkReal x12613=((1.0)*gconst63*r11);
CheckValue<IkReal> x12614 = IKatan2WithCheck(IkReal((((x12608*x12612))+((r10*r21*sj3*x12607))+(((-1.0)*r11*r20*sj3*x12606))+(((-1.0)*r20*x12609*x12612)))),IkReal(((((-1.0)*gconst62*x12609*x12610))+(((-1.0)*x12610*x12613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12614.valid){
continue;
}
CheckValue<IkReal> x12615=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*gconst62*x12611*x12613))+((r10*x12606*x12611))+(((-1.0)*cj3*gconst62*gconst63*r21*x12609))+((cj3*x12607*x12608)))),-1);
if(!x12615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12614.value)+(((1.5707963267949)*(x12615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12616=IKcos(j4);
IkReal x12617=IKsin(j4);
IkReal x12618=(cj2*sj1);
IkReal x12619=(cj1*sj2);
IkReal x12620=(gconst63*r00);
IkReal x12621=(cj3*gconst63);
IkReal x12622=(gconst62*sj3);
IkReal x12623=(sj1*sj2);
IkReal x12624=(cj3*gconst62);
IkReal x12625=(cj1*cj2);
IkReal x12626=(gconst63*sj3);
IkReal x12627=((1.0)*x12616);
IkReal x12628=((1.0)*x12617);
IkReal x12629=(cj3*x12616);
IkReal x12630=(gconst62*x12616);
IkReal x12631=(x12619+x12618);
evalcond[0]=((((-1.0)*gconst63*r20*x12627))+((r21*x12630))+((r22*x12617)));
evalcond[1]=(((r02*x12617))+(((-1.0)*x12620*x12627))+((r01*x12630)));
evalcond[2]=((1.0)+((r11*x12630))+(((-1.0)*gconst63*r10*x12627))+((r12*x12617)));
evalcond[3]=((((-1.0)*r11*x12624*x12628))+((r10*x12617*x12621))+((r12*x12629))+((r10*x12622))+((r11*x12626)));
evalcond[4]=(((r11*x12617*x12622))+(((-1.0)*r10*x12626*x12628))+(((-1.0)*r12*sj3*x12627))+((r10*x12624))+((r11*x12621)));
evalcond[5]=(((r02*x12629))+((cj3*x12617*x12620))+(((-1.0)*r01*x12624*x12628))+((r01*x12626))+((r00*x12622))+x12631);
evalcond[6]=((((-1.0)*r20*x12626*x12628))+((r21*x12621))+x12631+((r20*x12624))+((r21*x12617*x12622))+(((-1.0)*r22*sj3*x12627)));
evalcond[7]=(((r22*x12629))+((r20*x12617*x12621))+((r21*x12626))+(((-1.0)*x12625))+x12623+((r20*x12622))+(((-1.0)*r21*x12624*x12628)));
evalcond[8]=((((-1.0)*x12623))+((r01*x12617*x12622))+(((-1.0)*r02*sj3*x12627))+((r01*x12621))+((r00*x12624))+(((-1.0)*sj3*x12620*x12628))+x12625);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12632=((1.0)*gconst63);
CheckValue<IkReal> x12633 = IKatan2WithCheck(IkReal((((gconst62*r01))+(((-1.0)*r00*x12632)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12633.valid){
continue;
}
CheckValue<IkReal> x12634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12632))+(((-1.0)*gconst62*r20)))),-1);
if(!x12634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12633.value)+(((1.5707963267949)*(x12634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12635=IKcos(j4);
IkReal x12636=IKsin(j4);
IkReal x12637=(cj2*sj1);
IkReal x12638=(cj1*sj2);
IkReal x12639=(gconst63*r00);
IkReal x12640=(cj3*gconst63);
IkReal x12641=(gconst62*sj3);
IkReal x12642=(sj1*sj2);
IkReal x12643=(cj3*gconst62);
IkReal x12644=(cj1*cj2);
IkReal x12645=(gconst63*sj3);
IkReal x12646=((1.0)*x12635);
IkReal x12647=((1.0)*x12636);
IkReal x12648=(cj3*x12635);
IkReal x12649=(gconst62*x12635);
IkReal x12650=(x12637+x12638);
evalcond[0]=((((-1.0)*gconst63*r20*x12646))+((r22*x12636))+((r21*x12649)));
evalcond[1]=((((-1.0)*x12639*x12646))+((r01*x12649))+((r02*x12636)));
evalcond[2]=((1.0)+((r12*x12636))+(((-1.0)*gconst63*r10*x12646))+((r11*x12649)));
evalcond[3]=(((r10*x12636*x12640))+((r12*x12648))+(((-1.0)*r11*x12643*x12647))+((r10*x12641))+((r11*x12645)));
evalcond[4]=((((-1.0)*r10*x12645*x12647))+(((-1.0)*r12*sj3*x12646))+((r10*x12643))+((r11*x12636*x12641))+((r11*x12640)));
evalcond[5]=((((-1.0)*r01*x12643*x12647))+((r00*x12641))+((r01*x12645))+x12650+((r02*x12648))+((cj3*x12636*x12639)));
evalcond[6]=(((r21*x12636*x12641))+((r20*x12643))+(((-1.0)*r20*x12645*x12647))+x12650+((r21*x12640))+(((-1.0)*r22*sj3*x12646)));
evalcond[7]=((((-1.0)*x12644))+((r20*x12641))+((r20*x12636*x12640))+((r22*x12648))+(((-1.0)*r21*x12643*x12647))+x12642+((r21*x12645)));
evalcond[8]=((((-1.0)*x12642))+((r00*x12643))+((r01*x12640))+((r01*x12636*x12641))+x12644+(((-1.0)*sj3*x12639*x12647))+(((-1.0)*r02*sj3*x12646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12651=IKPowWithIntegerCheck(IKsign((((gconst63*r01))+((gconst62*r00)))),-1);
if(!x12651.valid){
continue;
}
CheckValue<IkReal> x12652 = IKatan2WithCheck(IkReal((((gconst62*r21))+(((-1.0)*gconst63*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12651.value)))+(x12652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12653=IKcos(j4);
IkReal x12654=IKsin(j4);
IkReal x12655=(cj2*sj1);
IkReal x12656=(cj1*sj2);
IkReal x12657=(gconst63*r00);
IkReal x12658=(cj3*gconst63);
IkReal x12659=(gconst62*sj3);
IkReal x12660=(sj1*sj2);
IkReal x12661=(cj3*gconst62);
IkReal x12662=(cj1*cj2);
IkReal x12663=(gconst63*sj3);
IkReal x12664=((1.0)*x12653);
IkReal x12665=((1.0)*x12654);
IkReal x12666=(cj3*x12653);
IkReal x12667=(gconst62*x12653);
IkReal x12668=(x12655+x12656);
evalcond[0]=(((r21*x12667))+((r22*x12654))+(((-1.0)*gconst63*r20*x12664)));
evalcond[1]=((((-1.0)*x12657*x12664))+((r02*x12654))+((r01*x12667)));
evalcond[2]=((1.0)+((r11*x12667))+((r12*x12654))+(((-1.0)*gconst63*r10*x12664)));
evalcond[3]=(((r10*x12659))+((r12*x12666))+((r11*x12663))+((r10*x12654*x12658))+(((-1.0)*r11*x12661*x12665)));
evalcond[4]=(((r10*x12661))+((r11*x12658))+(((-1.0)*r10*x12663*x12665))+(((-1.0)*r12*sj3*x12664))+((r11*x12654*x12659)));
evalcond[5]=(((cj3*x12654*x12657))+((r02*x12666))+x12668+((r01*x12663))+(((-1.0)*r01*x12661*x12665))+((r00*x12659)));
evalcond[6]=(((r21*x12658))+(((-1.0)*r22*sj3*x12664))+((r21*x12654*x12659))+x12668+(((-1.0)*r20*x12663*x12665))+((r20*x12661)));
evalcond[7]=(((r21*x12663))+((r20*x12654*x12658))+((r22*x12666))+(((-1.0)*x12662))+x12660+((r20*x12659))+(((-1.0)*r21*x12661*x12665)));
evalcond[8]=(((r01*x12654*x12659))+(((-1.0)*sj3*x12657*x12665))+(((-1.0)*r02*sj3*x12664))+(((-1.0)*x12660))+x12662+((r00*x12661))+((r01*x12658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12669=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12669);
rxp1_1=(px*r21);
rxp1_2=(r11*x12669);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12670=(r11*sj5);
IkReal x12671=((1.0)*cj5*r10);
j4eval[0]=(((sj3*x12670))+(((-1.0)*sj3*x12671)));
j4eval[1]=((((-1.0)*x12671))+x12670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12672=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12672);
rxp1_1=(px*r21);
rxp1_2=(r11*x12672);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12673=(cj5*r10);
IkReal x12674=(r11*sj5);
j4eval[0]=(((cj3*x12673))+(((-1.0)*cj3*x12674)));
j4eval[1]=((((-1.0)*x12673))+x12674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12675=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12675);
rxp1_1=(px*r21);
rxp1_2=(r11*x12675);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3)));
j4eval[1]=cj3;
j4eval[2]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12676=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12676);
rxp1_1=(px*r21);
rxp1_2=(r11*x12676);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12677=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12677);
rxp1_1=(px*r21);
rxp1_2=(r11*x12677);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12678=((1.0)*sj1);
CheckValue<IkReal> x12679=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12679.valid){
continue;
}
CheckValue<IkReal> x12680=IKPowWithIntegerCheck(r02,-1);
if(!x12680.valid){
continue;
}
if( IKabs(((x12679.value)*((((cj1*cj2))+(((-1.0)*sj2*x12678)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12680.value)*(((((-1.0)*cj2*x12678))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12679.value)*((((cj1*cj2))+(((-1.0)*sj2*x12678))))))+IKsqr(((x12680.value)*(((((-1.0)*cj2*x12678))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12679.value)*((((cj1*cj2))+(((-1.0)*sj2*x12678))))), ((x12680.value)*(((((-1.0)*cj2*x12678))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12681=IKcos(j4);
IkReal x12682=IKsin(j4);
IkReal x12683=(sj5*x12681);
IkReal x12684=(cj5*x12682);
IkReal x12685=((1.0)*sj5*x12682);
IkReal x12686=((1.0)*cj5*x12681);
evalcond[0]=(r02*x12682);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r02*x12681)));
evalcond[2]=(((r21*x12683))+(((-1.0)*r20*x12686)));
evalcond[3]=(((r10*x12684))+(((-1.0)*r11*x12685)));
evalcond[4]=((1.0)+((r11*x12683))+(((-1.0)*r10*x12686)));
evalcond[5]=((((-1.0)*r21*x12685))+((r20*x12684))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12687=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12687.valid){
continue;
}
CheckValue<IkReal> x12688=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12688.valid){
continue;
}
if( IKabs(((x12687.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12688.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12687.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((-1.0)*(x12688.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12687.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((-1.0)*(x12688.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12689=IKcos(j4);
IkReal x12690=IKsin(j4);
IkReal x12691=(sj5*x12689);
IkReal x12692=(cj5*x12690);
IkReal x12693=((1.0)*sj5*x12690);
IkReal x12694=((1.0)*cj5*x12689);
evalcond[0]=(r02*x12690);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r02*x12689)));
evalcond[2]=(((r21*x12691))+(((-1.0)*r20*x12694)));
evalcond[3]=((((-1.0)*r11*x12693))+((r10*x12692)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12694))+((r11*x12691)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x12692))+(((-1.0)*r21*x12693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12695=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12695);
rxp1_1=(px*r21);
rxp1_2=(r11*x12695);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12696=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12696);
rxp1_1=(px*r21);
rxp1_2=(r11*x12696);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12697=((1.0)*cj5);
j4eval[0]=(((r21*sj5))+(((-1.0)*r20*x12697)));
j4eval[1]=((((-1.0)*r10*x12697))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12698=((1.0)*cj5);
CheckValue<IkReal> x12699=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12698))),-1);
if(!x12699.valid){
continue;
}
CheckValue<IkReal> x12700=IKPowWithIntegerCheck(((((-1.0)*r10*x12698))+((r11*sj5))),-1);
if(!x12700.valid){
continue;
}
if( IKabs(((x12699.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12700.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12699.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((-1.0)*(x12700.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12699.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((-1.0)*(x12700.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12701=IKcos(j4);
IkReal x12702=IKsin(j4);
IkReal x12703=(r21*sj5);
IkReal x12704=(cj5*r10);
IkReal x12705=(r11*sj5);
IkReal x12706=((1.0)*cj5*r20);
IkReal x12707=((1.0)*x12701);
evalcond[0]=(r02*x12702);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x12707)));
evalcond[2]=((((-1.0)*x12701*x12706))+((x12701*x12703)));
evalcond[3]=((((-1.0)*x12702*x12704))+((x12702*x12705)));
evalcond[4]=((1.0)+(((-1.0)*x12704*x12707))+((x12701*x12705)));
evalcond[5]=((((-1.0)*x12702*x12706))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12702*x12703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12708=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12708.valid){
continue;
}
CheckValue<IkReal> x12709=IKPowWithIntegerCheck(r02,-1);
if(!x12709.valid){
continue;
}
if( IKabs(((x12708.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12709.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12708.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12709.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12708.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12709.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12710=IKcos(j4);
IkReal x12711=IKsin(j4);
IkReal x12712=(r21*sj5);
IkReal x12713=(cj5*r10);
IkReal x12714=(r11*sj5);
IkReal x12715=((1.0)*cj5*r20);
IkReal x12716=((1.0)*x12710);
evalcond[0]=(r02*x12711);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x12716)));
evalcond[2]=((((-1.0)*x12710*x12715))+((x12710*x12712)));
evalcond[3]=((((-1.0)*x12711*x12713))+((x12711*x12714)));
evalcond[4]=((1.0)+((x12710*x12714))+(((-1.0)*x12713*x12716)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12711*x12712))+(((-1.0)*x12711*x12715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12717=((1.0)*cj5);
CheckValue<IkReal> x12718=IKPowWithIntegerCheck((((r11*sj3*sj5))+(((-1.0)*r10*sj3*x12717))),-1);
if(!x12718.valid){
continue;
}
CheckValue<IkReal> x12719=IKPowWithIntegerCheck(cj3,-1);
if(!x12719.valid){
continue;
}
CheckValue<IkReal> x12720=IKPowWithIntegerCheck(r02,-1);
if(!x12720.valid){
continue;
}
if( IKabs(((x12718.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x12717)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12719.value)*(x12720.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12718.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x12717))))))+IKsqr(((x12719.value)*(x12720.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12718.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x12717))))), ((x12719.value)*(x12720.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12721=IKcos(j4);
IkReal x12722=IKsin(j4);
IkReal x12723=(cj2*sj1);
IkReal x12724=(cj1*sj2);
IkReal x12725=(r21*sj5);
IkReal x12726=(sj1*sj2);
IkReal x12727=(cj5*sj3);
IkReal x12728=(cj3*sj5);
IkReal x12729=(cj1*cj2);
IkReal x12730=(cj3*cj5);
IkReal x12731=(sj3*sj5);
IkReal x12732=((1.0)*x12722);
IkReal x12733=(r02*x12721);
IkReal x12734=(x12724+x12723);
IkReal x12735=((1.0)*cj5*x12721);
evalcond[0]=(r02*x12722);
evalcond[1]=(((cj3*x12733))+x12734);
evalcond[2]=(((x12721*x12725))+(((-1.0)*r20*x12735)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12735))+((r11*sj5*x12721)));
evalcond[4]=((((-1.0)*x12726))+(((-1.0)*sj3*x12733))+x12729);
evalcond[5]=(((r11*x12730))+((r11*x12722*x12731))+((r10*x12728))+(((-1.0)*r10*x12727*x12732)));
evalcond[6]=(((r11*x12727))+(((-1.0)*r11*x12728*x12732))+((r10*x12731))+((r10*x12722*x12730)));
evalcond[7]=(((r21*x12730))+(((-1.0)*r20*x12727*x12732))+((r20*x12728))+x12734+((sj3*x12722*x12725)));
evalcond[8]=((((-1.0)*x12729))+((r21*x12727))+((r20*x12731))+(((-1.0)*cj3*x12725*x12732))+x12726+((r20*x12722*x12730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12736=((1.0)*sj5);
IkReal x12737=(cj5*r10);
CheckValue<IkReal> x12738=IKPowWithIntegerCheck(((((-1.0)*cj3*r11*x12736))+((cj3*x12737))),-1);
if(!x12738.valid){
continue;
}
CheckValue<IkReal> x12739=IKPowWithIntegerCheck(((((-1.0)*x12737))+((r11*sj5))),-1);
if(!x12739.valid){
continue;
}
if( IKabs(((x12738.value)*(((((-1.0)*r10*sj3*x12736))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12739.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12738.value)*(((((-1.0)*r10*sj3*x12736))+(((-1.0)*cj5*r11*sj3))))))+IKsqr(((-1.0)*(x12739.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12738.value)*(((((-1.0)*r10*sj3*x12736))+(((-1.0)*cj5*r11*sj3))))), ((-1.0)*(x12739.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12740=IKcos(j4);
IkReal x12741=IKsin(j4);
IkReal x12742=(cj2*sj1);
IkReal x12743=(cj1*sj2);
IkReal x12744=(r21*sj5);
IkReal x12745=(sj1*sj2);
IkReal x12746=(cj5*sj3);
IkReal x12747=(cj3*sj5);
IkReal x12748=(cj1*cj2);
IkReal x12749=(cj3*cj5);
IkReal x12750=(sj3*sj5);
IkReal x12751=((1.0)*x12741);
IkReal x12752=(r02*x12740);
IkReal x12753=(x12743+x12742);
IkReal x12754=((1.0)*cj5*x12740);
evalcond[0]=(r02*x12741);
evalcond[1]=(((cj3*x12752))+x12753);
evalcond[2]=((((-1.0)*r20*x12754))+((x12740*x12744)));
evalcond[3]=((1.0)+((r11*sj5*x12740))+(((-1.0)*r10*x12754)));
evalcond[4]=((((-1.0)*x12745))+(((-1.0)*sj3*x12752))+x12748);
evalcond[5]=(((r11*x12749))+((r11*x12741*x12750))+(((-1.0)*r10*x12746*x12751))+((r10*x12747)));
evalcond[6]=((((-1.0)*r11*x12747*x12751))+((r11*x12746))+((r10*x12750))+((r10*x12741*x12749)));
evalcond[7]=(((sj3*x12741*x12744))+x12753+((r20*x12747))+((r21*x12749))+(((-1.0)*r20*x12746*x12751)));
evalcond[8]=(((r20*x12741*x12749))+(((-1.0)*x12748))+(((-1.0)*cj3*x12744*x12751))+x12745+((r20*x12750))+((r21*x12746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12755=((1.0)*cj5);
IkReal x12756=(r11*sj5);
CheckValue<IkReal> x12757=IKPowWithIntegerCheck(((((-1.0)*r10*sj3*x12755))+((sj3*x12756))),-1);
if(!x12757.valid){
continue;
}
CheckValue<IkReal> x12758=IKPowWithIntegerCheck((x12756+(((-1.0)*r10*x12755))),-1);
if(!x12758.valid){
continue;
}
if( IKabs(((x12757.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x12755)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12758.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12757.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x12755))))))+IKsqr(((-1.0)*(x12758.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12757.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x12755))))), ((-1.0)*(x12758.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12759=IKcos(j4);
IkReal x12760=IKsin(j4);
IkReal x12761=(cj2*sj1);
IkReal x12762=(cj1*sj2);
IkReal x12763=(r21*sj5);
IkReal x12764=(sj1*sj2);
IkReal x12765=(cj5*sj3);
IkReal x12766=(cj3*sj5);
IkReal x12767=(cj1*cj2);
IkReal x12768=(cj3*cj5);
IkReal x12769=(sj3*sj5);
IkReal x12770=((1.0)*x12760);
IkReal x12771=(r02*x12759);
IkReal x12772=(x12761+x12762);
IkReal x12773=((1.0)*cj5*x12759);
evalcond[0]=(r02*x12760);
evalcond[1]=(((cj3*x12771))+x12772);
evalcond[2]=((((-1.0)*r20*x12773))+((x12759*x12763)));
evalcond[3]=((1.0)+((r11*sj5*x12759))+(((-1.0)*r10*x12773)));
evalcond[4]=((((-1.0)*sj3*x12771))+(((-1.0)*x12764))+x12767);
evalcond[5]=(((r11*x12760*x12769))+(((-1.0)*r10*x12765*x12770))+((r11*x12768))+((r10*x12766)));
evalcond[6]=(((r10*x12760*x12768))+(((-1.0)*r11*x12766*x12770))+((r11*x12765))+((r10*x12769)));
evalcond[7]=(((r21*x12768))+(((-1.0)*r20*x12765*x12770))+((sj3*x12760*x12763))+((r20*x12766))+x12772);
evalcond[8]=(((r21*x12765))+(((-1.0)*cj3*x12763*x12770))+(((-1.0)*x12767))+((r20*x12769))+((r20*x12760*x12768))+x12764);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12774=cj5*cj5;
IkReal x12775=((1.0)*cj5);
IkReal x12776=(r11*sj3);
IkReal x12777=(cj3*sj5);
IkReal x12778=(r10*r21);
IkReal x12779=(cj3*r11*r21);
IkReal x12780=((1.0)*x12774);
IkReal x12781=(r10*sj3*sj5);
CheckValue<IkReal> x12782 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12775*x12781))+((sj3*x12778))+(((-1.0)*r20*x12776*x12780))+(((-1.0)*sj3*x12778*x12780))+((cj5*r21*sj5*x12776)))),IkReal(((((-1.0)*r22*x12781))+(((-1.0)*r22*x12775*x12776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12782.valid){
continue;
}
CheckValue<IkReal> x12783=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x12775*x12777*x12778))+(((-1.0)*x12779*x12780))+((cj3*r10*r20*x12774))+x12779+(((-1.0)*r11*r20*x12775*x12777)))),-1);
if(!x12783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12782.value)+(((1.5707963267949)*(x12783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12784=IKcos(j4);
IkReal x12785=IKsin(j4);
IkReal x12786=(cj2*sj1);
IkReal x12787=(cj1*sj2);
IkReal x12788=((1.0)*cj5);
IkReal x12789=(sj1*sj2);
IkReal x12790=(cj5*r01);
IkReal x12791=(cj1*cj2);
IkReal x12792=(cj3*sj5);
IkReal x12793=(cj3*cj5);
IkReal x12794=(cj5*sj3);
IkReal x12795=(sj3*sj5);
IkReal x12796=(sj5*x12784);
IkReal x12797=(sj3*x12785);
IkReal x12798=((1.0)*x12785);
IkReal x12799=(cj3*x12784);
IkReal x12800=(x12787+x12786);
IkReal x12801=((1.0)*sj3*x12784);
evalcond[0]=(((r22*x12785))+((r21*x12796))+(((-1.0)*r20*x12784*x12788)));
evalcond[1]=(((r01*x12796))+((r02*x12785))+(((-1.0)*r00*x12784*x12788)));
evalcond[2]=((1.0)+((r11*x12796))+((r12*x12785))+(((-1.0)*r10*x12784*x12788)));
evalcond[3]=((((-1.0)*r11*x12792*x12798))+((r10*x12795))+((r11*x12794))+((r12*x12799))+((r10*x12785*x12793)));
evalcond[4]=(((r11*x12785*x12795))+((r10*x12792))+(((-1.0)*r12*x12801))+((r11*x12793))+(((-1.0)*r10*x12788*x12797)));
evalcond[5]=(((r02*x12799))+x12800+((r00*x12785*x12793))+((r00*x12795))+(((-1.0)*r01*x12792*x12798))+((sj3*x12790)));
evalcond[6]=(x12800+((r21*x12785*x12795))+((r20*x12792))+(((-1.0)*r20*x12788*x12797))+(((-1.0)*r22*x12801))+((r21*x12793)));
evalcond[7]=(((r20*x12795))+((r20*x12785*x12793))+(((-1.0)*x12791))+x12789+((r21*x12794))+((r22*x12799))+(((-1.0)*r21*x12792*x12798)));
evalcond[8]=((((-1.0)*r00*x12788*x12797))+((r01*x12785*x12795))+(((-1.0)*r02*x12801))+((cj3*x12790))+x12791+((r00*x12792))+(((-1.0)*x12789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12802=((1.0)*cj5);
CheckValue<IkReal> x12803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12802))+(((-1.0)*r20*sj5)))),-1);
if(!x12803.valid){
continue;
}
CheckValue<IkReal> x12804 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x12802)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12803.value)))+(x12804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12805=IKcos(j4);
IkReal x12806=IKsin(j4);
IkReal x12807=(cj2*sj1);
IkReal x12808=(cj1*sj2);
IkReal x12809=((1.0)*cj5);
IkReal x12810=(sj1*sj2);
IkReal x12811=(cj5*r01);
IkReal x12812=(cj1*cj2);
IkReal x12813=(cj3*sj5);
IkReal x12814=(cj3*cj5);
IkReal x12815=(cj5*sj3);
IkReal x12816=(sj3*sj5);
IkReal x12817=(sj5*x12805);
IkReal x12818=(sj3*x12806);
IkReal x12819=((1.0)*x12806);
IkReal x12820=(cj3*x12805);
IkReal x12821=(x12807+x12808);
IkReal x12822=((1.0)*sj3*x12805);
evalcond[0]=(((r21*x12817))+(((-1.0)*r20*x12805*x12809))+((r22*x12806)));
evalcond[1]=(((r02*x12806))+((r01*x12817))+(((-1.0)*r00*x12805*x12809)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12805*x12809))+((r12*x12806))+((r11*x12817)));
evalcond[3]=((((-1.0)*r11*x12813*x12819))+((r10*x12806*x12814))+((r12*x12820))+((r11*x12815))+((r10*x12816)));
evalcond[4]=(((r11*x12806*x12816))+(((-1.0)*r10*x12809*x12818))+(((-1.0)*r12*x12822))+((r11*x12814))+((r10*x12813)));
evalcond[5]=(x12821+((sj3*x12811))+((r00*x12806*x12814))+(((-1.0)*r01*x12813*x12819))+((r00*x12816))+((r02*x12820)));
evalcond[6]=(x12821+(((-1.0)*r22*x12822))+((r20*x12813))+(((-1.0)*r20*x12809*x12818))+((r21*x12814))+((r21*x12806*x12816)));
evalcond[7]=(x12810+((r20*x12806*x12814))+((r20*x12816))+(((-1.0)*r21*x12813*x12819))+((r22*x12820))+((r21*x12815))+(((-1.0)*x12812)));
evalcond[8]=((((-1.0)*r02*x12822))+((r01*x12806*x12816))+x12812+((cj3*x12811))+((r00*x12813))+(((-1.0)*r00*x12809*x12818))+(((-1.0)*x12810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12823=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12823.valid){
continue;
}
CheckValue<IkReal> x12824 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12823.value)))+(x12824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12825=IKcos(j4);
IkReal x12826=IKsin(j4);
IkReal x12827=(cj2*sj1);
IkReal x12828=(cj1*sj2);
IkReal x12829=((1.0)*cj5);
IkReal x12830=(sj1*sj2);
IkReal x12831=(cj5*r01);
IkReal x12832=(cj1*cj2);
IkReal x12833=(cj3*sj5);
IkReal x12834=(cj3*cj5);
IkReal x12835=(cj5*sj3);
IkReal x12836=(sj3*sj5);
IkReal x12837=(sj5*x12825);
IkReal x12838=(sj3*x12826);
IkReal x12839=((1.0)*x12826);
IkReal x12840=(cj3*x12825);
IkReal x12841=(x12828+x12827);
IkReal x12842=((1.0)*sj3*x12825);
evalcond[0]=(((r21*x12837))+(((-1.0)*r20*x12825*x12829))+((r22*x12826)));
evalcond[1]=((((-1.0)*r00*x12825*x12829))+((r02*x12826))+((r01*x12837)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12825*x12829))+((r11*x12837))+((r12*x12826)));
evalcond[3]=(((r10*x12836))+(((-1.0)*r11*x12833*x12839))+((r11*x12835))+((r10*x12826*x12834))+((r12*x12840)));
evalcond[4]=(((r10*x12833))+((r11*x12826*x12836))+(((-1.0)*r10*x12829*x12838))+(((-1.0)*r12*x12842))+((r11*x12834)));
evalcond[5]=(x12841+((r00*x12826*x12834))+((sj3*x12831))+((r02*x12840))+((r00*x12836))+(((-1.0)*r01*x12833*x12839)));
evalcond[6]=((((-1.0)*r22*x12842))+x12841+((r21*x12834))+((r21*x12826*x12836))+((r20*x12833))+(((-1.0)*r20*x12829*x12838)));
evalcond[7]=(((r20*x12826*x12834))+x12830+((r21*x12835))+((r22*x12840))+(((-1.0)*r21*x12833*x12839))+((r20*x12836))+(((-1.0)*x12832)));
evalcond[8]=(((cj3*x12831))+((r01*x12826*x12836))+x12832+(((-1.0)*r02*x12842))+(((-1.0)*r00*x12829*x12838))+((r00*x12833))+(((-1.0)*x12830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12843=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12843;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x12843);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12844=((1.0)*cj5);
IkReal x12845=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12844)));
j4eval[0]=x12845;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12844)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12846=cj5*cj5;
IkReal x12847=(cj3*r11*r21);
IkReal x12848=((1.0)*cj3*cj5*sj5);
IkReal x12849=(((cj3*r12*r22))+x12847+(((-1.0)*r11*r20*x12848))+(((-1.0)*x12846*x12847))+((cj3*r10*r20*x12846))+(((-1.0)*r10*r21*x12848)));
j4eval[0]=x12849;
j4eval[1]=IKsign(x12849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12850=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12850;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x12850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12851=((1.0)*cj5);
IkReal x12852=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12851)));
j4eval[0]=x12852;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12851))))));
j4eval[2]=IKsign(x12852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12853=cj5*cj5;
IkReal x12854=r11*r11;
IkReal x12855=(r11*sj5);
IkReal x12856=(cj5*r10);
IkReal x12857=((r12*r12)+x12854+(((-2.0)*x12855*x12856))+(((-1.0)*x12853*x12854))+((x12853*(r10*r10))));
j4eval[0]=x12857;
j4eval[1]=((IKabs(r12))+(IKabs((x12855+(((-1.0)*x12856))))));
j4eval[2]=IKsign(x12857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12858=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12858);
rxp1_1=(px*r21);
rxp1_2=(r11*x12858);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12859=((1.0)*cj5);
j4eval[0]=(((r21*sj5))+(((-1.0)*r20*x12859)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x12859)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12860=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12860);
rxp1_1=(px*r21);
rxp1_2=(r11*x12860);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12861=((1.0)*cj2);
CheckValue<IkReal> x12862=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12862.valid){
continue;
}
CheckValue<IkReal> x12863=IKPowWithIntegerCheck(r02,-1);
if(!x12863.valid){
continue;
}
if( IKabs(((x12862.value)*(((((-1.0)*sj1*x12861))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12863.value)*((((sj1*sj2))+(((-1.0)*cj1*x12861)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12862.value)*(((((-1.0)*sj1*x12861))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12863.value)*((((sj1*sj2))+(((-1.0)*cj1*x12861))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12862.value)*(((((-1.0)*sj1*x12861))+(((-1.0)*cj1*sj2))))), ((x12863.value)*((((sj1*sj2))+(((-1.0)*cj1*x12861))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12864=IKcos(j4);
IkReal x12865=IKsin(j4);
IkReal x12866=(r21*sj5);
IkReal x12867=(cj5*r10);
IkReal x12868=(r11*sj5);
IkReal x12869=((1.0)*cj5*r20);
IkReal x12870=((1.0)*x12864);
evalcond[0]=(r02*x12865);
evalcond[1]=(((x12864*x12866))+(((-1.0)*x12864*x12869)));
evalcond[2]=((((-1.0)*r02*x12870))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[3]=(((x12865*x12868))+(((-1.0)*x12865*x12867)));
evalcond[4]=((-1.0)+(((-1.0)*x12867*x12870))+((x12864*x12868)));
evalcond[5]=(((cj2*sj1))+((x12865*x12866))+((cj1*sj2))+(((-1.0)*x12865*x12869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12871=((1.0)*cj5);
CheckValue<IkReal> x12872=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12871))),-1);
if(!x12872.valid){
continue;
}
CheckValue<IkReal> x12873=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12871))),-1);
if(!x12873.valid){
continue;
}
if( IKabs(((x12872.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12873.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12872.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(x12873.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12872.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), x12873.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12874=IKcos(j4);
IkReal x12875=IKsin(j4);
IkReal x12876=(r21*sj5);
IkReal x12877=(cj5*r10);
IkReal x12878=(r11*sj5);
IkReal x12879=((1.0)*cj5*r20);
IkReal x12880=((1.0)*x12874);
evalcond[0]=(r02*x12875);
evalcond[1]=((((-1.0)*x12874*x12879))+((x12874*x12876)));
evalcond[2]=((((-1.0)*r02*x12880))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[3]=((((-1.0)*x12875*x12877))+((x12875*x12878)));
evalcond[4]=((-1.0)+(((-1.0)*x12877*x12880))+((x12874*x12878)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12875*x12876))+(((-1.0)*x12875*x12879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12881=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12881);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12881);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12882=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x12882)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x12882)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12883=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12883);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12883);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12884=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12884.valid){
continue;
}
CheckValue<IkReal> x12885=IKPowWithIntegerCheck(r22,-1);
if(!x12885.valid){
continue;
}
if( IKabs(((x12884.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12885.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12884.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x12885.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12884.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x12885.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12886=IKcos(j4);
IkReal x12887=IKsin(j4);
IkReal x12888=(cj5*r00);
IkReal x12889=(cj5*r10);
IkReal x12890=((1.0)*x12886);
IkReal x12891=((1.0)*x12887);
IkReal x12892=(sj5*x12886);
IkReal x12893=(sj5*x12887);
evalcond[0]=(r22*x12887);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x12890))+((cj1*sj2)));
evalcond[2]=(((r01*x12892))+(((-1.0)*x12888*x12890)));
evalcond[3]=((((-1.0)*x12889*x12891))+((r11*x12893)));
evalcond[4]=((-1.0)+(((-1.0)*x12889*x12890))+((r11*x12892)));
evalcond[5]=(((r01*x12893))+(((-1.0)*x12888*x12891))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12894=((1.0)*cj5);
CheckValue<IkReal> x12895=IKPowWithIntegerCheck(((((-1.0)*r00*x12894))+((r01*sj5))),-1);
if(!x12895.valid){
continue;
}
CheckValue<IkReal> x12896=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12894))),-1);
if(!x12896.valid){
continue;
}
if( IKabs(((x12895.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12896.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12895.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(x12896.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12895.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), x12896.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12897=IKcos(j4);
IkReal x12898=IKsin(j4);
IkReal x12899=(cj5*r00);
IkReal x12900=(cj5*r10);
IkReal x12901=((1.0)*x12897);
IkReal x12902=((1.0)*x12898);
IkReal x12903=(sj5*x12897);
IkReal x12904=(sj5*x12898);
evalcond[0]=(r22*x12898);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x12901)));
evalcond[2]=(((r01*x12903))+(((-1.0)*x12899*x12901)));
evalcond[3]=((((-1.0)*x12900*x12902))+((r11*x12904)));
evalcond[4]=((-1.0)+(((-1.0)*x12900*x12901))+((r11*x12903)));
evalcond[5]=(((r01*x12904))+(((-1.0)*x12899*x12902))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12905=cj5*cj5;
IkReal x12906=r11*r11;
IkReal x12907=(cj5*r10);
IkReal x12908=(r11*sj5);
CheckValue<IkReal> x12909=IKPowWithIntegerCheck(IKsign((x12906+(r12*r12)+(((-2.0)*x12907*x12908))+(((-1.0)*x12905*x12906))+((x12905*(r10*r10))))),-1);
if(!x12909.valid){
continue;
}
CheckValue<IkReal> x12910 = IKatan2WithCheck(IkReal(r12),IkReal((x12908+(((-1.0)*x12907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12909.value)))+(x12910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12911=IKcos(j4);
IkReal x12912=IKsin(j4);
IkReal x12913=(cj5*r00);
IkReal x12914=(cj5*r10);
IkReal x12915=(cj5*r20);
IkReal x12916=((1.0)*x12911);
IkReal x12917=((1.0)*x12912);
IkReal x12918=(sj5*x12911);
IkReal x12919=(sj5*x12912);
evalcond[0]=((((-1.0)*x12915*x12916))+((r21*x12918))+((r22*x12912)));
evalcond[1]=(((r02*x12912))+(((-1.0)*x12913*x12916))+((r01*x12918)));
evalcond[2]=((-1.0)+(((-1.0)*x12914*x12916))+((r12*x12912))+((r11*x12918)));
evalcond[3]=((((-1.0)*x12914*x12917))+(((-1.0)*r12*x12916))+((r11*x12919)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12915*x12917))+((r21*x12919))+(((-1.0)*r22*x12916)));
evalcond[5]=((((-1.0)*r02*x12916))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12913*x12917))+((r01*x12919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12920=((1.0)*cj5);
CheckValue<IkReal> x12921 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12920))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12921.valid){
continue;
}
CheckValue<IkReal> x12922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12920)))),-1);
if(!x12922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12921.value)+(((1.5707963267949)*(x12922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12923=IKcos(j4);
IkReal x12924=IKsin(j4);
IkReal x12925=(cj5*r00);
IkReal x12926=(cj5*r10);
IkReal x12927=(cj5*r20);
IkReal x12928=((1.0)*x12923);
IkReal x12929=((1.0)*x12924);
IkReal x12930=(sj5*x12923);
IkReal x12931=(sj5*x12924);
evalcond[0]=((((-1.0)*x12927*x12928))+((r22*x12924))+((r21*x12930)));
evalcond[1]=((((-1.0)*x12925*x12928))+((r02*x12924))+((r01*x12930)));
evalcond[2]=((-1.0)+((r11*x12930))+(((-1.0)*x12926*x12928))+((r12*x12924)));
evalcond[3]=(((r11*x12931))+(((-1.0)*x12926*x12929))+(((-1.0)*r12*x12928)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12927*x12929))+((r21*x12931))+(((-1.0)*r22*x12928)));
evalcond[5]=((((-1.0)*r02*x12928))+(((-1.0)*x12925*x12929))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x12931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12932=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12932.valid){
continue;
}
CheckValue<IkReal> x12933 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12932.value)))+(x12933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12934=IKcos(j4);
IkReal x12935=IKsin(j4);
IkReal x12936=(cj5*r00);
IkReal x12937=(cj5*r10);
IkReal x12938=(cj5*r20);
IkReal x12939=((1.0)*x12934);
IkReal x12940=((1.0)*x12935);
IkReal x12941=(sj5*x12934);
IkReal x12942=(sj5*x12935);
evalcond[0]=((((-1.0)*x12938*x12939))+((r21*x12941))+((r22*x12935)));
evalcond[1]=((((-1.0)*x12936*x12939))+((r02*x12935))+((r01*x12941)));
evalcond[2]=((-1.0)+(((-1.0)*x12937*x12939))+((r12*x12935))+((r11*x12941)));
evalcond[3]=((((-1.0)*x12937*x12940))+(((-1.0)*r12*x12939))+((r11*x12942)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x12942))+(((-1.0)*r22*x12939))+(((-1.0)*x12938*x12940)));
evalcond[5]=((((-1.0)*x12936*x12940))+(((-1.0)*r02*x12939))+((r01*x12942))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12943=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12943;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x12943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12944=((1.0)*cj5);
IkReal x12945=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12944)));
j4eval[0]=x12945;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12944)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12945);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12946=cj5*cj5;
IkReal x12947=r11*r11;
IkReal x12948=(r11*sj5);
IkReal x12949=(cj5*r10);
IkReal x12950=(x12947+(r12*r12)+((x12946*(r10*r10)))+(((-2.0)*x12948*x12949))+(((-1.0)*x12946*x12947)));
j4eval[0]=x12950;
j4eval[1]=((IKabs(r12))+(IKabs((x12948+(((-1.0)*x12949))))));
j4eval[2]=IKsign(x12950);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12951=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12951);
rxp1_1=(px*r21);
rxp1_2=(r11*x12951);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12952=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12952);
rxp1_1=(px*r21);
rxp1_2=(r11*x12952);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12953=((1.0)*sj1);
CheckValue<IkReal> x12954=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12954.valid){
continue;
}
CheckValue<IkReal> x12955=IKPowWithIntegerCheck(r02,-1);
if(!x12955.valid){
continue;
}
if( IKabs(((x12954.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12953)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12955.value)*((((cj1*cj2))+(((-1.0)*sj2*x12953)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12954.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12953))))))+IKsqr(((x12955.value)*((((cj1*cj2))+(((-1.0)*sj2*x12953))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12954.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12953))))), ((x12955.value)*((((cj1*cj2))+(((-1.0)*sj2*x12953))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12956=IKcos(j4);
IkReal x12957=IKsin(j4);
IkReal x12958=(cj5*r10);
IkReal x12959=(cj5*r20);
IkReal x12960=((1.0)*x12956);
IkReal x12961=(sj5*x12956);
IkReal x12962=((1.0)*sj5*x12957);
evalcond[0]=(r02*x12957);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x12956)));
evalcond[2]=((((-1.0)*x12959*x12960))+((r21*x12961)));
evalcond[3]=((((-1.0)*r11*x12962))+((x12957*x12958)));
evalcond[4]=((-1.0)+(((-1.0)*x12958*x12960))+((r11*x12961)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x12962))+((x12957*x12959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12963=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12963.valid){
continue;
}
CheckValue<IkReal> x12964=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12964.valid){
continue;
}
if( IKabs(((x12963.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12964.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12963.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(x12964.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12963.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), x12964.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12965=IKcos(j4);
IkReal x12966=IKsin(j4);
IkReal x12967=(cj5*r10);
IkReal x12968=(cj5*r20);
IkReal x12969=((1.0)*x12965);
IkReal x12970=(sj5*x12965);
IkReal x12971=((1.0)*sj5*x12966);
evalcond[0]=(r02*x12966);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x12965)));
evalcond[2]=(((r21*x12970))+(((-1.0)*x12968*x12969)));
evalcond[3]=((((-1.0)*r11*x12971))+((x12966*x12967)));
evalcond[4]=((-1.0)+(((-1.0)*x12967*x12969))+((r11*x12970)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x12971))+((x12966*x12968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12972=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12972);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12972);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12973=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12973);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12973);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12974=((1.0)*sj2);
CheckValue<IkReal> x12975=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12975.valid){
continue;
}
CheckValue<IkReal> x12976=IKPowWithIntegerCheck(r22,-1);
if(!x12976.valid){
continue;
}
if( IKabs(((x12975.value)*(((((-1.0)*sj1*x12974))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12976.value)*(((((-1.0)*cj1*x12974))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12975.value)*(((((-1.0)*sj1*x12974))+((cj1*cj2))))))+IKsqr(((x12976.value)*(((((-1.0)*cj1*x12974))+(((-1.0)*cj2*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12975.value)*(((((-1.0)*sj1*x12974))+((cj1*cj2))))), ((x12976.value)*(((((-1.0)*cj1*x12974))+(((-1.0)*cj2*sj1))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12977=IKcos(j4);
IkReal x12978=IKsin(j4);
IkReal x12979=(cj5*r00);
IkReal x12980=(cj5*r10);
IkReal x12981=((1.0)*x12977);
IkReal x12982=(sj5*x12977);
IkReal x12983=((1.0)*sj5*x12978);
evalcond[0]=(r22*x12978);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x12977)));
evalcond[2]=(((r01*x12982))+(((-1.0)*x12979*x12981)));
evalcond[3]=((((-1.0)*r11*x12983))+((x12978*x12980)));
evalcond[4]=((-1.0)+(((-1.0)*x12980*x12981))+((r11*x12982)));
evalcond[5]=((((-1.0)*r01*x12983))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12978*x12979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12984=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12984.valid){
continue;
}
CheckValue<IkReal> x12985=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12985.valid){
continue;
}
if( IKabs(((x12984.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12985.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12984.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(x12985.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12984.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), x12985.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12986=IKcos(j4);
IkReal x12987=IKsin(j4);
IkReal x12988=(cj5*r00);
IkReal x12989=(cj5*r10);
IkReal x12990=((1.0)*x12986);
IkReal x12991=(sj5*x12986);
IkReal x12992=((1.0)*sj5*x12987);
evalcond[0]=(r22*x12987);
evalcond[1]=(((cj2*sj1))+((r22*x12986))+((cj1*sj2)));
evalcond[2]=(((r01*x12991))+(((-1.0)*x12988*x12990)));
evalcond[3]=(((x12987*x12989))+(((-1.0)*r11*x12992)));
evalcond[4]=((-1.0)+(((-1.0)*x12989*x12990))+((r11*x12991)));
evalcond[5]=((((-1.0)*r01*x12992))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12987*x12988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12993=cj5*cj5;
IkReal x12994=r11*r11;
IkReal x12995=(cj5*r10);
IkReal x12996=(r11*sj5);
CheckValue<IkReal> x12997 = IKatan2WithCheck(IkReal(r12),IkReal((x12996+(((-1.0)*x12995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12997.valid){
continue;
}
CheckValue<IkReal> x12998=IKPowWithIntegerCheck(IKsign((x12994+(r12*r12)+(((-2.0)*x12995*x12996))+(((-1.0)*x12993*x12994))+((x12993*(r10*r10))))),-1);
if(!x12998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12997.value)+(((1.5707963267949)*(x12998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12999=IKcos(j4);
IkReal x13000=IKsin(j4);
IkReal x13001=(cj5*r00);
IkReal x13002=((1.0)*x12999);
IkReal x13003=(sj5*x12999);
IkReal x13004=(cj5*x13000);
IkReal x13005=((1.0)*sj5*x13000);
evalcond[0]=(((r22*x13000))+(((-1.0)*cj5*r20*x13002))+((r21*x13003)));
evalcond[1]=((((-1.0)*x13001*x13002))+((r02*x13000))+((r01*x13003)));
evalcond[2]=((((-1.0)*r11*x13005))+((r12*x12999))+((r10*x13004)));
evalcond[3]=((-1.0)+((r12*x13000))+(((-1.0)*cj5*r10*x13002))+((r11*x13003)));
evalcond[4]=(((cj2*sj1))+((r22*x12999))+((cj1*sj2))+((r20*x13004))+(((-1.0)*r21*x13005)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13000*x13001))+(((-1.0)*r01*x13005))+((r02*x12999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13006=((1.0)*cj5);
CheckValue<IkReal> x13007 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13006)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13007.valid){
continue;
}
CheckValue<IkReal> x13008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13006)))),-1);
if(!x13008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13007.value)+(((1.5707963267949)*(x13008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13009=IKcos(j4);
IkReal x13010=IKsin(j4);
IkReal x13011=(cj5*r00);
IkReal x13012=((1.0)*x13009);
IkReal x13013=(sj5*x13009);
IkReal x13014=(cj5*x13010);
IkReal x13015=((1.0)*sj5*x13010);
evalcond[0]=((((-1.0)*cj5*r20*x13012))+((r21*x13013))+((r22*x13010)));
evalcond[1]=(((r01*x13013))+((r02*x13010))+(((-1.0)*x13011*x13012)));
evalcond[2]=(((r12*x13009))+((r10*x13014))+(((-1.0)*r11*x13015)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x13012))+((r11*x13013))+((r12*x13010)));
evalcond[4]=(((cj2*sj1))+((r20*x13014))+((cj1*sj2))+(((-1.0)*r21*x13015))+((r22*x13009)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13009))+(((-1.0)*r01*x13015))+((x13010*x13011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13016=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13016.valid){
continue;
}
CheckValue<IkReal> x13017 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13016.value)))+(x13017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13018=IKcos(j4);
IkReal x13019=IKsin(j4);
IkReal x13020=(cj5*r00);
IkReal x13021=((1.0)*x13018);
IkReal x13022=(sj5*x13018);
IkReal x13023=(cj5*x13019);
IkReal x13024=((1.0)*sj5*x13019);
evalcond[0]=((((-1.0)*cj5*r20*x13021))+((r21*x13022))+((r22*x13019)));
evalcond[1]=(((r01*x13022))+((r02*x13019))+(((-1.0)*x13020*x13021)));
evalcond[2]=(((r12*x13018))+(((-1.0)*r11*x13024))+((r10*x13023)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x13021))+((r11*x13022))+((r12*x13019)));
evalcond[4]=(((cj2*sj1))+((r20*x13023))+((cj1*sj2))+(((-1.0)*r21*x13024))+((r22*x13018)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13018))+(((-1.0)*r01*x13024))+((x13019*x13020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13025=((-1.0)*r00);
IkReal x13027 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13027)==0){
continue;
}
IkReal x13026=pow(x13027,-0.5);
CheckValue<IkReal> x13028 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13025),IKFAST_ATAN2_MAGTHRESH);
if(!x13028.valid){
continue;
}
IkReal gconst64=((-1.0)*(x13028.value));
IkReal gconst65=(r01*x13026);
IkReal gconst66=(x13025*x13026);
CheckValue<IkReal> x13029 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13029.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13029.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13030=((-1.0)*r00);
IkReal x13031=x13026;
CheckValue<IkReal> x13033 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13030),IKFAST_ATAN2_MAGTHRESH);
if(!x13033.valid){
continue;
}
IkReal x13032=((-1.0)*(x13033.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst65;
cj5=gconst66;
j5=x13032;
IkReal gconst64=x13032;
IkReal gconst65=(r01*x13031);
IkReal gconst66=(x13030*x13031);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13034=((-1.0)*r00);
IkReal x13035=x13026;
CheckValue<IkReal> x13037 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13034),IKFAST_ATAN2_MAGTHRESH);
if(!x13037.valid){
continue;
}
IkReal x13036=((-1.0)*(x13037.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst65;
cj5=gconst66;
j5=x13036;
IkReal gconst64=x13036;
IkReal gconst65=(r01*x13035);
IkReal gconst66=(x13034*x13035);
CheckValue<IkReal> x13045=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13045.valid){
continue;
}
IkReal x13038=x13045.value;
IkReal x13039=(cj3*x13038);
IkReal x13040=(r21*x13039);
IkReal x13041=(r10*x13039);
IkReal x13042=(r11*x13039);
IkReal x13043=(r20*x13039);
IkReal x13044=(r00*r01*x13039);
j4eval[0]=IKsign((((cj3*r12*r22))+((r00*r01*r10*x13040))+((r20*x13041*(r00*r00)))+((r00*r01*r20*x13042))+((r11*x13040*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13046=gconst65*gconst65;
IkReal x13047=gconst66*gconst66;
IkReal x13048=((1.0)*r11);
IkReal x13049=(cj3*r22);
IkReal x13050=(r20*sj3);
IkReal x13051=(cj3*r20);
IkReal x13052=(r21*x13046);
IkReal x13053=((1.0)*gconst65*r10);
IkReal x13054=(gconst65*gconst66*r11);
CheckValue<IkReal> x13055=IKPowWithIntegerCheck(IKsign((((gconst65*gconst66*r10*r21*sj3))+(((-1.0)*r10*x13047*x13050))+((x13050*x13054))+(((-1.0)*r12*r22*sj3))+(((-1.0)*sj3*x13048*x13052)))),-1);
if(!x13055.valid){
continue;
}
CheckValue<IkReal> x13056 = IKatan2WithCheck(IkReal((((cj3*r21*x13054))+((cj3*r10*x13052))+(((-1.0)*gconst66*x13051*x13053))+(((-1.0)*x13047*x13048*x13051)))),IkReal(((((-1.0)*x13049*x13053))+(((-1.0)*gconst66*x13048*x13049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13055.value)))+(x13056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13057=IKcos(j4);
IkReal x13058=IKsin(j4);
IkReal x13059=(sj1*sj2);
IkReal x13060=(cj3*gconst65);
IkReal x13061=(gconst66*r00);
IkReal x13062=(gconst66*sj3);
IkReal x13063=(gconst65*sj3);
IkReal x13064=((1.0)*cj2);
IkReal x13065=(cj1*sj2);
IkReal x13066=(cj3*gconst66);
IkReal x13067=(gconst66*r20);
IkReal x13068=(gconst66*r10);
IkReal x13069=(cj1*x13064);
IkReal x13070=((1.0)*x13057);
IkReal x13071=((1.0)*x13058);
IkReal x13072=(gconst65*x13057);
IkReal x13073=(cj3*x13058);
IkReal x13074=(cj3*x13057);
evalcond[0]=(((r21*x13072))+(((-1.0)*x13067*x13070))+((r22*x13058)));
evalcond[1]=(((r02*x13058))+((r01*x13072))+(((-1.0)*x13061*x13070)));
evalcond[2]=((-1.0)+((r12*x13058))+(((-1.0)*x13068*x13070))+((r11*x13072)));
evalcond[3]=(((r10*x13058*x13066))+((r10*x13063))+((r12*x13074))+(((-1.0)*r11*x13060*x13071))+((r11*x13062)));
evalcond[4]=((((-1.0)*r12*sj3*x13070))+((r11*x13058*x13063))+((r10*x13060))+((r11*x13066))+(((-1.0)*r10*x13062*x13071)));
evalcond[5]=((((-1.0)*r20*x13062*x13071))+((r20*x13060))+((cj2*sj1))+((r21*x13058*x13063))+(((-1.0)*r22*sj3*x13070))+((r21*x13066))+x13065);
evalcond[6]=(((r20*x13063))+(((-1.0)*r21*x13060*x13071))+((r20*x13058*x13066))+((r21*x13062))+x13059+((r22*x13074))+(((-1.0)*x13069)));
evalcond[7]=((((-1.0)*x13065))+((x13061*x13073))+((r02*x13074))+(((-1.0)*r01*x13060*x13071))+((r00*x13063))+((r01*x13062))+(((-1.0)*sj1*x13064)));
evalcond[8]=((((-1.0)*r02*sj3*x13070))+(((-1.0)*sj3*x13061*x13071))+((r01*x13058*x13063))+x13059+((r00*x13060))+((r01*x13066))+(((-1.0)*x13069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13075=gconst65*gconst65;
IkReal x13076=gconst66*gconst66;
IkReal x13077=(r11*sj3);
IkReal x13078=(gconst65*gconst66);
IkReal x13079=(cj3*r10);
IkReal x13080=(cj3*r11);
IkReal x13081=(r20*x13076);
IkReal x13082=((1.0)*r10*sj3);
IkReal x13083=(r21*x13075);
CheckValue<IkReal> x13084 = IKatan2WithCheck(IkReal(((((-1.0)*x13077*x13081))+((r21*x13077*x13078))+((r10*sj3*x13083))+(((-1.0)*r20*x13078*x13082)))),IkReal(((((-1.0)*gconst66*r22*x13077))+(((-1.0)*gconst65*r22*x13082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13084.valid){
continue;
}
CheckValue<IkReal> x13085=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*r20*x13078*x13080))+((x13079*x13081))+(((-1.0)*r21*x13078*x13079))+((x13080*x13083)))),-1);
if(!x13085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13084.value)+(((1.5707963267949)*(x13085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13086=IKcos(j4);
IkReal x13087=IKsin(j4);
IkReal x13088=(sj1*sj2);
IkReal x13089=(cj3*gconst65);
IkReal x13090=(gconst66*r00);
IkReal x13091=(gconst66*sj3);
IkReal x13092=(gconst65*sj3);
IkReal x13093=((1.0)*cj2);
IkReal x13094=(cj1*sj2);
IkReal x13095=(cj3*gconst66);
IkReal x13096=(gconst66*r20);
IkReal x13097=(gconst66*r10);
IkReal x13098=(cj1*x13093);
IkReal x13099=((1.0)*x13086);
IkReal x13100=((1.0)*x13087);
IkReal x13101=(gconst65*x13086);
IkReal x13102=(cj3*x13087);
IkReal x13103=(cj3*x13086);
evalcond[0]=(((r22*x13087))+(((-1.0)*x13096*x13099))+((r21*x13101)));
evalcond[1]=(((r01*x13101))+((r02*x13087))+(((-1.0)*x13090*x13099)));
evalcond[2]=((-1.0)+(((-1.0)*x13097*x13099))+((r12*x13087))+((r11*x13101)));
evalcond[3]=(((r11*x13091))+((r10*x13087*x13095))+((r12*x13103))+((r10*x13092))+(((-1.0)*r11*x13089*x13100)));
evalcond[4]=(((r11*x13095))+((r11*x13087*x13092))+(((-1.0)*r10*x13091*x13100))+((r10*x13089))+(((-1.0)*r12*sj3*x13099)));
evalcond[5]=(((cj2*sj1))+((r20*x13089))+((r21*x13087*x13092))+(((-1.0)*r22*sj3*x13099))+(((-1.0)*r20*x13091*x13100))+x13094+((r21*x13095)));
evalcond[6]=((((-1.0)*r21*x13089*x13100))+((r22*x13103))+((r20*x13087*x13095))+x13088+((r21*x13091))+(((-1.0)*x13098))+((r20*x13092)));
evalcond[7]=((((-1.0)*r01*x13089*x13100))+((r02*x13103))+((r01*x13091))+((r00*x13092))+((x13090*x13102))+(((-1.0)*sj1*x13093))+(((-1.0)*x13094)));
evalcond[8]=((((-1.0)*r02*sj3*x13099))+((r01*x13087*x13092))+(((-1.0)*sj3*x13090*x13100))+x13088+((r01*x13095))+((r00*x13089))+(((-1.0)*x13098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13104=IKPowWithIntegerCheck(IKsign((((gconst66*r21))+((gconst65*r20)))),-1);
if(!x13104.valid){
continue;
}
CheckValue<IkReal> x13105 = IKatan2WithCheck(IkReal((((gconst65*r01))+(((-1.0)*gconst66*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13104.value)))+(x13105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13106=IKcos(j4);
IkReal x13107=IKsin(j4);
IkReal x13108=(sj1*sj2);
IkReal x13109=(cj3*gconst65);
IkReal x13110=(gconst66*r00);
IkReal x13111=(gconst66*sj3);
IkReal x13112=(gconst65*sj3);
IkReal x13113=((1.0)*cj2);
IkReal x13114=(cj1*sj2);
IkReal x13115=(cj3*gconst66);
IkReal x13116=(gconst66*r20);
IkReal x13117=(gconst66*r10);
IkReal x13118=(cj1*x13113);
IkReal x13119=((1.0)*x13106);
IkReal x13120=((1.0)*x13107);
IkReal x13121=(gconst65*x13106);
IkReal x13122=(cj3*x13107);
IkReal x13123=(cj3*x13106);
evalcond[0]=((((-1.0)*x13116*x13119))+((r22*x13107))+((r21*x13121)));
evalcond[1]=(((r01*x13121))+((r02*x13107))+(((-1.0)*x13110*x13119)));
evalcond[2]=((-1.0)+((r11*x13121))+((r12*x13107))+(((-1.0)*x13117*x13119)));
evalcond[3]=(((r10*x13107*x13115))+(((-1.0)*r11*x13109*x13120))+((r12*x13123))+((r10*x13112))+((r11*x13111)));
evalcond[4]=((((-1.0)*r12*sj3*x13119))+(((-1.0)*r10*x13111*x13120))+((r10*x13109))+((r11*x13107*x13112))+((r11*x13115)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x13111*x13120))+((r20*x13109))+((r21*x13115))+((r21*x13107*x13112))+(((-1.0)*r22*sj3*x13119))+x13114);
evalcond[6]=(((r21*x13111))+(((-1.0)*x13118))+((r22*x13123))+((r20*x13112))+x13108+((r20*x13107*x13115))+(((-1.0)*r21*x13109*x13120)));
evalcond[7]=(((x13110*x13122))+(((-1.0)*r01*x13109*x13120))+(((-1.0)*x13114))+((r02*x13123))+((r00*x13112))+(((-1.0)*sj1*x13113))+((r01*x13111)));
evalcond[8]=(((r00*x13109))+(((-1.0)*x13118))+(((-1.0)*sj3*x13110*x13120))+x13108+((r01*x13107*x13112))+((r01*x13115))+(((-1.0)*r02*sj3*x13119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13124=((-1.0)*r01);
IkReal x13126 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13126)==0){
continue;
}
IkReal x13125=pow(x13126,-0.5);
CheckValue<IkReal> x13127 = IKatan2WithCheck(IkReal(x13124),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13127.valid){
continue;
}
IkReal gconst67=((3.14159265358979)+(((-1.0)*(x13127.value))));
IkReal gconst68=(x13124*x13125);
IkReal gconst69=((1.0)*r00*x13125);
CheckValue<IkReal> x13128 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13128.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13128.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13129=((-1.0)*r01);
CheckValue<IkReal> x13132 = IKatan2WithCheck(IkReal(x13129),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13132.valid){
continue;
}
IkReal x13130=((1.0)*(x13132.value));
IkReal x13131=x13125;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst68;
cj5=gconst69;
j5=((3.14159265)+(((-1.0)*x13130)));
IkReal gconst67=((3.14159265358979)+(((-1.0)*x13130)));
IkReal gconst68=(x13129*x13131);
IkReal gconst69=((1.0)*r00*x13131);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13133=((-1.0)*r01);
CheckValue<IkReal> x13136 = IKatan2WithCheck(IkReal(x13133),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13136.valid){
continue;
}
IkReal x13134=((1.0)*(x13136.value));
IkReal x13135=x13125;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst68;
cj5=gconst69;
j5=((3.14159265)+(((-1.0)*x13134)));
IkReal gconst67=((3.14159265358979)+(((-1.0)*x13134)));
IkReal gconst68=(x13133*x13135);
IkReal gconst69=((1.0)*r00*x13135);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13137=gconst68*gconst68;
IkReal x13138=gconst69*gconst69;
IkReal x13139=(r22*sj3);
IkReal x13140=(gconst68*r20);
IkReal x13141=(r11*r21);
IkReal x13142=(gconst69*sj3);
IkReal x13143=((1.0)*r10);
IkReal x13144=((1.0)*gconst69*r11);
IkReal x13145=(r20*x13138);
CheckValue<IkReal> x13146=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*x13137*x13141))+(((-1.0)*cj3*gconst68*gconst69*r21*x13143))+((cj3*r10*x13145))+(((-1.0)*cj3*x13140*x13144)))),-1);
if(!x13146.valid){
continue;
}
CheckValue<IkReal> x13147 = IKatan2WithCheck(IkReal((((gconst68*x13141*x13142))+((r10*r21*sj3*x13137))+(((-1.0)*x13140*x13142*x13143))+(((-1.0)*r11*sj3*x13145)))),IkReal(((((-1.0)*x13139*x13144))+(((-1.0)*gconst68*x13139*x13143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13146.value)))+(x13147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13148=IKcos(j4);
IkReal x13149=IKsin(j4);
IkReal x13150=(sj1*sj2);
IkReal x13151=((1.0)*cj1);
IkReal x13152=(cj3*gconst69);
IkReal x13153=(gconst68*r11);
IkReal x13154=(gconst69*sj3);
IkReal x13155=(cj2*sj1);
IkReal x13156=(cj3*gconst68);
IkReal x13157=(gconst68*sj3);
IkReal x13158=((1.0)*sj3);
IkReal x13159=(cj2*x13151);
IkReal x13160=((1.0)*x13149);
IkReal x13161=(r22*x13148);
IkReal x13162=(r12*x13148);
IkReal x13163=(gconst68*x13148);
IkReal x13164=(r02*x13148);
IkReal x13165=((1.0)*gconst69*x13148);
evalcond[0]=((((-1.0)*r20*x13165))+((r22*x13149))+((r21*x13163)));
evalcond[1]=((((-1.0)*r00*x13165))+((r01*x13163))+((r02*x13149)));
evalcond[2]=((-1.0)+((r12*x13149))+((x13148*x13153))+(((-1.0)*r10*x13165)));
evalcond[3]=((((-1.0)*cj3*x13153*x13160))+((cj3*x13162))+((r11*x13154))+((r10*x13149*x13152))+((r10*x13157)));
evalcond[4]=((((-1.0)*r10*x13154*x13160))+((sj3*x13149*x13153))+(((-1.0)*x13158*x13162))+((r11*x13152))+((r10*x13156)));
evalcond[5]=(((r21*x13152))+((r20*x13156))+((cj1*sj2))+((r21*x13149*x13157))+(((-1.0)*x13158*x13161))+x13155+(((-1.0)*r20*x13154*x13160)));
evalcond[6]=((((-1.0)*r21*x13156*x13160))+((r21*x13154))+((r20*x13157))+((r20*x13149*x13152))+(((-1.0)*x13159))+((cj3*x13161))+x13150);
evalcond[7]=((((-1.0)*sj2*x13151))+(((-1.0)*r01*x13156*x13160))+((cj3*x13164))+((r00*x13149*x13152))+((r01*x13154))+(((-1.0)*x13155))+((r00*x13157)));
evalcond[8]=((((-1.0)*r00*x13154*x13160))+(((-1.0)*x13159))+((r01*x13149*x13157))+(((-1.0)*x13158*x13164))+((r01*x13152))+x13150+((r00*x13156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13166=((1.0)*gconst69);
CheckValue<IkReal> x13167 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13166))+((gconst68*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13167.valid){
continue;
}
CheckValue<IkReal> x13168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13166))+(((-1.0)*gconst68*r00)))),-1);
if(!x13168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13167.value)+(((1.5707963267949)*(x13168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13169=IKcos(j4);
IkReal x13170=IKsin(j4);
IkReal x13171=(sj1*sj2);
IkReal x13172=((1.0)*cj1);
IkReal x13173=(cj3*gconst69);
IkReal x13174=(gconst68*r11);
IkReal x13175=(gconst69*sj3);
IkReal x13176=(cj2*sj1);
IkReal x13177=(cj3*gconst68);
IkReal x13178=(gconst68*sj3);
IkReal x13179=((1.0)*sj3);
IkReal x13180=(cj2*x13172);
IkReal x13181=((1.0)*x13170);
IkReal x13182=(r22*x13169);
IkReal x13183=(r12*x13169);
IkReal x13184=(gconst68*x13169);
IkReal x13185=(r02*x13169);
IkReal x13186=((1.0)*gconst69*x13169);
evalcond[0]=(((r21*x13184))+((r22*x13170))+(((-1.0)*r20*x13186)));
evalcond[1]=(((r01*x13184))+((r02*x13170))+(((-1.0)*r00*x13186)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13186))+((r12*x13170))+((x13169*x13174)));
evalcond[3]=(((cj3*x13183))+(((-1.0)*cj3*x13174*x13181))+((r11*x13175))+((r10*x13170*x13173))+((r10*x13178)));
evalcond[4]=((((-1.0)*x13179*x13183))+(((-1.0)*r10*x13175*x13181))+((sj3*x13170*x13174))+((r11*x13173))+((r10*x13177)));
evalcond[5]=((((-1.0)*x13179*x13182))+((r20*x13177))+((cj1*sj2))+((r21*x13173))+((r21*x13170*x13178))+x13176+(((-1.0)*r20*x13175*x13181)));
evalcond[6]=(((cj3*x13182))+(((-1.0)*x13180))+((r20*x13178))+((r20*x13170*x13173))+(((-1.0)*r21*x13177*x13181))+((r21*x13175))+x13171);
evalcond[7]=(((cj3*x13185))+((r01*x13175))+(((-1.0)*r01*x13177*x13181))+((r00*x13178))+((r00*x13170*x13173))+(((-1.0)*sj2*x13172))+(((-1.0)*x13176)));
evalcond[8]=(((r01*x13173))+(((-1.0)*x13180))+(((-1.0)*r00*x13175*x13181))+(((-1.0)*x13179*x13185))+((r00*x13177))+((r01*x13170*x13178))+x13171);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13187=IKPowWithIntegerCheck(IKsign((((gconst68*r20))+((gconst69*r21)))),-1);
if(!x13187.valid){
continue;
}
CheckValue<IkReal> x13188 = IKatan2WithCheck(IkReal((((gconst68*r01))+(((-1.0)*gconst69*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13187.value)))+(x13188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13189=IKcos(j4);
IkReal x13190=IKsin(j4);
IkReal x13191=(sj1*sj2);
IkReal x13192=((1.0)*cj1);
IkReal x13193=(cj3*gconst69);
IkReal x13194=(gconst68*r11);
IkReal x13195=(gconst69*sj3);
IkReal x13196=(cj2*sj1);
IkReal x13197=(cj3*gconst68);
IkReal x13198=(gconst68*sj3);
IkReal x13199=((1.0)*sj3);
IkReal x13200=(cj2*x13192);
IkReal x13201=((1.0)*x13190);
IkReal x13202=(r22*x13189);
IkReal x13203=(r12*x13189);
IkReal x13204=(gconst68*x13189);
IkReal x13205=(r02*x13189);
IkReal x13206=((1.0)*gconst69*x13189);
evalcond[0]=(((r21*x13204))+(((-1.0)*r20*x13206))+((r22*x13190)));
evalcond[1]=(((r01*x13204))+((r02*x13190))+(((-1.0)*r00*x13206)));
evalcond[2]=((-1.0)+((r12*x13190))+(((-1.0)*r10*x13206))+((x13189*x13194)));
evalcond[3]=(((r10*x13190*x13193))+((r11*x13195))+((r10*x13198))+((cj3*x13203))+(((-1.0)*cj3*x13194*x13201)));
evalcond[4]=(((sj3*x13190*x13194))+(((-1.0)*x13199*x13203))+((r11*x13193))+((r10*x13197))+(((-1.0)*r10*x13195*x13201)));
evalcond[5]=((((-1.0)*x13199*x13202))+((r21*x13193))+((cj1*sj2))+((r21*x13190*x13198))+((r20*x13197))+x13196+(((-1.0)*r20*x13195*x13201)));
evalcond[6]=(((r21*x13195))+(((-1.0)*r21*x13197*x13201))+((r20*x13198))+x13191+((r20*x13190*x13193))+(((-1.0)*x13200))+((cj3*x13202)));
evalcond[7]=((((-1.0)*x13196))+(((-1.0)*r01*x13197*x13201))+((r00*x13198))+((r01*x13195))+(((-1.0)*sj2*x13192))+((cj3*x13205))+((r00*x13190*x13193)));
evalcond[8]=((((-1.0)*x13199*x13205))+((r00*x13197))+((r01*x13193))+(((-1.0)*r00*x13195*x13201))+x13191+((r01*x13190*x13198))+(((-1.0)*x13200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13208 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13208)==0){
continue;
}
IkReal x13207=pow(x13208,-0.5);
CheckValue<IkReal> x13209 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13209.valid){
continue;
}
IkReal gconst70=((-1.0)*(x13209.value));
IkReal gconst71=((-1.0)*r21*x13207);
IkReal gconst72=(r20*x13207);
CheckValue<IkReal> x13210 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13210.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13210.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13213 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13213.valid){
continue;
}
IkReal x13211=((-1.0)*(x13213.value));
IkReal x13212=x13207;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst71;
cj5=gconst72;
j5=x13211;
IkReal gconst70=x13211;
IkReal gconst71=((-1.0)*r21*x13212);
IkReal gconst72=(r20*x13212);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13216 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13216.valid){
continue;
}
IkReal x13214=((-1.0)*(x13216.value));
IkReal x13215=x13207;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst71;
cj5=gconst72;
j5=x13214;
IkReal gconst70=x13214;
IkReal gconst71=((-1.0)*r21*x13215);
IkReal gconst72=(r20*x13215);
CheckValue<IkReal> x13224=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13224.valid){
continue;
}
IkReal x13217=x13224.value;
IkReal x13218=(cj3*x13217);
IkReal x13219=(r11*x13218);
IkReal x13220=(r01*x13218);
IkReal x13221=(r00*x13218);
IkReal x13222=(r10*x13218);
IkReal x13223=(r20*r21*x13218);
j4eval[0]=IKsign((((r00*r20*r21*x13219))+((cj3*r02*r12))+((r10*r20*r21*x13220))+((r01*x13219*(r21*r21)))+((r10*x13221*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13225=gconst71*gconst71;
IkReal x13226=gconst72*gconst72;
IkReal x13227=(r10*sj3);
IkReal x13228=(cj3*r11);
IkReal x13229=(r11*sj3);
IkReal x13230=((1.0)*r02);
IkReal x13231=(cj3*r10);
IkReal x13232=(gconst71*gconst72*r01);
IkReal x13233=(gconst71*gconst72*r00);
IkReal x13234=(r01*x13225);
IkReal x13235=((1.0)*r00*x13226);
CheckValue<IkReal> x13236 = IKatan2WithCheck(IkReal(((((-1.0)*x13231*x13233))+(((-1.0)*x13228*x13235))+((x13228*x13232))+((x13231*x13234)))),IkReal(((((-1.0)*gconst71*x13230*x13231))+(((-1.0)*gconst72*x13228*x13230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13236.valid){
continue;
}
CheckValue<IkReal> x13237=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13229*x13234))+((x13229*x13233))+((x13227*x13232))+(((-1.0)*r12*sj3*x13230))+(((-1.0)*x13227*x13235)))),-1);
if(!x13237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13236.value)+(((1.5707963267949)*(x13237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13238=IKcos(j4);
IkReal x13239=IKsin(j4);
IkReal x13240=(sj1*sj2);
IkReal x13241=(gconst71*r11);
IkReal x13242=((1.0)*cj1);
IkReal x13243=(gconst71*r21);
IkReal x13244=(gconst72*r21);
IkReal x13245=(cj3*gconst72);
IkReal x13246=((1.0)*gconst72);
IkReal x13247=(cj2*sj1);
IkReal x13248=(gconst71*sj3);
IkReal x13249=(cj3*gconst71);
IkReal x13250=(gconst71*r01);
IkReal x13251=(gconst72*sj3);
IkReal x13252=(cj2*x13242);
IkReal x13253=(sj3*x13239);
IkReal x13254=(r00*x13246);
IkReal x13255=(cj3*x13238);
IkReal x13256=((1.0)*cj3*x13239);
IkReal x13257=((1.0)*sj3*x13238);
evalcond[0]=(((x13238*x13243))+((r22*x13239))+(((-1.0)*r20*x13238*x13246)));
evalcond[1]=(((x13238*x13250))+((r02*x13239))+(((-1.0)*x13238*x13254)));
evalcond[2]=((-1.0)+((x13238*x13241))+((r12*x13239))+(((-1.0)*r10*x13238*x13246)));
evalcond[3]=(((r10*x13248))+((r12*x13255))+((r11*x13251))+((r10*x13239*x13245))+(((-1.0)*x13241*x13256)));
evalcond[4]=(((r10*x13249))+(((-1.0)*r10*x13246*x13253))+((r11*x13245))+((x13241*x13253))+(((-1.0)*r12*x13257)));
evalcond[5]=((((-1.0)*r20*x13246*x13253))+((x13243*x13253))+((cj3*x13244))+((cj1*sj2))+(((-1.0)*r22*x13257))+x13247+((r20*x13249)));
evalcond[6]=((((-1.0)*x13243*x13256))+((r22*x13255))+(((-1.0)*x13252))+x13240+((r20*x13248))+((sj3*x13244))+((r20*x13239*x13245)));
evalcond[7]=((((-1.0)*x13247))+((r02*x13255))+(((-1.0)*r01*x13239*x13249))+((r00*x13248))+((r01*x13251))+(((-1.0)*sj2*x13242))+((r00*x13239*x13245)));
evalcond[8]=((((-1.0)*r02*x13257))+((r00*x13249))+((r01*x13245))+(((-1.0)*x13252))+x13240+((r01*x13239*x13248))+(((-1.0)*x13253*x13254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13258=gconst71*gconst71;
IkReal x13259=gconst72*gconst72;
IkReal x13260=((1.0)*sj3);
IkReal x13261=(gconst71*r10);
IkReal x13262=(gconst72*r11);
IkReal x13263=(r01*sj3);
IkReal x13264=(cj3*r01);
IkReal x13265=(r00*x13259);
CheckValue<IkReal> x13266=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((r11*x13258*x13264))+(((-1.0)*gconst72*x13261*x13264))+(((-1.0)*cj3*gconst71*r00*x13262))+((cj3*r10*x13265)))),-1);
if(!x13266.valid){
continue;
}
CheckValue<IkReal> x13267 = IKatan2WithCheck(IkReal((((r10*x13258*x13263))+(((-1.0)*r11*x13260*x13265))+((gconst71*x13262*x13263))+(((-1.0)*gconst72*r00*x13260*x13261)))),IkReal(((((-1.0)*r02*x13260*x13262))+(((-1.0)*r02*x13260*x13261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13266.value)))+(x13267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13268=IKcos(j4);
IkReal x13269=IKsin(j4);
IkReal x13270=(sj1*sj2);
IkReal x13271=(gconst71*r11);
IkReal x13272=((1.0)*cj1);
IkReal x13273=(gconst71*r21);
IkReal x13274=(gconst72*r21);
IkReal x13275=(cj3*gconst72);
IkReal x13276=((1.0)*gconst72);
IkReal x13277=(cj2*sj1);
IkReal x13278=(gconst71*sj3);
IkReal x13279=(cj3*gconst71);
IkReal x13280=(gconst71*r01);
IkReal x13281=(gconst72*sj3);
IkReal x13282=(cj2*x13272);
IkReal x13283=(sj3*x13269);
IkReal x13284=(r00*x13276);
IkReal x13285=(cj3*x13268);
IkReal x13286=((1.0)*cj3*x13269);
IkReal x13287=((1.0)*sj3*x13268);
evalcond[0]=((((-1.0)*r20*x13268*x13276))+((r22*x13269))+((x13268*x13273)));
evalcond[1]=((((-1.0)*x13268*x13284))+((x13268*x13280))+((r02*x13269)));
evalcond[2]=((-1.0)+((r12*x13269))+(((-1.0)*r10*x13268*x13276))+((x13268*x13271)));
evalcond[3]=((((-1.0)*x13271*x13286))+((r12*x13285))+((r11*x13281))+((r10*x13278))+((r10*x13269*x13275)));
evalcond[4]=(((r11*x13275))+(((-1.0)*r10*x13276*x13283))+((r10*x13279))+(((-1.0)*r12*x13287))+((x13271*x13283)));
evalcond[5]=((((-1.0)*r22*x13287))+((x13273*x13283))+((r20*x13279))+((cj1*sj2))+((cj3*x13274))+x13277+(((-1.0)*r20*x13276*x13283)));
evalcond[6]=(((r20*x13278))+(((-1.0)*x13273*x13286))+((sj3*x13274))+((r22*x13285))+x13270+((r20*x13269*x13275))+(((-1.0)*x13282)));
evalcond[7]=((((-1.0)*r01*x13269*x13279))+((r00*x13269*x13275))+(((-1.0)*x13277))+(((-1.0)*sj2*x13272))+((r00*x13278))+((r02*x13285))+((r01*x13281)));
evalcond[8]=(((r01*x13275))+((r00*x13279))+(((-1.0)*x13283*x13284))+(((-1.0)*r02*x13287))+x13270+((r01*x13269*x13278))+(((-1.0)*x13282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13288=((1.0)*gconst72);
CheckValue<IkReal> x13289 = IKatan2WithCheck(IkReal((((gconst71*r21))+(((-1.0)*r20*x13288)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13289.valid){
continue;
}
CheckValue<IkReal> x13290=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst71*r00))+(((-1.0)*r01*x13288)))),-1);
if(!x13290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13289.value)+(((1.5707963267949)*(x13290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13291=IKcos(j4);
IkReal x13292=IKsin(j4);
IkReal x13293=(sj1*sj2);
IkReal x13294=(gconst71*r11);
IkReal x13295=((1.0)*cj1);
IkReal x13296=(gconst71*r21);
IkReal x13297=(gconst72*r21);
IkReal x13298=(cj3*gconst72);
IkReal x13299=((1.0)*gconst72);
IkReal x13300=(cj2*sj1);
IkReal x13301=(gconst71*sj3);
IkReal x13302=(cj3*gconst71);
IkReal x13303=(gconst71*r01);
IkReal x13304=(gconst72*sj3);
IkReal x13305=(cj2*x13295);
IkReal x13306=(sj3*x13292);
IkReal x13307=(r00*x13299);
IkReal x13308=(cj3*x13291);
IkReal x13309=((1.0)*cj3*x13292);
IkReal x13310=((1.0)*sj3*x13291);
evalcond[0]=((((-1.0)*r20*x13291*x13299))+((r22*x13292))+((x13291*x13296)));
evalcond[1]=((((-1.0)*x13291*x13307))+((r02*x13292))+((x13291*x13303)));
evalcond[2]=((-1.0)+((r12*x13292))+(((-1.0)*r10*x13291*x13299))+((x13291*x13294)));
evalcond[3]=(((r12*x13308))+((r10*x13292*x13298))+(((-1.0)*x13294*x13309))+((r10*x13301))+((r11*x13304)));
evalcond[4]=(((r11*x13298))+((r10*x13302))+(((-1.0)*r10*x13299*x13306))+((x13294*x13306))+(((-1.0)*r12*x13310)));
evalcond[5]=(((r20*x13302))+((cj1*sj2))+(((-1.0)*r20*x13299*x13306))+((cj3*x13297))+((x13296*x13306))+x13300+(((-1.0)*r22*x13310)));
evalcond[6]=(((r20*x13292*x13298))+((sj3*x13297))+((r20*x13301))+(((-1.0)*x13296*x13309))+((r22*x13308))+(((-1.0)*x13305))+x13293);
evalcond[7]=(((r00*x13292*x13298))+(((-1.0)*r01*x13292*x13302))+((r00*x13301))+((r01*x13304))+((r02*x13308))+(((-1.0)*sj2*x13295))+(((-1.0)*x13300)));
evalcond[8]=((((-1.0)*x13306*x13307))+(((-1.0)*r02*x13310))+((r00*x13302))+(((-1.0)*x13305))+x13293+((r01*x13292*x13301))+((r01*x13298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13312 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13312)==0){
continue;
}
IkReal x13311=pow(x13312,-0.5);
CheckValue<IkReal> x13313 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13313.valid){
continue;
}
IkReal gconst73=((3.14159265358979)+(((-1.0)*(x13313.value))));
IkReal gconst74=((1.0)*r21*x13311);
IkReal gconst75=((-1.0)*r20*x13311);
CheckValue<IkReal> x13314 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13314.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13314.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13317 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13317.valid){
continue;
}
IkReal x13315=((1.0)*(x13317.value));
IkReal x13316=x13311;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst74;
cj5=gconst75;
j5=((3.14159265)+(((-1.0)*x13315)));
IkReal gconst73=((3.14159265358979)+(((-1.0)*x13315)));
IkReal gconst74=((1.0)*r21*x13316);
IkReal gconst75=((-1.0)*r20*x13316);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13320 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13320.valid){
continue;
}
IkReal x13318=((1.0)*(x13320.value));
IkReal x13319=x13311;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst74;
cj5=gconst75;
j5=((3.14159265)+(((-1.0)*x13318)));
IkReal gconst73=((3.14159265358979)+(((-1.0)*x13318)));
IkReal gconst74=((1.0)*r21*x13319);
IkReal gconst75=((-1.0)*r20*x13319);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13323 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13323.valid){
continue;
}
IkReal x13321=((1.0)*(x13323.value));
IkReal x13322=x13311;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst74;
cj5=gconst75;
j5=((3.14159265)+(((-1.0)*x13321)));
IkReal gconst73=((3.14159265358979)+(((-1.0)*x13321)));
IkReal gconst74=((1.0)*r21*x13322);
IkReal gconst75=((-1.0)*r20*x13322);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13324=gconst74*gconst74;
IkReal x13325=gconst75*gconst75;
IkReal x13326=(r21*sj3);
IkReal x13327=((1.0)*cj3);
IkReal x13328=((1.0)*sj3);
IkReal x13329=(gconst74*gconst75*r11);
IkReal x13330=(gconst74*gconst75*r10);
IkReal x13331=(r20*x13325);
CheckValue<IkReal> x13332 = IKatan2WithCheck(IkReal((((x13326*x13329))+((r10*x13324*x13326))+(((-1.0)*r20*x13328*x13330))+(((-1.0)*r11*x13328*x13331)))),IkReal(((((-1.0)*gconst75*r11*r22*x13328))+(((-1.0)*gconst74*r10*r22*x13328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13332.valid){
continue;
}
CheckValue<IkReal> x13333=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*r10*x13331))+(((-1.0)*r21*x13327*x13330))+(((-1.0)*r20*x13327*x13329))+((cj3*r11*r21*x13324)))),-1);
if(!x13333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13332.value)+(((1.5707963267949)*(x13333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13334=IKcos(j4);
IkReal x13335=IKsin(j4);
IkReal x13336=(sj1*sj2);
IkReal x13337=((1.0)*gconst75);
IkReal x13338=(gconst75*sj3);
IkReal x13339=(gconst74*sj3);
IkReal x13340=(cj3*r21);
IkReal x13341=((1.0)*cj2);
IkReal x13342=(cj3*gconst75);
IkReal x13343=(cj1*sj2);
IkReal x13344=(cj3*gconst74);
IkReal x13345=(cj1*x13341);
IkReal x13346=(r10*x13335);
IkReal x13347=(gconst74*x13334);
IkReal x13348=(r20*x13335);
IkReal x13349=(cj3*x13334);
IkReal x13350=(r00*x13335);
IkReal x13351=((1.0)*gconst74*x13335);
IkReal x13352=((1.0)*sj3*x13334);
evalcond[0]=((((-1.0)*r20*x13334*x13337))+((r22*x13335))+((r21*x13347)));
evalcond[1]=(((r02*x13335))+((r01*x13347))+(((-1.0)*r00*x13334*x13337)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13334*x13337))+((r11*x13347))+((r12*x13335)));
evalcond[3]=(((r10*x13339))+((x13342*x13346))+((r12*x13349))+(((-1.0)*r11*x13335*x13344))+((r11*x13338)));
evalcond[4]=((((-1.0)*r12*x13352))+(((-1.0)*sj3*x13337*x13346))+((r10*x13344))+((r11*x13342))+((r11*x13335*x13339)));
evalcond[5]=((((-1.0)*r22*x13352))+((gconst75*x13340))+((cj2*sj1))+(((-1.0)*sj3*x13337*x13348))+((r20*x13344))+x13343+((r21*x13335*x13339)));
evalcond[6]=((((-1.0)*x13345))+((r22*x13349))+((x13342*x13348))+((r20*x13339))+(((-1.0)*x13340*x13351))+((r21*x13338))+x13336);
evalcond[7]=(((x13342*x13350))+(((-1.0)*r01*x13335*x13344))+(((-1.0)*sj1*x13341))+((r00*x13339))+((r01*x13338))+(((-1.0)*x13343))+((r02*x13349)));
evalcond[8]=((((-1.0)*r02*x13352))+(((-1.0)*x13345))+((r01*x13335*x13339))+((r00*x13344))+((r01*x13342))+(((-1.0)*sj3*x13337*x13350))+x13336);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13353=((1.0)*gconst75);
CheckValue<IkReal> x13354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13353))+(((-1.0)*gconst74*r00)))),-1);
if(!x13354.valid){
continue;
}
CheckValue<IkReal> x13355 = IKatan2WithCheck(IkReal((((gconst74*r21))+(((-1.0)*r20*x13353)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13354.value)))+(x13355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13356=IKcos(j4);
IkReal x13357=IKsin(j4);
IkReal x13358=(sj1*sj2);
IkReal x13359=((1.0)*gconst75);
IkReal x13360=(gconst75*sj3);
IkReal x13361=(gconst74*sj3);
IkReal x13362=(cj3*r21);
IkReal x13363=((1.0)*cj2);
IkReal x13364=(cj3*gconst75);
IkReal x13365=(cj1*sj2);
IkReal x13366=(cj3*gconst74);
IkReal x13367=(cj1*x13363);
IkReal x13368=(r10*x13357);
IkReal x13369=(gconst74*x13356);
IkReal x13370=(r20*x13357);
IkReal x13371=(cj3*x13356);
IkReal x13372=(r00*x13357);
IkReal x13373=((1.0)*gconst74*x13357);
IkReal x13374=((1.0)*sj3*x13356);
evalcond[0]=(((r22*x13357))+(((-1.0)*r20*x13356*x13359))+((r21*x13369)));
evalcond[1]=(((r02*x13357))+((r01*x13369))+(((-1.0)*r00*x13356*x13359)));
evalcond[2]=((-1.0)+((r11*x13369))+(((-1.0)*r10*x13356*x13359))+((r12*x13357)));
evalcond[3]=(((r10*x13361))+(((-1.0)*r11*x13357*x13366))+((r12*x13371))+((r11*x13360))+((x13364*x13368)));
evalcond[4]=(((r11*x13357*x13361))+((r10*x13366))+((r11*x13364))+(((-1.0)*sj3*x13359*x13368))+(((-1.0)*r12*x13374)));
evalcond[5]=(((cj2*sj1))+((r20*x13366))+(((-1.0)*r22*x13374))+((r21*x13357*x13361))+((gconst75*x13362))+(((-1.0)*sj3*x13359*x13370))+x13365);
evalcond[6]=(((r20*x13361))+(((-1.0)*x13362*x13373))+(((-1.0)*x13367))+((r22*x13371))+((r21*x13360))+((x13364*x13370))+x13358);
evalcond[7]=((((-1.0)*x13365))+((r02*x13371))+((r01*x13360))+((r00*x13361))+((x13364*x13372))+(((-1.0)*sj1*x13363))+(((-1.0)*r01*x13357*x13366)));
evalcond[8]=(((r01*x13364))+((r00*x13366))+(((-1.0)*r02*x13374))+(((-1.0)*sj3*x13359*x13372))+(((-1.0)*x13367))+((r01*x13357*x13361))+x13358);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13375=IKPowWithIntegerCheck(IKsign((((gconst75*r21))+((gconst74*r20)))),-1);
if(!x13375.valid){
continue;
}
CheckValue<IkReal> x13376 = IKatan2WithCheck(IkReal(((((-1.0)*gconst75*r00))+((gconst74*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13375.value)))+(x13376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13377=IKcos(j4);
IkReal x13378=IKsin(j4);
IkReal x13379=(sj1*sj2);
IkReal x13380=((1.0)*gconst75);
IkReal x13381=(gconst75*sj3);
IkReal x13382=(gconst74*sj3);
IkReal x13383=(cj3*r21);
IkReal x13384=((1.0)*cj2);
IkReal x13385=(cj3*gconst75);
IkReal x13386=(cj1*sj2);
IkReal x13387=(cj3*gconst74);
IkReal x13388=(cj1*x13384);
IkReal x13389=(r10*x13378);
IkReal x13390=(gconst74*x13377);
IkReal x13391=(r20*x13378);
IkReal x13392=(cj3*x13377);
IkReal x13393=(r00*x13378);
IkReal x13394=((1.0)*gconst74*x13378);
IkReal x13395=((1.0)*sj3*x13377);
evalcond[0]=(((r21*x13390))+((r22*x13378))+(((-1.0)*r20*x13377*x13380)));
evalcond[1]=(((r02*x13378))+(((-1.0)*r00*x13377*x13380))+((r01*x13390)));
evalcond[2]=((-1.0)+((r11*x13390))+((r12*x13378))+(((-1.0)*r10*x13377*x13380)));
evalcond[3]=((((-1.0)*r11*x13378*x13387))+((r11*x13381))+((r10*x13382))+((r12*x13392))+((x13385*x13389)));
evalcond[4]=(((r11*x13385))+((r10*x13387))+(((-1.0)*sj3*x13380*x13389))+((r11*x13378*x13382))+(((-1.0)*r12*x13395)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r22*x13395))+((r20*x13387))+((r21*x13378*x13382))+(((-1.0)*sj3*x13380*x13391))+((gconst75*x13383))+x13386);
evalcond[6]=(((r20*x13382))+((x13385*x13391))+(((-1.0)*x13383*x13394))+(((-1.0)*x13388))+((r22*x13392))+x13379+((r21*x13381)));
evalcond[7]=((((-1.0)*x13386))+((x13385*x13393))+((r01*x13381))+((r00*x13382))+(((-1.0)*sj1*x13384))+((r02*x13392))+(((-1.0)*r01*x13378*x13387)));
evalcond[8]=(((r01*x13378*x13382))+((r01*x13385))+((r00*x13387))+(((-1.0)*sj3*x13380*x13393))+(((-1.0)*x13388))+(((-1.0)*r02*x13395))+x13379);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13396=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13396);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13396);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13397=(r11*sj5);
IkReal x13398=((1.0)*cj5*r10);
j4eval[0]=(((sj3*x13397))+(((-1.0)*sj3*x13398)));
j4eval[1]=((((-1.0)*x13398))+x13397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13399=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13399);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13399);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13400=(cj5*r10);
IkReal x13401=(r11*sj5);
j4eval[0]=((((-1.0)*cj3*x13401))+((cj3*x13400)));
j4eval[1]=(x13401+(((-1.0)*x13400)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13402=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13402);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13402);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3)));
j4eval[1]=r22;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13403=((1.0)*cj5);
CheckValue<IkReal> x13404=IKPowWithIntegerCheck(((((-1.0)*r10*sj3*x13403))+((r11*sj3*sj5))),-1);
if(!x13404.valid){
continue;
}
CheckValue<IkReal> x13405=IKPowWithIntegerCheck(r22,-1);
if(!x13405.valid){
continue;
}
CheckValue<IkReal> x13406=IKPowWithIntegerCheck(sj3,-1);
if(!x13406.valid){
continue;
}
if( IKabs(((x13404.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x13403)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13405.value)*(x13406.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13404.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x13403))))))+IKsqr(((x13405.value)*(x13406.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13404.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x13403))))), ((x13405.value)*(x13406.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13407=IKcos(j4);
IkReal x13408=IKsin(j4);
IkReal x13409=(sj1*sj2);
IkReal x13410=((1.0)*cj5);
IkReal x13411=(cj5*r01);
IkReal x13412=((1.0)*cj1);
IkReal x13413=(cj3*sj5);
IkReal x13414=(cj3*cj5);
IkReal x13415=(sj3*sj5);
IkReal x13416=(cj2*sj1);
IkReal x13417=(r01*sj5);
IkReal x13418=(r11*sj5);
IkReal x13419=(cj2*x13412);
IkReal x13420=(sj3*x13408);
IkReal x13421=(r22*x13407);
IkReal x13422=((1.0)*x13408);
evalcond[0]=(r22*x13408);
evalcond[1]=(((x13407*x13417))+(((-1.0)*r00*x13407*x13410)));
evalcond[2]=(x13416+(((-1.0)*sj3*x13421))+((cj1*sj2)));
evalcond[3]=(x13409+((cj3*x13421))+(((-1.0)*x13419)));
evalcond[4]=((-1.0)+((x13407*x13418))+(((-1.0)*r10*x13407*x13410)));
evalcond[5]=(((r11*x13408*x13415))+((r10*x13413))+((r11*x13414))+(((-1.0)*r10*x13410*x13420)));
evalcond[6]=(((cj5*r11*sj3))+((r10*x13408*x13414))+((r10*x13415))+(((-1.0)*r11*x13413*x13422)));
evalcond[7]=((((-1.0)*r00*x13410*x13420))+x13409+((r01*x13408*x13415))+((cj3*x13411))+((r00*x13413))+(((-1.0)*x13419)));
evalcond[8]=((((-1.0)*sj2*x13412))+(((-1.0)*r01*x13413*x13422))+((r00*x13408*x13414))+(((-1.0)*x13416))+((sj3*x13411))+((r00*x13415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13423=((1.0)*sj5);
IkReal x13424=(cj5*r10);
CheckValue<IkReal> x13425=IKPowWithIntegerCheck((((cj3*x13424))+(((-1.0)*cj3*r11*x13423))),-1);
if(!x13425.valid){
continue;
}
CheckValue<IkReal> x13426=IKPowWithIntegerCheck(((((-1.0)*x13424))+((r11*sj5))),-1);
if(!x13426.valid){
continue;
}
if( IKabs(((x13425.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x13423)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13426.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13425.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x13423))))))+IKsqr(x13426.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13425.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x13423))))), x13426.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13427=IKcos(j4);
IkReal x13428=IKsin(j4);
IkReal x13429=(sj1*sj2);
IkReal x13430=((1.0)*cj5);
IkReal x13431=(cj5*r01);
IkReal x13432=((1.0)*cj1);
IkReal x13433=(cj3*sj5);
IkReal x13434=(cj3*cj5);
IkReal x13435=(sj3*sj5);
IkReal x13436=(cj2*sj1);
IkReal x13437=(r01*sj5);
IkReal x13438=(r11*sj5);
IkReal x13439=(cj2*x13432);
IkReal x13440=(sj3*x13428);
IkReal x13441=(r22*x13427);
IkReal x13442=((1.0)*x13428);
evalcond[0]=(r22*x13428);
evalcond[1]=(((x13427*x13437))+(((-1.0)*r00*x13427*x13430)));
evalcond[2]=(x13436+((cj1*sj2))+(((-1.0)*sj3*x13441)));
evalcond[3]=(x13429+(((-1.0)*x13439))+((cj3*x13441)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x13427*x13430))+((x13427*x13438)));
evalcond[5]=(((r11*x13428*x13435))+((r11*x13434))+(((-1.0)*r10*x13430*x13440))+((r10*x13433)));
evalcond[6]=(((r10*x13428*x13434))+((cj5*r11*sj3))+(((-1.0)*r11*x13433*x13442))+((r10*x13435)));
evalcond[7]=(x13429+(((-1.0)*r00*x13430*x13440))+(((-1.0)*x13439))+((r01*x13428*x13435))+((r00*x13433))+((cj3*x13431)));
evalcond[8]=((((-1.0)*sj2*x13432))+(((-1.0)*x13436))+((sj3*x13431))+(((-1.0)*r01*x13433*x13442))+((r00*x13428*x13434))+((r00*x13435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13443=((1.0)*cj5);
IkReal x13444=(r11*sj5);
CheckValue<IkReal> x13445=IKPowWithIntegerCheck((((sj3*x13444))+(((-1.0)*r10*sj3*x13443))),-1);
if(!x13445.valid){
continue;
}
CheckValue<IkReal> x13446=IKPowWithIntegerCheck((x13444+(((-1.0)*r10*x13443))),-1);
if(!x13446.valid){
continue;
}
if( IKabs(((x13445.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x13443)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13446.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13445.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x13443))))))+IKsqr(x13446.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13445.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x13443))))), x13446.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13447=IKcos(j4);
IkReal x13448=IKsin(j4);
IkReal x13449=(sj1*sj2);
IkReal x13450=((1.0)*cj5);
IkReal x13451=(cj5*r01);
IkReal x13452=((1.0)*cj1);
IkReal x13453=(cj3*sj5);
IkReal x13454=(cj3*cj5);
IkReal x13455=(sj3*sj5);
IkReal x13456=(cj2*sj1);
IkReal x13457=(r01*sj5);
IkReal x13458=(r11*sj5);
IkReal x13459=(cj2*x13452);
IkReal x13460=(sj3*x13448);
IkReal x13461=(r22*x13447);
IkReal x13462=((1.0)*x13448);
evalcond[0]=(r22*x13448);
evalcond[1]=((((-1.0)*r00*x13447*x13450))+((x13447*x13457)));
evalcond[2]=(x13456+(((-1.0)*sj3*x13461))+((cj1*sj2)));
evalcond[3]=(x13449+(((-1.0)*x13459))+((cj3*x13461)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x13447*x13450))+((x13447*x13458)));
evalcond[5]=(((r10*x13453))+((r11*x13454))+((r11*x13448*x13455))+(((-1.0)*r10*x13450*x13460)));
evalcond[6]=(((r10*x13448*x13454))+((r10*x13455))+((cj5*r11*sj3))+(((-1.0)*r11*x13453*x13462)));
evalcond[7]=(x13449+(((-1.0)*x13459))+((r01*x13448*x13455))+(((-1.0)*r00*x13450*x13460))+((cj3*x13451))+((r00*x13453)));
evalcond[8]=(((sj3*x13451))+(((-1.0)*r01*x13453*x13462))+(((-1.0)*x13456))+(((-1.0)*sj2*x13452))+((r00*x13448*x13454))+((r00*x13455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13463=cj5*cj5;
IkReal x13464=((1.0)*cj5);
IkReal x13465=(r11*sj3);
IkReal x13466=(cj3*sj5);
IkReal x13467=(r10*r21);
IkReal x13468=(cj3*r11*r21);
IkReal x13469=((1.0)*x13463);
IkReal x13470=(r10*sj3*sj5);
CheckValue<IkReal> x13471=IKPowWithIntegerCheck(IKsign((x13468+((cj3*r12*r22))+(((-1.0)*r11*r20*x13464*x13466))+((cj3*r10*r20*x13463))+(((-1.0)*x13464*x13466*x13467))+(((-1.0)*x13468*x13469)))),-1);
if(!x13471.valid){
continue;
}
CheckValue<IkReal> x13472 = IKatan2WithCheck(IkReal((((cj5*r21*sj5*x13465))+(((-1.0)*r20*x13464*x13470))+((sj3*x13467))+(((-1.0)*sj3*x13467*x13469))+(((-1.0)*r20*x13465*x13469)))),IkReal(((((-1.0)*r22*x13470))+(((-1.0)*r22*x13464*x13465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13471.value)))+(x13472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13473=IKcos(j4);
IkReal x13474=IKsin(j4);
IkReal x13475=(sj1*sj2);
IkReal x13476=((1.0)*cj5);
IkReal x13477=(cj5*r01);
IkReal x13478=((1.0)*cj1);
IkReal x13479=(cj3*sj5);
IkReal x13480=(cj3*cj5);
IkReal x13481=(cj5*sj3);
IkReal x13482=(sj3*sj5);
IkReal x13483=(cj2*sj1);
IkReal x13484=(cj2*x13478);
IkReal x13485=(sj5*x13473);
IkReal x13486=(sj3*x13474);
IkReal x13487=(cj3*x13473);
IkReal x13488=((1.0)*x13474);
IkReal x13489=((1.0)*sj3*x13473);
evalcond[0]=((((-1.0)*r20*x13473*x13476))+((r22*x13474))+((r21*x13485)));
evalcond[1]=((((-1.0)*r00*x13473*x13476))+((r02*x13474))+((r01*x13485)));
evalcond[2]=((-1.0)+((r12*x13474))+(((-1.0)*r10*x13473*x13476))+((r11*x13485)));
evalcond[3]=(((r10*x13474*x13480))+((r11*x13481))+((r10*x13482))+(((-1.0)*r11*x13479*x13488))+((r12*x13487)));
evalcond[4]=((((-1.0)*r12*x13489))+(((-1.0)*r10*x13476*x13486))+((r10*x13479))+((r11*x13480))+((r11*x13474*x13482)));
evalcond[5]=(x13483+((cj1*sj2))+(((-1.0)*r22*x13489))+(((-1.0)*r20*x13476*x13486))+((r21*x13474*x13482))+((r20*x13479))+((r21*x13480)));
evalcond[6]=(x13475+(((-1.0)*x13484))+((r20*x13474*x13480))+((r20*x13482))+(((-1.0)*r21*x13479*x13488))+((r21*x13481))+((r22*x13487)));
evalcond[7]=(((sj3*x13477))+((r02*x13487))+(((-1.0)*x13483))+(((-1.0)*sj2*x13478))+((r00*x13474*x13480))+((r00*x13482))+(((-1.0)*r01*x13479*x13488)));
evalcond[8]=((((-1.0)*r00*x13476*x13486))+x13475+(((-1.0)*x13484))+((r00*x13479))+(((-1.0)*r02*x13489))+((cj3*x13477))+((r01*x13474*x13482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13490=((1.0)*cj5);
CheckValue<IkReal> x13491 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13490))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13491.valid){
continue;
}
CheckValue<IkReal> x13492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13490))+(((-1.0)*r00*sj5)))),-1);
if(!x13492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13491.value)+(((1.5707963267949)*(x13492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13493=IKcos(j4);
IkReal x13494=IKsin(j4);
IkReal x13495=(sj1*sj2);
IkReal x13496=((1.0)*cj5);
IkReal x13497=(cj5*r01);
IkReal x13498=((1.0)*cj1);
IkReal x13499=(cj3*sj5);
IkReal x13500=(cj3*cj5);
IkReal x13501=(cj5*sj3);
IkReal x13502=(sj3*sj5);
IkReal x13503=(cj2*sj1);
IkReal x13504=(cj2*x13498);
IkReal x13505=(sj5*x13493);
IkReal x13506=(sj3*x13494);
IkReal x13507=(cj3*x13493);
IkReal x13508=((1.0)*x13494);
IkReal x13509=((1.0)*sj3*x13493);
evalcond[0]=(((r22*x13494))+(((-1.0)*r20*x13493*x13496))+((r21*x13505)));
evalcond[1]=(((r02*x13494))+(((-1.0)*r00*x13493*x13496))+((r01*x13505)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13493*x13496))+((r11*x13505))+((r12*x13494)));
evalcond[3]=(((r10*x13502))+((r10*x13494*x13500))+(((-1.0)*r11*x13499*x13508))+((r11*x13501))+((r12*x13507)));
evalcond[4]=((((-1.0)*r12*x13509))+(((-1.0)*r10*x13496*x13506))+((r11*x13500))+((r11*x13494*x13502))+((r10*x13499)));
evalcond[5]=(x13503+((cj1*sj2))+((r20*x13499))+((r21*x13494*x13502))+(((-1.0)*r20*x13496*x13506))+((r21*x13500))+(((-1.0)*r22*x13509)));
evalcond[6]=(x13495+((r20*x13502))+((r22*x13507))+((r20*x13494*x13500))+(((-1.0)*x13504))+(((-1.0)*r21*x13499*x13508))+((r21*x13501)));
evalcond[7]=((((-1.0)*sj2*x13498))+((r02*x13507))+(((-1.0)*r01*x13499*x13508))+(((-1.0)*x13503))+((sj3*x13497))+((r00*x13494*x13500))+((r00*x13502)));
evalcond[8]=(x13495+((r01*x13494*x13502))+((cj3*x13497))+(((-1.0)*x13504))+((r00*x13499))+(((-1.0)*r00*x13496*x13506))+(((-1.0)*r02*x13509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13510=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13510.valid){
continue;
}
CheckValue<IkReal> x13511 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13510.value)))+(x13511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13512=IKcos(j4);
IkReal x13513=IKsin(j4);
IkReal x13514=(sj1*sj2);
IkReal x13515=((1.0)*cj5);
IkReal x13516=(cj5*r01);
IkReal x13517=((1.0)*cj1);
IkReal x13518=(cj3*sj5);
IkReal x13519=(cj3*cj5);
IkReal x13520=(cj5*sj3);
IkReal x13521=(sj3*sj5);
IkReal x13522=(cj2*sj1);
IkReal x13523=(cj2*x13517);
IkReal x13524=(sj5*x13512);
IkReal x13525=(sj3*x13513);
IkReal x13526=(cj3*x13512);
IkReal x13527=((1.0)*x13513);
IkReal x13528=((1.0)*sj3*x13512);
evalcond[0]=(((r21*x13524))+(((-1.0)*r20*x13512*x13515))+((r22*x13513)));
evalcond[1]=(((r01*x13524))+((r02*x13513))+(((-1.0)*r00*x13512*x13515)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13512*x13515))+((r11*x13524))+((r12*x13513)));
evalcond[3]=(((r10*x13513*x13519))+((r11*x13520))+((r12*x13526))+((r10*x13521))+(((-1.0)*r11*x13518*x13527)));
evalcond[4]=(((r11*x13513*x13521))+(((-1.0)*r12*x13528))+(((-1.0)*r10*x13515*x13525))+((r11*x13519))+((r10*x13518)));
evalcond[5]=(((r21*x13519))+x13522+(((-1.0)*r20*x13515*x13525))+(((-1.0)*r22*x13528))+((r20*x13518))+((cj1*sj2))+((r21*x13513*x13521)));
evalcond[6]=(((r21*x13520))+x13514+((r20*x13521))+((r20*x13513*x13519))+((r22*x13526))+(((-1.0)*x13523))+(((-1.0)*r21*x13518*x13527)));
evalcond[7]=((((-1.0)*sj2*x13517))+((r02*x13526))+(((-1.0)*r01*x13518*x13527))+(((-1.0)*x13522))+((sj3*x13516))+((r00*x13521))+((r00*x13513*x13519)));
evalcond[8]=(x13514+((r01*x13513*x13521))+(((-1.0)*r00*x13515*x13525))+(((-1.0)*x13523))+((cj3*x13516))+((r00*x13518))+(((-1.0)*r02*x13528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13530 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13530)==0){
continue;
}
IkReal x13529=pow(x13530,-0.5);
CheckValue<IkReal> x13531 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13531.valid){
continue;
}
IkReal gconst46=((-1.0)*(x13531.value));
IkReal gconst47=((-1.0)*r01*x13529);
IkReal gconst48=(r00*x13529);
CheckValue<IkReal> x13532 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13532.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13532.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13535 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13535.valid){
continue;
}
IkReal x13533=((-1.0)*(x13535.value));
IkReal x13534=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13533;
IkReal gconst46=x13533;
IkReal gconst47=((-1.0)*r01*x13534);
IkReal gconst48=(r00*x13534);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13538 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13538.valid){
continue;
}
IkReal x13536=((-1.0)*(x13538.value));
IkReal x13537=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13536;
IkReal gconst46=x13536;
IkReal gconst47=((-1.0)*r01*x13537);
IkReal gconst48=(r00*x13537);
IkReal x13539=r02*r02;
IkReal x13540=((1.0)*sj0);
IkReal x13541=(cj0*r12);
CheckValue<IkReal> x13545=IKPowWithIntegerCheck(((-1.0)+x13539),-1);
if(!x13545.valid){
continue;
}
IkReal x13542=x13545.value;
if((((1.0)+(((-1.0)*x13539)))) < -0.00001)
continue;
IkReal x13543=IKsqrt(((1.0)+(((-1.0)*x13539))));
IkReal x13544=(x13542*x13543);
j4eval[0]=((IKabs((x13541+(((-1.0)*r02*x13540)))))+(IKabs((((sj0*x13544))+(((-1.0)*x13539*x13540*x13544))+((r02*x13541*x13544))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13548 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13548.valid){
continue;
}
IkReal x13546=((-1.0)*(x13548.value));
IkReal x13547=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13546;
IkReal gconst46=x13546;
IkReal gconst47=((-1.0)*r01*x13547);
IkReal gconst48=(r00*x13547);
CheckValue<IkReal> x13552=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13552.valid){
continue;
}
IkReal x13549=x13552.value;
IkReal x13550=(cj3*x13549);
IkReal x13551=(((x13550*(r00*r00)*(r20*r20)))+(((2.0)*r00*r01*r20*r21*x13550))+((cj3*(r22*r22)))+((x13550*(r01*r01)*(r21*r21))));
j4eval[0]=x13551;
j4eval[1]=IKsign(x13551);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13555 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13555.valid){
continue;
}
IkReal x13553=((-1.0)*(x13555.value));
IkReal x13554=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13553;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst46=x13553;
IkReal gconst47=((-1.0)*r01*x13554);
IkReal gconst48=(r00*x13554);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13558 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13558.valid){
continue;
}
IkReal x13556=((-1.0)*(x13558.value));
IkReal x13557=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13556;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst46=x13556;
IkReal gconst47=((-1.0)*r01*x13557);
IkReal gconst48=(r00*x13557);
IkReal x13559=r02*r02;
IkReal x13560=((1.0)*sj0);
IkReal x13561=(cj0*r12);
CheckValue<IkReal> x13565=IKPowWithIntegerCheck(((-1.0)+x13559),-1);
if(!x13565.valid){
continue;
}
IkReal x13562=x13565.value;
if((((1.0)+(((-1.0)*x13559)))) < -0.00001)
continue;
IkReal x13563=IKsqrt(((1.0)+(((-1.0)*x13559))));
IkReal x13564=(x13562*x13563);
j4eval[0]=((IKabs((((r02*x13561*x13564))+((sj0*x13564))+(((-1.0)*x13559*x13560*x13564)))))+(IKabs((x13561+(((-1.0)*r02*x13560))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13568 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13568.valid){
continue;
}
IkReal x13566=((-1.0)*(x13568.value));
IkReal x13567=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13566;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst46=x13566;
IkReal gconst47=((-1.0)*r01*x13567);
IkReal gconst48=(r00*x13567);
IkReal x13569=r02*r02;
IkReal x13570=((1.0)*r22);
IkReal x13571=(cj1*sj2);
IkReal x13572=(cj2*sj1);
IkReal x13573=((1.0)+(((-1.0)*x13569)));
CheckValue<IkReal> x13580=IKPowWithIntegerCheck(x13573,-1);
if(!x13580.valid){
continue;
}
IkReal x13574=x13580.value;
CheckValue<IkReal> x13581=IKPowWithIntegerCheck(((-1.0)+x13569),-1);
if(!x13581.valid){
continue;
}
IkReal x13575=x13581.value;
IkReal x13576=((1.0)*x13574);
if((x13573) < -0.00001)
continue;
IkReal x13577=IKsqrt(x13573);
IkReal x13578=(r02*x13575*x13577);
IkReal x13579=((((-1.0)*r22*x13570))+(((-1.0)*x13576*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x13574))+(((-1.0)*x13576*(r01*r01)*(r21*r21))));
j4eval[0]=x13579;
j4eval[1]=IKsign(x13579);
j4eval[2]=((IKabs(((((-1.0)*x13570*x13571*x13578))+(((-1.0)*x13570*x13572*x13578)))))+(IKabs(((((-1.0)*x13570*x13572))+(((-1.0)*x13570*x13571))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13582=(cj1*sj2);
IkReal x13583=((1.0)*r22);
IkReal x13584=(gconst47*r21);
IkReal x13585=(gconst48*r20);
IkReal x13586=(cj2*sj1);
CheckValue<IkReal> x13587 = IKatan2WithCheck(IkReal(((((-1.0)*x13582*x13585))+((x13582*x13584))+((x13584*x13586))+(((-1.0)*x13585*x13586)))),IkReal(((((-1.0)*x13583*x13586))+(((-1.0)*x13582*x13583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13587.valid){
continue;
}
CheckValue<IkReal> x13588=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13584*x13584)))+(((-1.0)*(x13585*x13585)))+(((-1.0)*r22*x13583))+(((2.0)*x13584*x13585)))),-1);
if(!x13588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13587.value)+(((1.5707963267949)*(x13588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13589=IKcos(j4);
IkReal x13590=IKsin(j4);
IkReal x13591=(gconst48*r20);
IkReal x13592=(cj1*cj2);
IkReal x13593=(gconst48*r00);
IkReal x13594=(sj1*sj2);
IkReal x13595=(gconst48*r10);
IkReal x13596=((1.0)*x13589);
IkReal x13597=(gconst47*x13590);
IkReal x13598=((1.0)*x13590);
IkReal x13599=(gconst47*x13589);
evalcond[0]=(((r22*x13590))+((r21*x13599))+(((-1.0)*x13591*x13596)));
evalcond[1]=(cj0+((r01*x13599))+(((-1.0)*x13593*x13596))+((r02*x13590)));
evalcond[2]=(sj0+((r11*x13599))+((r12*x13590))+(((-1.0)*x13595*x13596)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x13597))+(((-1.0)*r22*x13596))+(((-1.0)*x13591*x13598)));
evalcond[4]=(((sj0*x13592))+((r01*x13597))+(((-1.0)*sj0*x13594))+(((-1.0)*x13593*x13598))+(((-1.0)*r02*x13596)));
evalcond[5]=(((r11*x13597))+(((-1.0)*cj0*x13592))+(((-1.0)*r12*x13596))+((cj0*x13594))+(((-1.0)*x13595*x13598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13600=((1.0)*sj0);
IkReal x13601=((1.0)*gconst47);
CheckValue<IkReal> x13602 = IKatan2WithCheck(IkReal((((gconst47*r01*sj0))+((cj0*gconst48*r10))+(((-1.0)*cj0*r11*x13601))+(((-1.0)*gconst48*r00*x13600)))),IkReal(((((-1.0)*r02*x13600))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13602.valid){
continue;
}
CheckValue<IkReal> x13603=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst48*r21))+(((-1.0)*r20*x13601)))),-1);
if(!x13603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13602.value)+(((1.5707963267949)*(x13603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13604=IKcos(j4);
IkReal x13605=IKsin(j4);
IkReal x13606=(gconst48*r20);
IkReal x13607=(cj1*cj2);
IkReal x13608=(gconst48*r00);
IkReal x13609=(sj1*sj2);
IkReal x13610=(gconst48*r10);
IkReal x13611=((1.0)*x13604);
IkReal x13612=(gconst47*x13605);
IkReal x13613=((1.0)*x13605);
IkReal x13614=(gconst47*x13604);
evalcond[0]=(((r21*x13614))+(((-1.0)*x13606*x13611))+((r22*x13605)));
evalcond[1]=((((-1.0)*x13608*x13611))+cj0+((r01*x13614))+((r02*x13605)));
evalcond[2]=(sj0+((r12*x13605))+((r11*x13614))+(((-1.0)*x13610*x13611)));
evalcond[3]=(((cj2*sj1))+((r21*x13612))+(((-1.0)*x13606*x13613))+((cj1*sj2))+(((-1.0)*r22*x13611)));
evalcond[4]=((((-1.0)*x13608*x13613))+(((-1.0)*sj0*x13609))+(((-1.0)*r02*x13611))+((r01*x13612))+((sj0*x13607)));
evalcond[5]=(((cj0*x13609))+(((-1.0)*cj0*x13607))+((r11*x13612))+(((-1.0)*x13610*x13613))+(((-1.0)*r12*x13611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13615=((1.0)*gconst48);
CheckValue<IkReal> x13616 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x13615))+((cj0*gconst47*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13616.valid){
continue;
}
CheckValue<IkReal> x13617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13615))+(((-1.0)*gconst47*r10)))),-1);
if(!x13617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13616.value)+(((1.5707963267949)*(x13617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13618=IKcos(j4);
IkReal x13619=IKsin(j4);
IkReal x13620=(gconst48*r20);
IkReal x13621=(cj1*cj2);
IkReal x13622=(gconst48*r00);
IkReal x13623=(sj1*sj2);
IkReal x13624=(gconst48*r10);
IkReal x13625=((1.0)*x13618);
IkReal x13626=(gconst47*x13619);
IkReal x13627=((1.0)*x13619);
IkReal x13628=(gconst47*x13618);
evalcond[0]=((((-1.0)*x13620*x13625))+((r21*x13628))+((r22*x13619)));
evalcond[1]=((((-1.0)*x13622*x13625))+cj0+((r01*x13628))+((r02*x13619)));
evalcond[2]=(sj0+(((-1.0)*x13624*x13625))+((r11*x13628))+((r12*x13619)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x13620*x13627))+((cj1*sj2))+((r21*x13626))+(((-1.0)*r22*x13625)));
evalcond[4]=((((-1.0)*x13622*x13627))+(((-1.0)*sj0*x13623))+((sj0*x13621))+((r01*x13626))+(((-1.0)*r02*x13625)));
evalcond[5]=(((cj0*x13623))+(((-1.0)*cj0*x13621))+(((-1.0)*x13624*x13627))+((r11*x13626))+(((-1.0)*r12*x13625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x13631 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13631.valid){
continue;
}
IkReal x13629=((-1.0)*(x13631.value));
IkReal x13630=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13629;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst46=x13629;
IkReal gconst47=((-1.0)*r01*x13630);
IkReal gconst48=(r00*x13630);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13634 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13634.valid){
continue;
}
IkReal x13632=((-1.0)*(x13634.value));
IkReal x13633=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13632;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst46=x13632;
IkReal gconst47=((-1.0)*r01*x13633);
IkReal gconst48=(r00*x13633);
IkReal x13635=r02*r02;
IkReal x13636=((1.0)*sj0);
IkReal x13637=(cj0*r12);
CheckValue<IkReal> x13641=IKPowWithIntegerCheck(((-1.0)+x13635),-1);
if(!x13641.valid){
continue;
}
IkReal x13638=x13641.value;
if((((1.0)+(((-1.0)*x13635)))) < -0.00001)
continue;
IkReal x13639=IKsqrt(((1.0)+(((-1.0)*x13635))));
IkReal x13640=(x13638*x13639);
j4eval[0]=((IKabs((((r02*x13637*x13640))+(((-1.0)*x13635*x13636*x13640))+((sj0*x13640)))))+(IKabs(((((-1.0)*r02*x13636))+x13637))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13644 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13644.valid){
continue;
}
IkReal x13642=((-1.0)*(x13644.value));
IkReal x13643=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13642;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst46=x13642;
IkReal gconst47=((-1.0)*r01*x13643);
IkReal gconst48=(r00*x13643);
IkReal x13645=r02*r02;
CheckValue<IkReal> x13651=IKPowWithIntegerCheck(((-1.0)+x13645),-1);
if(!x13651.valid){
continue;
}
IkReal x13646=x13651.value;
IkReal x13647=((1.0)*cj1*r22*sj2);
IkReal x13648=((1.0)*cj2*r22*sj1);
if((((1.0)+(((-1.0)*x13645)))) < -0.00001)
continue;
IkReal x13649=IKsqrt(((1.0)+(((-1.0)*x13645))));
IkReal x13650=(r02*x13646*x13649);
j4eval[0]=((IKabs(((((-1.0)*x13648*x13650))+(((-1.0)*x13647*x13650)))))+(IKabs(((((-1.0)*x13647))+(((-1.0)*x13648))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13652=(gconst48*r20);
IkReal x13653=(gconst47*r21);
IkReal x13654=((1.0)*cj1*sj2);
IkReal x13655=((1.0)*cj2*sj1);
CheckValue<IkReal> x13656 = IKatan2WithCheck(IkReal((((cj1*sj2*x13653))+(((-1.0)*x13652*x13654))+(((-1.0)*x13652*x13655))+((cj2*sj1*x13653)))),IkReal(((((-1.0)*r22*x13655))+(((-1.0)*r22*x13654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13656.valid){
continue;
}
CheckValue<IkReal> x13657=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x13652*x13653))+(x13653*x13653)+(x13652*x13652))),-1);
if(!x13657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13656.value)+(((1.5707963267949)*(x13657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13658=IKcos(j4);
IkReal x13659=IKsin(j4);
IkReal x13660=(cj1*cj2);
IkReal x13661=(sj1*sj2);
IkReal x13662=(gconst47*x13658);
IkReal x13663=(gconst48*x13659);
IkReal x13664=((1.0)*gconst48*x13658);
IkReal x13665=((1.0)*gconst47*x13659);
evalcond[0]=((((-1.0)*r20*x13664))+((r22*x13659))+((r21*x13662)));
evalcond[1]=(cj0+(((-1.0)*r00*x13664))+((r01*x13662))+((r02*x13659)));
evalcond[2]=(((r12*x13659))+sj0+((r11*x13662))+(((-1.0)*r10*x13664)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x13658))+(((-1.0)*r21*x13665))+((r20*x13663)));
evalcond[4]=((((-1.0)*sj0*x13661))+((r00*x13663))+(((-1.0)*r01*x13665))+((r02*x13658))+((sj0*x13660)));
evalcond[5]=(((r12*x13658))+(((-1.0)*r11*x13665))+((r10*x13663))+((cj0*x13661))+(((-1.0)*cj0*x13660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13666=((1.0)*sj0);
IkReal x13667=((1.0)*gconst47);
CheckValue<IkReal> x13668 = IKatan2WithCheck(IkReal(((((-1.0)*gconst48*r00*x13666))+((gconst47*r01*sj0))+((cj0*gconst48*r10))+(((-1.0)*cj0*r11*x13667)))),IkReal(((((-1.0)*r02*x13666))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13668.valid){
continue;
}
CheckValue<IkReal> x13669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13667))+(((-1.0)*gconst48*r21)))),-1);
if(!x13669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13668.value)+(((1.5707963267949)*(x13669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13670=IKcos(j4);
IkReal x13671=IKsin(j4);
IkReal x13672=(cj1*cj2);
IkReal x13673=(sj1*sj2);
IkReal x13674=(gconst47*x13670);
IkReal x13675=(gconst48*x13671);
IkReal x13676=((1.0)*gconst48*x13670);
IkReal x13677=((1.0)*gconst47*x13671);
evalcond[0]=(((r22*x13671))+(((-1.0)*r20*x13676))+((r21*x13674)));
evalcond[1]=(cj0+((r02*x13671))+((r01*x13674))+(((-1.0)*r00*x13676)));
evalcond[2]=(sj0+((r12*x13671))+((r11*x13674))+(((-1.0)*r10*x13676)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x13670))+(((-1.0)*r21*x13677))+((r20*x13675)));
evalcond[4]=(((r02*x13670))+(((-1.0)*sj0*x13673))+((r00*x13675))+(((-1.0)*r01*x13677))+((sj0*x13672)));
evalcond[5]=(((r12*x13670))+(((-1.0)*r11*x13677))+((cj0*x13673))+((r10*x13675))+(((-1.0)*cj0*x13672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13678=((1.0)*gconst48);
CheckValue<IkReal> x13679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13678))+(((-1.0)*gconst47*r10)))),-1);
if(!x13679.valid){
continue;
}
CheckValue<IkReal> x13680 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x13678))+((cj0*gconst47*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13679.value)))+(x13680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13681=IKcos(j4);
IkReal x13682=IKsin(j4);
IkReal x13683=(cj1*cj2);
IkReal x13684=(sj1*sj2);
IkReal x13685=(gconst47*x13681);
IkReal x13686=(gconst48*x13682);
IkReal x13687=((1.0)*gconst48*x13681);
IkReal x13688=((1.0)*gconst47*x13682);
evalcond[0]=(((r22*x13682))+(((-1.0)*r20*x13687))+((r21*x13685)));
evalcond[1]=(cj0+((r02*x13682))+(((-1.0)*r00*x13687))+((r01*x13685)));
evalcond[2]=(sj0+(((-1.0)*r10*x13687))+((r12*x13682))+((r11*x13685)));
evalcond[3]=(((cj2*sj1))+((r22*x13681))+((cj1*sj2))+(((-1.0)*r21*x13688))+((r20*x13686)));
evalcond[4]=((((-1.0)*sj0*x13684))+((r02*x13681))+(((-1.0)*r01*x13688))+((r00*x13686))+((sj0*x13683)));
evalcond[5]=((((-1.0)*cj0*x13683))+((r12*x13681))+(((-1.0)*r11*x13688))+((r10*x13686))+((cj0*x13684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13691 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13691.valid){
continue;
}
IkReal x13689=((-1.0)*(x13691.value));
IkReal x13690=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13689;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst46=x13689;
IkReal gconst47=((-1.0)*r01*x13690);
IkReal gconst48=(r00*x13690);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13694 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13694.valid){
continue;
}
IkReal x13692=((-1.0)*(x13694.value));
IkReal x13693=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13692;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst46=x13692;
IkReal gconst47=((-1.0)*r01*x13693);
IkReal gconst48=(r00*x13693);
CheckValue<IkReal> x13702=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13702.valid){
continue;
}
IkReal x13695=x13702.value;
IkReal x13696=(cj3*x13695);
IkReal x13697=(r21*x13696);
IkReal x13698=(r10*x13696);
IkReal x13699=(r11*x13696);
IkReal x13700=(r20*x13696);
IkReal x13701=(r00*r01*x13696);
j4eval[0]=IKsign((((cj3*r12*r22))+((r00*r01*r20*x13699))+((r20*x13698*(r00*r00)))+((r00*r01*r10*x13697))+((r11*x13697*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13703=gconst47*gconst47;
IkReal x13704=gconst48*gconst48;
IkReal x13705=(cj3*r21);
IkReal x13706=((1.0)*sj3);
IkReal x13707=(gconst47*gconst48);
IkReal x13708=((1.0)*cj3*r20);
IkReal x13709=((1.0)*cj3*r22);
CheckValue<IkReal> x13710=IKPowWithIntegerCheck(IKsign((((r11*r20*sj3*x13707))+(((-1.0)*r11*r21*x13703*x13706))+((r10*r21*sj3*x13707))+(((-1.0)*r10*r20*x13704*x13706))+(((-1.0)*r12*r22*x13706)))),-1);
if(!x13710.valid){
continue;
}
CheckValue<IkReal> x13711 = IKatan2WithCheck(IkReal((((r11*x13705*x13707))+((r10*x13703*x13705))+(((-1.0)*r10*x13707*x13708))+(((-1.0)*r11*x13704*x13708)))),IkReal(((((-1.0)*gconst47*r10*x13709))+(((-1.0)*gconst48*r11*x13709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13710.value)))+(x13711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13712=IKcos(j4);
IkReal x13713=IKsin(j4);
IkReal x13714=(sj1*sj2);
IkReal x13715=(cj3*gconst47);
IkReal x13716=(r10*sj3);
IkReal x13717=(r00*sj3);
IkReal x13718=((1.0)*cj2);
IkReal x13719=(gconst48*sj3);
IkReal x13720=(gconst47*r21);
IkReal x13721=(cj1*sj2);
IkReal x13722=((1.0)*sj3);
IkReal x13723=(cj3*gconst48);
IkReal x13724=(cj1*x13718);
IkReal x13725=(gconst48*x13713);
IkReal x13726=(sj3*x13713);
IkReal x13727=(cj3*x13712);
IkReal x13728=(gconst47*x13712);
IkReal x13729=((1.0)*x13713);
IkReal x13730=((1.0)*gconst48*x13712);
evalcond[0]=((((-1.0)*r20*x13730))+((r22*x13713))+((x13712*x13720)));
evalcond[1]=(((r01*x13728))+(((-1.0)*r00*x13730))+((r02*x13713)));
evalcond[2]=((-1.0)+((r12*x13713))+(((-1.0)*r10*x13730))+((r11*x13728)));
evalcond[3]=((((-1.0)*r11*x13715*x13729))+((r12*x13727))+((r10*x13713*x13723))+((gconst47*x13716))+((r11*x13719)));
evalcond[4]=((((-1.0)*x13716*x13725))+(((-1.0)*r12*x13712*x13722))+((r11*x13723))+((r10*x13715))+((gconst47*r11*x13726)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x13719*x13729))+x13721+((r20*x13715))+((r21*x13723))+((x13720*x13726))+(((-1.0)*r22*x13712*x13722)));
evalcond[6]=(((r21*x13719))+((r20*x13713*x13723))+((gconst47*r20*sj3))+x13714+(((-1.0)*r21*x13715*x13729))+((r22*x13727))+(((-1.0)*x13724)));
evalcond[7]=((((-1.0)*sj1*x13718))+((r00*x13713*x13723))+((r01*x13719))+(((-1.0)*x13721))+((r02*x13727))+(((-1.0)*r01*x13715*x13729))+((gconst47*x13717)));
evalcond[8]=(((gconst47*r01*x13726))+x13714+((r01*x13723))+(((-1.0)*x13717*x13725))+((r00*x13715))+(((-1.0)*r02*x13712*x13722))+(((-1.0)*x13724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13731=gconst48*gconst48;
IkReal x13732=gconst47*gconst47;
IkReal x13733=((1.0)*sj3);
IkReal x13734=(gconst47*r10);
IkReal x13735=(gconst48*r21);
IkReal x13736=((1.0)*cj3);
IkReal x13737=(gconst48*r20);
IkReal x13738=(gconst47*r11);
IkReal x13739=(r20*x13731);
IkReal x13740=(r21*x13732);
CheckValue<IkReal> x13741 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x13733*x13739))+((r10*sj3*x13740))+(((-1.0)*x13733*x13734*x13737))+((sj3*x13735*x13738)))),IkReal(((((-1.0)*r22*x13733*x13734))+(((-1.0)*gconst48*r11*r22*x13733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13741.valid){
continue;
}
CheckValue<IkReal> x13742=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x13734*x13735*x13736))+((cj3*r11*x13740))+((cj3*r10*x13739))+(((-1.0)*x13736*x13737*x13738)))),-1);
if(!x13742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13741.value)+(((1.5707963267949)*(x13742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13743=IKcos(j4);
IkReal x13744=IKsin(j4);
IkReal x13745=(sj1*sj2);
IkReal x13746=(cj3*gconst47);
IkReal x13747=(r10*sj3);
IkReal x13748=(r00*sj3);
IkReal x13749=((1.0)*cj2);
IkReal x13750=(gconst48*sj3);
IkReal x13751=(gconst47*r21);
IkReal x13752=(cj1*sj2);
IkReal x13753=((1.0)*sj3);
IkReal x13754=(cj3*gconst48);
IkReal x13755=(cj1*x13749);
IkReal x13756=(gconst48*x13744);
IkReal x13757=(sj3*x13744);
IkReal x13758=(cj3*x13743);
IkReal x13759=(gconst47*x13743);
IkReal x13760=((1.0)*x13744);
IkReal x13761=((1.0)*gconst48*x13743);
evalcond[0]=((((-1.0)*r20*x13761))+((r22*x13744))+((x13743*x13751)));
evalcond[1]=((((-1.0)*r00*x13761))+((r02*x13744))+((r01*x13759)));
evalcond[2]=((-1.0)+((r11*x13759))+(((-1.0)*r10*x13761))+((r12*x13744)));
evalcond[3]=(((r11*x13750))+(((-1.0)*r11*x13746*x13760))+((r12*x13758))+((gconst47*x13747))+((r10*x13744*x13754)));
evalcond[4]=(((r11*x13754))+((gconst47*r11*x13757))+(((-1.0)*x13747*x13756))+((r10*x13746))+(((-1.0)*r12*x13743*x13753)));
evalcond[5]=(((r21*x13754))+((r20*x13746))+((cj2*sj1))+x13752+(((-1.0)*r22*x13743*x13753))+((x13751*x13757))+(((-1.0)*r20*x13750*x13760)));
evalcond[6]=(((r21*x13750))+((r22*x13758))+((gconst47*r20*sj3))+x13745+((r20*x13744*x13754))+(((-1.0)*x13755))+(((-1.0)*r21*x13746*x13760)));
evalcond[7]=(((r00*x13744*x13754))+(((-1.0)*x13752))+((r02*x13758))+((gconst47*x13748))+(((-1.0)*sj1*x13749))+(((-1.0)*r01*x13746*x13760))+((r01*x13750)));
evalcond[8]=(x13745+(((-1.0)*x13748*x13756))+((gconst47*r01*x13757))+(((-1.0)*x13755))+(((-1.0)*r02*x13743*x13753))+((r01*x13754))+((r00*x13746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13762 = IKatan2WithCheck(IkReal((((gconst47*r01))+(((-1.0)*gconst48*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13762.valid){
continue;
}
CheckValue<IkReal> x13763=IKPowWithIntegerCheck(IKsign((((gconst48*r21))+((gconst47*r20)))),-1);
if(!x13763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13762.value)+(((1.5707963267949)*(x13763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13764=IKcos(j4);
IkReal x13765=IKsin(j4);
IkReal x13766=(sj1*sj2);
IkReal x13767=(cj3*gconst47);
IkReal x13768=(r10*sj3);
IkReal x13769=(r00*sj3);
IkReal x13770=((1.0)*cj2);
IkReal x13771=(gconst48*sj3);
IkReal x13772=(gconst47*r21);
IkReal x13773=(cj1*sj2);
IkReal x13774=((1.0)*sj3);
IkReal x13775=(cj3*gconst48);
IkReal x13776=(cj1*x13770);
IkReal x13777=(gconst48*x13765);
IkReal x13778=(sj3*x13765);
IkReal x13779=(cj3*x13764);
IkReal x13780=(gconst47*x13764);
IkReal x13781=((1.0)*x13765);
IkReal x13782=((1.0)*gconst48*x13764);
evalcond[0]=((((-1.0)*r20*x13782))+((x13764*x13772))+((r22*x13765)));
evalcond[1]=(((r01*x13780))+(((-1.0)*r00*x13782))+((r02*x13765)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13782))+((r11*x13780))+((r12*x13765)));
evalcond[3]=(((r11*x13771))+(((-1.0)*r11*x13767*x13781))+((r10*x13765*x13775))+((r12*x13779))+((gconst47*x13768)));
evalcond[4]=(((r11*x13775))+((r10*x13767))+(((-1.0)*x13768*x13777))+((gconst47*r11*x13778))+(((-1.0)*r12*x13764*x13774)));
evalcond[5]=(((cj2*sj1))+((x13772*x13778))+x13773+((r20*x13767))+(((-1.0)*r22*x13764*x13774))+(((-1.0)*r20*x13771*x13781))+((r21*x13775)));
evalcond[6]=((((-1.0)*x13776))+((gconst47*r20*sj3))+x13766+((r20*x13765*x13775))+(((-1.0)*r21*x13767*x13781))+((r22*x13779))+((r21*x13771)));
evalcond[7]=((((-1.0)*x13773))+(((-1.0)*r01*x13767*x13781))+(((-1.0)*sj1*x13770))+((r01*x13771))+((r00*x13765*x13775))+((gconst47*x13769))+((r02*x13779)));
evalcond[8]=((((-1.0)*x13776))+x13766+(((-1.0)*x13769*x13777))+((r00*x13767))+((r01*x13775))+((gconst47*r01*x13778))+(((-1.0)*r02*x13764*x13774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13783=((-1.0)*py);
CheckValue<IkReal> x13785 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13785.valid){
continue;
}
IkReal x13784=((-1.0)*(x13785.value));
sj5=gconst47;
cj5=gconst48;
j5=x13784;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13783);
rxp0_2=(py*r00);
rxp1_0=(r21*x13783);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst46=x13784;
IkReal gconst47=((-1.0)*r01);
IkReal gconst48=r00;
j4eval[0]=r12;
j4eval[1]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13786=((-1.0)*py);
CheckValue<IkReal> x13788 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13788.valid){
continue;
}
IkReal x13787=((-1.0)*(x13788.value));
sj5=gconst47;
cj5=gconst48;
j5=x13787;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13786);
rxp0_2=(py*r00);
rxp1_0=(r21*x13786);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst46=x13787;
IkReal gconst47=((-1.0)*r01);
IkReal gconst48=r00;
IkReal x13789=((1.0)*sj3);
j4eval[0]=((((-1.0)*r01*r21*x13789))+(((-1.0)*r00*r20*x13789)));
j4eval[1]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13790=((-1.0)*py);
CheckValue<IkReal> x13792 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13792.valid){
continue;
}
IkReal x13791=((-1.0)*(x13792.value));
sj5=gconst47;
cj5=gconst48;
j5=x13791;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13790);
rxp0_2=(py*r00);
rxp1_0=(r21*x13790);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst46=x13791;
IkReal gconst47=((-1.0)*r01);
IkReal gconst48=r00;
j4eval[0]=r12;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13794=IKPowWithIntegerCheck(r12,-1);
if(!x13794.valid){
continue;
}
IkReal x13793=x13794.value;
CheckValue<IkReal> x13795=IKPowWithIntegerCheck(cj3,-1);
if(!x13795.valid){
continue;
}
if( IKabs(((-1.0)*sj0*x13793)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13793*(x13795.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*x13793))+IKsqr((x13793*(x13795.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*x13793), (x13793*(x13795.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13796=IKcos(j4);
IkReal x13797=IKsin(j4);
IkReal x13798=(cj2*sj0);
IkReal x13799=(sj1*sj2);
IkReal x13800=(gconst47*sj3);
IkReal x13801=((1.0)*sj3);
IkReal x13802=(cj3*r20);
IkReal x13803=(cj2*sj1);
IkReal x13804=((1.0)*cj0);
IkReal x13805=(gconst48*r21);
IkReal x13806=(gconst48*r01);
IkReal x13807=(cj3*gconst47);
IkReal x13808=(cj1*sj2);
IkReal x13809=((1.0)*cj1*cj2);
IkReal x13810=(r21*x13797);
IkReal x13811=(gconst47*x13796);
IkReal x13812=(gconst48*x13797);
IkReal x13813=(r12*x13796);
IkReal x13814=(r01*x13797);
IkReal x13815=((1.0)*gconst48*x13796);
IkReal x13816=(r00*x13812);
evalcond[0]=(sj0+((r12*x13797)));
evalcond[1]=((((-1.0)*r20*x13815))+((r21*x13811)));
evalcond[2]=(cj0+((r01*x13811))+(((-1.0)*r00*x13815)));
evalcond[3]=(((cj0*x13799))+(((-1.0)*cj1*cj2*x13804))+(((-1.0)*x13801*x13813)));
evalcond[4]=(((cj3*x13813))+(((-1.0)*x13804*x13808))+(((-1.0)*x13803*x13804)));
evalcond[5]=(((gconst47*x13802))+x13808+x13803+((cj3*x13805))+((x13800*x13810))+(((-1.0)*r20*x13801*x13812)));
evalcond[6]=((((-1.0)*x13809))+x13799+(((-1.0)*x13807*x13810))+((x13802*x13812))+((sj3*x13805))+((r20*x13800)));
evalcond[7]=(((r00*x13800))+(((-1.0)*x13807*x13814))+((cj3*x13816))+((sj1*x13798))+((sj3*x13806))+((sj0*x13808)));
evalcond[8]=(((r00*x13807))+((cj1*x13798))+((cj3*x13806))+(((-1.0)*sj0*x13799))+((x13800*x13814))+(((-1.0)*x13801*x13816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13817=((1.0)*gconst48);
CheckValue<IkReal> x13818=IKPowWithIntegerCheck((((gconst47*r21*sj3))+(((-1.0)*r20*sj3*x13817))),-1);
if(!x13818.valid){
continue;
}
CheckValue<IkReal> x13819=IKPowWithIntegerCheck((((gconst47*r01))+(((-1.0)*r00*x13817))),-1);
if(!x13819.valid){
continue;
}
if( IKabs(((x13818.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*gconst47*r20))+(((-1.0)*cj3*r21*x13817)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x13819.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13818.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*gconst47*r20))+(((-1.0)*cj3*r21*x13817))))))+IKsqr(((-1.0)*cj0*(x13819.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13818.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*gconst47*r20))+(((-1.0)*cj3*r21*x13817))))), ((-1.0)*cj0*(x13819.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13820=IKcos(j4);
IkReal x13821=IKsin(j4);
IkReal x13822=(cj2*sj0);
IkReal x13823=(sj1*sj2);
IkReal x13824=(gconst47*sj3);
IkReal x13825=((1.0)*sj3);
IkReal x13826=(cj3*r20);
IkReal x13827=(cj2*sj1);
IkReal x13828=((1.0)*cj0);
IkReal x13829=(gconst48*r21);
IkReal x13830=(gconst48*r01);
IkReal x13831=(cj3*gconst47);
IkReal x13832=(cj1*sj2);
IkReal x13833=((1.0)*cj1*cj2);
IkReal x13834=(r21*x13821);
IkReal x13835=(gconst47*x13820);
IkReal x13836=(gconst48*x13821);
IkReal x13837=(r12*x13820);
IkReal x13838=(r01*x13821);
IkReal x13839=((1.0)*gconst48*x13820);
IkReal x13840=(r00*x13836);
evalcond[0]=(sj0+((r12*x13821)));
evalcond[1]=(((r21*x13835))+(((-1.0)*r20*x13839)));
evalcond[2]=(((r01*x13835))+cj0+(((-1.0)*r00*x13839)));
evalcond[3]=(((cj0*x13823))+(((-1.0)*cj1*cj2*x13828))+(((-1.0)*x13825*x13837)));
evalcond[4]=((((-1.0)*x13827*x13828))+(((-1.0)*x13828*x13832))+((cj3*x13837)));
evalcond[5]=(((gconst47*x13826))+x13832+x13827+((cj3*x13829))+((x13824*x13834))+(((-1.0)*r20*x13825*x13836)));
evalcond[6]=((((-1.0)*x13833))+x13823+((x13826*x13836))+((sj3*x13829))+((r20*x13824))+(((-1.0)*x13831*x13834)));
evalcond[7]=(((sj0*x13832))+((sj1*x13822))+((r00*x13824))+((sj3*x13830))+(((-1.0)*x13831*x13838))+((cj3*x13840)));
evalcond[8]=(((cj1*x13822))+(((-1.0)*sj0*x13823))+(((-1.0)*x13825*x13840))+((x13824*x13838))+((r00*x13831))+((cj3*x13830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13841=IKPowWithIntegerCheck(r12,-1);
if(!x13841.valid){
continue;
}
CheckValue<IkReal> x13842=IKPowWithIntegerCheck((((gconst47*r01))+(((-1.0)*gconst48*r00))),-1);
if(!x13842.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x13841.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x13842.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x13841.value)))+IKsqr(((-1.0)*cj0*(x13842.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x13841.value)), ((-1.0)*cj0*(x13842.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13843=IKcos(j4);
IkReal x13844=IKsin(j4);
IkReal x13845=(cj2*sj0);
IkReal x13846=(sj1*sj2);
IkReal x13847=(gconst47*sj3);
IkReal x13848=((1.0)*sj3);
IkReal x13849=(cj3*r20);
IkReal x13850=(cj2*sj1);
IkReal x13851=((1.0)*cj0);
IkReal x13852=(gconst48*r21);
IkReal x13853=(gconst48*r01);
IkReal x13854=(cj3*gconst47);
IkReal x13855=(cj1*sj2);
IkReal x13856=((1.0)*cj1*cj2);
IkReal x13857=(r21*x13844);
IkReal x13858=(gconst47*x13843);
IkReal x13859=(gconst48*x13844);
IkReal x13860=(r12*x13843);
IkReal x13861=(r01*x13844);
IkReal x13862=((1.0)*gconst48*x13843);
IkReal x13863=(r00*x13859);
evalcond[0]=(sj0+((r12*x13844)));
evalcond[1]=(((r21*x13858))+(((-1.0)*r20*x13862)));
evalcond[2]=((((-1.0)*r00*x13862))+((r01*x13858))+cj0);
evalcond[3]=(((cj0*x13846))+(((-1.0)*x13848*x13860))+(((-1.0)*cj1*cj2*x13851)));
evalcond[4]=((((-1.0)*x13851*x13855))+(((-1.0)*x13850*x13851))+((cj3*x13860)));
evalcond[5]=((((-1.0)*r20*x13848*x13859))+x13850+x13855+((gconst47*x13849))+((x13847*x13857))+((cj3*x13852)));
evalcond[6]=(((x13849*x13859))+x13846+(((-1.0)*x13854*x13857))+((sj3*x13852))+((r20*x13847))+(((-1.0)*x13856)));
evalcond[7]=(((sj1*x13845))+((sj0*x13855))+((sj3*x13853))+(((-1.0)*x13854*x13861))+((cj3*x13863))+((r00*x13847)));
evalcond[8]=(((r00*x13854))+(((-1.0)*sj0*x13846))+(((-1.0)*x13848*x13863))+((cj1*x13845))+((cj3*x13853))+((x13847*x13861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13866 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13866.valid){
continue;
}
IkReal x13864=((-1.0)*(x13866.value));
IkReal x13865=x13529;
sj5=gconst47;
cj5=gconst48;
j5=x13864;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst46=x13864;
IkReal gconst47=((-1.0)*r01*x13865);
IkReal gconst48=(r00*x13865);
IkReal x13867=r02*r02;
IkReal x13868=((1.0)*sj0);
IkReal x13869=(cj0*r12);
CheckValue<IkReal> x13873=IKPowWithIntegerCheck(((-1.0)+x13867),-1);
if(!x13873.valid){
continue;
}
IkReal x13870=x13873.value;
if((((1.0)+(((-1.0)*x13867)))) < -0.00001)
continue;
IkReal x13871=IKsqrt(((1.0)+(((-1.0)*x13867))));
IkReal x13872=(x13870*x13871);
j4eval[0]=((IKabs((((sj0*x13872))+(((-1.0)*x13867*x13868*x13872))+((r02*x13869*x13872)))))+(IKabs((x13869+(((-1.0)*r02*x13868))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13874=(r01*sj3);
IkReal x13875=((1.0)*gconst48);
IkReal x13876=(cj3*r21);
IkReal x13877=(gconst47*r20);
IkReal x13878=(cj2*sj1);
IkReal x13879=(cj1*sj2);
IkReal x13880=(r20*sj3);
IkReal x13881=(gconst47*r21*sj3);
CheckValue<IkReal> x13882=IKPowWithIntegerCheck((x13881+(((-1.0)*x13875*x13880))),-1);
if(!x13882.valid){
continue;
}
CheckValue<IkReal> x13883=IKPowWithIntegerCheck((((r21*x13874*(gconst47*gconst47)))+(((-1.0)*r00*x13875*x13881))+(((-1.0)*x13874*x13875*x13877))+((r00*x13880*(gconst48*gconst48)))),-1);
if(!x13883.valid){
continue;
}
if( IKabs(((x13882.value)*(((((-1.0)*x13878))+(((-1.0)*x13879))+(((-1.0)*x13875*x13876))+(((-1.0)*cj3*x13877)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13883.value)*(((((-1.0)*cj0*x13881))+((gconst48*r02*x13876))+((r02*x13878))+((r02*x13879))+((cj0*gconst48*x13880))+((cj3*r02*x13877)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13882.value)*(((((-1.0)*x13878))+(((-1.0)*x13879))+(((-1.0)*x13875*x13876))+(((-1.0)*cj3*x13877))))))+IKsqr(((x13883.value)*(((((-1.0)*cj0*x13881))+((gconst48*r02*x13876))+((r02*x13878))+((r02*x13879))+((cj0*gconst48*x13880))+((cj3*r02*x13877))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13882.value)*(((((-1.0)*x13878))+(((-1.0)*x13879))+(((-1.0)*x13875*x13876))+(((-1.0)*cj3*x13877))))), ((x13883.value)*(((((-1.0)*cj0*x13881))+((gconst48*r02*x13876))+((r02*x13878))+((r02*x13879))+((cj0*gconst48*x13880))+((cj3*r02*x13877))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13884=IKcos(j4);
IkReal x13885=IKsin(j4);
IkReal x13886=(cj3*gconst47);
IkReal x13887=(r10*sj3);
IkReal x13888=(cj2*sj0);
IkReal x13889=(sj1*sj2);
IkReal x13890=(r00*sj3);
IkReal x13891=((1.0)*sj3);
IkReal x13892=(gconst48*sj3);
IkReal x13893=(gconst47*r21);
IkReal x13894=(cj2*sj1);
IkReal x13895=((1.0)*cj0);
IkReal x13896=(cj3*gconst48);
IkReal x13897=(cj1*sj2);
IkReal x13898=((1.0)*cj1*cj2);
IkReal x13899=(gconst48*x13885);
IkReal x13900=(r02*x13884);
IkReal x13901=(sj3*x13885);
IkReal x13902=(gconst47*x13884);
IkReal x13903=(r12*x13884);
IkReal x13904=((1.0)*x13885);
IkReal x13905=((1.0)*gconst48*x13884);
evalcond[0]=(((x13884*x13893))+(((-1.0)*r20*x13905)));
evalcond[1]=(cj0+((r02*x13885))+(((-1.0)*r00*x13905))+((r01*x13902)));
evalcond[2]=(sj0+((r12*x13885))+((r11*x13902))+(((-1.0)*r10*x13905)));
evalcond[3]=(x13894+x13897+((r20*x13886))+((x13893*x13901))+((r21*x13896))+(((-1.0)*r20*x13891*x13899)));
evalcond[4]=((((-1.0)*r21*x13886*x13904))+((gconst47*r20*sj3))+x13889+((r21*x13892))+(((-1.0)*x13898))+((r20*x13885*x13896)));
evalcond[5]=(((r00*x13885*x13896))+(((-1.0)*r01*x13886*x13904))+((sj0*x13897))+((sj1*x13888))+((gconst47*x13890))+((r01*x13892))+((cj3*x13900)));
evalcond[6]=((((-1.0)*x13890*x13899))+(((-1.0)*sj0*x13889))+((gconst47*r01*x13901))+((cj1*x13888))+((r00*x13886))+((r01*x13896))+(((-1.0)*x13891*x13900)));
evalcond[7]=((((-1.0)*x13887*x13899))+((gconst47*r11*x13901))+((r10*x13886))+((r11*x13896))+((cj0*x13889))+(((-1.0)*cj1*cj2*x13895))+(((-1.0)*x13891*x13903)));
evalcond[8]=((((-1.0)*r11*x13886*x13904))+((gconst47*x13887))+((r10*x13885*x13896))+((cj3*x13903))+((r11*x13892))+(((-1.0)*x13895*x13897))+(((-1.0)*x13894*x13895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13906=((1.0)*sj0);
IkReal x13907=((1.0)*gconst47);
CheckValue<IkReal> x13908 = IKatan2WithCheck(IkReal(((((-1.0)*gconst48*r00*x13906))+(((-1.0)*cj0*r11*x13907))+((gconst47*r01*sj0))+((cj0*gconst48*r10)))),IkReal(((((-1.0)*r02*x13906))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13908.valid){
continue;
}
CheckValue<IkReal> x13909=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst48*r21))+(((-1.0)*r20*x13907)))),-1);
if(!x13909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13908.value)+(((1.5707963267949)*(x13909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13910=IKcos(j4);
IkReal x13911=IKsin(j4);
IkReal x13912=(cj3*gconst47);
IkReal x13913=(r10*sj3);
IkReal x13914=(cj2*sj0);
IkReal x13915=(sj1*sj2);
IkReal x13916=(r00*sj3);
IkReal x13917=((1.0)*sj3);
IkReal x13918=(gconst48*sj3);
IkReal x13919=(gconst47*r21);
IkReal x13920=(cj2*sj1);
IkReal x13921=((1.0)*cj0);
IkReal x13922=(cj3*gconst48);
IkReal x13923=(cj1*sj2);
IkReal x13924=((1.0)*cj1*cj2);
IkReal x13925=(gconst48*x13911);
IkReal x13926=(r02*x13910);
IkReal x13927=(sj3*x13911);
IkReal x13928=(gconst47*x13910);
IkReal x13929=(r12*x13910);
IkReal x13930=((1.0)*x13911);
IkReal x13931=((1.0)*gconst48*x13910);
evalcond[0]=((((-1.0)*r20*x13931))+((x13910*x13919)));
evalcond[1]=(cj0+((r02*x13911))+((r01*x13928))+(((-1.0)*r00*x13931)));
evalcond[2]=(sj0+((r12*x13911))+(((-1.0)*r10*x13931))+((r11*x13928)));
evalcond[3]=(((r21*x13922))+x13920+x13923+(((-1.0)*r20*x13917*x13925))+((r20*x13912))+((x13919*x13927)));
evalcond[4]=(((gconst47*r20*sj3))+x13915+(((-1.0)*r21*x13912*x13930))+(((-1.0)*x13924))+((r21*x13918))+((r20*x13911*x13922)));
evalcond[5]=(((sj0*x13923))+((gconst47*x13916))+((r00*x13911*x13922))+((r01*x13918))+((sj1*x13914))+(((-1.0)*r01*x13912*x13930))+((cj3*x13926)));
evalcond[6]=(((gconst47*r01*x13927))+(((-1.0)*x13916*x13925))+(((-1.0)*x13917*x13926))+(((-1.0)*sj0*x13915))+((r01*x13922))+((r00*x13912))+((cj1*x13914)));
evalcond[7]=(((r10*x13912))+(((-1.0)*x13913*x13925))+(((-1.0)*x13917*x13929))+((cj0*x13915))+((gconst47*r11*x13927))+(((-1.0)*cj1*cj2*x13921))+((r11*x13922)));
evalcond[8]=((((-1.0)*r11*x13912*x13930))+((r10*x13911*x13922))+((gconst47*x13913))+(((-1.0)*x13921*x13923))+((r11*x13918))+(((-1.0)*x13920*x13921))+((cj3*x13929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13932=r21*r21;
IkReal x13933=gconst47*gconst47;
IkReal x13934=r20*r20;
IkReal x13935=gconst48*gconst48;
IkReal x13936=(gconst47*r20);
IkReal x13937=(gconst48*r21);
IkReal x13938=((1.0)*r22);
IkReal x13939=(gconst47*r21);
IkReal x13940=(cj1*cj2);
IkReal x13941=(sj1*sj2);
IkReal x13942=(gconst48*r20);
IkReal x13943=(r20*r21*sj3);
IkReal x13944=(gconst47*gconst48*sj3);
CheckValue<IkReal> x13945=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*x13936*x13937))+((cj3*(r22*r22)))+((cj3*x13934*x13935))+((cj3*x13932*x13933)))),-1);
if(!x13945.valid){
continue;
}
CheckValue<IkReal> x13946 = IKatan2WithCheck(IkReal(((((-1.0)*x13941*x13942))+(((-1.0)*x13939*x13940))+(((-1.0)*x13934*x13944))+((x13939*x13941))+((x13932*x13944))+((x13940*x13942))+((x13933*x13943))+(((-1.0)*x13935*x13943)))),IkReal(((((-1.0)*sj3*x13936*x13938))+(((-1.0)*sj3*x13937*x13938))+(((-1.0)*x13938*x13941))+((r22*x13940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13945.value)))+(x13946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13947=IKcos(j4);
IkReal x13948=IKsin(j4);
IkReal x13949=(cj3*gconst47);
IkReal x13950=(r10*sj3);
IkReal x13951=(cj2*sj0);
IkReal x13952=(sj1*sj2);
IkReal x13953=(r00*sj3);
IkReal x13954=((1.0)*sj3);
IkReal x13955=(gconst48*sj3);
IkReal x13956=(gconst47*r21);
IkReal x13957=(cj2*sj1);
IkReal x13958=((1.0)*cj0);
IkReal x13959=(cj3*gconst48);
IkReal x13960=(cj1*sj2);
IkReal x13961=((1.0)*cj1*cj2);
IkReal x13962=(gconst48*x13948);
IkReal x13963=(r02*x13947);
IkReal x13964=(sj3*x13948);
IkReal x13965=(cj3*x13947);
IkReal x13966=(gconst47*x13947);
IkReal x13967=((1.0)*x13948);
IkReal x13968=((1.0)*gconst48*x13947);
evalcond[0]=((((-1.0)*r20*x13968))+((x13947*x13956))+((r22*x13948)));
evalcond[1]=(cj0+(((-1.0)*r00*x13968))+((r01*x13966))+((r02*x13948)));
evalcond[2]=((((-1.0)*r10*x13968))+sj0+((r11*x13966))+((r12*x13948)));
evalcond[3]=((((-1.0)*r22*x13947*x13954))+(((-1.0)*r20*x13954*x13962))+x13957+x13960+((r20*x13949))+((r21*x13959))+((x13956*x13964)));
evalcond[4]=(((gconst47*r20*sj3))+(((-1.0)*r21*x13949*x13967))+x13952+((r21*x13955))+(((-1.0)*x13961))+((r20*x13948*x13959))+((r22*x13965)));
evalcond[5]=(((r01*x13955))+(((-1.0)*r01*x13949*x13967))+((sj1*x13951))+((cj3*x13963))+((gconst47*x13953))+((r00*x13948*x13959))+((sj0*x13960)));
evalcond[6]=(((gconst47*r01*x13964))+((r01*x13959))+(((-1.0)*x13953*x13962))+((cj1*x13951))+(((-1.0)*x13954*x13963))+((r00*x13949))+(((-1.0)*sj0*x13952)));
evalcond[7]=(((r11*x13959))+((gconst47*r11*x13964))+(((-1.0)*cj1*cj2*x13958))+(((-1.0)*x13950*x13962))+(((-1.0)*r12*x13947*x13954))+((r10*x13949))+((cj0*x13952)));
evalcond[8]=((((-1.0)*x13957*x13958))+((r11*x13955))+((r12*x13965))+((r10*x13948*x13959))+((gconst47*x13950))+(((-1.0)*r11*x13949*x13967))+(((-1.0)*x13958*x13960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13969=((1.0)*sj0);
IkReal x13970=((1.0)*gconst47);
CheckValue<IkReal> x13971 = IKatan2WithCheck(IkReal(((((-1.0)*gconst48*r00*x13969))+(((-1.0)*cj0*r11*x13970))+((gconst47*r01*sj0))+((cj0*gconst48*r10)))),IkReal(((((-1.0)*r02*x13969))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13971.valid){
continue;
}
CheckValue<IkReal> x13972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13970))+(((-1.0)*gconst48*r21)))),-1);
if(!x13972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13971.value)+(((1.5707963267949)*(x13972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13973=IKcos(j4);
IkReal x13974=IKsin(j4);
IkReal x13975=(cj3*gconst47);
IkReal x13976=(r10*sj3);
IkReal x13977=(cj2*sj0);
IkReal x13978=(sj1*sj2);
IkReal x13979=(r00*sj3);
IkReal x13980=((1.0)*sj3);
IkReal x13981=(gconst48*sj3);
IkReal x13982=(gconst47*r21);
IkReal x13983=(cj2*sj1);
IkReal x13984=((1.0)*cj0);
IkReal x13985=(cj3*gconst48);
IkReal x13986=(cj1*sj2);
IkReal x13987=((1.0)*cj1*cj2);
IkReal x13988=(gconst48*x13974);
IkReal x13989=(r02*x13973);
IkReal x13990=(sj3*x13974);
IkReal x13991=(cj3*x13973);
IkReal x13992=(gconst47*x13973);
IkReal x13993=((1.0)*x13974);
IkReal x13994=((1.0)*gconst48*x13973);
evalcond[0]=((((-1.0)*r20*x13994))+((x13973*x13982))+((r22*x13974)));
evalcond[1]=(((r02*x13974))+cj0+(((-1.0)*r00*x13994))+((r01*x13992)));
evalcond[2]=(sj0+((r11*x13992))+(((-1.0)*r10*x13994))+((r12*x13974)));
evalcond[3]=((((-1.0)*r20*x13980*x13988))+x13986+x13983+((r21*x13985))+((r20*x13975))+(((-1.0)*r22*x13973*x13980))+((x13982*x13990)));
evalcond[4]=((((-1.0)*r21*x13975*x13993))+((gconst47*r20*sj3))+((r20*x13974*x13985))+((r22*x13991))+x13978+((r21*x13981))+(((-1.0)*x13987)));
evalcond[5]=(((r01*x13981))+((cj3*x13989))+((sj0*x13986))+((gconst47*x13979))+(((-1.0)*r01*x13975*x13993))+((r00*x13974*x13985))+((sj1*x13977)));
evalcond[6]=(((r01*x13985))+(((-1.0)*sj0*x13978))+(((-1.0)*x13979*x13988))+((gconst47*r01*x13990))+((r00*x13975))+(((-1.0)*x13980*x13989))+((cj1*x13977)));
evalcond[7]=(((r11*x13985))+((gconst47*r11*x13990))+((r10*x13975))+(((-1.0)*cj1*cj2*x13984))+(((-1.0)*x13976*x13988))+((cj0*x13978))+(((-1.0)*r12*x13973*x13980)));
evalcond[8]=(((r10*x13974*x13985))+((r11*x13981))+(((-1.0)*x13984*x13986))+((gconst47*x13976))+((r12*x13991))+(((-1.0)*r11*x13975*x13993))+(((-1.0)*x13983*x13984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13995=((1.0)*gconst48);
CheckValue<IkReal> x13996 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x13995))+((cj0*gconst47*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13996.valid){
continue;
}
CheckValue<IkReal> x13997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13995))+(((-1.0)*gconst47*r10)))),-1);
if(!x13997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13996.value)+(((1.5707963267949)*(x13997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13998=IKcos(j4);
IkReal x13999=IKsin(j4);
IkReal x14000=(cj3*gconst47);
IkReal x14001=(r10*sj3);
IkReal x14002=(cj2*sj0);
IkReal x14003=(sj1*sj2);
IkReal x14004=(r00*sj3);
IkReal x14005=((1.0)*sj3);
IkReal x14006=(gconst48*sj3);
IkReal x14007=(gconst47*r21);
IkReal x14008=(cj2*sj1);
IkReal x14009=((1.0)*cj0);
IkReal x14010=(cj3*gconst48);
IkReal x14011=(cj1*sj2);
IkReal x14012=((1.0)*cj1*cj2);
IkReal x14013=(gconst48*x13999);
IkReal x14014=(r02*x13998);
IkReal x14015=(sj3*x13999);
IkReal x14016=(cj3*x13998);
IkReal x14017=(gconst47*x13998);
IkReal x14018=((1.0)*x13999);
IkReal x14019=((1.0)*gconst48*x13998);
evalcond[0]=(((r22*x13999))+((x13998*x14007))+(((-1.0)*r20*x14019)));
evalcond[1]=(cj0+((r02*x13999))+((r01*x14017))+(((-1.0)*r00*x14019)));
evalcond[2]=(sj0+((r12*x13999))+((r11*x14017))+(((-1.0)*r10*x14019)));
evalcond[3]=((((-1.0)*r22*x13998*x14005))+((r21*x14010))+(((-1.0)*r20*x14005*x14013))+x14011+x14008+((r20*x14000))+((x14007*x14015)));
evalcond[4]=((((-1.0)*x14012))+((gconst47*r20*sj3))+((r21*x14006))+((r22*x14016))+(((-1.0)*r21*x14000*x14018))+x14003+((r20*x13999*x14010)));
evalcond[5]=(((gconst47*x14004))+((r00*x13999*x14010))+((r01*x14006))+((cj3*x14014))+(((-1.0)*r01*x14000*x14018))+((sj1*x14002))+((sj0*x14011)));
evalcond[6]=((((-1.0)*sj0*x14003))+(((-1.0)*x14005*x14014))+(((-1.0)*x14004*x14013))+((cj1*x14002))+((gconst47*r01*x14015))+((r00*x14000))+((r01*x14010)));
evalcond[7]=(((r10*x14000))+(((-1.0)*r12*x13998*x14005))+((gconst47*r11*x14015))+((r11*x14010))+(((-1.0)*cj1*cj2*x14009))+((cj0*x14003))+(((-1.0)*x14001*x14013)));
evalcond[8]=(((gconst47*x14001))+(((-1.0)*x14009*x14011))+((r11*x14006))+((r10*x13999*x14010))+((r12*x14016))+(((-1.0)*r11*x14000*x14018))+(((-1.0)*x14008*x14009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14021 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14021)==0){
continue;
}
IkReal x14020=pow(x14021,-0.5);
CheckValue<IkReal> x14022 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14022.valid){
continue;
}
IkReal gconst49=((3.14159265358979)+(((-1.0)*(x14022.value))));
IkReal gconst50=((1.0)*r01*x14020);
IkReal gconst51=((-1.0)*r00*x14020);
CheckValue<IkReal> x14023 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14023.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14023.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x14026 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14026.valid){
continue;
}
IkReal x14024=((1.0)*(x14026.value));
IkReal x14025=x14020;
sj5=gconst50;
cj5=gconst51;
j5=((3.14159265)+(((-1.0)*x14024)));
IkReal gconst49=((3.14159265358979)+(((-1.0)*x14024)));
IkReal gconst50=((1.0)*r01*x14025);
IkReal gconst51=((-1.0)*r00*x14025);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14029 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14029.valid){
continue;
}
IkReal x14027=((1.0)*(x14029.value));
IkReal x14028=x14020;
sj5=gconst50;
cj5=gconst51;
j5=((3.14159265)+(((-1.0)*x14027)));
IkReal gconst49=((3.14159265358979)+(((-1.0)*x14027)));
IkReal gconst50=((1.0)*r01*x14028);
IkReal gconst51=((-1.0)*r00*x14028);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14030=((1.0)*sj0);
IkReal x14031=((1.0)*gconst50);
CheckValue<IkReal> x14032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14031))+(((-1.0)*gconst51*r21)))),-1);
if(!x14032.valid){
continue;
}
CheckValue<IkReal> x14033 = IKatan2WithCheck(IkReal((((cj0*gconst51*r10))+(((-1.0)*gconst51*r00*x14030))+(((-1.0)*cj0*r11*x14031))+((gconst50*r01*sj0)))),IkReal(((((-1.0)*r02*x14030))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14032.value)))+(x14033.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14034=IKcos(j4);
IkReal x14035=IKsin(j4);
IkReal x14036=(gconst51*r00);
IkReal x14037=(gconst51*sj3);
IkReal x14038=(cj2*sj0);
IkReal x14039=(sj1*sj2);
IkReal x14040=(gconst51*r20);
IkReal x14041=(cj2*sj1);
IkReal x14042=(cj3*gconst51);
IkReal x14043=((1.0)*cj0);
IkReal x14044=(cj1*cj2);
IkReal x14045=(gconst50*r10);
IkReal x14046=(gconst51*r10);
IkReal x14047=((1.0)*gconst50);
IkReal x14048=(gconst50*r20);
IkReal x14049=(cj1*sj2);
IkReal x14050=(gconst50*r00);
IkReal x14051=(cj3*x14035);
IkReal x14052=((1.0)*x14034);
IkReal x14053=(gconst50*x14034);
IkReal x14054=((1.0)*x14035);
IkReal x14055=(cj3*x14034);
IkReal x14056=(gconst50*sj3*x14035);
evalcond[0]=(((r22*x14035))+(((-1.0)*x14040*x14052))+((r21*x14053)));
evalcond[1]=((((-1.0)*x14036*x14052))+cj0+((r02*x14035))+((r01*x14053)));
evalcond[2]=(sj0+((r11*x14053))+(((-1.0)*x14046*x14052))+((r12*x14035)));
evalcond[3]=((((-1.0)*r20*x14037*x14054))+((cj3*x14048))+(((-1.0)*r22*sj3*x14052))+((r21*x14042))+x14041+x14049+((r21*x14056)));
evalcond[4]=(((x14040*x14051))+(((-1.0)*x14044))+((sj3*x14048))+((r21*x14037))+(((-1.0)*r21*x14047*x14051))+((r22*x14055))+x14039);
evalcond[5]=(((r01*x14037))+((sj0*x14049))+((x14036*x14051))+(((-1.0)*r01*x14047*x14051))+((sj1*x14038))+((r02*x14055))+((sj3*x14050)));
evalcond[6]=(((r01*x14042))+(((-1.0)*sj0*x14039))+((cj3*x14050))+((cj1*x14038))+(((-1.0)*r02*sj3*x14052))+(((-1.0)*sj3*x14036*x14054))+((r01*x14056)));
evalcond[7]=(((r11*x14042))+(((-1.0)*x14043*x14044))+((r11*x14056))+(((-1.0)*r10*x14037*x14054))+((cj3*x14045))+(((-1.0)*r12*sj3*x14052))+((cj0*x14039)));
evalcond[8]=(((r11*x14037))+(((-1.0)*x14043*x14049))+((sj3*x14045))+((r12*x14055))+(((-1.0)*r11*x14047*x14051))+((r10*x14035*x14042))+(((-1.0)*x14041*x14043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14057=((1.0)*gconst51);
CheckValue<IkReal> x14058 = IKatan2WithCheck(IkReal((((cj0*gconst50*r21))+(((-1.0)*cj0*r20*x14057)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14058.valid){
continue;
}
CheckValue<IkReal> x14059=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst50*r10))+(((-1.0)*r11*x14057)))),-1);
if(!x14059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14058.value)+(((1.5707963267949)*(x14059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14060=IKcos(j4);
IkReal x14061=IKsin(j4);
IkReal x14062=(gconst51*r00);
IkReal x14063=(gconst51*sj3);
IkReal x14064=(cj2*sj0);
IkReal x14065=(sj1*sj2);
IkReal x14066=(gconst51*r20);
IkReal x14067=(cj2*sj1);
IkReal x14068=(cj3*gconst51);
IkReal x14069=((1.0)*cj0);
IkReal x14070=(cj1*cj2);
IkReal x14071=(gconst50*r10);
IkReal x14072=(gconst51*r10);
IkReal x14073=((1.0)*gconst50);
IkReal x14074=(gconst50*r20);
IkReal x14075=(cj1*sj2);
IkReal x14076=(gconst50*r00);
IkReal x14077=(cj3*x14061);
IkReal x14078=((1.0)*x14060);
IkReal x14079=(gconst50*x14060);
IkReal x14080=((1.0)*x14061);
IkReal x14081=(cj3*x14060);
IkReal x14082=(gconst50*sj3*x14061);
evalcond[0]=((((-1.0)*x14066*x14078))+((r22*x14061))+((r21*x14079)));
evalcond[1]=(((r02*x14061))+cj0+((r01*x14079))+(((-1.0)*x14062*x14078)));
evalcond[2]=((((-1.0)*x14072*x14078))+sj0+((r11*x14079))+((r12*x14061)));
evalcond[3]=((((-1.0)*r22*sj3*x14078))+(((-1.0)*r20*x14063*x14080))+((r21*x14068))+((r21*x14082))+x14075+x14067+((cj3*x14074)));
evalcond[4]=(((sj3*x14074))+((r21*x14063))+(((-1.0)*x14070))+((r22*x14081))+(((-1.0)*r21*x14073*x14077))+((x14066*x14077))+x14065);
evalcond[5]=((((-1.0)*r01*x14073*x14077))+((sj1*x14064))+((sj0*x14075))+((x14062*x14077))+((sj3*x14076))+((r02*x14081))+((r01*x14063)));
evalcond[6]=((((-1.0)*r02*sj3*x14078))+((r01*x14082))+((cj1*x14064))+(((-1.0)*sj0*x14065))+((r01*x14068))+(((-1.0)*sj3*x14062*x14080))+((cj3*x14076)));
evalcond[7]=(((cj0*x14065))+((r11*x14082))+((r11*x14068))+(((-1.0)*r12*sj3*x14078))+(((-1.0)*x14069*x14070))+(((-1.0)*r10*x14063*x14080))+((cj3*x14071)));
evalcond[8]=(((r10*x14061*x14068))+((sj3*x14071))+(((-1.0)*r11*x14073*x14077))+((r11*x14063))+((r12*x14081))+(((-1.0)*x14069*x14075))+(((-1.0)*x14067*x14069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14083 = IKatan2WithCheck(IkReal((((gconst50*r21*sj0))+(((-1.0)*gconst51*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x14083.valid){
continue;
}
CheckValue<IkReal> x14084=IKPowWithIntegerCheck(IKsign((((gconst51*r01))+((gconst50*r00)))),-1);
if(!x14084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14083.value)+(((1.5707963267949)*(x14084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14085=IKcos(j4);
IkReal x14086=IKsin(j4);
IkReal x14087=(gconst51*r00);
IkReal x14088=(gconst51*sj3);
IkReal x14089=(cj2*sj0);
IkReal x14090=(sj1*sj2);
IkReal x14091=(gconst51*r20);
IkReal x14092=(cj2*sj1);
IkReal x14093=(cj3*gconst51);
IkReal x14094=((1.0)*cj0);
IkReal x14095=(cj1*cj2);
IkReal x14096=(gconst50*r10);
IkReal x14097=(gconst51*r10);
IkReal x14098=((1.0)*gconst50);
IkReal x14099=(gconst50*r20);
IkReal x14100=(cj1*sj2);
IkReal x14101=(gconst50*r00);
IkReal x14102=(cj3*x14086);
IkReal x14103=((1.0)*x14085);
IkReal x14104=(gconst50*x14085);
IkReal x14105=((1.0)*x14086);
IkReal x14106=(cj3*x14085);
IkReal x14107=(gconst50*sj3*x14086);
evalcond[0]=((((-1.0)*x14091*x14103))+((r22*x14086))+((r21*x14104)));
evalcond[1]=(cj0+((r01*x14104))+((r02*x14086))+(((-1.0)*x14087*x14103)));
evalcond[2]=(sj0+(((-1.0)*x14097*x14103))+((r12*x14086))+((r11*x14104)));
evalcond[3]=((((-1.0)*r22*sj3*x14103))+((r21*x14093))+(((-1.0)*r20*x14088*x14105))+x14100+((cj3*x14099))+x14092+((r21*x14107)));
evalcond[4]=(((sj3*x14099))+(((-1.0)*x14095))+((r22*x14106))+((x14091*x14102))+((r21*x14088))+(((-1.0)*r21*x14098*x14102))+x14090);
evalcond[5]=(((sj3*x14101))+((r02*x14106))+((r01*x14088))+((sj0*x14100))+((sj1*x14089))+((x14087*x14102))+(((-1.0)*r01*x14098*x14102)));
evalcond[6]=(((r01*x14107))+(((-1.0)*r02*sj3*x14103))+((cj3*x14101))+(((-1.0)*sj3*x14087*x14105))+((cj1*x14089))+(((-1.0)*sj0*x14090))+((r01*x14093)));
evalcond[7]=(((cj0*x14090))+(((-1.0)*r10*x14088*x14105))+(((-1.0)*x14094*x14095))+((r11*x14093))+((cj3*x14096))+(((-1.0)*r12*sj3*x14103))+((r11*x14107)));
evalcond[8]=(((sj3*x14096))+(((-1.0)*r11*x14098*x14102))+(((-1.0)*x14092*x14094))+((r11*x14088))+((r10*x14086*x14093))+(((-1.0)*x14094*x14100))+((r12*x14106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x14108=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14108;
j4eval[1]=IKsign(x14108);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x14109=((1.0)*cj5);
IkReal x14110=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14109)));
j4eval[0]=x14110;
j4eval[1]=((IKabs(((((-1.0)*r20*x14109))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x14111=cj5*cj5;
IkReal x14112=(cj3*r00);
IkReal x14113=(cj3*r01);
IkReal x14114=((1.0)*cj5*sj5);
IkReal x14115=((((-1.0)*r20*x14113*x14114))+((r20*x14111*x14112))+(((-1.0)*r21*x14111*x14113))+((cj3*r02*r22))+(((-1.0)*r21*x14112*x14114))+((r21*x14113)));
j4eval[0]=x14115;
j4eval[1]=IKsign(x14115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14116=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14116;
j4eval[1]=IKsign(x14116);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14117=((1.0)*cj5);
IkReal x14118=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14117)));
j4eval[0]=x14118;
j4eval[1]=((IKabs(((((-1.0)*r20*x14117))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14119=cj5*cj5;
IkReal x14120=r01*r01;
IkReal x14121=(r01*sj5);
IkReal x14122=(cj5*r00);
IkReal x14123=((((-1.0)*(r02*r02)))+(((-1.0)*x14119*(r00*r00)))+(((2.0)*x14121*x14122))+(((-1.0)*x14120))+((x14119*x14120)));
j4eval[0]=x14123;
j4eval[1]=IKsign(x14123);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14122))+x14121))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14124=cj5*cj5;
IkReal x14125=r01*r01;
IkReal x14126=(r01*sj5);
IkReal x14127=(cj5*r00);
CheckValue<IkReal> x14128 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x14127))+x14126)),IKFAST_ATAN2_MAGTHRESH);
if(!x14128.valid){
continue;
}
CheckValue<IkReal> x14129=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14124*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x14126*x14127))+((x14124*x14125))+(((-1.0)*x14125)))),-1);
if(!x14129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14128.value)+(((1.5707963267949)*(x14129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14130=IKcos(j4);
IkReal x14131=IKsin(j4);
IkReal x14132=(cj5*r00);
IkReal x14133=(cj5*r10);
IkReal x14134=(cj5*r20);
IkReal x14135=((1.0)*x14130);
IkReal x14136=((1.0)*x14131);
IkReal x14137=(sj5*x14130);
IkReal x14138=(sj5*x14131);
evalcond[0]=((((-1.0)*x14134*x14135))+((r21*x14137))+((r22*x14131)));
evalcond[1]=((((-1.0)*x14133*x14135))+((r11*x14137))+((r12*x14131)));
evalcond[2]=((1.0)+((r02*x14131))+(((-1.0)*x14132*x14135))+((r01*x14137)));
evalcond[3]=((((-1.0)*r02*x14135))+(((-1.0)*x14132*x14136))+((r01*x14138)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14134*x14136))+((r21*x14138))+(((-1.0)*r22*x14135)));
evalcond[5]=((((-1.0)*x14133*x14136))+((r11*x14138))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x14135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14139=((1.0)*cj5);
CheckValue<IkReal> x14140=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14139)))),-1);
if(!x14140.valid){
continue;
}
CheckValue<IkReal> x14141 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x14139)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14140.value)))+(x14141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14142=IKcos(j4);
IkReal x14143=IKsin(j4);
IkReal x14144=(cj5*r00);
IkReal x14145=(cj5*r10);
IkReal x14146=(cj5*r20);
IkReal x14147=((1.0)*x14142);
IkReal x14148=((1.0)*x14143);
IkReal x14149=(sj5*x14142);
IkReal x14150=(sj5*x14143);
evalcond[0]=(((r21*x14149))+(((-1.0)*x14146*x14147))+((r22*x14143)));
evalcond[1]=(((r12*x14143))+((r11*x14149))+(((-1.0)*x14145*x14147)));
evalcond[2]=((1.0)+(((-1.0)*x14144*x14147))+((r02*x14143))+((r01*x14149)));
evalcond[3]=((((-1.0)*x14144*x14148))+((r01*x14150))+(((-1.0)*r02*x14147)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x14147))+((cj1*sj2))+(((-1.0)*x14146*x14148))+((r21*x14150)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x14150))+(((-1.0)*r12*x14147))+(((-1.0)*x14145*x14148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14151=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14151.valid){
continue;
}
CheckValue<IkReal> x14152 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14151.value)))+(x14152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14153=IKcos(j4);
IkReal x14154=IKsin(j4);
IkReal x14155=(cj5*r00);
IkReal x14156=(cj5*r10);
IkReal x14157=(cj5*r20);
IkReal x14158=((1.0)*x14153);
IkReal x14159=((1.0)*x14154);
IkReal x14160=(sj5*x14153);
IkReal x14161=(sj5*x14154);
evalcond[0]=((((-1.0)*x14157*x14158))+((r22*x14154))+((r21*x14160)));
evalcond[1]=((((-1.0)*x14156*x14158))+((r11*x14160))+((r12*x14154)));
evalcond[2]=((1.0)+((r02*x14154))+((r01*x14160))+(((-1.0)*x14155*x14158)));
evalcond[3]=((((-1.0)*r02*x14158))+((r01*x14161))+(((-1.0)*x14155*x14159)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14157*x14159))+(((-1.0)*r22*x14158))+((cj1*sj2))+((r21*x14161)));
evalcond[5]=((((-1.0)*x14156*x14159))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x14158))+((r11*x14161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14162=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14162;
j4eval[1]=IKsign(x14162);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14163=((1.0)*cj5);
IkReal x14164=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14163)));
j4eval[0]=x14164;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14163)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14165=cj5*cj5;
IkReal x14166=r01*r01;
IkReal x14167=(r01*sj5);
IkReal x14168=(cj5*r00);
IkReal x14169=((((-1.0)*(r02*r02)))+((x14165*x14166))+(((-1.0)*x14165*(r00*r00)))+(((2.0)*x14167*x14168))+(((-1.0)*x14166)));
j4eval[0]=x14169;
j4eval[1]=IKsign(x14169);
j4eval[2]=((IKabs(r02))+(IKabs((x14167+(((-1.0)*x14168))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14170=cj5*cj5;
IkReal x14171=r01*r01;
IkReal x14172=(r01*sj5);
IkReal x14173=(cj5*r00);
CheckValue<IkReal> x14174 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x14173))+x14172)),IKFAST_ATAN2_MAGTHRESH);
if(!x14174.valid){
continue;
}
CheckValue<IkReal> x14175=IKPowWithIntegerCheck(IKsign(((((2.0)*x14172*x14173))+(((-1.0)*(r02*r02)))+((x14170*x14171))+(((-1.0)*x14171))+(((-1.0)*x14170*(r00*r00))))),-1);
if(!x14175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14174.value)+(((1.5707963267949)*(x14175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14176=IKcos(j4);
IkReal x14177=IKsin(j4);
IkReal x14178=(cj5*r00);
IkReal x14179=((1.0)*x14176);
IkReal x14180=(sj5*x14176);
IkReal x14181=(cj5*x14177);
IkReal x14182=((1.0)*sj5*x14177);
evalcond[0]=(((r22*x14177))+(((-1.0)*cj5*r20*x14179))+((r21*x14180)));
evalcond[1]=((((-1.0)*cj5*r10*x14179))+((r12*x14177))+((r11*x14180)));
evalcond[2]=(((x14177*x14178))+((r02*x14176))+(((-1.0)*r01*x14182)));
evalcond[3]=((1.0)+((r01*x14180))+(((-1.0)*x14178*x14179))+((r02*x14177)));
evalcond[4]=(((r22*x14176))+((r20*x14181))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x14182)));
evalcond[5]=(((r12*x14176))+(((-1.0)*r11*x14182))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x14181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14183=((1.0)*cj5);
CheckValue<IkReal> x14184 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x14183)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14184.valid){
continue;
}
CheckValue<IkReal> x14185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14183)))),-1);
if(!x14185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14184.value)+(((1.5707963267949)*(x14185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14186=IKcos(j4);
IkReal x14187=IKsin(j4);
IkReal x14188=(cj5*r00);
IkReal x14189=((1.0)*x14186);
IkReal x14190=(sj5*x14186);
IkReal x14191=(cj5*x14187);
IkReal x14192=((1.0)*sj5*x14187);
evalcond[0]=((((-1.0)*cj5*r20*x14189))+((r22*x14187))+((r21*x14190)));
evalcond[1]=((((-1.0)*cj5*r10*x14189))+((r12*x14187))+((r11*x14190)));
evalcond[2]=(((r02*x14186))+(((-1.0)*r01*x14192))+((x14187*x14188)));
evalcond[3]=((1.0)+((r02*x14187))+((r01*x14190))+(((-1.0)*x14188*x14189)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x14186))+(((-1.0)*r21*x14192))+((r20*x14191)));
evalcond[5]=(((r10*x14191))+(((-1.0)*r11*x14192))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x14186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14193=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14193.valid){
continue;
}
CheckValue<IkReal> x14194 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14193.value)))+(x14194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14195=IKcos(j4);
IkReal x14196=IKsin(j4);
IkReal x14197=(cj5*r00);
IkReal x14198=((1.0)*x14195);
IkReal x14199=(sj5*x14195);
IkReal x14200=(cj5*x14196);
IkReal x14201=((1.0)*sj5*x14196);
evalcond[0]=((((-1.0)*cj5*r20*x14198))+((r22*x14196))+((r21*x14199)));
evalcond[1]=(((r11*x14199))+((r12*x14196))+(((-1.0)*cj5*r10*x14198)));
evalcond[2]=(((r02*x14195))+(((-1.0)*r01*x14201))+((x14196*x14197)));
evalcond[3]=((1.0)+((r02*x14196))+(((-1.0)*x14197*x14198))+((r01*x14199)));
evalcond[4]=(((cj2*sj1))+((r20*x14200))+((cj1*sj2))+(((-1.0)*r21*x14201))+((r22*x14195)));
evalcond[5]=(((r10*x14200))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*x14201))+((r12*x14195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14203 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14203)==0){
continue;
}
IkReal x14202=pow(x14203,-0.5);
CheckValue<IkReal> x14204 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14204.valid){
continue;
}
IkReal gconst82=((-1.0)*(x14204.value));
IkReal gconst83=((-1.0)*r21*x14202);
IkReal gconst84=(r20*x14202);
CheckValue<IkReal> x14205 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14205.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14205.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14208 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14208.valid){
continue;
}
IkReal x14206=((-1.0)*(x14208.value));
IkReal x14207=x14202;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst83;
cj5=gconst84;
j5=x14206;
IkReal gconst82=x14206;
IkReal gconst83=((-1.0)*r21*x14207);
IkReal gconst84=(r20*x14207);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14211 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14211.valid){
continue;
}
IkReal x14209=((-1.0)*(x14211.value));
IkReal x14210=x14202;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst83;
cj5=gconst84;
j5=x14209;
IkReal gconst82=x14209;
IkReal gconst83=((-1.0)*r21*x14210);
IkReal gconst84=(r20*x14210);
CheckValue<IkReal> x14219=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14219.valid){
continue;
}
IkReal x14212=x14219.value;
IkReal x14213=(cj3*x14212);
IkReal x14214=(r11*x14213);
IkReal x14215=(r01*x14213);
IkReal x14216=(r00*x14213);
IkReal x14217=(r10*x14213);
IkReal x14218=(r20*r21*x14213);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x14215))+((r01*x14214*(r21*r21)))+((r00*r20*r21*x14214))+((r10*x14216*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14220=gconst84*gconst84;
IkReal x14221=gconst83*gconst83;
IkReal x14222=(r01*r10);
IkReal x14223=(r00*r11);
IkReal x14224=((1.0)*r12);
IkReal x14225=(cj3*gconst84);
IkReal x14226=(r00*r10);
IkReal x14227=(r01*r11);
IkReal x14228=(gconst83*gconst84*sj3);
IkReal x14229=((1.0)*x14220);
CheckValue<IkReal> x14230=IKPowWithIntegerCheck(IKsign((((x14222*x14228))+(((-1.0)*sj3*x14221*x14227))+(((-1.0)*sj3*x14226*x14229))+(((-1.0)*r02*sj3*x14224))+((x14223*x14228)))),-1);
if(!x14230.valid){
continue;
}
CheckValue<IkReal> x14231 = IKatan2WithCheck(IkReal((((cj3*x14221*x14223))+(((-1.0)*cj3*x14222*x14229))+(((-1.0)*gconst83*x14225*x14226))+((gconst83*x14225*x14227)))),IkReal(((((-1.0)*cj3*gconst83*r00*x14224))+(((-1.0)*r01*x14224*x14225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14230.value)))+(x14231.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14232=IKcos(j4);
IkReal x14233=IKsin(j4);
IkReal x14234=(sj1*sj2);
IkReal x14235=((1.0)*cj1);
IkReal x14236=((1.0)*cj3);
IkReal x14237=(cj3*r10);
IkReal x14238=(cj3*gconst84);
IkReal x14239=(gconst83*r01);
IkReal x14240=((1.0)*gconst84);
IkReal x14241=(gconst84*sj3);
IkReal x14242=(cj3*gconst83);
IkReal x14243=(cj2*sj1);
IkReal x14244=(gconst83*sj3);
IkReal x14245=((1.0)*sj3);
IkReal x14246=(gconst83*r11);
IkReal x14247=(cj2*x14235);
IkReal x14248=(gconst83*x14232);
IkReal x14249=(r20*x14233);
IkReal x14250=(sj3*x14233);
IkReal x14251=(r22*x14232);
IkReal x14252=(r12*x14232);
IkReal x14253=(r02*x14232);
IkReal x14254=(gconst83*r21*x14233);
evalcond[0]=(((r21*x14248))+(((-1.0)*r20*x14232*x14240))+((r22*x14233)));
evalcond[1]=((((-1.0)*r10*x14232*x14240))+((x14232*x14246))+((r12*x14233)));
evalcond[2]=((1.0)+(((-1.0)*r00*x14232*x14240))+((r02*x14233))+((x14232*x14239)));
evalcond[3]=(((cj3*x14253))+((r00*x14233*x14238))+(((-1.0)*x14233*x14236*x14239))+((r01*x14241))+((r00*x14244)));
evalcond[4]=((((-1.0)*r00*x14240*x14250))+(((-1.0)*x14245*x14253))+((x14239*x14250))+((r01*x14238))+((r00*x14242)));
evalcond[5]=((((-1.0)*x14245*x14251))+((cj1*sj2))+((r21*x14238))+((r20*x14242))+(((-1.0)*sj3*x14240*x14249))+((r21*x14233*x14244))+x14243);
evalcond[6]=(((r21*x14241))+((cj3*x14251))+((x14238*x14249))+(((-1.0)*x14247))+((r20*x14244))+(((-1.0)*x14236*x14254))+x14234);
evalcond[7]=(((gconst83*x14237))+(((-1.0)*r10*x14240*x14250))+(((-1.0)*x14245*x14252))+(((-1.0)*x14247))+((r11*x14233*x14244))+x14234+((r11*x14238)));
evalcond[8]=((((-1.0)*x14243))+(((-1.0)*sj2*x14235))+(((-1.0)*x14233*x14236*x14246))+((gconst84*x14233*x14237))+((cj3*x14252))+((r11*x14241))+((r10*x14244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14255=gconst83*gconst83;
IkReal x14256=gconst84*gconst84;
IkReal x14257=(r12*sj3);
IkReal x14258=(gconst84*r11);
IkReal x14259=(r01*sj3);
IkReal x14260=((1.0)*r10);
IkReal x14261=(cj3*r01);
IkReal x14262=((1.0)*gconst83*r00);
IkReal x14263=(r11*x14255);
CheckValue<IkReal> x14264=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*cj3*x14258*x14262))+((x14261*x14263))+((cj3*r00*r10*x14256))+(((-1.0)*gconst83*gconst84*x14260*x14261)))),-1);
if(!x14264.valid){
continue;
}
CheckValue<IkReal> x14265 = IKatan2WithCheck(IkReal(((((-1.0)*x14256*x14259*x14260))+((gconst83*x14258*x14259))+((r00*sj3*x14263))+(((-1.0)*gconst83*gconst84*r00*sj3*x14260)))),IkReal(((((-1.0)*x14257*x14262))+(((-1.0)*gconst84*r01*x14257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14264.value)))+(x14265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14266=IKcos(j4);
IkReal x14267=IKsin(j4);
IkReal x14268=(sj1*sj2);
IkReal x14269=((1.0)*cj1);
IkReal x14270=((1.0)*cj3);
IkReal x14271=(cj3*r10);
IkReal x14272=(cj3*gconst84);
IkReal x14273=(gconst83*r01);
IkReal x14274=((1.0)*gconst84);
IkReal x14275=(gconst84*sj3);
IkReal x14276=(cj3*gconst83);
IkReal x14277=(cj2*sj1);
IkReal x14278=(gconst83*sj3);
IkReal x14279=((1.0)*sj3);
IkReal x14280=(gconst83*r11);
IkReal x14281=(cj2*x14269);
IkReal x14282=(gconst83*x14266);
IkReal x14283=(r20*x14267);
IkReal x14284=(sj3*x14267);
IkReal x14285=(r22*x14266);
IkReal x14286=(r12*x14266);
IkReal x14287=(r02*x14266);
IkReal x14288=(gconst83*r21*x14267);
evalcond[0]=(((r21*x14282))+(((-1.0)*r20*x14266*x14274))+((r22*x14267)));
evalcond[1]=((((-1.0)*r10*x14266*x14274))+((r12*x14267))+((x14266*x14280)));
evalcond[2]=((1.0)+(((-1.0)*r00*x14266*x14274))+((x14266*x14273))+((r02*x14267)));
evalcond[3]=((((-1.0)*x14267*x14270*x14273))+((r01*x14275))+((cj3*x14287))+((r00*x14267*x14272))+((r00*x14278)));
evalcond[4]=(((x14273*x14284))+(((-1.0)*r00*x14274*x14284))+((r01*x14272))+(((-1.0)*x14279*x14287))+((r00*x14276)));
evalcond[5]=(((r21*x14272))+((cj1*sj2))+((r21*x14267*x14278))+((r20*x14276))+(((-1.0)*sj3*x14274*x14283))+(((-1.0)*x14279*x14285))+x14277);
evalcond[6]=(((x14272*x14283))+((cj3*x14285))+((r21*x14275))+((r20*x14278))+(((-1.0)*x14281))+(((-1.0)*x14270*x14288))+x14268);
evalcond[7]=((((-1.0)*x14281))+((r11*x14272))+(((-1.0)*x14279*x14286))+((r11*x14267*x14278))+(((-1.0)*r10*x14274*x14284))+x14268+((gconst83*x14271)));
evalcond[8]=((((-1.0)*x14277))+((cj3*x14286))+(((-1.0)*sj2*x14269))+((r11*x14275))+((r10*x14278))+(((-1.0)*x14267*x14270*x14280))+((gconst84*x14267*x14271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14289=((1.0)*gconst84);
CheckValue<IkReal> x14290=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14289))+(((-1.0)*gconst83*r10)))),-1);
if(!x14290.valid){
continue;
}
CheckValue<IkReal> x14291 = IKatan2WithCheck(IkReal((((gconst83*r21))+(((-1.0)*r20*x14289)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14290.value)))+(x14291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14292=IKcos(j4);
IkReal x14293=IKsin(j4);
IkReal x14294=(sj1*sj2);
IkReal x14295=((1.0)*cj1);
IkReal x14296=((1.0)*cj3);
IkReal x14297=(cj3*r10);
IkReal x14298=(cj3*gconst84);
IkReal x14299=(gconst83*r01);
IkReal x14300=((1.0)*gconst84);
IkReal x14301=(gconst84*sj3);
IkReal x14302=(cj3*gconst83);
IkReal x14303=(cj2*sj1);
IkReal x14304=(gconst83*sj3);
IkReal x14305=((1.0)*sj3);
IkReal x14306=(gconst83*r11);
IkReal x14307=(cj2*x14295);
IkReal x14308=(gconst83*x14292);
IkReal x14309=(r20*x14293);
IkReal x14310=(sj3*x14293);
IkReal x14311=(r22*x14292);
IkReal x14312=(r12*x14292);
IkReal x14313=(r02*x14292);
IkReal x14314=(gconst83*r21*x14293);
evalcond[0]=(((r22*x14293))+(((-1.0)*r20*x14292*x14300))+((r21*x14308)));
evalcond[1]=(((r12*x14293))+((x14292*x14306))+(((-1.0)*r10*x14292*x14300)));
evalcond[2]=((1.0)+((r02*x14293))+((x14292*x14299))+(((-1.0)*r00*x14292*x14300)));
evalcond[3]=(((cj3*x14313))+((r01*x14301))+(((-1.0)*x14293*x14296*x14299))+((r00*x14304))+((r00*x14293*x14298)));
evalcond[4]=((((-1.0)*r00*x14300*x14310))+((r01*x14298))+(((-1.0)*x14305*x14313))+((r00*x14302))+((x14299*x14310)));
evalcond[5]=(((r20*x14302))+((r21*x14298))+((cj1*sj2))+(((-1.0)*x14305*x14311))+((r21*x14293*x14304))+(((-1.0)*sj3*x14300*x14309))+x14303);
evalcond[6]=(((r20*x14304))+((cj3*x14311))+((x14298*x14309))+(((-1.0)*x14296*x14314))+((r21*x14301))+x14294+(((-1.0)*x14307)));
evalcond[7]=((((-1.0)*x14305*x14312))+(((-1.0)*r10*x14300*x14310))+((r11*x14293*x14304))+((gconst83*x14297))+((r11*x14298))+x14294+(((-1.0)*x14307)));
evalcond[8]=(((cj3*x14312))+(((-1.0)*x14293*x14296*x14306))+((gconst84*x14293*x14297))+((r11*x14301))+(((-1.0)*x14303))+(((-1.0)*sj2*x14295))+((r10*x14304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14316 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14316)==0){
continue;
}
IkReal x14315=pow(x14316,-0.5);
CheckValue<IkReal> x14317 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14317.valid){
continue;
}
IkReal gconst85=((3.14159265358979)+(((-1.0)*(x14317.value))));
IkReal gconst86=((1.0)*r21*x14315);
IkReal gconst87=((-1.0)*r20*x14315);
CheckValue<IkReal> x14318 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14318.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14318.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14321 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14321.valid){
continue;
}
IkReal x14319=((1.0)*(x14321.value));
IkReal x14320=x14315;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst86;
cj5=gconst87;
j5=((3.14159265)+(((-1.0)*x14319)));
IkReal gconst85=((3.14159265358979)+(((-1.0)*x14319)));
IkReal gconst86=((1.0)*r21*x14320);
IkReal gconst87=((-1.0)*r20*x14320);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14324 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14324.valid){
continue;
}
IkReal x14322=((1.0)*(x14324.value));
IkReal x14323=x14315;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst86;
cj5=gconst87;
j5=((3.14159265)+(((-1.0)*x14322)));
IkReal gconst85=((3.14159265358979)+(((-1.0)*x14322)));
IkReal gconst86=((1.0)*r21*x14323);
IkReal gconst87=((-1.0)*r20*x14323);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14327 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14327.valid){
continue;
}
IkReal x14325=((1.0)*(x14327.value));
IkReal x14326=x14315;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst86;
cj5=gconst87;
j5=((3.14159265)+(((-1.0)*x14325)));
IkReal gconst85=((3.14159265358979)+(((-1.0)*x14325)));
IkReal gconst86=((1.0)*r21*x14326);
IkReal gconst87=((-1.0)*r20*x14326);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14328=gconst86*gconst86;
IkReal x14329=gconst87*gconst87;
IkReal x14330=((1.0)*gconst86);
IkReal x14331=(r22*sj3);
IkReal x14332=(gconst87*r01);
IkReal x14333=(cj3*r20);
IkReal x14334=(r21*sj3);
IkReal x14335=(gconst87*r00);
IkReal x14336=(cj3*r21);
IkReal x14337=(r20*sj3);
CheckValue<IkReal> x14338 = IKatan2WithCheck(IkReal((((gconst86*x14332*x14334))+(((-1.0)*x14330*x14335*x14337))+((r00*x14328*x14334))+(((-1.0)*r01*x14329*x14337)))),IkReal(((((-1.0)*r00*x14330*x14331))+(((-1.0)*x14331*x14332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14338.valid){
continue;
}
CheckValue<IkReal> x14339=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14330*x14335*x14336))+((r00*x14329*x14333))+((cj3*r02*r22))+(((-1.0)*x14330*x14332*x14333))+((r01*x14328*x14336)))),-1);
if(!x14339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14338.value)+(((1.5707963267949)*(x14339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14340=IKcos(j4);
IkReal x14341=IKsin(j4);
IkReal x14342=(sj1*sj2);
IkReal x14343=((1.0)*cj1);
IkReal x14344=(gconst87*sj3);
IkReal x14345=(cj3*gconst86);
IkReal x14346=(cj3*gconst87);
IkReal x14347=(cj2*sj1);
IkReal x14348=(gconst86*sj3);
IkReal x14349=((1.0)*sj3);
IkReal x14350=(cj2*x14343);
IkReal x14351=((1.0)*x14341);
IkReal x14352=(gconst86*x14340);
IkReal x14353=(r22*x14340);
IkReal x14354=(r12*x14340);
IkReal x14355=(r02*x14340);
IkReal x14356=((1.0)*gconst87*x14340);
evalcond[0]=((((-1.0)*r20*x14356))+((r22*x14341))+((r21*x14352)));
evalcond[1]=(((r11*x14352))+(((-1.0)*r10*x14356))+((r12*x14341)));
evalcond[2]=((1.0)+((r01*x14352))+(((-1.0)*r00*x14356))+((r02*x14341)));
evalcond[3]=(((cj3*x14355))+(((-1.0)*r01*x14345*x14351))+((r00*x14348))+((r01*x14344))+((r00*x14341*x14346)));
evalcond[4]=((((-1.0)*r00*x14344*x14351))+((r00*x14345))+((r01*x14346))+((r01*x14341*x14348))+(((-1.0)*x14349*x14355)));
evalcond[5]=((((-1.0)*r20*x14344*x14351))+((r21*x14341*x14348))+((r21*x14346))+((cj1*sj2))+(((-1.0)*x14349*x14353))+((r20*x14345))+x14347);
evalcond[6]=(((cj3*x14353))+(((-1.0)*x14350))+((r21*x14344))+((r20*x14341*x14346))+((r20*x14348))+x14342+(((-1.0)*r21*x14345*x14351)));
evalcond[7]=((((-1.0)*x14350))+((r11*x14341*x14348))+((r11*x14346))+((r10*x14345))+(((-1.0)*x14349*x14354))+x14342+(((-1.0)*r10*x14344*x14351)));
evalcond[8]=(((r10*x14341*x14346))+((cj3*x14354))+(((-1.0)*x14347))+(((-1.0)*r11*x14345*x14351))+((r11*x14344))+((r10*x14348))+(((-1.0)*sj2*x14343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14357=((1.0)*gconst87);
CheckValue<IkReal> x14358=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14357))+(((-1.0)*gconst86*r10)))),-1);
if(!x14358.valid){
continue;
}
CheckValue<IkReal> x14359 = IKatan2WithCheck(IkReal((((gconst86*r21))+(((-1.0)*r20*x14357)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14358.value)))+(x14359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14360=IKcos(j4);
IkReal x14361=IKsin(j4);
IkReal x14362=(sj1*sj2);
IkReal x14363=((1.0)*cj1);
IkReal x14364=(gconst87*sj3);
IkReal x14365=(cj3*gconst86);
IkReal x14366=(cj3*gconst87);
IkReal x14367=(cj2*sj1);
IkReal x14368=(gconst86*sj3);
IkReal x14369=((1.0)*sj3);
IkReal x14370=(cj2*x14363);
IkReal x14371=((1.0)*x14361);
IkReal x14372=(gconst86*x14360);
IkReal x14373=(r22*x14360);
IkReal x14374=(r12*x14360);
IkReal x14375=(r02*x14360);
IkReal x14376=((1.0)*gconst87*x14360);
evalcond[0]=(((r21*x14372))+(((-1.0)*r20*x14376))+((r22*x14361)));
evalcond[1]=((((-1.0)*r10*x14376))+((r11*x14372))+((r12*x14361)));
evalcond[2]=((1.0)+((r01*x14372))+((r02*x14361))+(((-1.0)*r00*x14376)));
evalcond[3]=(((r00*x14361*x14366))+((cj3*x14375))+(((-1.0)*r01*x14365*x14371))+((r01*x14364))+((r00*x14368)));
evalcond[4]=((((-1.0)*r00*x14364*x14371))+((r01*x14361*x14368))+(((-1.0)*x14369*x14375))+((r01*x14366))+((r00*x14365)));
evalcond[5]=(((cj1*sj2))+((r20*x14365))+((r21*x14366))+(((-1.0)*x14369*x14373))+x14367+((r21*x14361*x14368))+(((-1.0)*r20*x14364*x14371)));
evalcond[6]=(((cj3*x14373))+((r20*x14368))+((r20*x14361*x14366))+((r21*x14364))+(((-1.0)*r21*x14365*x14371))+x14362+(((-1.0)*x14370)));
evalcond[7]=(((r10*x14365))+((r11*x14366))+(((-1.0)*x14369*x14374))+x14362+(((-1.0)*x14370))+(((-1.0)*r10*x14364*x14371))+((r11*x14361*x14368)));
evalcond[8]=(((r10*x14368))+((r11*x14364))+(((-1.0)*sj2*x14363))+(((-1.0)*r11*x14365*x14371))+((cj3*x14374))+(((-1.0)*x14367))+((r10*x14361*x14366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14377=IKPowWithIntegerCheck(IKsign((((gconst86*r20))+((gconst87*r21)))),-1);
if(!x14377.valid){
continue;
}
CheckValue<IkReal> x14378 = IKatan2WithCheck(IkReal((((gconst86*r11))+(((-1.0)*gconst87*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14377.value)))+(x14378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14379=IKcos(j4);
IkReal x14380=IKsin(j4);
IkReal x14381=(sj1*sj2);
IkReal x14382=((1.0)*cj1);
IkReal x14383=(gconst87*sj3);
IkReal x14384=(cj3*gconst86);
IkReal x14385=(cj3*gconst87);
IkReal x14386=(cj2*sj1);
IkReal x14387=(gconst86*sj3);
IkReal x14388=((1.0)*sj3);
IkReal x14389=(cj2*x14382);
IkReal x14390=((1.0)*x14380);
IkReal x14391=(gconst86*x14379);
IkReal x14392=(r22*x14379);
IkReal x14393=(r12*x14379);
IkReal x14394=(r02*x14379);
IkReal x14395=((1.0)*gconst87*x14379);
evalcond[0]=(((r21*x14391))+(((-1.0)*r20*x14395))+((r22*x14380)));
evalcond[1]=(((r12*x14380))+((r11*x14391))+(((-1.0)*r10*x14395)));
evalcond[2]=((1.0)+((r01*x14391))+(((-1.0)*r00*x14395))+((r02*x14380)));
evalcond[3]=(((r00*x14387))+((r01*x14383))+(((-1.0)*r01*x14384*x14390))+((cj3*x14394))+((r00*x14380*x14385)));
evalcond[4]=((((-1.0)*r00*x14383*x14390))+((r00*x14384))+((r01*x14380*x14387))+((r01*x14385))+(((-1.0)*x14388*x14394)));
evalcond[5]=((((-1.0)*r20*x14383*x14390))+((r20*x14384))+((r21*x14385))+((cj1*sj2))+((r21*x14380*x14387))+(((-1.0)*x14388*x14392))+x14386);
evalcond[6]=(((r20*x14387))+(((-1.0)*x14389))+((r21*x14383))+((cj3*x14392))+((r20*x14380*x14385))+x14381+(((-1.0)*r21*x14384*x14390)));
evalcond[7]=((((-1.0)*x14389))+((r11*x14380*x14387))+((r10*x14384))+((r11*x14385))+(((-1.0)*r10*x14383*x14390))+(((-1.0)*x14388*x14393))+x14381);
evalcond[8]=((((-1.0)*x14386))+((r10*x14387))+((r11*x14383))+((r10*x14380*x14385))+((cj3*x14393))+(((-1.0)*sj2*x14382))+(((-1.0)*r11*x14384*x14390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14396=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14396);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14396);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14397=(cj5*r00);
IkReal x14398=(r01*sj5);
j4eval[0]=((((-1.0)*cj3*x14398))+((cj3*x14397)));
j4eval[1]=((((-1.0)*x14397))+x14398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14399=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14399);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14399);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14400=(r01*sj5);
IkReal x14401=((1.0)*cj5*r00);
j4eval[0]=(((sj3*x14400))+(((-1.0)*sj3*x14401)));
j4eval[1]=((((-1.0)*x14401))+x14400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14402=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14402);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14402);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((cj3*cj5*r00))+(((-1.0)*cj3*r01*sj5)));
j4eval[1]=r22;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14403=((1.0)*r01);
CheckValue<IkReal> x14404=IKPowWithIntegerCheck((((cj3*cj5*r00))+(((-1.0)*cj3*sj5*x14403))),-1);
if(!x14404.valid){
continue;
}
CheckValue<IkReal> x14405=IKPowWithIntegerCheck(r22,-1);
if(!x14405.valid){
continue;
}
CheckValue<IkReal> x14406=IKPowWithIntegerCheck(sj3,-1);
if(!x14406.valid){
continue;
}
if( IKabs(((x14404.value)*(((((-1.0)*cj5*sj3*x14403))+(((-1.0)*r00*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14405.value)*(x14406.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14404.value)*(((((-1.0)*cj5*sj3*x14403))+(((-1.0)*r00*sj3*sj5))))))+IKsqr(((x14405.value)*(x14406.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14404.value)*(((((-1.0)*cj5*sj3*x14403))+(((-1.0)*r00*sj3*sj5))))), ((x14405.value)*(x14406.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14407=IKcos(j4);
IkReal x14408=IKsin(j4);
IkReal x14409=(sj1*sj2);
IkReal x14410=((1.0)*cj5);
IkReal x14411=(cj5*r01);
IkReal x14412=((1.0)*cj1);
IkReal x14413=(cj3*sj5);
IkReal x14414=(cj3*cj5);
IkReal x14415=(sj3*sj5);
IkReal x14416=(cj2*sj1);
IkReal x14417=(r01*sj5);
IkReal x14418=(r11*sj5);
IkReal x14419=(cj2*x14412);
IkReal x14420=(sj3*x14408);
IkReal x14421=(r22*x14407);
IkReal x14422=((1.0)*x14408);
evalcond[0]=(r22*x14408);
evalcond[1]=((((-1.0)*r10*x14407*x14410))+((x14407*x14418)));
evalcond[2]=(((cj1*sj2))+x14416+(((-1.0)*sj3*x14421)));
evalcond[3]=((((-1.0)*x14419))+x14409+((cj3*x14421)));
evalcond[4]=((1.0)+(((-1.0)*r00*x14407*x14410))+((x14407*x14417)));
evalcond[5]=(((sj3*x14411))+(((-1.0)*r01*x14413*x14422))+((r00*x14415))+((r00*x14408*x14414)));
evalcond[6]=((((-1.0)*r00*x14410*x14420))+((cj3*x14411))+((r00*x14413))+((r01*x14408*x14415)));
evalcond[7]=((((-1.0)*x14419))+(((-1.0)*r10*x14410*x14420))+((r11*x14414))+x14409+((r11*x14408*x14415))+((r10*x14413)));
evalcond[8]=((((-1.0)*r11*x14413*x14422))+(((-1.0)*x14416))+((cj5*r11*sj3))+((r10*x14408*x14414))+(((-1.0)*sj2*x14412))+((r10*x14415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14423=((1.0)*cj3);
IkReal x14424=(r01*sj5);
IkReal x14425=((1.0)*cj5*r00);
CheckValue<IkReal> x14426=IKPowWithIntegerCheck(((((-1.0)*sj3*x14425))+((sj3*x14424))),-1);
if(!x14426.valid){
continue;
}
CheckValue<IkReal> x14427=IKPowWithIntegerCheck((x14424+(((-1.0)*x14425))),-1);
if(!x14427.valid){
continue;
}
if( IKabs(((x14426.value)*(((((-1.0)*r00*sj5*x14423))+(((-1.0)*cj5*r01*x14423)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x14427.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14426.value)*(((((-1.0)*r00*sj5*x14423))+(((-1.0)*cj5*r01*x14423))))))+IKsqr(((-1.0)*(x14427.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14426.value)*(((((-1.0)*r00*sj5*x14423))+(((-1.0)*cj5*r01*x14423))))), ((-1.0)*(x14427.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14428=IKcos(j4);
IkReal x14429=IKsin(j4);
IkReal x14430=(sj1*sj2);
IkReal x14431=((1.0)*cj5);
IkReal x14432=(cj5*r01);
IkReal x14433=((1.0)*cj1);
IkReal x14434=(cj3*sj5);
IkReal x14435=(cj3*cj5);
IkReal x14436=(sj3*sj5);
IkReal x14437=(cj2*sj1);
IkReal x14438=(r01*sj5);
IkReal x14439=(r11*sj5);
IkReal x14440=(cj2*x14433);
IkReal x14441=(sj3*x14429);
IkReal x14442=(r22*x14428);
IkReal x14443=((1.0)*x14429);
evalcond[0]=(r22*x14429);
evalcond[1]=(((x14428*x14439))+(((-1.0)*r10*x14428*x14431)));
evalcond[2]=(((cj1*sj2))+(((-1.0)*sj3*x14442))+x14437);
evalcond[3]=((((-1.0)*x14440))+x14430+((cj3*x14442)));
evalcond[4]=((1.0)+((x14428*x14438))+(((-1.0)*r00*x14428*x14431)));
evalcond[5]=(((r00*x14429*x14435))+((r00*x14436))+((sj3*x14432))+(((-1.0)*r01*x14434*x14443)));
evalcond[6]=(((r00*x14434))+(((-1.0)*r00*x14431*x14441))+((cj3*x14432))+((r01*x14429*x14436)));
evalcond[7]=((((-1.0)*x14440))+((r11*x14435))+(((-1.0)*r10*x14431*x14441))+((r10*x14434))+x14430+((r11*x14429*x14436)));
evalcond[8]=(((cj5*r11*sj3))+(((-1.0)*sj2*x14433))+(((-1.0)*r11*x14434*x14443))+((r10*x14436))+(((-1.0)*x14437))+((r10*x14429*x14435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14444=(cj5*r00);
IkReal x14445=(r01*sj5);
IkReal x14446=((1.0)*sj3);
CheckValue<IkReal> x14447=IKPowWithIntegerCheck(((((-1.0)*cj3*x14445))+((cj3*x14444))),-1);
if(!x14447.valid){
continue;
}
CheckValue<IkReal> x14448=IKPowWithIntegerCheck(((((-1.0)*x14444))+x14445),-1);
if(!x14448.valid){
continue;
}
if( IKabs(((x14447.value)*(((((-1.0)*r00*sj5*x14446))+(((-1.0)*cj5*r01*x14446)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x14448.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14447.value)*(((((-1.0)*r00*sj5*x14446))+(((-1.0)*cj5*r01*x14446))))))+IKsqr(((-1.0)*(x14448.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14447.value)*(((((-1.0)*r00*sj5*x14446))+(((-1.0)*cj5*r01*x14446))))), ((-1.0)*(x14448.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14449=IKcos(j4);
IkReal x14450=IKsin(j4);
IkReal x14451=(sj1*sj2);
IkReal x14452=((1.0)*cj5);
IkReal x14453=(cj5*r01);
IkReal x14454=((1.0)*cj1);
IkReal x14455=(cj3*sj5);
IkReal x14456=(cj3*cj5);
IkReal x14457=(sj3*sj5);
IkReal x14458=(cj2*sj1);
IkReal x14459=(r01*sj5);
IkReal x14460=(r11*sj5);
IkReal x14461=(cj2*x14454);
IkReal x14462=(sj3*x14450);
IkReal x14463=(r22*x14449);
IkReal x14464=((1.0)*x14450);
evalcond[0]=(r22*x14450);
evalcond[1]=(((x14449*x14460))+(((-1.0)*r10*x14449*x14452)));
evalcond[2]=(((cj1*sj2))+x14458+(((-1.0)*sj3*x14463)));
evalcond[3]=(((cj3*x14463))+x14451+(((-1.0)*x14461)));
evalcond[4]=((1.0)+(((-1.0)*r00*x14449*x14452))+((x14449*x14459)));
evalcond[5]=(((r00*x14450*x14456))+((r00*x14457))+((sj3*x14453))+(((-1.0)*r01*x14455*x14464)));
evalcond[6]=(((r00*x14455))+(((-1.0)*r00*x14452*x14462))+((cj3*x14453))+((r01*x14450*x14457)));
evalcond[7]=((((-1.0)*r10*x14452*x14462))+((r10*x14455))+((r11*x14456))+x14451+((r11*x14450*x14457))+(((-1.0)*x14461)));
evalcond[8]=(((r10*x14450*x14456))+(((-1.0)*r11*x14455*x14464))+((cj5*r11*sj3))+((r10*x14457))+(((-1.0)*sj2*x14454))+(((-1.0)*x14458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14465=cj5*cj5;
IkReal x14466=((1.0)*r00);
IkReal x14467=(r01*sj3);
IkReal x14468=(sj3*sj5);
IkReal x14469=(r21*sj3);
IkReal x14470=((1.0)*cj5);
IkReal x14471=(cj5*r21*sj5);
IkReal x14472=(cj3*r01*r21);
IkReal x14473=(r20*x14465);
CheckValue<IkReal> x14474 = IKatan2WithCheck(IkReal(((((-1.0)*x14467*x14473))+((r00*x14469))+(((-1.0)*x14465*x14466*x14469))+(((-1.0)*cj5*r20*x14466*x14468))+((x14467*x14471)))),IkReal(((((-1.0)*r22*x14466*x14468))+(((-1.0)*r22*x14467*x14470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14474.valid){
continue;
}
CheckValue<IkReal> x14475=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*x14466*x14471))+(((-1.0)*cj3*r01*r20*sj5*x14470))+(((-1.0)*x14465*x14472))+x14472+((cj3*r02*r22))+((cj3*r00*x14473)))),-1);
if(!x14475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14474.value)+(((1.5707963267949)*(x14475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14476=IKcos(j4);
IkReal x14477=IKsin(j4);
IkReal x14478=(sj1*sj2);
IkReal x14479=(cj5*r00);
IkReal x14480=(cj5*r01);
IkReal x14481=((1.0)*cj1);
IkReal x14482=(cj3*sj5);
IkReal x14483=(cj5*sj3);
IkReal x14484=(sj3*sj5);
IkReal x14485=(cj2*sj1);
IkReal x14486=(cj3*cj5);
IkReal x14487=(cj5*r10);
IkReal x14488=(cj5*r20);
IkReal x14489=(cj2*x14481);
IkReal x14490=((1.0)*x14476);
IkReal x14491=(sj5*x14476);
IkReal x14492=(cj3*x14477);
IkReal x14493=(cj3*x14476);
IkReal x14494=((1.0)*x14477);
evalcond[0]=(((r21*x14491))+(((-1.0)*x14488*x14490))+((r22*x14477)));
evalcond[1]=(((r11*x14491))+((r12*x14477))+(((-1.0)*x14487*x14490)));
evalcond[2]=((1.0)+((r02*x14477))+((r01*x14491))+(((-1.0)*x14479*x14490)));
evalcond[3]=((((-1.0)*r01*x14482*x14494))+((r02*x14493))+((r00*x14484))+((x14479*x14492))+((sj3*x14480)));
evalcond[4]=((((-1.0)*sj3*x14479*x14494))+((r01*x14477*x14484))+((cj3*x14480))+(((-1.0)*r02*sj3*x14490))+((r00*x14482)));
evalcond[5]=(((r21*x14477*x14484))+((r21*x14486))+((cj1*sj2))+(((-1.0)*r20*x14483*x14494))+x14485+((r20*x14482))+(((-1.0)*r22*sj3*x14490)));
evalcond[6]=(((r21*x14483))+((r22*x14493))+((r20*x14477*x14486))+x14478+(((-1.0)*r21*x14482*x14494))+((r20*x14484))+(((-1.0)*x14489)));
evalcond[7]=(((r10*x14482))+((r11*x14486))+x14478+((r11*x14477*x14484))+(((-1.0)*r12*sj3*x14490))+(((-1.0)*r10*x14483*x14494))+(((-1.0)*x14489)));
evalcond[8]=(((r10*x14484))+((r12*x14493))+((r11*x14483))+(((-1.0)*x14485))+((r10*x14477*x14486))+(((-1.0)*sj2*x14481))+(((-1.0)*r11*x14482*x14494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14495=((1.0)*cj5);
CheckValue<IkReal> x14496 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x14495)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14496.valid){
continue;
}
CheckValue<IkReal> x14497=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14495)))),-1);
if(!x14497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14496.value)+(((1.5707963267949)*(x14497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14498=IKcos(j4);
IkReal x14499=IKsin(j4);
IkReal x14500=(sj1*sj2);
IkReal x14501=(cj5*r00);
IkReal x14502=(cj5*r01);
IkReal x14503=((1.0)*cj1);
IkReal x14504=(cj3*sj5);
IkReal x14505=(cj5*sj3);
IkReal x14506=(sj3*sj5);
IkReal x14507=(cj2*sj1);
IkReal x14508=(cj3*cj5);
IkReal x14509=(cj5*r10);
IkReal x14510=(cj5*r20);
IkReal x14511=(cj2*x14503);
IkReal x14512=((1.0)*x14498);
IkReal x14513=(sj5*x14498);
IkReal x14514=(cj3*x14499);
IkReal x14515=(cj3*x14498);
IkReal x14516=((1.0)*x14499);
evalcond[0]=(((r22*x14499))+(((-1.0)*x14510*x14512))+((r21*x14513)));
evalcond[1]=(((r12*x14499))+((r11*x14513))+(((-1.0)*x14509*x14512)));
evalcond[2]=((1.0)+(((-1.0)*x14501*x14512))+((r01*x14513))+((r02*x14499)));
evalcond[3]=((((-1.0)*r01*x14504*x14516))+((r02*x14515))+((sj3*x14502))+((r00*x14506))+((x14501*x14514)));
evalcond[4]=(((cj3*x14502))+(((-1.0)*sj3*x14501*x14516))+(((-1.0)*r02*sj3*x14512))+((r00*x14504))+((r01*x14499*x14506)));
evalcond[5]=(((r20*x14504))+(((-1.0)*r20*x14505*x14516))+((cj1*sj2))+((r21*x14508))+x14507+(((-1.0)*r22*sj3*x14512))+((r21*x14499*x14506)));
evalcond[6]=(((r22*x14515))+((r20*x14506))+((r20*x14499*x14508))+((r21*x14505))+x14500+(((-1.0)*x14511))+(((-1.0)*r21*x14504*x14516)));
evalcond[7]=(((r10*x14504))+x14500+(((-1.0)*x14511))+(((-1.0)*r10*x14505*x14516))+((r11*x14499*x14506))+((r11*x14508))+(((-1.0)*r12*sj3*x14512)));
evalcond[8]=((((-1.0)*sj2*x14503))+(((-1.0)*x14507))+((r10*x14499*x14508))+((r10*x14506))+((r12*x14515))+(((-1.0)*r11*x14504*x14516))+((r11*x14505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14517=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14517.valid){
continue;
}
CheckValue<IkReal> x14518 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14517.value)))+(x14518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14519=IKcos(j4);
IkReal x14520=IKsin(j4);
IkReal x14521=(sj1*sj2);
IkReal x14522=(cj5*r00);
IkReal x14523=(cj5*r01);
IkReal x14524=((1.0)*cj1);
IkReal x14525=(cj3*sj5);
IkReal x14526=(cj5*sj3);
IkReal x14527=(sj3*sj5);
IkReal x14528=(cj2*sj1);
IkReal x14529=(cj3*cj5);
IkReal x14530=(cj5*r10);
IkReal x14531=(cj5*r20);
IkReal x14532=(cj2*x14524);
IkReal x14533=((1.0)*x14519);
IkReal x14534=(sj5*x14519);
IkReal x14535=(cj3*x14520);
IkReal x14536=(cj3*x14519);
IkReal x14537=((1.0)*x14520);
evalcond[0]=(((r22*x14520))+(((-1.0)*x14531*x14533))+((r21*x14534)));
evalcond[1]=(((r11*x14534))+(((-1.0)*x14530*x14533))+((r12*x14520)));
evalcond[2]=((1.0)+(((-1.0)*x14522*x14533))+((r01*x14534))+((r02*x14520)));
evalcond[3]=(((r02*x14536))+((r00*x14527))+((sj3*x14523))+((x14522*x14535))+(((-1.0)*r01*x14525*x14537)));
evalcond[4]=((((-1.0)*sj3*x14522*x14537))+(((-1.0)*r02*sj3*x14533))+((r00*x14525))+((cj3*x14523))+((r01*x14520*x14527)));
evalcond[5]=(((r21*x14520*x14527))+(((-1.0)*r20*x14526*x14537))+((cj1*sj2))+((r20*x14525))+x14528+((r21*x14529))+(((-1.0)*r22*sj3*x14533)));
evalcond[6]=((((-1.0)*x14532))+((r20*x14520*x14529))+((r20*x14527))+(((-1.0)*r21*x14525*x14537))+((r22*x14536))+x14521+((r21*x14526)));
evalcond[7]=((((-1.0)*x14532))+((r11*x14520*x14527))+(((-1.0)*r12*sj3*x14533))+(((-1.0)*r10*x14526*x14537))+((r11*x14529))+x14521+((r10*x14525)));
evalcond[8]=((((-1.0)*x14528))+((r12*x14536))+(((-1.0)*r11*x14525*x14537))+((r11*x14526))+((r10*x14520*x14529))+(((-1.0)*sj2*x14524))+((r10*x14527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14538=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14538;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14539=((1.0)*cj5);
IkReal x14540=((((-1.0)*r21*x14539))+(((-1.0)*r20*sj5)));
j4eval[0]=x14540;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x14539))+((r11*sj5))))));
j4eval[2]=IKsign(x14540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14541=cj5*cj5;
IkReal x14542=(cj3*r00);
IkReal x14543=(cj3*r01);
IkReal x14544=((1.0)*cj5*sj5);
IkReal x14545=(((r20*x14541*x14542))+(((-1.0)*r20*x14543*x14544))+((r21*x14543))+(((-1.0)*r21*x14541*x14543))+((cj3*r02*r22))+(((-1.0)*r21*x14542*x14544)));
j4eval[0]=x14545;
j4eval[1]=IKsign(x14545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14546=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14546;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14547=((1.0)*cj5);
IkReal x14548=((((-1.0)*r21*x14547))+(((-1.0)*r20*sj5)));
j4eval[0]=x14548;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x14547))+((r11*sj5))))));
j4eval[2]=IKsign(x14548);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14549=cj5*cj5;
IkReal x14550=r01*r01;
IkReal x14551=(cj5*r00);
IkReal x14552=(r01*sj5);
IkReal x14553=(((x14549*(r00*r00)))+(((-2.0)*x14551*x14552))+(((-1.0)*x14549*x14550))+x14550+(r02*r02));
j4eval[0]=x14553;
j4eval[1]=IKsign(x14553);
j4eval[2]=((IKabs(r02))+(IKabs((x14552+(((-1.0)*x14551))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14554=cj5*cj5;
IkReal x14555=r01*r01;
IkReal x14556=(r01*sj5);
IkReal x14557=(cj5*r00);
CheckValue<IkReal> x14558=IKPowWithIntegerCheck(IKsign((x14555+(((-1.0)*x14554*x14555))+(((-2.0)*x14556*x14557))+(r02*r02)+((x14554*(r00*r00))))),-1);
if(!x14558.valid){
continue;
}
CheckValue<IkReal> x14559 = IKatan2WithCheck(IkReal(r02),IkReal((x14556+(((-1.0)*x14557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14558.value)))+(x14559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14560=IKcos(j4);
IkReal x14561=IKsin(j4);
IkReal x14562=(cj5*r00);
IkReal x14563=(cj5*r10);
IkReal x14564=(cj5*r20);
IkReal x14565=((1.0)*x14560);
IkReal x14566=((1.0)*x14561);
IkReal x14567=(sj5*x14560);
IkReal x14568=(sj5*x14561);
evalcond[0]=(((r21*x14567))+(((-1.0)*x14564*x14565))+((r22*x14561)));
evalcond[1]=((((-1.0)*x14563*x14565))+((r11*x14567))+((r12*x14561)));
evalcond[2]=((-1.0)+((r01*x14567))+(((-1.0)*x14562*x14565))+((r02*x14561)));
evalcond[3]=(((r01*x14568))+(((-1.0)*x14562*x14566))+(((-1.0)*r02*x14565)));
evalcond[4]=(((cj2*sj1))+((r21*x14568))+((cj1*sj2))+(((-1.0)*r22*x14565))+(((-1.0)*x14564*x14566)));
evalcond[5]=((((-1.0)*x14563*x14566))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x14565))+((r11*x14568))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14569=((1.0)*cj5);
CheckValue<IkReal> x14570 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x14569))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14570.valid){
continue;
}
CheckValue<IkReal> x14571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14569))+(((-1.0)*r20*sj5)))),-1);
if(!x14571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14570.value)+(((1.5707963267949)*(x14571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14572=IKcos(j4);
IkReal x14573=IKsin(j4);
IkReal x14574=(cj5*r00);
IkReal x14575=(cj5*r10);
IkReal x14576=(cj5*r20);
IkReal x14577=((1.0)*x14572);
IkReal x14578=((1.0)*x14573);
IkReal x14579=(sj5*x14572);
IkReal x14580=(sj5*x14573);
evalcond[0]=(((r21*x14579))+(((-1.0)*x14576*x14577))+((r22*x14573)));
evalcond[1]=(((r11*x14579))+((r12*x14573))+(((-1.0)*x14575*x14577)));
evalcond[2]=((-1.0)+((r02*x14573))+(((-1.0)*x14574*x14577))+((r01*x14579)));
evalcond[3]=((((-1.0)*r02*x14577))+(((-1.0)*x14574*x14578))+((r01*x14580)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x14577))+((cj1*sj2))+(((-1.0)*x14576*x14578))+((r21*x14580)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x14577))+((r11*x14580))+((cj1*cj2))+(((-1.0)*x14575*x14578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14581 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14581.valid){
continue;
}
CheckValue<IkReal> x14582=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14581.value)+(((1.5707963267949)*(x14582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14583=IKcos(j4);
IkReal x14584=IKsin(j4);
IkReal x14585=(cj5*r00);
IkReal x14586=(cj5*r10);
IkReal x14587=(cj5*r20);
IkReal x14588=((1.0)*x14583);
IkReal x14589=((1.0)*x14584);
IkReal x14590=(sj5*x14583);
IkReal x14591=(sj5*x14584);
evalcond[0]=((((-1.0)*x14587*x14588))+((r22*x14584))+((r21*x14590)));
evalcond[1]=(((r11*x14590))+(((-1.0)*x14586*x14588))+((r12*x14584)));
evalcond[2]=((-1.0)+((r02*x14584))+(((-1.0)*x14585*x14588))+((r01*x14590)));
evalcond[3]=((((-1.0)*r02*x14588))+(((-1.0)*x14585*x14589))+((r01*x14591)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14587*x14589))+((cj1*sj2))+((r21*x14591))+(((-1.0)*r22*x14588)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x14588))+((cj1*cj2))+((r11*x14591))+(((-1.0)*x14586*x14589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14592=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x14592;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14593=((1.0)*cj5);
IkReal x14594=((((-1.0)*r21*x14593))+(((-1.0)*r20*sj5)));
j4eval[0]=x14594;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x14593))+((r11*sj5))))));
j4eval[2]=IKsign(x14594);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14595=cj5*cj5;
IkReal x14596=r01*r01;
IkReal x14597=(cj5*r00);
IkReal x14598=(r01*sj5);
IkReal x14599=((((-1.0)*x14595*x14596))+(((-2.0)*x14597*x14598))+x14596+((x14595*(r00*r00)))+(r02*r02));
j4eval[0]=x14599;
j4eval[1]=IKsign(x14599);
j4eval[2]=((IKabs(((((-1.0)*x14597))+x14598)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14600=cj5*cj5;
IkReal x14601=r01*r01;
IkReal x14602=(r01*sj5);
IkReal x14603=(cj5*r00);
CheckValue<IkReal> x14604=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14600*x14601))+x14601+(r02*r02)+(((-2.0)*x14602*x14603))+((x14600*(r00*r00))))),-1);
if(!x14604.valid){
continue;
}
CheckValue<IkReal> x14605 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x14603))+x14602)),IKFAST_ATAN2_MAGTHRESH);
if(!x14605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14604.value)))+(x14605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14606=IKcos(j4);
IkReal x14607=IKsin(j4);
IkReal x14608=(cj5*r00);
IkReal x14609=((1.0)*x14606);
IkReal x14610=(sj5*x14606);
IkReal x14611=(cj5*x14607);
IkReal x14612=((1.0)*sj5*x14607);
evalcond[0]=(((r21*x14610))+((r22*x14607))+(((-1.0)*cj5*r20*x14609)));
evalcond[1]=((((-1.0)*cj5*r10*x14609))+((r11*x14610))+((r12*x14607)));
evalcond[2]=(((r02*x14606))+((x14607*x14608))+(((-1.0)*r01*x14612)));
evalcond[3]=((-1.0)+((r02*x14607))+(((-1.0)*x14608*x14609))+((r01*x14610)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x14606))+((r20*x14611))+(((-1.0)*r21*x14612)));
evalcond[5]=(((r10*x14611))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*x14612))+((cj1*cj2))+((r12*x14606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14613=((1.0)*cj5);
CheckValue<IkReal> x14614 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x14613))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14614.valid){
continue;
}
CheckValue<IkReal> x14615=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14613))+(((-1.0)*r20*sj5)))),-1);
if(!x14615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14614.value)+(((1.5707963267949)*(x14615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14616=IKcos(j4);
IkReal x14617=IKsin(j4);
IkReal x14618=(cj5*r00);
IkReal x14619=((1.0)*x14616);
IkReal x14620=(sj5*x14616);
IkReal x14621=(cj5*x14617);
IkReal x14622=((1.0)*sj5*x14617);
evalcond[0]=(((r21*x14620))+((r22*x14617))+(((-1.0)*cj5*r20*x14619)));
evalcond[1]=(((r11*x14620))+(((-1.0)*cj5*r10*x14619))+((r12*x14617)));
evalcond[2]=(((r02*x14616))+((x14617*x14618))+(((-1.0)*r01*x14622)));
evalcond[3]=((-1.0)+((r02*x14617))+((r01*x14620))+(((-1.0)*x14618*x14619)));
evalcond[4]=(((cj2*sj1))+((r20*x14621))+((cj1*sj2))+(((-1.0)*r21*x14622))+((r22*x14616)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r10*x14621))+((cj1*cj2))+(((-1.0)*r11*x14622))+((r12*x14616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14623 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14623.valid){
continue;
}
CheckValue<IkReal> x14624=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14623.value)+(((1.5707963267949)*(x14624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14625=IKcos(j4);
IkReal x14626=IKsin(j4);
IkReal x14627=(cj5*r00);
IkReal x14628=((1.0)*x14625);
IkReal x14629=(sj5*x14625);
IkReal x14630=(cj5*x14626);
IkReal x14631=((1.0)*sj5*x14626);
evalcond[0]=(((r21*x14629))+(((-1.0)*cj5*r20*x14628))+((r22*x14626)));
evalcond[1]=((((-1.0)*cj5*r10*x14628))+((r11*x14629))+((r12*x14626)));
evalcond[2]=((((-1.0)*r01*x14631))+((x14626*x14627))+((r02*x14625)));
evalcond[3]=((-1.0)+((r02*x14626))+((r01*x14629))+(((-1.0)*x14627*x14628)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*x14631))+((cj1*sj2))+((r20*x14630))+((r22*x14625)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r10*x14630))+((r12*x14625))+((cj1*cj2))+(((-1.0)*r11*x14631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14633 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14633)==0){
continue;
}
IkReal x14632=pow(x14633,-0.5);
CheckValue<IkReal> x14634 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14634.valid){
continue;
}
IkReal gconst94=((-1.0)*(x14634.value));
IkReal gconst95=((-1.0)*r11*x14632);
IkReal gconst96=(r10*x14632);
CheckValue<IkReal> x14635 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14635.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14635.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14638 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14638.valid){
continue;
}
IkReal x14636=((-1.0)*(x14638.value));
IkReal x14637=x14632;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst95;
cj5=gconst96;
j5=x14636;
IkReal gconst94=x14636;
IkReal gconst95=((-1.0)*r11*x14637);
IkReal gconst96=(r10*x14637);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14641 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14641.valid){
continue;
}
IkReal x14639=((-1.0)*(x14641.value));
IkReal x14640=x14632;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst95;
cj5=gconst96;
j5=x14639;
IkReal gconst94=x14639;
IkReal gconst95=((-1.0)*r11*x14640);
IkReal gconst96=(r10*x14640);
CheckValue<IkReal> x14649=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14649.valid){
continue;
}
IkReal x14642=x14649.value;
IkReal x14643=(cj3*x14642);
IkReal x14644=(r00*x14643);
IkReal x14645=(r21*x14643);
IkReal x14646=(r20*x14643);
IkReal x14647=(r01*x14643);
IkReal x14648=(r10*r11*x14643);
j4eval[0]=IKsign((((r10*r11*r21*x14644))+((r20*x14644*(r10*r10)))+((r01*x14645*(r11*r11)))+((cj3*r02*r22))+((r01*r10*r11*x14646))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14650=gconst96*gconst96;
IkReal x14651=gconst95*gconst95;
IkReal x14652=((1.0)*r00);
IkReal x14653=(cj3*gconst95);
IkReal x14654=((1.0)*r01);
IkReal x14655=(gconst96*r20);
IkReal x14656=(gconst95*sj3);
IkReal x14657=(gconst96*r21);
IkReal x14658=(r20*x14650);
IkReal x14659=(r21*x14651);
CheckValue<IkReal> x14660 = IKatan2WithCheck(IkReal((((cj3*r00*x14659))+((r01*x14653*x14657))+(((-1.0)*cj3*x14654*x14658))+(((-1.0)*x14652*x14653*x14655)))),IkReal(((((-1.0)*r22*x14652*x14653))+(((-1.0)*cj3*gconst96*r22*x14654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14660.valid){
continue;
}
CheckValue<IkReal> x14661=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj3*x14654*x14659))+(((-1.0)*sj3*x14652*x14658))+((r01*x14655*x14656))+(((-1.0)*r02*r22*sj3))+((r00*x14656*x14657)))),-1);
if(!x14661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14660.value)+(((1.5707963267949)*(x14661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14662=IKcos(j4);
IkReal x14663=IKsin(j4);
IkReal x14664=(cj2*sj1);
IkReal x14665=(cj1*sj2);
IkReal x14666=(gconst96*r11);
IkReal x14667=(cj3*gconst96);
IkReal x14668=(sj1*sj2);
IkReal x14669=(gconst95*sj3);
IkReal x14670=(cj3*gconst95);
IkReal x14671=(cj1*cj2);
IkReal x14672=(gconst96*sj3);
IkReal x14673=((1.0)*gconst96*r20);
IkReal x14674=((1.0)*x14663);
IkReal x14675=(gconst95*x14662);
IkReal x14676=(r22*x14662);
IkReal x14677=((1.0)*x14662);
IkReal x14678=(cj3*x14662);
IkReal x14679=(x14664+x14665);
evalcond[0]=(((r21*x14675))+((r22*x14663))+(((-1.0)*x14662*x14673)));
evalcond[1]=((((-1.0)*gconst96*r10*x14677))+((r11*x14675))+((r12*x14663)));
evalcond[2]=((-1.0)+((r02*x14663))+(((-1.0)*gconst96*r00*x14677))+((r01*x14675)));
evalcond[3]=(((r02*x14678))+((r01*x14672))+((r00*x14669))+(((-1.0)*r01*x14670*x14674))+((r00*x14663*x14667)));
evalcond[4]=(((r00*x14670))+(((-1.0)*r02*sj3*x14677))+((r01*x14663*x14669))+((r01*x14667))+(((-1.0)*r00*x14672*x14674)));
evalcond[5]=(((r10*x14663*x14667))+((r10*x14669))+x14679+(((-1.0)*r11*x14670*x14674))+((r12*x14678))+((sj3*x14666)));
evalcond[6]=(((r20*x14670))+((r21*x14663*x14669))+((r21*x14667))+(((-1.0)*r20*x14672*x14674))+(((-1.0)*sj3*x14676))+x14679);
evalcond[7]=((((-1.0)*r21*x14670*x14674))+((r21*x14672))+(((-1.0)*x14671))+x14668+((cj3*x14676))+((r20*x14663*x14667))+((r20*x14669)));
evalcond[8]=(((r10*x14670))+(((-1.0)*r10*x14672*x14674))+(((-1.0)*r12*sj3*x14677))+(((-1.0)*x14668))+((cj3*x14666))+((r11*x14663*x14669))+x14671);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14680=gconst96*gconst96;
IkReal x14681=gconst95*gconst95;
IkReal x14682=(r22*sj3);
IkReal x14683=(cj3*r21);
IkReal x14684=(r21*sj3);
IkReal x14685=(gconst95*gconst96);
IkReal x14686=((1.0)*gconst95*r00);
IkReal x14687=((1.0)*r01*r20);
CheckValue<IkReal> x14688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14683*x14685))+((cj3*r00*r20*x14680))+((r01*x14681*x14683))+((cj3*r02*r22))+(((-1.0)*cj3*x14685*x14687)))),-1);
if(!x14688.valid){
continue;
}
CheckValue<IkReal> x14689 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x14680*x14687))+((r00*x14681*x14684))+((r01*x14684*x14685))+(((-1.0)*r00*r20*sj3*x14685)))),IkReal(((((-1.0)*x14682*x14686))+(((-1.0)*gconst96*r01*x14682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14688.value)))+(x14689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14690=IKcos(j4);
IkReal x14691=IKsin(j4);
IkReal x14692=(cj2*sj1);
IkReal x14693=(cj1*sj2);
IkReal x14694=(gconst96*r11);
IkReal x14695=(cj3*gconst96);
IkReal x14696=(sj1*sj2);
IkReal x14697=(gconst95*sj3);
IkReal x14698=(cj3*gconst95);
IkReal x14699=(cj1*cj2);
IkReal x14700=(gconst96*sj3);
IkReal x14701=((1.0)*gconst96*r20);
IkReal x14702=((1.0)*x14691);
IkReal x14703=(gconst95*x14690);
IkReal x14704=(r22*x14690);
IkReal x14705=((1.0)*x14690);
IkReal x14706=(cj3*x14690);
IkReal x14707=(x14693+x14692);
evalcond[0]=(((r22*x14691))+(((-1.0)*x14690*x14701))+((r21*x14703)));
evalcond[1]=((((-1.0)*gconst96*r10*x14705))+((r12*x14691))+((r11*x14703)));
evalcond[2]=((-1.0)+((r01*x14703))+(((-1.0)*gconst96*r00*x14705))+((r02*x14691)));
evalcond[3]=(((r00*x14697))+((r01*x14700))+((r02*x14706))+(((-1.0)*r01*x14698*x14702))+((r00*x14691*x14695)));
evalcond[4]=(((r00*x14698))+((r01*x14695))+(((-1.0)*r02*sj3*x14705))+(((-1.0)*r00*x14700*x14702))+((r01*x14691*x14697)));
evalcond[5]=((((-1.0)*r11*x14698*x14702))+((r10*x14691*x14695))+((sj3*x14694))+((r12*x14706))+x14707+((r10*x14697)));
evalcond[6]=(((r20*x14698))+((r21*x14691*x14697))+(((-1.0)*r20*x14700*x14702))+x14707+((r21*x14695))+(((-1.0)*sj3*x14704)));
evalcond[7]=(((r20*x14691*x14695))+((cj3*x14704))+((r20*x14697))+(((-1.0)*r21*x14698*x14702))+((r21*x14700))+x14696+(((-1.0)*x14699)));
evalcond[8]=((((-1.0)*r10*x14700*x14702))+((r11*x14691*x14697))+((cj3*x14694))+(((-1.0)*r12*sj3*x14705))+x14699+((r10*x14698))+(((-1.0)*x14696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14708=((1.0)*gconst96);
CheckValue<IkReal> x14709 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x14708))+((gconst95*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14709.valid){
continue;
}
CheckValue<IkReal> x14710=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r20))+(((-1.0)*r21*x14708)))),-1);
if(!x14710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14709.value)+(((1.5707963267949)*(x14710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14711=IKcos(j4);
IkReal x14712=IKsin(j4);
IkReal x14713=(cj2*sj1);
IkReal x14714=(cj1*sj2);
IkReal x14715=(gconst96*r11);
IkReal x14716=(cj3*gconst96);
IkReal x14717=(sj1*sj2);
IkReal x14718=(gconst95*sj3);
IkReal x14719=(cj3*gconst95);
IkReal x14720=(cj1*cj2);
IkReal x14721=(gconst96*sj3);
IkReal x14722=((1.0)*gconst96*r20);
IkReal x14723=((1.0)*x14712);
IkReal x14724=(gconst95*x14711);
IkReal x14725=(r22*x14711);
IkReal x14726=((1.0)*x14711);
IkReal x14727=(cj3*x14711);
IkReal x14728=(x14713+x14714);
evalcond[0]=(((r21*x14724))+((r22*x14712))+(((-1.0)*x14711*x14722)));
evalcond[1]=(((r12*x14712))+(((-1.0)*gconst96*r10*x14726))+((r11*x14724)));
evalcond[2]=((-1.0)+(((-1.0)*gconst96*r00*x14726))+((r01*x14724))+((r02*x14712)));
evalcond[3]=(((r01*x14721))+((r00*x14712*x14716))+(((-1.0)*r01*x14719*x14723))+((r02*x14727))+((r00*x14718)));
evalcond[4]=(((r01*x14712*x14718))+(((-1.0)*r02*sj3*x14726))+((r00*x14719))+(((-1.0)*r00*x14721*x14723))+((r01*x14716)));
evalcond[5]=(((sj3*x14715))+((r10*x14718))+x14728+((r10*x14712*x14716))+(((-1.0)*r11*x14719*x14723))+((r12*x14727)));
evalcond[6]=(((r20*x14719))+(((-1.0)*r20*x14721*x14723))+(((-1.0)*sj3*x14725))+((r21*x14716))+((r21*x14712*x14718))+x14728);
evalcond[7]=((((-1.0)*x14720))+((r21*x14721))+((r20*x14718))+((r20*x14712*x14716))+(((-1.0)*r21*x14719*x14723))+((cj3*x14725))+x14717);
evalcond[8]=(((cj3*x14715))+(((-1.0)*r12*sj3*x14726))+(((-1.0)*r10*x14721*x14723))+((r10*x14719))+(((-1.0)*x14717))+x14720+((r11*x14712*x14718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14730 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14730)==0){
continue;
}
IkReal x14729=pow(x14730,-0.5);
CheckValue<IkReal> x14731 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14731.valid){
continue;
}
IkReal gconst97=((3.14159265358979)+(((-1.0)*(x14731.value))));
IkReal gconst98=((1.0)*r11*x14729);
IkReal gconst99=((-1.0)*r10*x14729);
CheckValue<IkReal> x14732 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14732.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14732.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14735 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14735.valid){
continue;
}
IkReal x14733=((1.0)*(x14735.value));
IkReal x14734=x14729;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst98;
cj5=gconst99;
j5=((3.14159265)+(((-1.0)*x14733)));
IkReal gconst97=((3.14159265358979)+(((-1.0)*x14733)));
IkReal gconst98=((1.0)*r11*x14734);
IkReal gconst99=((-1.0)*r10*x14734);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14738 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14738.valid){
continue;
}
IkReal x14736=((1.0)*(x14738.value));
IkReal x14737=x14729;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst98;
cj5=gconst99;
j5=((3.14159265)+(((-1.0)*x14736)));
IkReal gconst97=((3.14159265358979)+(((-1.0)*x14736)));
IkReal gconst98=((1.0)*r11*x14737);
IkReal gconst99=((-1.0)*r10*x14737);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14739=gconst98*gconst98;
IkReal x14740=gconst99*gconst99;
IkReal x14741=(r22*sj3);
IkReal x14742=(r00*sj3);
IkReal x14743=(cj3*r20);
IkReal x14744=(r01*sj3);
IkReal x14745=((1.0)*r20);
IkReal x14746=((1.0)*r00);
IkReal x14747=((1.0)*gconst99*r01);
IkReal x14748=(r21*x14739);
IkReal x14749=(gconst98*gconst99*r21);
CheckValue<IkReal> x14750 = IKatan2WithCheck(IkReal((((x14742*x14748))+(((-1.0)*gconst98*gconst99*x14742*x14745))+(((-1.0)*x14740*x14744*x14745))+((x14744*x14749)))),IkReal(((((-1.0)*gconst98*x14741*x14746))+(((-1.0)*x14741*x14747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14750.valid){
continue;
}
CheckValue<IkReal> x14751=IKPowWithIntegerCheck(IKsign((((cj3*r01*x14748))+(((-1.0)*cj3*x14746*x14749))+((r00*x14740*x14743))+((cj3*r02*r22))+(((-1.0)*gconst98*x14743*x14747)))),-1);
if(!x14751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14750.value)+(((1.5707963267949)*(x14751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14752=IKcos(j4);
IkReal x14753=IKsin(j4);
IkReal x14754=(cj2*sj1);
IkReal x14755=(cj1*sj2);
IkReal x14756=(gconst98*sj3);
IkReal x14757=(sj1*sj2);
IkReal x14758=(cj3*r00);
IkReal x14759=((1.0)*sj3);
IkReal x14760=(cj1*cj2);
IkReal x14761=(cj3*r20);
IkReal x14762=(gconst99*sj3);
IkReal x14763=(cj3*r10);
IkReal x14764=(cj3*gconst99);
IkReal x14765=(gconst98*x14752);
IkReal x14766=(gconst99*x14753);
IkReal x14767=(r22*x14752);
IkReal x14768=(r12*x14752);
IkReal x14769=(r02*x14752);
IkReal x14770=(x14754+x14755);
IkReal x14771=((1.0)*gconst99*x14752);
IkReal x14772=((1.0)*cj3*gconst98*x14753);
evalcond[0]=((((-1.0)*r20*x14771))+((r22*x14753))+((r21*x14765)));
evalcond[1]=(((r11*x14765))+((r12*x14753))+(((-1.0)*r10*x14771)));
evalcond[2]=((-1.0)+((r01*x14765))+((r02*x14753))+(((-1.0)*r00*x14771)));
evalcond[3]=(((r01*x14762))+((cj3*x14769))+((x14758*x14766))+(((-1.0)*r01*x14772))+((r00*x14756)));
evalcond[4]=(((gconst98*x14758))+((r01*x14764))+((r01*x14753*x14756))+(((-1.0)*x14759*x14769))+(((-1.0)*r00*x14759*x14766)));
evalcond[5]=(((cj3*x14768))+((r11*x14762))+x14770+(((-1.0)*r11*x14772))+((r10*x14756))+((x14763*x14766)));
evalcond[6]=((((-1.0)*x14759*x14767))+((r21*x14764))+x14770+(((-1.0)*r20*x14759*x14766))+((r21*x14753*x14756))+((gconst98*x14761)));
evalcond[7]=(((x14761*x14766))+((r20*x14756))+(((-1.0)*x14760))+((cj3*x14767))+((r21*x14762))+x14757+(((-1.0)*r21*x14772)));
evalcond[8]=((((-1.0)*x14759*x14768))+((r11*x14764))+x14760+(((-1.0)*r10*x14759*x14766))+((r11*x14753*x14756))+(((-1.0)*x14757))+((gconst98*x14763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14773=((1.0)*gconst99);
CheckValue<IkReal> x14774 = IKatan2WithCheck(IkReal((((gconst98*r11))+(((-1.0)*r10*x14773)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14774.valid){
continue;
}
CheckValue<IkReal> x14775=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst98*r20))+(((-1.0)*r21*x14773)))),-1);
if(!x14775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14774.value)+(((1.5707963267949)*(x14775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14776=IKcos(j4);
IkReal x14777=IKsin(j4);
IkReal x14778=(cj2*sj1);
IkReal x14779=(cj1*sj2);
IkReal x14780=(gconst98*sj3);
IkReal x14781=(sj1*sj2);
IkReal x14782=(cj3*r00);
IkReal x14783=((1.0)*sj3);
IkReal x14784=(cj1*cj2);
IkReal x14785=(cj3*r20);
IkReal x14786=(gconst99*sj3);
IkReal x14787=(cj3*r10);
IkReal x14788=(cj3*gconst99);
IkReal x14789=(gconst98*x14776);
IkReal x14790=(gconst99*x14777);
IkReal x14791=(r22*x14776);
IkReal x14792=(r12*x14776);
IkReal x14793=(r02*x14776);
IkReal x14794=(x14778+x14779);
IkReal x14795=((1.0)*gconst99*x14776);
IkReal x14796=((1.0)*cj3*gconst98*x14777);
evalcond[0]=(((r22*x14777))+(((-1.0)*r20*x14795))+((r21*x14789)));
evalcond[1]=(((r12*x14777))+(((-1.0)*r10*x14795))+((r11*x14789)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14795))+((r01*x14789))+((r02*x14777)));
evalcond[3]=(((r01*x14786))+(((-1.0)*r01*x14796))+((r00*x14780))+((x14782*x14790))+((cj3*x14793)));
evalcond[4]=(((r01*x14788))+((r01*x14777*x14780))+(((-1.0)*x14783*x14793))+(((-1.0)*r00*x14783*x14790))+((gconst98*x14782)));
evalcond[5]=(((r10*x14780))+((cj3*x14792))+((x14787*x14790))+(((-1.0)*r11*x14796))+((r11*x14786))+x14794);
evalcond[6]=((((-1.0)*r20*x14783*x14790))+((r21*x14777*x14780))+(((-1.0)*x14783*x14791))+((r21*x14788))+x14794+((gconst98*x14785)));
evalcond[7]=(((x14785*x14790))+(((-1.0)*x14784))+((cj3*x14791))+((r20*x14780))+(((-1.0)*r21*x14796))+((r21*x14786))+x14781);
evalcond[8]=(((r11*x14777*x14780))+(((-1.0)*x14781))+(((-1.0)*r10*x14783*x14790))+(((-1.0)*x14783*x14792))+((r11*x14788))+x14784+((gconst98*x14787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14797=IKPowWithIntegerCheck(IKsign((((gconst98*r10))+((gconst99*r11)))),-1);
if(!x14797.valid){
continue;
}
CheckValue<IkReal> x14798 = IKatan2WithCheck(IkReal(((((-1.0)*gconst99*r20))+((gconst98*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14797.value)))+(x14798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14799=IKcos(j4);
IkReal x14800=IKsin(j4);
IkReal x14801=(cj2*sj1);
IkReal x14802=(cj1*sj2);
IkReal x14803=(gconst98*sj3);
IkReal x14804=(sj1*sj2);
IkReal x14805=(cj3*r00);
IkReal x14806=((1.0)*sj3);
IkReal x14807=(cj1*cj2);
IkReal x14808=(cj3*r20);
IkReal x14809=(gconst99*sj3);
IkReal x14810=(cj3*r10);
IkReal x14811=(cj3*gconst99);
IkReal x14812=(gconst98*x14799);
IkReal x14813=(gconst99*x14800);
IkReal x14814=(r22*x14799);
IkReal x14815=(r12*x14799);
IkReal x14816=(r02*x14799);
IkReal x14817=(x14802+x14801);
IkReal x14818=((1.0)*gconst99*x14799);
IkReal x14819=((1.0)*cj3*gconst98*x14800);
evalcond[0]=((((-1.0)*r20*x14818))+((r21*x14812))+((r22*x14800)));
evalcond[1]=((((-1.0)*r10*x14818))+((r11*x14812))+((r12*x14800)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14818))+((r01*x14812))+((r02*x14800)));
evalcond[3]=((((-1.0)*r01*x14819))+((r01*x14809))+((r00*x14803))+((x14805*x14813))+((cj3*x14816)));
evalcond[4]=((((-1.0)*x14806*x14816))+((r01*x14811))+(((-1.0)*r00*x14806*x14813))+((r01*x14800*x14803))+((gconst98*x14805)));
evalcond[5]=(x14817+((r10*x14803))+(((-1.0)*r11*x14819))+((x14810*x14813))+((r11*x14809))+((cj3*x14815)));
evalcond[6]=((((-1.0)*x14806*x14814))+x14817+((r21*x14811))+(((-1.0)*r20*x14806*x14813))+((gconst98*x14808))+((r21*x14800*x14803)));
evalcond[7]=((((-1.0)*r21*x14819))+((x14808*x14813))+((r21*x14809))+x14804+((r20*x14803))+(((-1.0)*x14807))+((cj3*x14814)));
evalcond[8]=((((-1.0)*x14806*x14815))+x14807+(((-1.0)*r10*x14806*x14813))+((r11*x14811))+(((-1.0)*x14804))+((r11*x14800*x14803))+((gconst98*x14810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14820=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14820);
rxp0_2=(py*r00);
rxp1_0=(r21*x14820);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14821=(cj5*r00);
IkReal x14822=(r01*sj5);
j4eval[0]=(((cj3*x14821))+(((-1.0)*cj3*x14822)));
j4eval[1]=(x14822+(((-1.0)*x14821)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14823=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14823);
rxp0_2=(py*r00);
rxp1_0=(r21*x14823);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14824=(r01*sj5);
IkReal x14825=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*sj3*x14825))+((sj3*x14824)));
j4eval[1]=(x14824+(((-1.0)*x14825)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14826=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14826);
rxp0_2=(py*r00);
rxp1_0=(r21*x14826);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj3*cj5*r00))+(((-1.0)*cj3*r01*sj5)));
j4eval[1]=cj3;
j4eval[2]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14827=((1.0)*r01);
CheckValue<IkReal> x14828=IKPowWithIntegerCheck((((cj3*cj5*r00))+(((-1.0)*cj3*sj5*x14827))),-1);
if(!x14828.valid){
continue;
}
CheckValue<IkReal> x14829=IKPowWithIntegerCheck(cj3,-1);
if(!x14829.valid){
continue;
}
CheckValue<IkReal> x14830=IKPowWithIntegerCheck(r12,-1);
if(!x14830.valid){
continue;
}
if( IKabs(((x14828.value)*(((((-1.0)*cj5*sj3*x14827))+(((-1.0)*r00*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14829.value)*(x14830.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14828.value)*(((((-1.0)*cj5*sj3*x14827))+(((-1.0)*r00*sj3*sj5))))))+IKsqr(((x14829.value)*(x14830.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14828.value)*(((((-1.0)*cj5*sj3*x14827))+(((-1.0)*r00*sj3*sj5))))), ((x14829.value)*(x14830.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14831=IKcos(j4);
IkReal x14832=IKsin(j4);
IkReal x14833=(cj2*sj1);
IkReal x14834=(cj1*sj2);
IkReal x14835=(cj5*r00);
IkReal x14836=(sj1*sj2);
IkReal x14837=(cj5*r01);
IkReal x14838=(cj5*r20);
IkReal x14839=(r00*sj5);
IkReal x14840=(cj1*cj2);
IkReal x14841=(r01*sj5);
IkReal x14842=(cj5*r21);
IkReal x14843=(r20*sj5);
IkReal x14844=(r21*sj5);
IkReal x14845=((1.0)*x14831);
IkReal x14846=(sj5*x14831);
IkReal x14847=(cj3*x14832);
IkReal x14848=(sj3*x14832);
IkReal x14849=(x14833+x14834);
evalcond[0]=(r12*x14832);
evalcond[1]=(x14849+((cj3*r12*x14831)));
evalcond[2]=(((x14831*x14844))+(((-1.0)*x14838*x14845)));
evalcond[3]=((-1.0)+(((-1.0)*x14835*x14845))+((x14831*x14841)));
evalcond[4]=((((-1.0)*x14836))+x14840+(((-1.0)*r12*sj3*x14845)));
evalcond[5]=((((-1.0)*x14841*x14847))+((sj3*x14839))+((sj3*x14837))+((x14835*x14847)));
evalcond[6]=(((x14841*x14848))+(((-1.0)*x14835*x14848))+((cj3*x14839))+((cj3*x14837)));
evalcond[7]=(((x14844*x14848))+x14849+((cj3*x14842))+((cj3*x14843))+(((-1.0)*x14838*x14848)));
evalcond[8]=((((-1.0)*x14840))+x14836+((sj3*x14842))+((sj3*x14843))+((x14838*x14847))+(((-1.0)*x14844*x14847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14850=((1.0)*cj3);
IkReal x14851=(r01*sj5);
IkReal x14852=((1.0)*cj5*r00);
CheckValue<IkReal> x14853=IKPowWithIntegerCheck(((((-1.0)*sj3*x14852))+((sj3*x14851))),-1);
if(!x14853.valid){
continue;
}
CheckValue<IkReal> x14854=IKPowWithIntegerCheck((x14851+(((-1.0)*x14852))),-1);
if(!x14854.valid){
continue;
}
if( IKabs(((x14853.value)*(((((-1.0)*cj5*r01*x14850))+(((-1.0)*r00*sj5*x14850)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x14854.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14853.value)*(((((-1.0)*cj5*r01*x14850))+(((-1.0)*r00*sj5*x14850))))))+IKsqr(x14854.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14853.value)*(((((-1.0)*cj5*r01*x14850))+(((-1.0)*r00*sj5*x14850))))), x14854.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14855=IKcos(j4);
IkReal x14856=IKsin(j4);
IkReal x14857=(cj2*sj1);
IkReal x14858=(cj1*sj2);
IkReal x14859=(cj5*r00);
IkReal x14860=(sj1*sj2);
IkReal x14861=(cj5*r01);
IkReal x14862=(cj5*r20);
IkReal x14863=(r00*sj5);
IkReal x14864=(cj1*cj2);
IkReal x14865=(r01*sj5);
IkReal x14866=(cj5*r21);
IkReal x14867=(r20*sj5);
IkReal x14868=(r21*sj5);
IkReal x14869=((1.0)*x14855);
IkReal x14870=(sj5*x14855);
IkReal x14871=(cj3*x14856);
IkReal x14872=(sj3*x14856);
IkReal x14873=(x14857+x14858);
evalcond[0]=(r12*x14856);
evalcond[1]=(x14873+((cj3*r12*x14855)));
evalcond[2]=(((x14855*x14868))+(((-1.0)*x14862*x14869)));
evalcond[3]=((-1.0)+((x14855*x14865))+(((-1.0)*x14859*x14869)));
evalcond[4]=(x14864+(((-1.0)*r12*sj3*x14869))+(((-1.0)*x14860)));
evalcond[5]=((((-1.0)*x14865*x14871))+((x14859*x14871))+((sj3*x14863))+((sj3*x14861)));
evalcond[6]=(((x14865*x14872))+(((-1.0)*x14859*x14872))+((cj3*x14861))+((cj3*x14863)));
evalcond[7]=(((x14868*x14872))+(((-1.0)*x14862*x14872))+x14873+((cj3*x14866))+((cj3*x14867)));
evalcond[8]=(x14860+((x14862*x14871))+((sj3*x14867))+((sj3*x14866))+(((-1.0)*x14868*x14871))+(((-1.0)*x14864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14874=(cj5*r00);
IkReal x14875=(r01*sj5);
IkReal x14876=((1.0)*sj3);
CheckValue<IkReal> x14877=IKPowWithIntegerCheck(((((-1.0)*cj3*x14875))+((cj3*x14874))),-1);
if(!x14877.valid){
continue;
}
CheckValue<IkReal> x14878=IKPowWithIntegerCheck((x14875+(((-1.0)*x14874))),-1);
if(!x14878.valid){
continue;
}
if( IKabs(((x14877.value)*(((((-1.0)*cj5*r01*x14876))+(((-1.0)*r00*sj5*x14876)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x14878.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14877.value)*(((((-1.0)*cj5*r01*x14876))+(((-1.0)*r00*sj5*x14876))))))+IKsqr(x14878.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14877.value)*(((((-1.0)*cj5*r01*x14876))+(((-1.0)*r00*sj5*x14876))))), x14878.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14879=IKcos(j4);
IkReal x14880=IKsin(j4);
IkReal x14881=(cj2*sj1);
IkReal x14882=(cj1*sj2);
IkReal x14883=(cj5*r00);
IkReal x14884=(sj1*sj2);
IkReal x14885=(cj5*r01);
IkReal x14886=(cj5*r20);
IkReal x14887=(r00*sj5);
IkReal x14888=(cj1*cj2);
IkReal x14889=(r01*sj5);
IkReal x14890=(cj5*r21);
IkReal x14891=(r20*sj5);
IkReal x14892=(r21*sj5);
IkReal x14893=((1.0)*x14879);
IkReal x14894=(sj5*x14879);
IkReal x14895=(cj3*x14880);
IkReal x14896=(sj3*x14880);
IkReal x14897=(x14882+x14881);
evalcond[0]=(r12*x14880);
evalcond[1]=(((cj3*r12*x14879))+x14897);
evalcond[2]=(((x14879*x14892))+(((-1.0)*x14886*x14893)));
evalcond[3]=((-1.0)+((x14879*x14889))+(((-1.0)*x14883*x14893)));
evalcond[4]=((((-1.0)*r12*sj3*x14893))+x14888+(((-1.0)*x14884)));
evalcond[5]=((((-1.0)*x14889*x14895))+((x14883*x14895))+((sj3*x14885))+((sj3*x14887)));
evalcond[6]=(((x14889*x14896))+(((-1.0)*x14883*x14896))+((cj3*x14887))+((cj3*x14885)));
evalcond[7]=(x14897+((x14892*x14896))+(((-1.0)*x14886*x14896))+((cj3*x14891))+((cj3*x14890)));
evalcond[8]=(((x14886*x14895))+(((-1.0)*x14892*x14895))+x14884+(((-1.0)*x14888))+((sj3*x14891))+((sj3*x14890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14898=cj5*cj5;
IkReal x14899=((1.0)*r00);
IkReal x14900=(r01*sj3);
IkReal x14901=(sj3*sj5);
IkReal x14902=(r21*sj3);
IkReal x14903=((1.0)*cj5);
IkReal x14904=(cj5*r21*sj5);
IkReal x14905=(cj3*r01*r21);
IkReal x14906=(r20*x14898);
CheckValue<IkReal> x14907=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14898*x14905))+x14905+(((-1.0)*cj3*x14899*x14904))+(((-1.0)*cj3*r01*r20*sj5*x14903))+((cj3*r00*x14906))+((cj3*r02*r22)))),-1);
if(!x14907.valid){
continue;
}
CheckValue<IkReal> x14908 = IKatan2WithCheck(IkReal((((r00*x14902))+(((-1.0)*cj5*r20*x14899*x14901))+(((-1.0)*x14900*x14906))+(((-1.0)*x14898*x14899*x14902))+((x14900*x14904)))),IkReal(((((-1.0)*r22*x14900*x14903))+(((-1.0)*r22*x14899*x14901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14907.value)))+(x14908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14909=IKcos(j4);
IkReal x14910=IKsin(j4);
IkReal x14911=(cj2*sj1);
IkReal x14912=(cj1*sj2);
IkReal x14913=(cj5*r00);
IkReal x14914=(sj1*sj2);
IkReal x14915=(cj5*r01);
IkReal x14916=(cj1*cj2);
IkReal x14917=(cj3*sj5);
IkReal x14918=(cj5*sj3);
IkReal x14919=(sj3*sj5);
IkReal x14920=(cj3*cj5);
IkReal x14921=(cj5*r10);
IkReal x14922=(cj5*r20);
IkReal x14923=((1.0)*x14909);
IkReal x14924=(sj5*x14909);
IkReal x14925=(cj3*x14910);
IkReal x14926=(cj3*x14909);
IkReal x14927=((1.0)*x14910);
IkReal x14928=(x14911+x14912);
evalcond[0]=((((-1.0)*x14922*x14923))+((r22*x14910))+((r21*x14924)));
evalcond[1]=(((r12*x14910))+((r11*x14924))+(((-1.0)*x14921*x14923)));
evalcond[2]=((-1.0)+((r02*x14910))+((r01*x14924))+(((-1.0)*x14913*x14923)));
evalcond[3]=(((r00*x14919))+((sj3*x14915))+((x14913*x14925))+((r02*x14926))+(((-1.0)*r01*x14917*x14927)));
evalcond[4]=(((cj3*x14915))+((r00*x14917))+(((-1.0)*r02*sj3*x14923))+(((-1.0)*sj3*x14913*x14927))+((r01*x14910*x14919)));
evalcond[5]=(((r10*x14919))+x14928+((r11*x14918))+((r12*x14926))+((r10*x14910*x14920))+(((-1.0)*r11*x14917*x14927)));
evalcond[6]=(x14928+(((-1.0)*r22*sj3*x14923))+((r21*x14910*x14919))+((r21*x14920))+((r20*x14917))+(((-1.0)*r20*x14918*x14927)));
evalcond[7]=(((r21*x14918))+x14914+(((-1.0)*x14916))+((r20*x14910*x14920))+((r20*x14919))+((r22*x14926))+(((-1.0)*r21*x14917*x14927)));
evalcond[8]=(((r10*x14917))+(((-1.0)*r12*sj3*x14923))+(((-1.0)*r10*x14918*x14927))+x14916+(((-1.0)*x14914))+((r11*x14910*x14919))+((r11*x14920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14929=((1.0)*cj5);
CheckValue<IkReal> x14930=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14929))+(((-1.0)*r20*sj5)))),-1);
if(!x14930.valid){
continue;
}
CheckValue<IkReal> x14931 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x14929))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14930.value)))+(x14931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14932=IKcos(j4);
IkReal x14933=IKsin(j4);
IkReal x14934=(cj2*sj1);
IkReal x14935=(cj1*sj2);
IkReal x14936=(cj5*r00);
IkReal x14937=(sj1*sj2);
IkReal x14938=(cj5*r01);
IkReal x14939=(cj1*cj2);
IkReal x14940=(cj3*sj5);
IkReal x14941=(cj5*sj3);
IkReal x14942=(sj3*sj5);
IkReal x14943=(cj3*cj5);
IkReal x14944=(cj5*r10);
IkReal x14945=(cj5*r20);
IkReal x14946=((1.0)*x14932);
IkReal x14947=(sj5*x14932);
IkReal x14948=(cj3*x14933);
IkReal x14949=(cj3*x14932);
IkReal x14950=((1.0)*x14933);
IkReal x14951=(x14934+x14935);
evalcond[0]=((((-1.0)*x14945*x14946))+((r22*x14933))+((r21*x14947)));
evalcond[1]=(((r12*x14933))+(((-1.0)*x14944*x14946))+((r11*x14947)));
evalcond[2]=((-1.0)+(((-1.0)*x14936*x14946))+((r01*x14947))+((r02*x14933)));
evalcond[3]=(((r00*x14942))+((r02*x14949))+((sj3*x14938))+((x14936*x14948))+(((-1.0)*r01*x14940*x14950)));
evalcond[4]=((((-1.0)*r02*sj3*x14946))+((r00*x14940))+((cj3*x14938))+(((-1.0)*sj3*x14936*x14950))+((r01*x14933*x14942)));
evalcond[5]=(((r12*x14949))+x14951+((r10*x14942))+(((-1.0)*r11*x14940*x14950))+((r10*x14933*x14943))+((r11*x14941)));
evalcond[6]=(x14951+(((-1.0)*r20*x14941*x14950))+((r21*x14933*x14942))+(((-1.0)*r22*sj3*x14946))+((r21*x14943))+((r20*x14940)));
evalcond[7]=((((-1.0)*x14939))+(((-1.0)*r21*x14940*x14950))+x14937+((r22*x14949))+((r20*x14933*x14943))+((r21*x14941))+((r20*x14942)));
evalcond[8]=((((-1.0)*x14937))+x14939+((r10*x14940))+(((-1.0)*r12*sj3*x14946))+(((-1.0)*r10*x14941*x14950))+((r11*x14933*x14942))+((r11*x14943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14952 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14952.valid){
continue;
}
CheckValue<IkReal> x14953=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x14953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14952.value)+(((1.5707963267949)*(x14953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14954=IKcos(j4);
IkReal x14955=IKsin(j4);
IkReal x14956=(cj2*sj1);
IkReal x14957=(cj1*sj2);
IkReal x14958=(cj5*r00);
IkReal x14959=(sj1*sj2);
IkReal x14960=(cj5*r01);
IkReal x14961=(cj1*cj2);
IkReal x14962=(cj3*sj5);
IkReal x14963=(cj5*sj3);
IkReal x14964=(sj3*sj5);
IkReal x14965=(cj3*cj5);
IkReal x14966=(cj5*r10);
IkReal x14967=(cj5*r20);
IkReal x14968=((1.0)*x14954);
IkReal x14969=(sj5*x14954);
IkReal x14970=(cj3*x14955);
IkReal x14971=(cj3*x14954);
IkReal x14972=((1.0)*x14955);
IkReal x14973=(x14956+x14957);
evalcond[0]=((((-1.0)*x14967*x14968))+((r22*x14955))+((r21*x14969)));
evalcond[1]=(((r12*x14955))+(((-1.0)*x14966*x14968))+((r11*x14969)));
evalcond[2]=((-1.0)+((r01*x14969))+((r02*x14955))+(((-1.0)*x14958*x14968)));
evalcond[3]=(((x14958*x14970))+((sj3*x14960))+((r02*x14971))+(((-1.0)*r01*x14962*x14972))+((r00*x14964)));
evalcond[4]=(((r01*x14955*x14964))+((cj3*x14960))+(((-1.0)*r02*sj3*x14968))+(((-1.0)*sj3*x14958*x14972))+((r00*x14962)));
evalcond[5]=(x14973+((r12*x14971))+(((-1.0)*r11*x14962*x14972))+((r11*x14963))+((r10*x14955*x14965))+((r10*x14964)));
evalcond[6]=(x14973+(((-1.0)*r22*sj3*x14968))+((r21*x14955*x14964))+(((-1.0)*r20*x14963*x14972))+((r20*x14962))+((r21*x14965)));
evalcond[7]=((((-1.0)*x14961))+((r22*x14971))+x14959+(((-1.0)*r21*x14962*x14972))+((r20*x14964))+((r21*x14963))+((r20*x14955*x14965)));
evalcond[8]=(x14961+(((-1.0)*r10*x14963*x14972))+((r11*x14965))+(((-1.0)*x14959))+(((-1.0)*r12*sj3*x14968))+((r10*x14962))+((r11*x14955*x14964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14974=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14974);
rxp1_1=(px*r21);
rxp1_2=(r11*x14974);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14975=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14975);
rxp1_1=(px*r21);
rxp1_2=(r11*x14975);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14976=((1.0)*cj5);
j4eval[0]=(((r21*sj3*sj5))+(((-1.0)*r20*sj3*x14976)));
j4eval[1]=((((-1.0)*r10*x14976))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14977=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14977);
rxp1_1=(px*r21);
rxp1_2=(r11*x14977);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14978=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14978);
rxp1_1=(px*r21);
rxp1_2=(r11*x14978);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14979=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14979);
rxp1_1=(px*r21);
rxp1_2=(r11*x14979);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14980=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14980);
rxp1_1=(px*r21);
rxp1_2=(r11*x14980);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14983=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x14983.valid){
continue;
}
IkReal x14981=x14983.value;
IkReal x14982=(cj0*x14981);
sj4array[0]=(((cj2*sj1*x14982))+((cj1*sj2*x14982)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14984=IKcos(j4);
IkReal x14985=IKsin(j4);
IkReal x14986=(r21*sj5);
IkReal x14987=((1.0)*cj5*x14984);
evalcond[0]=(r02*x14984);
evalcond[1]=(cj0+((r02*x14985)));
evalcond[2]=(((x14984*x14986))+(((-1.0)*r20*x14987)));
evalcond[3]=((((-1.0)*r10*x14987))+((r11*sj5*x14984)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((cj5*r20*x14985))+(((-1.0)*x14985*x14986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14989=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14989.valid){
continue;
}
IkReal x14988=x14989.value;
sj4array[0]=(((cj1*cj2*x14988))+(((-1.0)*sj1*sj2*x14988)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14990=IKcos(j4);
IkReal x14991=IKsin(j4);
IkReal x14992=(r11*sj5);
IkReal x14993=((1.0)*cj0);
IkReal x14994=((1.0)*cj5*x14990);
evalcond[0]=(r02*x14990);
evalcond[1]=(cj0+((r02*x14991)));
evalcond[2]=(((r21*sj5*x14990))+(((-1.0)*r20*x14994)));
evalcond[3]=(((x14990*x14992))+(((-1.0)*r10*x14994)));
evalcond[4]=((((-1.0)*cj1*sj2*x14993))+(((-1.0)*x14991*x14992))+((cj5*r10*x14991))+(((-1.0)*cj2*sj1*x14993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x14995=IKPowWithIntegerCheck(r02,-1);
if(!x14995.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x14995.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x14996=IKcos(j4);
IkReal x14997=IKsin(j4);
IkReal x14998=((1.0)*cj0);
IkReal x14999=(sj5*x14996);
IkReal x15000=(cj5*x14997);
IkReal x15001=((1.0)*sj5*x14997);
IkReal x15002=((1.0)*cj5*x14996);
evalcond[0]=(r02*x14996);
evalcond[1]=(((r21*x14999))+(((-1.0)*r20*x15002)));
evalcond[2]=(((r11*x14999))+(((-1.0)*r10*x15002)));
evalcond[3]=(((r20*x15000))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x15001)));
evalcond[4]=((((-1.0)*cj1*sj2*x14998))+((r10*x15000))+(((-1.0)*r11*x15001))+(((-1.0)*cj2*sj1*x14998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15003=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15003);
rxp1_1=(px*r21);
rxp1_2=(r11*x15003);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15004=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15004);
rxp1_1=(px*r21);
rxp1_2=(r11*x15004);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15005=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15005);
rxp1_1=(px*r21);
rxp1_2=(r11*x15005);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15008=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15008.valid){
continue;
}
IkReal x15006=x15008.value;
IkReal x15007=(cj0*x15006);
sj4array[0]=(((cj2*sj1*x15007))+((cj1*sj2*x15007)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15009=IKcos(j4);
IkReal x15010=IKsin(j4);
IkReal x15011=(r21*sj5);
IkReal x15012=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x15009);
evalcond[1]=(cj0+((r02*x15010)));
evalcond[2]=(((x15009*x15011))+(((-1.0)*x15009*x15012)));
evalcond[3]=(((r11*sj5*x15009))+(((-1.0)*cj5*r10*x15009)));
evalcond[4]=((((-1.0)*x15010*x15012))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15010*x15011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15014=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15014.valid){
continue;
}
IkReal x15013=x15014.value;
sj4array[0]=(((cj1*cj2*x15013))+(((-1.0)*sj1*sj2*x15013)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15015=IKcos(j4);
IkReal x15016=IKsin(j4);
IkReal x15017=((1.0)*cj5);
IkReal x15018=((1.0)*cj0);
IkReal x15019=(sj5*x15015);
evalcond[0]=((-1.0)*r02*x15015);
evalcond[1]=(cj0+((r02*x15016)));
evalcond[2]=((((-1.0)*r20*x15015*x15017))+((r21*x15019)));
evalcond[3]=((((-1.0)*r10*x15015*x15017))+((r11*x15019)));
evalcond[4]=(((r11*sj5*x15016))+(((-1.0)*r10*x15016*x15017))+(((-1.0)*cj2*sj1*x15018))+(((-1.0)*cj1*sj2*x15018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15020=IKPowWithIntegerCheck(r02,-1);
if(!x15020.valid){
continue;
}
sj4array[0]=((-1.0)*cj0*(x15020.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15021=IKcos(j4);
IkReal x15022=IKsin(j4);
IkReal x15023=(r21*sj5);
IkReal x15024=((1.0)*cj0);
IkReal x15025=(r11*sj5);
IkReal x15026=((1.0)*cj5*x15022);
IkReal x15027=((1.0)*cj5*x15021);
evalcond[0]=((-1.0)*r02*x15021);
evalcond[1]=((((-1.0)*r20*x15027))+((x15021*x15023)));
evalcond[2]=((((-1.0)*r10*x15027))+((x15021*x15025)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15022*x15023))+(((-1.0)*r20*x15026)));
evalcond[4]=((((-1.0)*cj2*sj1*x15024))+(((-1.0)*r10*x15026))+((x15022*x15025))+(((-1.0)*cj1*sj2*x15024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15028 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15028.valid){
continue;
}
IkReal gconst100=((-1.0)*(x15028.value));
IkReal gconst101=r10;
IkReal gconst102=r11;
CheckValue<IkReal> x15029 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15029.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15029.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15030=((-1.0)*r10);
CheckValue<IkReal> x15032 = IKatan2WithCheck(IkReal(x15030),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15032.valid){
continue;
}
IkReal x15031=((-1.0)*(x15032.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15030);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst101;
cj5=gconst102;
j5=x15031;
IkReal gconst100=x15031;
IkReal gconst101=r10;
IkReal gconst102=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15033=((-1.0)*r10);
CheckValue<IkReal> x15035 = IKatan2WithCheck(IkReal(x15033),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15035.valid){
continue;
}
IkReal x15034=((-1.0)*(x15035.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15033);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst101;
cj5=gconst102;
j5=x15034;
IkReal gconst100=x15034;
IkReal gconst101=r10;
IkReal gconst102=r11;
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15036=((-1.0)*r10);
CheckValue<IkReal> x15038 = IKatan2WithCheck(IkReal(x15036),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15038.valid){
continue;
}
IkReal x15037=((-1.0)*(x15038.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15036);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst101;
cj5=gconst102;
j5=x15037;
IkReal gconst100=x15037;
IkReal gconst101=r10;
IkReal gconst102=r11;
j4eval[0]=((((-1.0)*cj3*r10*r21))+((cj3*r11*r20)));
j4eval[1]=cj3;
j4eval[2]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15039=((1.0)*gconst101);
IkReal x15040=((1.0)*sj0);
CheckValue<IkReal> x15041=IKPowWithIntegerCheck((((cj3*gconst102*r20))+(((-1.0)*cj3*r21*x15039))),-1);
if(!x15041.valid){
continue;
}
CheckValue<IkReal> x15042=IKPowWithIntegerCheck(cj3,-1);
if(!x15042.valid){
continue;
}
CheckValue<IkReal> x15043=IKPowWithIntegerCheck(r02,-1);
if(!x15043.valid){
continue;
}
if( IKabs(((x15041.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst102*r21*sj3))+(((-1.0)*r20*sj3*x15039))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15042.value)*(x15043.value)*(((((-1.0)*cj1*sj2*x15040))+(((-1.0)*cj2*sj1*x15040)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15041.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst102*r21*sj3))+(((-1.0)*r20*sj3*x15039))+((cj1*cj2))))))+IKsqr(((x15042.value)*(x15043.value)*(((((-1.0)*cj1*sj2*x15040))+(((-1.0)*cj2*sj1*x15040))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15041.value)*(((((-1.0)*sj1*sj2))+(((-1.0)*gconst102*r21*sj3))+(((-1.0)*r20*sj3*x15039))+((cj1*cj2))))), ((x15042.value)*(x15043.value)*(((((-1.0)*cj1*sj2*x15040))+(((-1.0)*cj2*sj1*x15040))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15044=IKcos(j4);
IkReal x15045=IKsin(j4);
IkReal x15046=(gconst102*sj3);
IkReal x15047=(cj2*sj0);
IkReal x15048=(cj3*gconst102);
IkReal x15049=(sj1*sj2);
IkReal x15050=((1.0)*cj2);
IkReal x15051=(gconst101*r21);
IkReal x15052=(gconst101*r20);
IkReal x15053=(cj0*cj1);
IkReal x15054=(cj3*gconst101);
IkReal x15055=(gconst101*r11);
IkReal x15056=(cj1*sj2);
IkReal x15057=(r20*x15045);
IkReal x15058=((1.0)*x15044);
IkReal x15059=(sj3*x15045);
IkReal x15060=((1.0)*x15045);
evalcond[0]=(((r02*x15045))+cj0);
evalcond[1]=((((-1.0)*gconst102*r20*x15058))+((x15044*x15051)));
evalcond[2]=(sj0+((x15044*x15055))+(((-1.0)*gconst102*r10*x15058)));
evalcond[3]=(((sj0*x15056))+((sj1*x15047))+((cj3*r02*x15044)));
evalcond[4]=((((-1.0)*r02*sj3*x15058))+(((-1.0)*sj0*x15049))+((cj1*x15047)));
evalcond[5]=(((cj2*sj1))+x15056+(((-1.0)*x15046*x15057))+((cj3*x15052))+((x15051*x15059))+((r21*x15048)));
evalcond[6]=(x15049+(((-1.0)*cj1*x15050))+((sj3*x15052))+((r21*x15046))+(((-1.0)*cj3*x15051*x15060))+((x15048*x15057)));
evalcond[7]=(((cj0*x15049))+(((-1.0)*r10*x15046*x15060))+((r11*x15048))+((r10*x15054))+((x15055*x15059))+(((-1.0)*x15050*x15053)));
evalcond[8]=(((r11*x15046))+(((-1.0)*r11*x15054*x15060))+((gconst101*r10*sj3))+((r10*x15045*x15048))+(((-1.0)*cj0*sj1*x15050))+(((-1.0)*sj2*x15053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15063=IKPowWithIntegerCheck(r02,-1);
if(!x15063.valid){
continue;
}
IkReal x15061=x15063.value;
IkReal x15062=((1.0)*sj0);
CheckValue<IkReal> x15064=IKPowWithIntegerCheck(cj3,-1);
if(!x15064.valid){
continue;
}
if( IKabs(((-1.0)*cj0*x15061)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15061*(x15064.value)*(((((-1.0)*cj2*sj1*x15062))+(((-1.0)*cj1*sj2*x15062)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*x15061))+IKsqr((x15061*(x15064.value)*(((((-1.0)*cj2*sj1*x15062))+(((-1.0)*cj1*sj2*x15062))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*x15061), (x15061*(x15064.value)*(((((-1.0)*cj2*sj1*x15062))+(((-1.0)*cj1*sj2*x15062))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15065=IKcos(j4);
IkReal x15066=IKsin(j4);
IkReal x15067=(gconst102*sj3);
IkReal x15068=(cj2*sj0);
IkReal x15069=(cj3*gconst102);
IkReal x15070=(sj1*sj2);
IkReal x15071=((1.0)*cj2);
IkReal x15072=(gconst101*r21);
IkReal x15073=(gconst101*r20);
IkReal x15074=(cj0*cj1);
IkReal x15075=(cj3*gconst101);
IkReal x15076=(gconst101*r11);
IkReal x15077=(cj1*sj2);
IkReal x15078=(r20*x15066);
IkReal x15079=((1.0)*x15065);
IkReal x15080=(sj3*x15066);
IkReal x15081=((1.0)*x15066);
evalcond[0]=(cj0+((r02*x15066)));
evalcond[1]=(((x15065*x15072))+(((-1.0)*gconst102*r20*x15079)));
evalcond[2]=(sj0+((x15065*x15076))+(((-1.0)*gconst102*r10*x15079)));
evalcond[3]=(((sj1*x15068))+((cj3*r02*x15065))+((sj0*x15077)));
evalcond[4]=(((cj1*x15068))+(((-1.0)*sj0*x15070))+(((-1.0)*r02*sj3*x15079)));
evalcond[5]=(((cj2*sj1))+((r21*x15069))+(((-1.0)*x15067*x15078))+((cj3*x15073))+x15077+((x15072*x15080)));
evalcond[6]=(((r21*x15067))+(((-1.0)*cj3*x15072*x15081))+x15070+((x15069*x15078))+((sj3*x15073))+(((-1.0)*cj1*x15071)));
evalcond[7]=((((-1.0)*x15071*x15074))+((r11*x15069))+((r10*x15075))+(((-1.0)*r10*x15067*x15081))+((x15076*x15080))+((cj0*x15070)));
evalcond[8]=(((gconst101*r10*sj3))+((r11*x15067))+((r10*x15066*x15069))+(((-1.0)*cj0*sj1*x15071))+(((-1.0)*sj2*x15074))+(((-1.0)*r11*x15075*x15081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15083=IKPowWithIntegerCheck(r02,-1);
if(!x15083.valid){
continue;
}
IkReal x15082=x15083.value;
CheckValue<IkReal> x15084=IKPowWithIntegerCheck(sj3,-1);
if(!x15084.valid){
continue;
}
if( IKabs(((-1.0)*cj0*x15082)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15082*(x15084.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*x15082))+IKsqr((x15082*(x15084.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*x15082), (x15082*(x15084.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15085=IKcos(j4);
IkReal x15086=IKsin(j4);
IkReal x15087=(gconst102*sj3);
IkReal x15088=(cj2*sj0);
IkReal x15089=(cj3*gconst102);
IkReal x15090=(sj1*sj2);
IkReal x15091=((1.0)*cj2);
IkReal x15092=(gconst101*r21);
IkReal x15093=(gconst101*r20);
IkReal x15094=(cj0*cj1);
IkReal x15095=(cj3*gconst101);
IkReal x15096=(gconst101*r11);
IkReal x15097=(cj1*sj2);
IkReal x15098=(r20*x15086);
IkReal x15099=((1.0)*x15085);
IkReal x15100=(sj3*x15086);
IkReal x15101=((1.0)*x15086);
evalcond[0]=(cj0+((r02*x15086)));
evalcond[1]=(((x15085*x15092))+(((-1.0)*gconst102*r20*x15099)));
evalcond[2]=(sj0+((x15085*x15096))+(((-1.0)*gconst102*r10*x15099)));
evalcond[3]=(((sj0*x15097))+((sj1*x15088))+((cj3*r02*x15085)));
evalcond[4]=((((-1.0)*r02*sj3*x15099))+(((-1.0)*sj0*x15090))+((cj1*x15088)));
evalcond[5]=((((-1.0)*x15087*x15098))+((cj2*sj1))+x15097+((cj3*x15093))+((r21*x15089))+((x15092*x15100)));
evalcond[6]=(((sj3*x15093))+x15090+((r21*x15087))+(((-1.0)*cj3*x15092*x15101))+(((-1.0)*cj1*x15091))+((x15089*x15098)));
evalcond[7]=(((r10*x15095))+(((-1.0)*r10*x15087*x15101))+((x15096*x15100))+((r11*x15089))+((cj0*x15090))+(((-1.0)*x15091*x15094)));
evalcond[8]=((((-1.0)*cj0*sj1*x15091))+(((-1.0)*r11*x15095*x15101))+((gconst101*r10*sj3))+(((-1.0)*sj2*x15094))+((r10*x15086*x15089))+((r11*x15087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15102=((-1.0)*r10);
CheckValue<IkReal> x15103 = IKatan2WithCheck(IkReal(x15102),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15103.valid){
continue;
}
IkReal gconst103=((3.14159265358979)+(((-1.0)*(x15103.value))));
IkReal gconst104=x15102;
IkReal gconst105=((-1.0)*r11);
CheckValue<IkReal> x15104 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15104.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15104.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15105=((-1.0)*r10);
IkReal x15106=((-1.0)*r11);
CheckValue<IkReal> x15108 = IKatan2WithCheck(IkReal(x15105),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15108.valid){
continue;
}
IkReal x15107=((1.0)*(x15108.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15105);
rxp1_1=(px*r21);
rxp1_2=(px*x15106);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst104;
cj5=gconst105;
j5=((3.14159265)+(((-1.0)*x15107)));
IkReal gconst103=((3.14159265358979)+(((-1.0)*x15107)));
IkReal gconst104=x15105;
IkReal gconst105=x15106;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15109=((-1.0)*r10);
IkReal x15110=((-1.0)*r11);
CheckValue<IkReal> x15112 = IKatan2WithCheck(IkReal(x15109),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15112.valid){
continue;
}
IkReal x15111=((1.0)*(x15112.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15109);
rxp1_1=(px*r21);
rxp1_2=(px*x15110);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst104;
cj5=gconst105;
j5=((3.14159265)+(((-1.0)*x15111)));
IkReal gconst103=((3.14159265358979)+(((-1.0)*x15111)));
IkReal gconst104=x15109;
IkReal gconst105=x15110;
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15113=((-1.0)*r10);
IkReal x15114=((-1.0)*r11);
CheckValue<IkReal> x15116 = IKatan2WithCheck(IkReal(x15113),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15116.valid){
continue;
}
IkReal x15115=((1.0)*(x15116.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15113);
rxp1_1=(px*r21);
rxp1_2=(px*x15114);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst104;
cj5=gconst105;
j5=((3.14159265)+(((-1.0)*x15115)));
IkReal gconst103=((3.14159265358979)+(((-1.0)*x15115)));
IkReal gconst104=x15113;
IkReal gconst105=x15114;
IkReal x15117=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r20*x15117))+((r10*r21*x15117)));
j4eval[1]=cj3;
j4eval[2]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15118=((1.0)*sj3);
IkReal x15119=((1.0)*sj0);
CheckValue<IkReal> x15120=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst104*r21))+((cj3*gconst105*r20))),-1);
if(!x15120.valid){
continue;
}
CheckValue<IkReal> x15121=IKPowWithIntegerCheck(cj3,-1);
if(!x15121.valid){
continue;
}
CheckValue<IkReal> x15122=IKPowWithIntegerCheck(r02,-1);
if(!x15122.valid){
continue;
}
if( IKabs(((x15120.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst104*r20*x15118))+(((-1.0)*gconst105*r21*x15118)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15121.value)*(x15122.value)*(((((-1.0)*cj1*sj2*x15119))+(((-1.0)*cj2*sj1*x15119)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15120.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst104*r20*x15118))+(((-1.0)*gconst105*r21*x15118))))))+IKsqr(((x15121.value)*(x15122.value)*(((((-1.0)*cj1*sj2*x15119))+(((-1.0)*cj2*sj1*x15119))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15120.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst104*r20*x15118))+(((-1.0)*gconst105*r21*x15118))))), ((x15121.value)*(x15122.value)*(((((-1.0)*cj1*sj2*x15119))+(((-1.0)*cj2*sj1*x15119))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15123=IKcos(j4);
IkReal x15124=IKsin(j4);
IkReal x15125=(r20*sj3);
IkReal x15126=((1.0)*gconst105);
IkReal x15127=(cj2*sj0);
IkReal x15128=(sj1*sj2);
IkReal x15129=(gconst104*r11);
IkReal x15130=(gconst104*r21);
IkReal x15131=(cj3*gconst104);
IkReal x15132=(gconst105*r11);
IkReal x15133=(cj2*sj1);
IkReal x15134=((1.0)*cj0);
IkReal x15135=(cj1*sj2);
IkReal x15136=(gconst105*r21);
IkReal x15137=(sj3*x15124);
IkReal x15138=((1.0)*cj1*cj2);
IkReal x15139=(r02*x15123);
IkReal x15140=(cj3*x15124);
evalcond[0]=(cj0+((r02*x15124)));
evalcond[1]=((((-1.0)*r20*x15123*x15126))+((x15123*x15130)));
evalcond[2]=(sj0+(((-1.0)*r10*x15123*x15126))+((x15123*x15129)));
evalcond[3]=(((sj0*x15135))+((sj1*x15127))+((cj3*x15139)));
evalcond[4]=((((-1.0)*sj3*x15139))+(((-1.0)*sj0*x15128))+((cj1*x15127)));
evalcond[5]=(((x15130*x15137))+((r20*x15131))+x15133+x15135+(((-1.0)*x15124*x15125*x15126))+((cj3*x15136)));
evalcond[6]=(((gconst104*x15125))+(((-1.0)*x15138))+((gconst105*r20*x15140))+((sj3*x15136))+(((-1.0)*x15130*x15140))+x15128);
evalcond[7]=(((x15129*x15137))+(((-1.0)*r10*x15126*x15137))+((cj0*x15128))+((r10*x15131))+(((-1.0)*cj1*cj2*x15134))+((cj3*x15132)));
evalcond[8]=((((-1.0)*x15129*x15140))+(((-1.0)*x15134*x15135))+((sj3*x15132))+(((-1.0)*x15133*x15134))+((gconst105*r10*x15140))+((gconst104*r10*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15143=IKPowWithIntegerCheck(r02,-1);
if(!x15143.valid){
continue;
}
IkReal x15141=x15143.value;
IkReal x15142=((1.0)*sj0);
CheckValue<IkReal> x15144=IKPowWithIntegerCheck(cj3,-1);
if(!x15144.valid){
continue;
}
if( IKabs(((-1.0)*cj0*x15141)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15141*(x15144.value)*(((((-1.0)*cj2*sj1*x15142))+(((-1.0)*cj1*sj2*x15142)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*x15141))+IKsqr((x15141*(x15144.value)*(((((-1.0)*cj2*sj1*x15142))+(((-1.0)*cj1*sj2*x15142))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*x15141), (x15141*(x15144.value)*(((((-1.0)*cj2*sj1*x15142))+(((-1.0)*cj1*sj2*x15142))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15145=IKcos(j4);
IkReal x15146=IKsin(j4);
IkReal x15147=(r20*sj3);
IkReal x15148=((1.0)*gconst105);
IkReal x15149=(cj2*sj0);
IkReal x15150=(sj1*sj2);
IkReal x15151=(gconst104*r11);
IkReal x15152=(gconst104*r21);
IkReal x15153=(cj3*gconst104);
IkReal x15154=(gconst105*r11);
IkReal x15155=(cj2*sj1);
IkReal x15156=((1.0)*cj0);
IkReal x15157=(cj1*sj2);
IkReal x15158=(gconst105*r21);
IkReal x15159=(sj3*x15146);
IkReal x15160=((1.0)*cj1*cj2);
IkReal x15161=(r02*x15145);
IkReal x15162=(cj3*x15146);
evalcond[0]=(cj0+((r02*x15146)));
evalcond[1]=(((x15145*x15152))+(((-1.0)*r20*x15145*x15148)));
evalcond[2]=(sj0+(((-1.0)*r10*x15145*x15148))+((x15145*x15151)));
evalcond[3]=(((cj3*x15161))+((sj0*x15157))+((sj1*x15149)));
evalcond[4]=((((-1.0)*sj3*x15161))+(((-1.0)*sj0*x15150))+((cj1*x15149)));
evalcond[5]=(((x15152*x15159))+((cj3*x15158))+(((-1.0)*x15146*x15147*x15148))+x15157+x15155+((r20*x15153)));
evalcond[6]=((((-1.0)*x15152*x15162))+((gconst105*r20*x15162))+((sj3*x15158))+(((-1.0)*x15160))+x15150+((gconst104*x15147)));
evalcond[7]=(((cj3*x15154))+((x15151*x15159))+((cj0*x15150))+(((-1.0)*cj1*cj2*x15156))+((r10*x15153))+(((-1.0)*r10*x15148*x15159)));
evalcond[8]=((((-1.0)*x15155*x15156))+(((-1.0)*x15156*x15157))+((sj3*x15154))+((gconst105*r10*x15162))+(((-1.0)*x15151*x15162))+((gconst104*r10*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15164=IKPowWithIntegerCheck(r02,-1);
if(!x15164.valid){
continue;
}
IkReal x15163=x15164.value;
CheckValue<IkReal> x15165=IKPowWithIntegerCheck(sj3,-1);
if(!x15165.valid){
continue;
}
if( IKabs(((-1.0)*cj0*x15163)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15163*(x15165.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*x15163))+IKsqr((x15163*(x15165.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*x15163), (x15163*(x15165.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15166=IKcos(j4);
IkReal x15167=IKsin(j4);
IkReal x15168=(r20*sj3);
IkReal x15169=((1.0)*gconst105);
IkReal x15170=(cj2*sj0);
IkReal x15171=(sj1*sj2);
IkReal x15172=(gconst104*r11);
IkReal x15173=(gconst104*r21);
IkReal x15174=(cj3*gconst104);
IkReal x15175=(gconst105*r11);
IkReal x15176=(cj2*sj1);
IkReal x15177=((1.0)*cj0);
IkReal x15178=(cj1*sj2);
IkReal x15179=(gconst105*r21);
IkReal x15180=(sj3*x15167);
IkReal x15181=((1.0)*cj1*cj2);
IkReal x15182=(r02*x15166);
IkReal x15183=(cj3*x15167);
evalcond[0]=(cj0+((r02*x15167)));
evalcond[1]=(((x15166*x15173))+(((-1.0)*r20*x15166*x15169)));
evalcond[2]=((((-1.0)*r10*x15166*x15169))+sj0+((x15166*x15172)));
evalcond[3]=(((sj1*x15170))+((sj0*x15178))+((cj3*x15182)));
evalcond[4]=((((-1.0)*sj3*x15182))+(((-1.0)*sj0*x15171))+((cj1*x15170)));
evalcond[5]=(((cj3*x15179))+((r20*x15174))+x15178+x15176+((x15173*x15180))+(((-1.0)*x15167*x15168*x15169)));
evalcond[6]=((((-1.0)*x15181))+((gconst104*x15168))+x15171+((sj3*x15179))+((gconst105*r20*x15183))+(((-1.0)*x15173*x15183)));
evalcond[7]=(((cj0*x15171))+((cj3*x15175))+((r10*x15174))+((x15172*x15180))+(((-1.0)*r10*x15169*x15180))+(((-1.0)*cj1*cj2*x15177)));
evalcond[8]=((((-1.0)*x15177*x15178))+(((-1.0)*x15176*x15177))+(((-1.0)*x15172*x15183))+((sj3*x15175))+((gconst104*r10*sj3))+((gconst105*r10*x15183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15185=IKPowWithIntegerCheck(r02,-1);
if(!x15185.valid){
continue;
}
IkReal x15184=x15185.value;
CheckValue<IkReal> x15186=IKPowWithIntegerCheck(sj3,-1);
if(!x15186.valid){
continue;
}
if( IKabs(((-1.0)*cj0*x15184)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15184*(x15186.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*x15184))+IKsqr((x15184*(x15186.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*x15184), (x15184*(x15186.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15187=IKcos(j4);
IkReal x15188=IKsin(j4);
IkReal x15189=(cj2*sj0);
IkReal x15190=(r21*sj5);
IkReal x15191=(sj1*sj2);
IkReal x15192=((1.0)*sj3);
IkReal x15193=(cj3*sj5);
IkReal x15194=(cj5*r11);
IkReal x15195=(cj2*sj1);
IkReal x15196=((1.0)*cj0);
IkReal x15197=(cj1*sj2);
IkReal x15198=(cj5*r21);
IkReal x15199=(sj3*sj5);
IkReal x15200=(r02*x15187);
IkReal x15201=(cj5*x15188);
IkReal x15202=((1.0)*cj1*cj2);
IkReal x15203=(r11*x15188);
IkReal x15204=((1.0)*cj5*x15187);
evalcond[0]=(cj0+((r02*x15188)));
evalcond[1]=((((-1.0)*r20*x15204))+((x15187*x15190)));
evalcond[2]=(sj0+((r11*sj5*x15187))+(((-1.0)*r10*x15204)));
evalcond[3]=(((sj1*x15189))+((sj0*x15197))+((cj3*x15200)));
evalcond[4]=((((-1.0)*x15192*x15200))+(((-1.0)*sj0*x15191))+((cj1*x15189)));
evalcond[5]=(((cj3*x15198))+((sj3*x15188*x15190))+(((-1.0)*r20*x15192*x15201))+x15197+x15195+((r20*x15193)));
evalcond[6]=(((sj3*x15198))+((cj3*r20*x15201))+x15191+(((-1.0)*x15202))+((r20*x15199))+(((-1.0)*cj3*x15188*x15190)));
evalcond[7]=(((cj3*x15194))+(((-1.0)*cj1*cj2*x15196))+((cj0*x15191))+((r10*x15193))+((x15199*x15203))+(((-1.0)*r10*x15192*x15201)));
evalcond[8]=((((-1.0)*x15195*x15196))+((sj3*x15194))+(((-1.0)*x15196*x15197))+((r10*x15199))+(((-1.0)*x15193*x15203))+((cj3*r10*x15201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15205=((1.0)*cj5);
CheckValue<IkReal> x15206=IKPowWithIntegerCheck(((((-1.0)*r20*sj3*x15205))+((r21*sj3*sj5))),-1);
if(!x15206.valid){
continue;
}
CheckValue<IkReal> x15207=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15205))),-1);
if(!x15207.valid){
continue;
}
if( IKabs(((x15206.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj3*r21*x15205))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15207.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15206.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj3*r21*x15205))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r20*sj5))))))+IKsqr(((-1.0)*sj0*(x15207.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15206.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj3*r21*x15205))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r20*sj5))))), ((-1.0)*sj0*(x15207.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15208=IKcos(j4);
IkReal x15209=IKsin(j4);
IkReal x15210=(cj2*sj0);
IkReal x15211=(r21*sj5);
IkReal x15212=(sj1*sj2);
IkReal x15213=((1.0)*sj3);
IkReal x15214=(cj3*sj5);
IkReal x15215=(cj5*r11);
IkReal x15216=(cj2*sj1);
IkReal x15217=((1.0)*cj0);
IkReal x15218=(cj1*sj2);
IkReal x15219=(cj5*r21);
IkReal x15220=(sj3*sj5);
IkReal x15221=(r02*x15208);
IkReal x15222=(cj5*x15209);
IkReal x15223=((1.0)*cj1*cj2);
IkReal x15224=(r11*x15209);
IkReal x15225=((1.0)*cj5*x15208);
evalcond[0]=(cj0+((r02*x15209)));
evalcond[1]=(((x15208*x15211))+(((-1.0)*r20*x15225)));
evalcond[2]=(sj0+((r11*sj5*x15208))+(((-1.0)*r10*x15225)));
evalcond[3]=(((cj3*x15221))+((sj1*x15210))+((sj0*x15218)));
evalcond[4]=(((cj1*x15210))+(((-1.0)*x15213*x15221))+(((-1.0)*sj0*x15212)));
evalcond[5]=((((-1.0)*r20*x15213*x15222))+((r20*x15214))+x15216+x15218+((cj3*x15219))+((sj3*x15209*x15211)));
evalcond[6]=((((-1.0)*cj3*x15209*x15211))+((sj3*x15219))+x15212+((r20*x15220))+((cj3*r20*x15222))+(((-1.0)*x15223)));
evalcond[7]=(((r10*x15214))+((x15220*x15224))+(((-1.0)*r10*x15213*x15222))+((cj0*x15212))+((cj3*x15215))+(((-1.0)*cj1*cj2*x15217)));
evalcond[8]=(((sj3*x15215))+((cj3*r10*x15222))+((r10*x15220))+(((-1.0)*x15214*x15224))+(((-1.0)*x15216*x15217))+(((-1.0)*x15217*x15218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15226=IKPowWithIntegerCheck(r02,-1);
if(!x15226.valid){
continue;
}
CheckValue<IkReal> x15227=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15227.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15226.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15227.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15226.value)))+IKsqr(((-1.0)*sj0*(x15227.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15226.value)), ((-1.0)*sj0*(x15227.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15228=IKcos(j4);
IkReal x15229=IKsin(j4);
IkReal x15230=(cj2*sj0);
IkReal x15231=(r21*sj5);
IkReal x15232=(sj1*sj2);
IkReal x15233=((1.0)*sj3);
IkReal x15234=(cj3*sj5);
IkReal x15235=(cj5*r11);
IkReal x15236=(cj2*sj1);
IkReal x15237=((1.0)*cj0);
IkReal x15238=(cj1*sj2);
IkReal x15239=(cj5*r21);
IkReal x15240=(sj3*sj5);
IkReal x15241=(r02*x15228);
IkReal x15242=(cj5*x15229);
IkReal x15243=((1.0)*cj1*cj2);
IkReal x15244=(r11*x15229);
IkReal x15245=((1.0)*cj5*x15228);
evalcond[0]=(cj0+((r02*x15229)));
evalcond[1]=(((x15228*x15231))+(((-1.0)*r20*x15245)));
evalcond[2]=(sj0+(((-1.0)*r10*x15245))+((r11*sj5*x15228)));
evalcond[3]=(((cj3*x15241))+((sj1*x15230))+((sj0*x15238)));
evalcond[4]=((((-1.0)*x15233*x15241))+(((-1.0)*sj0*x15232))+((cj1*x15230)));
evalcond[5]=(((cj3*x15239))+((sj3*x15229*x15231))+x15238+x15236+(((-1.0)*r20*x15233*x15242))+((r20*x15234)));
evalcond[6]=(((sj3*x15239))+(((-1.0)*x15243))+x15232+(((-1.0)*cj3*x15229*x15231))+((cj3*r20*x15242))+((r20*x15240)));
evalcond[7]=(((cj3*x15235))+(((-1.0)*cj1*cj2*x15237))+((cj0*x15232))+(((-1.0)*r10*x15233*x15242))+((r10*x15234))+((x15240*x15244)));
evalcond[8]=(((sj3*x15235))+(((-1.0)*x15237*x15238))+((r10*x15240))+((cj3*r10*x15242))+(((-1.0)*x15236*x15237))+(((-1.0)*x15234*x15244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15246=((1.0)*sj0);
IkReal x15247=((1.0)*sj5);
CheckValue<IkReal> x15248 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r00*x15246))+((cj0*cj5*r10))+((r01*sj0*sj5))+(((-1.0)*cj0*r11*x15247)))),IkReal(((((-1.0)*r02*x15246))+((cj0*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15248.valid){
continue;
}
CheckValue<IkReal> x15249=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x15247)))),-1);
if(!x15249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15248.value)+(((1.5707963267949)*(x15249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15250=IKcos(j4);
IkReal x15251=IKsin(j4);
IkReal x15252=(cj5*r00);
IkReal x15253=(cj2*sj0);
IkReal x15254=(sj1*sj2);
IkReal x15255=(cj5*r01);
IkReal x15256=(cj3*sj5);
IkReal x15257=(cj5*sj3);
IkReal x15258=(sj3*sj5);
IkReal x15259=(cj2*sj1);
IkReal x15260=((1.0)*cj0);
IkReal x15261=(cj1*sj2);
IkReal x15262=(cj3*cj5);
IkReal x15263=(cj5*r10);
IkReal x15264=(cj5*r20);
IkReal x15265=((1.0)*x15250);
IkReal x15266=(sj5*x15250);
IkReal x15267=((1.0)*cj1*cj2);
IkReal x15268=(cj3*x15251);
IkReal x15269=(cj3*x15250);
IkReal x15270=((1.0)*x15251);
evalcond[0]=((((-1.0)*x15264*x15265))+((r22*x15251))+((r21*x15266)));
evalcond[1]=(cj0+(((-1.0)*x15252*x15265))+((r01*x15266))+((r02*x15251)));
evalcond[2]=(sj0+(((-1.0)*x15263*x15265))+((r12*x15251))+((r11*x15266)));
evalcond[3]=(((r21*x15251*x15258))+x15261+x15259+(((-1.0)*r20*x15257*x15270))+((r20*x15256))+(((-1.0)*r22*sj3*x15265))+((r21*x15262)));
evalcond[4]=((((-1.0)*r21*x15256*x15270))+((r20*x15251*x15262))+x15254+(((-1.0)*x15267))+((r22*x15269))+((r21*x15257))+((r20*x15258)));
evalcond[5]=(((sj3*x15255))+((x15252*x15268))+((r00*x15258))+((sj0*x15261))+(((-1.0)*r01*x15256*x15270))+((sj1*x15253))+((r02*x15269)));
evalcond[6]=(((cj1*x15253))+((r00*x15256))+(((-1.0)*sj3*x15252*x15270))+((r01*x15251*x15258))+((cj3*x15255))+(((-1.0)*sj0*x15254))+(((-1.0)*r02*sj3*x15265)));
evalcond[7]=((((-1.0)*r12*sj3*x15265))+((cj0*x15254))+(((-1.0)*r10*x15257*x15270))+((r10*x15256))+((r11*x15251*x15258))+(((-1.0)*cj1*cj2*x15260))+((r11*x15262)));
evalcond[8]=(((r12*x15269))+(((-1.0)*x15259*x15260))+(((-1.0)*x15260*x15261))+(((-1.0)*r11*x15256*x15270))+((r11*x15257))+((r10*x15258))+((r10*x15251*x15262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15271=((1.0)*cj5);
CheckValue<IkReal> x15272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15271)))),-1);
if(!x15272.valid){
continue;
}
CheckValue<IkReal> x15273 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15271)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x15273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15272.value)))+(x15273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15274=IKcos(j4);
IkReal x15275=IKsin(j4);
IkReal x15276=(cj5*r00);
IkReal x15277=(cj2*sj0);
IkReal x15278=(sj1*sj2);
IkReal x15279=(cj5*r01);
IkReal x15280=(cj3*sj5);
IkReal x15281=(cj5*sj3);
IkReal x15282=(sj3*sj5);
IkReal x15283=(cj2*sj1);
IkReal x15284=((1.0)*cj0);
IkReal x15285=(cj1*sj2);
IkReal x15286=(cj3*cj5);
IkReal x15287=(cj5*r10);
IkReal x15288=(cj5*r20);
IkReal x15289=((1.0)*x15274);
IkReal x15290=(sj5*x15274);
IkReal x15291=((1.0)*cj1*cj2);
IkReal x15292=(cj3*x15275);
IkReal x15293=(cj3*x15274);
IkReal x15294=((1.0)*x15275);
evalcond[0]=((((-1.0)*x15288*x15289))+((r22*x15275))+((r21*x15290)));
evalcond[1]=(cj0+(((-1.0)*x15276*x15289))+((r01*x15290))+((r02*x15275)));
evalcond[2]=(((r12*x15275))+sj0+((r11*x15290))+(((-1.0)*x15287*x15289)));
evalcond[3]=((((-1.0)*r22*sj3*x15289))+((r21*x15275*x15282))+x15285+x15283+(((-1.0)*r20*x15281*x15294))+((r20*x15280))+((r21*x15286)));
evalcond[4]=(((r20*x15275*x15286))+(((-1.0)*r21*x15280*x15294))+x15278+(((-1.0)*x15291))+((r22*x15293))+((r20*x15282))+((r21*x15281)));
evalcond[5]=(((r00*x15282))+((sj0*x15285))+((x15276*x15292))+(((-1.0)*r01*x15280*x15294))+((r02*x15293))+((sj3*x15279))+((sj1*x15277)));
evalcond[6]=(((r00*x15280))+(((-1.0)*sj0*x15278))+(((-1.0)*sj3*x15276*x15294))+(((-1.0)*r02*sj3*x15289))+((cj3*x15279))+((r01*x15275*x15282))+((cj1*x15277)));
evalcond[7]=(((cj0*x15278))+(((-1.0)*cj1*cj2*x15284))+(((-1.0)*r12*sj3*x15289))+((r11*x15275*x15282))+((r10*x15280))+((r11*x15286))+(((-1.0)*r10*x15281*x15294)));
evalcond[8]=((((-1.0)*r11*x15280*x15294))+((r10*x15275*x15286))+((r12*x15293))+((r10*x15282))+(((-1.0)*x15283*x15284))+(((-1.0)*x15284*x15285))+((r11*x15281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15295 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x15295.valid){
continue;
}
CheckValue<IkReal> x15296=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x15296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15295.value)+(((1.5707963267949)*(x15296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15297=IKcos(j4);
IkReal x15298=IKsin(j4);
IkReal x15299=(cj5*r00);
IkReal x15300=(cj2*sj0);
IkReal x15301=(sj1*sj2);
IkReal x15302=(cj5*r01);
IkReal x15303=(cj3*sj5);
IkReal x15304=(cj5*sj3);
IkReal x15305=(sj3*sj5);
IkReal x15306=(cj2*sj1);
IkReal x15307=((1.0)*cj0);
IkReal x15308=(cj1*sj2);
IkReal x15309=(cj3*cj5);
IkReal x15310=(cj5*r10);
IkReal x15311=(cj5*r20);
IkReal x15312=((1.0)*x15297);
IkReal x15313=(sj5*x15297);
IkReal x15314=((1.0)*cj1*cj2);
IkReal x15315=(cj3*x15298);
IkReal x15316=(cj3*x15297);
IkReal x15317=((1.0)*x15298);
evalcond[0]=((((-1.0)*x15311*x15312))+((r22*x15298))+((r21*x15313)));
evalcond[1]=(cj0+((r01*x15313))+(((-1.0)*x15299*x15312))+((r02*x15298)));
evalcond[2]=(sj0+((r11*x15313))+((r12*x15298))+(((-1.0)*x15310*x15312)));
evalcond[3]=(((r20*x15303))+((r21*x15309))+x15308+x15306+((r21*x15298*x15305))+(((-1.0)*r22*sj3*x15312))+(((-1.0)*r20*x15304*x15317)));
evalcond[4]=(((r20*x15305))+((r20*x15298*x15309))+((r21*x15304))+(((-1.0)*x15314))+x15301+((r22*x15316))+(((-1.0)*r21*x15303*x15317)));
evalcond[5]=(((r00*x15305))+((sj3*x15302))+((sj1*x15300))+((sj0*x15308))+((r02*x15316))+((x15299*x15315))+(((-1.0)*r01*x15303*x15317)));
evalcond[6]=((((-1.0)*sj0*x15301))+((r00*x15303))+((r01*x15298*x15305))+(((-1.0)*sj3*x15299*x15317))+((cj3*x15302))+(((-1.0)*r02*sj3*x15312))+((cj1*x15300)));
evalcond[7]=(((r11*x15298*x15305))+((cj0*x15301))+(((-1.0)*cj1*cj2*x15307))+(((-1.0)*r12*sj3*x15312))+((r10*x15303))+(((-1.0)*r10*x15304*x15317))+((r11*x15309)));
evalcond[8]=(((r12*x15316))+(((-1.0)*r11*x15303*x15317))+((r10*x15305))+((r10*x15298*x15309))+(((-1.0)*x15307*x15308))+(((-1.0)*x15306*x15307))+((r11*x15304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15318=r21*r21;
IkReal x15319=cj5*cj5;
IkReal x15320=r20*r20;
IkReal x15321=((1.0)*r20);
IkReal x15322=(cj3*r22);
IkReal x15323=(cj2*sj1);
IkReal x15324=(r20*r21);
IkReal x15325=((1.0)*cj5);
IkReal x15326=((1.0)*sj3);
IkReal x15327=(cj3*sj5);
IkReal x15328=((1.0)*r22);
IkReal x15329=(cj1*sj2);
IkReal x15330=(r21*sj5);
IkReal x15331=(sj3*x15318);
CheckValue<IkReal> x15332=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15318*x15326))+((x15319*x15331))+(((-1.0)*x15319*x15320*x15326))+(((2.0)*cj5*sj3*sj5*x15324))+(((-1.0)*x15326*(r22*r22))))),-1);
if(!x15332.valid){
continue;
}
CheckValue<IkReal> x15333 = IKatan2WithCheck(IkReal((((x15323*x15330))+((x15329*x15330))+(((-1.0)*x15320*x15325*x15327))+((cj5*x15318*x15327))+(((-1.0)*cj5*x15321*x15323))+(((-1.0)*cj5*x15321*x15329))+(((-2.0)*cj3*x15319*x15324))+((cj3*x15324)))),IkReal(((((-1.0)*sj5*x15321*x15322))+(((-1.0)*x15323*x15328))+(((-1.0)*r21*x15322*x15325))+(((-1.0)*x15328*x15329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15332.value)))+(x15333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15334=IKcos(j4);
IkReal x15335=IKsin(j4);
IkReal x15336=(cj5*r21);
IkReal x15337=(r20*sj5);
IkReal x15338=(r21*sj5);
IkReal x15339=(r22*x15334);
IkReal x15340=(sj3*x15335);
IkReal x15341=((1.0)*cj5*r20);
IkReal x15342=(cj3*x15335);
evalcond[0]=(((r22*x15335))+((x15334*x15338))+(((-1.0)*x15334*x15341)));
evalcond[1]=(((cj2*sj1))+((cj3*x15336))+((cj3*x15337))+(((-1.0)*sj3*x15339))+((cj1*sj2))+((x15338*x15340))+(((-1.0)*x15340*x15341)));
evalcond[2]=((((-1.0)*x15338*x15342))+((cj3*x15339))+((sj3*x15336))+((sj3*x15337))+((cj5*r20*x15342))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15343=(cj4*cj5);
IkReal x15344=((1.0)*sj4);
IkReal x15345=((1.0)*cj4*sj5);
if( IKabs(((((-1.0)*r12*x15344))+(((-1.0)*r11*x15345))+((r10*x15343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x15343))+(((-1.0)*r01*x15345))+(((-1.0)*r02*x15344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x15344))+(((-1.0)*r11*x15345))+((r10*x15343))))+IKsqr((((r00*x15343))+(((-1.0)*r01*x15345))+(((-1.0)*r02*x15344))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x15344))+(((-1.0)*r11*x15345))+((r10*x15343))), (((r00*x15343))+(((-1.0)*r01*x15345))+(((-1.0)*r02*x15344))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15346=IKsin(j0);
IkReal x15347=IKcos(j0);
IkReal x15348=((1.0)*cj4);
IkReal x15349=(r10*sj5);
IkReal x15350=(cj3*cj4);
IkReal x15351=((1.0)*sj2);
IkReal x15352=(cj5*r01);
IkReal x15353=((0.09)*sj2);
IkReal x15354=(cj5*r00);
IkReal x15355=(sj3*sj4);
IkReal x15356=(r01*sj5);
IkReal x15357=(cj5*r11);
IkReal x15358=(r00*sj5);
IkReal x15359=((1.0)*cj2);
IkReal x15360=(r11*sj5);
IkReal x15361=(cj3*sj4);
IkReal x15362=(cj5*r10);
IkReal x15363=((0.09)*cj2);
IkReal x15364=(sj1*x15346);
IkReal x15365=(cj1*x15347);
IkReal x15366=(cj1*x15346);
IkReal x15367=(sj1*x15347);
evalcond[0]=((((-1.0)*x15348*x15354))+x15347+((r02*sj4))+((cj4*x15356)));
evalcond[1]=((((-1.0)*x15348*x15362))+x15346+((r12*sj4))+((cj4*x15360)));
evalcond[2]=((((-1.0)*x15356*x15361))+((cj2*x15364))+((r02*x15350))+((x15354*x15361))+((sj3*x15352))+((sj3*x15358))+((sj2*x15366)));
evalcond[3]=(((cj2*x15366))+((cj3*x15358))+((cj3*x15352))+(((-1.0)*x15354*x15355))+(((-1.0)*x15351*x15364))+((x15355*x15356))+(((-1.0)*r02*sj3*x15348)));
evalcond[4]=(((cj3*x15349))+(((-1.0)*r12*sj3*x15348))+((cj3*x15357))+((x15355*x15360))+(((-1.0)*x15355*x15362))+(((-1.0)*x15359*x15365))+((sj2*x15367)));
evalcond[5]=((((-1.0)*x15360*x15361))+((r12*x15350))+((x15361*x15362))+((sj3*x15349))+(((-1.0)*x15351*x15365))+((sj3*x15357))+(((-1.0)*x15359*x15367)));
evalcond[6]=((((-0.09)*x15364))+(((-0.0565)*x15358))+(((-0.0565)*x15352))+(((-1.0)*x15363*x15364))+(((-1.0)*x15353*x15366))+(((-1.0)*px))+(((0.0565)*x15347))+(((1.0e-7)*x15366)));
evalcond[7]=((((-0.0565)*x15349))+((x15353*x15365))+(((-0.0565)*x15357))+(((-1.0e-7)*x15365))+(((0.09)*x15367))+(((-1.0)*py))+(((0.0565)*x15346))+((x15363*x15367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15368=cj5*cj5;
IkReal x15369=r21*r21;
IkReal x15370=r20*r20;
IkReal x15371=(r21*sj3);
IkReal x15372=((1.0)*cj5);
IkReal x15373=(sj3*sj5);
IkReal x15374=(cj5*r20);
IkReal x15375=(r21*sj5);
IkReal x15376=(cj1*cj2);
IkReal x15377=((1.0)*r22);
IkReal x15378=(sj1*sj2);
IkReal x15379=(cj3*x15369);
CheckValue<IkReal> x15380 = IKatan2WithCheck(IkReal(((((-1.0)*x15375*x15376))+((r20*x15371))+((x15375*x15378))+((x15374*x15376))+(((-1.0)*r20*x15372*x15378))+(((-2.0)*r20*x15368*x15371))+((cj5*x15369*x15373))+(((-1.0)*x15370*x15372*x15373)))),IkReal(((((-1.0)*x15377*x15378))+(((-1.0)*r22*x15371*x15372))+(((-1.0)*r20*x15373*x15377))+((r22*x15376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15380.valid){
continue;
}
CheckValue<IkReal> x15381=IKPowWithIntegerCheck(IKsign((((cj3*x15368*x15370))+(((-1.0)*x15368*x15379))+x15379+((cj3*(r22*r22)))+(((-2.0)*cj3*x15374*x15375)))),-1);
if(!x15381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15380.value)+(((1.5707963267949)*(x15381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15382=IKcos(j4);
IkReal x15383=IKsin(j4);
IkReal x15384=(cj5*r21);
IkReal x15385=(r20*sj5);
IkReal x15386=(r21*sj5);
IkReal x15387=(r22*x15382);
IkReal x15388=(sj3*x15383);
IkReal x15389=((1.0)*cj5*r20);
IkReal x15390=(cj3*x15383);
evalcond[0]=(((r22*x15383))+((x15382*x15386))+(((-1.0)*x15382*x15389)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*x15385))+((cj3*x15384))+(((-1.0)*sj3*x15387))+((x15386*x15388))+(((-1.0)*x15388*x15389)));
evalcond[2]=(((cj5*r20*x15390))+(((-1.0)*cj1*cj2))+((cj3*x15387))+((sj1*sj2))+(((-1.0)*x15386*x15390))+((sj3*x15385))+((sj3*x15384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15391=(cj4*cj5);
IkReal x15392=((1.0)*sj4);
IkReal x15393=((1.0)*cj4*sj5);
if( IKabs(((((-1.0)*r11*x15393))+(((-1.0)*r12*x15392))+((r10*x15391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x15393))+(((-1.0)*r02*x15392))+((r00*x15391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x15393))+(((-1.0)*r12*x15392))+((r10*x15391))))+IKsqr(((((-1.0)*r01*x15393))+(((-1.0)*r02*x15392))+((r00*x15391))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x15393))+(((-1.0)*r12*x15392))+((r10*x15391))), ((((-1.0)*r01*x15393))+(((-1.0)*r02*x15392))+((r00*x15391))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15394=IKsin(j0);
IkReal x15395=IKcos(j0);
IkReal x15396=((1.0)*cj4);
IkReal x15397=(r10*sj5);
IkReal x15398=(cj3*cj4);
IkReal x15399=((1.0)*sj2);
IkReal x15400=(cj5*r01);
IkReal x15401=((0.09)*sj2);
IkReal x15402=(cj5*r00);
IkReal x15403=(sj3*sj4);
IkReal x15404=(r01*sj5);
IkReal x15405=(cj5*r11);
IkReal x15406=(r00*sj5);
IkReal x15407=((1.0)*cj2);
IkReal x15408=(r11*sj5);
IkReal x15409=(cj3*sj4);
IkReal x15410=(cj5*r10);
IkReal x15411=((0.09)*cj2);
IkReal x15412=(sj1*x15394);
IkReal x15413=(cj1*x15395);
IkReal x15414=(cj1*x15394);
IkReal x15415=(sj1*x15395);
evalcond[0]=(((cj4*x15404))+(((-1.0)*x15396*x15402))+x15395+((r02*sj4)));
evalcond[1]=(((cj4*x15408))+(((-1.0)*x15396*x15410))+x15394+((r12*sj4)));
evalcond[2]=((((-1.0)*x15404*x15409))+((r02*x15398))+((sj3*x15406))+((sj3*x15400))+((sj2*x15414))+((x15402*x15409))+((cj2*x15412)));
evalcond[3]=((((-1.0)*r02*sj3*x15396))+((x15403*x15404))+(((-1.0)*x15402*x15403))+(((-1.0)*x15399*x15412))+((cj2*x15414))+((cj3*x15400))+((cj3*x15406)));
evalcond[4]=((((-1.0)*x15407*x15413))+((x15403*x15408))+((cj3*x15397))+((sj2*x15415))+((cj3*x15405))+(((-1.0)*r12*sj3*x15396))+(((-1.0)*x15403*x15410)));
evalcond[5]=((((-1.0)*x15407*x15415))+(((-1.0)*x15408*x15409))+((sj3*x15405))+((sj3*x15397))+((x15409*x15410))+((r12*x15398))+(((-1.0)*x15399*x15413)));
evalcond[6]=((((-0.0565)*x15406))+(((-0.0565)*x15400))+(((-0.09)*x15412))+(((0.0565)*x15395))+(((-1.0)*x15401*x15414))+(((-1.0)*px))+(((1.0e-7)*x15414))+(((-1.0)*x15411*x15412)));
evalcond[7]=((((-0.0565)*x15405))+((x15401*x15413))+(((0.0565)*x15394))+((x15411*x15415))+(((-1.0)*py))+(((-1.0e-7)*x15413))+(((0.09)*x15415))+(((-0.0565)*x15397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - jupiterobot_arm (c8c67da06372ee36417b44c0582623fa)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
