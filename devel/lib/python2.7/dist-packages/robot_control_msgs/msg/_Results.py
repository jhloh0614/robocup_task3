# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_control_msgs/Results.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robot_control_msgs.msg
import std_msgs.msg

class Results(genpy.Message):
  _md5sum = "0dfbe2e11b0d9abfab0f0b4f50f8f0bb"
  _type = "robot_control_msgs/Results"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# For human result
HumanResult human

# For object result
ObjectResult object

# For Vision result
VisionResult vision

# For speech/speak result
SpeechResult speech


================================================================================
MSG: robot_control_msgs/HumanResult
int32 num
int32 male_num
int32 female_num

string[] name
string[] gender
string[] gesture



================================================================================
MSG: robot_control_msgs/ObjectResult
string name
string color


================================================================================
MSG: robot_control_msgs/VisionResult
Header header
PixelCoords pixel_coords
SpaceCoords space_coords


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: robot_control_msgs/PixelCoords
int32 pixel_x
int32 pixel_y

================================================================================
MSG: robot_control_msgs/SpaceCoords
float32 x
float32 y
float32 z

================================================================================
MSG: robot_control_msgs/SpeechResult
string key_word
"""
  __slots__ = ['human','object','vision','speech']
  _slot_types = ['robot_control_msgs/HumanResult','robot_control_msgs/ObjectResult','robot_control_msgs/VisionResult','robot_control_msgs/SpeechResult']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       human,object,vision,speech

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Results, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.human is None:
        self.human = robot_control_msgs.msg.HumanResult()
      if self.object is None:
        self.object = robot_control_msgs.msg.ObjectResult()
      if self.vision is None:
        self.vision = robot_control_msgs.msg.VisionResult()
      if self.speech is None:
        self.speech = robot_control_msgs.msg.SpeechResult()
    else:
      self.human = robot_control_msgs.msg.HumanResult()
      self.object = robot_control_msgs.msg.ObjectResult()
      self.vision = robot_control_msgs.msg.VisionResult()
      self.speech = robot_control_msgs.msg.SpeechResult()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.human.num, _x.human.male_num, _x.human.female_num))
      length = len(self.human.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.human.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.human.gender)
      buff.write(_struct_I.pack(length))
      for val1 in self.human.gender:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.human.gesture)
      buff.write(_struct_I.pack(length))
      for val1 in self.human.gesture:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.object.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.object.color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.vision.header.seq, _x.vision.header.stamp.secs, _x.vision.header.stamp.nsecs))
      _x = self.vision.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i3f().pack(_x.vision.pixel_coords.pixel_x, _x.vision.pixel_coords.pixel_y, _x.vision.space_coords.x, _x.vision.space_coords.y, _x.vision.space_coords.z))
      _x = self.speech.key_word
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.human is None:
        self.human = robot_control_msgs.msg.HumanResult()
      if self.object is None:
        self.object = robot_control_msgs.msg.ObjectResult()
      if self.vision is None:
        self.vision = robot_control_msgs.msg.VisionResult()
      if self.speech is None:
        self.speech = robot_control_msgs.msg.SpeechResult()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.human.num, _x.human.male_num, _x.human.female_num,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.human.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human.gender = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.human.gender.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human.gesture = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.human.gesture.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object.color = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object.color = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.vision.header.seq, _x.vision.header.stamp.secs, _x.vision.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.vision.pixel_coords.pixel_x, _x.vision.pixel_coords.pixel_y, _x.vision.space_coords.x, _x.vision.space_coords.y, _x.vision.space_coords.z,) = _get_struct_2i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.speech.key_word = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.speech.key_word = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i().pack(_x.human.num, _x.human.male_num, _x.human.female_num))
      length = len(self.human.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.human.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.human.gender)
      buff.write(_struct_I.pack(length))
      for val1 in self.human.gender:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.human.gesture)
      buff.write(_struct_I.pack(length))
      for val1 in self.human.gesture:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.object.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.object.color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.vision.header.seq, _x.vision.header.stamp.secs, _x.vision.header.stamp.nsecs))
      _x = self.vision.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i3f().pack(_x.vision.pixel_coords.pixel_x, _x.vision.pixel_coords.pixel_y, _x.vision.space_coords.x, _x.vision.space_coords.y, _x.vision.space_coords.z))
      _x = self.speech.key_word
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.human is None:
        self.human = robot_control_msgs.msg.HumanResult()
      if self.object is None:
        self.object = robot_control_msgs.msg.ObjectResult()
      if self.vision is None:
        self.vision = robot_control_msgs.msg.VisionResult()
      if self.speech is None:
        self.speech = robot_control_msgs.msg.SpeechResult()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.human.num, _x.human.male_num, _x.human.female_num,) = _get_struct_3i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.human.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human.gender = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.human.gender.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human.gesture = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.human.gesture.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object.color = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object.color = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.vision.header.seq, _x.vision.header.stamp.secs, _x.vision.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vision.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vision.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.vision.pixel_coords.pixel_x, _x.vision.pixel_coords.pixel_y, _x.vision.space_coords.x, _x.vision.space_coords.y, _x.vision.space_coords.z,) = _get_struct_2i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.speech.key_word = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.speech.key_word = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i3f = None
def _get_struct_2i3f():
    global _struct_2i3f
    if _struct_2i3f is None:
        _struct_2i3f = struct.Struct("<2i3f")
    return _struct_2i3f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
