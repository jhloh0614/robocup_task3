# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_vision_msgs/FaceResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FaceResult(genpy.Message):
  _md5sum = "469ef5dabeb552b26e82e20e1922c338"
  _type = "robot_vision_msgs/FaceResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 label
string emotion
float32 confidence
int8 xmin
int8 ymin
int8 xmax
int8 ymax

int8 age
string gender

float32 angle_r
float32 angle_p
float32 angle_y


"""
  __slots__ = ['label','emotion','confidence','xmin','ymin','xmax','ymax','age','gender','angle_r','angle_p','angle_y']
  _slot_types = ['int8','string','float32','int8','int8','int8','int8','int8','string','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       label,emotion,confidence,xmin,ymin,xmax,ymax,age,gender,angle_r,angle_p,angle_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FaceResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.label is None:
        self.label = 0
      if self.emotion is None:
        self.emotion = ''
      if self.confidence is None:
        self.confidence = 0.
      if self.xmin is None:
        self.xmin = 0
      if self.ymin is None:
        self.ymin = 0
      if self.xmax is None:
        self.xmax = 0
      if self.ymax is None:
        self.ymax = 0
      if self.age is None:
        self.age = 0
      if self.gender is None:
        self.gender = ''
      if self.angle_r is None:
        self.angle_r = 0.
      if self.angle_p is None:
        self.angle_p = 0.
      if self.angle_y is None:
        self.angle_y = 0.
    else:
      self.label = 0
      self.emotion = ''
      self.confidence = 0.
      self.xmin = 0
      self.ymin = 0
      self.xmax = 0
      self.ymax = 0
      self.age = 0
      self.gender = ''
      self.angle_r = 0.
      self.angle_p = 0.
      self.angle_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.label
      buff.write(_get_struct_b().pack(_x))
      _x = self.emotion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f5b().pack(_x.confidence, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.age))
      _x = self.gender
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.angle_r, _x.angle_p, _x.angle_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.label,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.emotion = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.emotion = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.confidence, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.age,) = _get_struct_f5b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gender = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gender = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.angle_r, _x.angle_p, _x.angle_y,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.label
      buff.write(_get_struct_b().pack(_x))
      _x = self.emotion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f5b().pack(_x.confidence, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.age))
      _x = self.gender
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.angle_r, _x.angle_p, _x.angle_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.label,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.emotion = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.emotion = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.confidence, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.age,) = _get_struct_f5b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gender = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gender = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.angle_r, _x.angle_p, _x.angle_y,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_f5b = None
def _get_struct_f5b():
    global _struct_f5b
    if _struct_f5b is None:
        _struct_f5b = struct.Struct("<f5b")
    return _struct_f5b
