# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_vision_msgs/HumanPoses.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robot_vision_msgs.msg
import std_msgs.msg

class HumanPoses(genpy.Message):
  _md5sum = "dac44cd3c77340f9fbe0789c527d99b0"
  _type = "robot_vision_msgs/HumanPoses"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
Header image_header
# Poses for several people
HumanPose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: robot_vision_msgs/HumanPose
# Pose for one single person
uint32 human_id
string pose
# Joints
Joint Nose
Joint Chest
Joint RShoulder
Joint RElbow
Joint RWrist
Joint LShoulder
Joint LElbow
Joint LWrist
Joint RHip
Joint RKnee
Joint RAnkle
Joint LHip
Joint LKnee
Joint LAnkle
Joint REye
Joint LEye
Joint REar
Joint LEar


================================================================================
MSG: robot_vision_msgs/Joint
# Pixel Coordinates for one single joint
int16 x
int16 y
"""
  __slots__ = ['header','image_header','poses']
  _slot_types = ['std_msgs/Header','std_msgs/Header','robot_vision_msgs/HumanPose[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,image_header,poses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HumanPoses, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_header is None:
        self.image_header = std_msgs.msg.Header()
      if self.poses is None:
        self.poses = []
    else:
      self.header = std_msgs.msg.Header()
      self.image_header = std_msgs.msg.Header()
      self.poses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs))
      _x = self.image_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses:
        _x = val1.human_id
        buff.write(_get_struct_I().pack(_x))
        _x = val1.pose
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.Nose
        _x = _v1
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v2 = val1.Chest
        _x = _v2
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v3 = val1.RShoulder
        _x = _v3
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v4 = val1.RElbow
        _x = _v4
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v5 = val1.RWrist
        _x = _v5
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v6 = val1.LShoulder
        _x = _v6
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v7 = val1.LElbow
        _x = _v7
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v8 = val1.LWrist
        _x = _v8
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v9 = val1.RHip
        _x = _v9
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v10 = val1.RKnee
        _x = _v10
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v11 = val1.RAnkle
        _x = _v11
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v12 = val1.LHip
        _x = _v12
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v13 = val1.LKnee
        _x = _v13
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v14 = val1.LAnkle
        _x = _v14
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v15 = val1.REye
        _x = _v15
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v16 = val1.LEye
        _x = _v16
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v17 = val1.REar
        _x = _v17
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v18 = val1.LEar
        _x = _v18
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_header is None:
        self.image_header = std_msgs.msg.Header()
      if self.poses is None:
        self.poses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses = []
      for i in range(0, length):
        val1 = robot_vision_msgs.msg.HumanPose()
        start = end
        end += 4
        (val1.human_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.pose = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.pose = str[start:end]
        _v19 = val1.Nose
        _x = _v19
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v20 = val1.Chest
        _x = _v20
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v21 = val1.RShoulder
        _x = _v21
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v22 = val1.RElbow
        _x = _v22
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v23 = val1.RWrist
        _x = _v23
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v24 = val1.LShoulder
        _x = _v24
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v25 = val1.LElbow
        _x = _v25
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v26 = val1.LWrist
        _x = _v26
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v27 = val1.RHip
        _x = _v27
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v28 = val1.RKnee
        _x = _v28
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v29 = val1.RAnkle
        _x = _v29
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v30 = val1.LHip
        _x = _v30
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v31 = val1.LKnee
        _x = _v31
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v32 = val1.LAnkle
        _x = _v32
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v33 = val1.REye
        _x = _v33
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v34 = val1.LEye
        _x = _v34
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v35 = val1.REar
        _x = _v35
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v36 = val1.LEar
        _x = _v36
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        self.poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs))
      _x = self.image_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses:
        _x = val1.human_id
        buff.write(_get_struct_I().pack(_x))
        _x = val1.pose
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v37 = val1.Nose
        _x = _v37
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v38 = val1.Chest
        _x = _v38
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v39 = val1.RShoulder
        _x = _v39
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v40 = val1.RElbow
        _x = _v40
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v41 = val1.RWrist
        _x = _v41
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v42 = val1.LShoulder
        _x = _v42
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v43 = val1.LElbow
        _x = _v43
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v44 = val1.LWrist
        _x = _v44
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v45 = val1.RHip
        _x = _v45
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v46 = val1.RKnee
        _x = _v46
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v47 = val1.RAnkle
        _x = _v47
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v48 = val1.LHip
        _x = _v48
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v49 = val1.LKnee
        _x = _v49
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v50 = val1.LAnkle
        _x = _v50
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v51 = val1.REye
        _x = _v51
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v52 = val1.LEye
        _x = _v52
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v53 = val1.REar
        _x = _v53
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
        _v54 = val1.LEar
        _x = _v54
        buff.write(_get_struct_2h().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_header is None:
        self.image_header = std_msgs.msg.Header()
      if self.poses is None:
        self.poses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses = []
      for i in range(0, length):
        val1 = robot_vision_msgs.msg.HumanPose()
        start = end
        end += 4
        (val1.human_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.pose = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.pose = str[start:end]
        _v55 = val1.Nose
        _x = _v55
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v56 = val1.Chest
        _x = _v56
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v57 = val1.RShoulder
        _x = _v57
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v58 = val1.RElbow
        _x = _v58
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v59 = val1.RWrist
        _x = _v59
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v60 = val1.LShoulder
        _x = _v60
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v61 = val1.LElbow
        _x = _v61
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v62 = val1.LWrist
        _x = _v62
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v63 = val1.RHip
        _x = _v63
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v64 = val1.RKnee
        _x = _v64
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v65 = val1.RAnkle
        _x = _v65
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v66 = val1.LHip
        _x = _v66
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v67 = val1.LKnee
        _x = _v67
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v68 = val1.LAnkle
        _x = _v68
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v69 = val1.REye
        _x = _v69
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v70 = val1.LEye
        _x = _v70
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v71 = val1.REar
        _x = _v71
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        _v72 = val1.LEar
        _x = _v72
        start = end
        end += 4
        (_x.x, _x.y,) = _get_struct_2h().unpack(str[start:end])
        self.poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
