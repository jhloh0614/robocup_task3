;; Auto-generated. Do not edit!


(when (boundp 'robot_navigation_msgs::MoveRobotResult)
  (if (not (find-package "ROBOT_NAVIGATION_MSGS"))
    (make-package "ROBOT_NAVIGATION_MSGS"))
  (shadow 'MoveRobotResult (find-package "ROBOT_NAVIGATION_MSGS")))
(unless (find-package "ROBOT_NAVIGATION_MSGS::MOVEROBOTRESULT")
  (make-package "ROBOT_NAVIGATION_MSGS::MOVEROBOTRESULT"))

(in-package "ROS")
;;//! \htmlinclude MoveRobotResult.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass robot_navigation_msgs::MoveRobotResult
  :super ros::object
  :slots (_rotation _translation ))

(defmethod robot_navigation_msgs::MoveRobotResult
  (:init
   (&key
    ((:rotation __rotation) (instance geometry_msgs::Quaternion :init))
    ((:translation __translation) (instance geometry_msgs::Vector3 :init))
    )
   (send-super :init)
   (setq _rotation __rotation)
   (setq _translation __translation)
   self)
  (:rotation
   (&rest __rotation)
   (if (keywordp (car __rotation))
       (send* _rotation __rotation)
     (progn
       (if __rotation (setq _rotation (car __rotation)))
       _rotation)))
  (:translation
   (&rest __translation)
   (if (keywordp (car __translation))
       (send* _translation __translation)
     (progn
       (if __translation (setq _translation (car __translation)))
       _translation)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Quaternion _rotation
    (send _rotation :serialization-length)
    ;; geometry_msgs/Vector3 _translation
    (send _translation :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Quaternion _rotation
       (send _rotation :serialize s)
     ;; geometry_msgs/Vector3 _translation
       (send _translation :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Quaternion _rotation
     (send _rotation :deserialize buf ptr-) (incf ptr- (send _rotation :serialization-length))
   ;; geometry_msgs/Vector3 _translation
     (send _translation :deserialize buf ptr-) (incf ptr- (send _translation :serialization-length))
   ;;
   self)
  )

(setf (get robot_navigation_msgs::MoveRobotResult :md5sum-) "9a058c49fa3d286954e8794e488fb330")
(setf (get robot_navigation_msgs::MoveRobotResult :datatype-) "robot_navigation_msgs/MoveRobotResult")
(setf (get robot_navigation_msgs::MoveRobotResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result definition
geometry_msgs/Quaternion rotation
geometry_msgs/Vector3 translation


================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :robot_navigation_msgs/MoveRobotResult "9a058c49fa3d286954e8794e488fb330")


