;; Auto-generated. Do not edit!


(when (boundp 'robot_vision_msgs::CheckForHumanPosesAction)
  (if (not (find-package "ROBOT_VISION_MSGS"))
    (make-package "ROBOT_VISION_MSGS"))
  (shadow 'CheckForHumanPosesAction (find-package "ROBOT_VISION_MSGS")))
(unless (find-package "ROBOT_VISION_MSGS::CHECKFORHUMANPOSESACTION")
  (make-package "ROBOT_VISION_MSGS::CHECKFORHUMANPOSESACTION"))

(in-package "ROS")
;;//! \htmlinclude CheckForHumanPosesAction.msg.html


(defclass robot_vision_msgs::CheckForHumanPosesAction
  :super ros::object
  :slots (_action_goal _action_result _action_feedback ))

(defmethod robot_vision_msgs::CheckForHumanPosesAction
  (:init
   (&key
    ((:action_goal __action_goal) (instance robot_vision_msgs::CheckForHumanPosesActionGoal :init))
    ((:action_result __action_result) (instance robot_vision_msgs::CheckForHumanPosesActionResult :init))
    ((:action_feedback __action_feedback) (instance robot_vision_msgs::CheckForHumanPosesActionFeedback :init))
    )
   (send-super :init)
   (setq _action_goal __action_goal)
   (setq _action_result __action_result)
   (setq _action_feedback __action_feedback)
   self)
  (:action_goal
   (&rest __action_goal)
   (if (keywordp (car __action_goal))
       (send* _action_goal __action_goal)
     (progn
       (if __action_goal (setq _action_goal (car __action_goal)))
       _action_goal)))
  (:action_result
   (&rest __action_result)
   (if (keywordp (car __action_result))
       (send* _action_result __action_result)
     (progn
       (if __action_result (setq _action_result (car __action_result)))
       _action_result)))
  (:action_feedback
   (&rest __action_feedback)
   (if (keywordp (car __action_feedback))
       (send* _action_feedback __action_feedback)
     (progn
       (if __action_feedback (setq _action_feedback (car __action_feedback)))
       _action_feedback)))
  (:serialization-length
   ()
   (+
    ;; robot_vision_msgs/CheckForHumanPosesActionGoal _action_goal
    (send _action_goal :serialization-length)
    ;; robot_vision_msgs/CheckForHumanPosesActionResult _action_result
    (send _action_result :serialization-length)
    ;; robot_vision_msgs/CheckForHumanPosesActionFeedback _action_feedback
    (send _action_feedback :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; robot_vision_msgs/CheckForHumanPosesActionGoal _action_goal
       (send _action_goal :serialize s)
     ;; robot_vision_msgs/CheckForHumanPosesActionResult _action_result
       (send _action_result :serialize s)
     ;; robot_vision_msgs/CheckForHumanPosesActionFeedback _action_feedback
       (send _action_feedback :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; robot_vision_msgs/CheckForHumanPosesActionGoal _action_goal
     (send _action_goal :deserialize buf ptr-) (incf ptr- (send _action_goal :serialization-length))
   ;; robot_vision_msgs/CheckForHumanPosesActionResult _action_result
     (send _action_result :deserialize buf ptr-) (incf ptr- (send _action_result :serialization-length))
   ;; robot_vision_msgs/CheckForHumanPosesActionFeedback _action_feedback
     (send _action_feedback :deserialize buf ptr-) (incf ptr- (send _action_feedback :serialization-length))
   ;;
   self)
  )

(setf (get robot_vision_msgs::CheckForHumanPosesAction :md5sum-) "f9940c3d122ee0706cd0ff94992623a8")
(setf (get robot_vision_msgs::CheckForHumanPosesAction :datatype-) "robot_vision_msgs/CheckForHumanPosesAction")
(setf (get robot_vision_msgs::CheckForHumanPosesAction :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

CheckForHumanPosesActionGoal action_goal
CheckForHumanPosesActionResult action_result
CheckForHumanPosesActionFeedback action_feedback

================================================================================
MSG: robot_vision_msgs/CheckForHumanPosesActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
CheckForHumanPosesGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: robot_vision_msgs/CheckForHumanPosesGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Check if human in image

# Goal definition
int16 id
sensor_msgs/Image image


================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: robot_vision_msgs/CheckForHumanPosesActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
CheckForHumanPosesResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: robot_vision_msgs/CheckForHumanPosesResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result definition
int16 id
robot_vision_msgs/HumanPoses human_poses


================================================================================
MSG: robot_vision_msgs/HumanPoses
Header header
Header image_header
# Poses for several people
HumanPose[] poses

================================================================================
MSG: robot_vision_msgs/HumanPose
# Pose for one single person
uint32 human_id
string pose
# Joints
Joint Nose
Joint Chest
Joint RShoulder
Joint RElbow
Joint RWrist
Joint LShoulder
Joint LElbow
Joint LWrist
Joint RHip
Joint RKnee
Joint RAnkle
Joint LHip
Joint LKnee
Joint LAnkle
Joint REye
Joint LEye
Joint REar
Joint LEar


================================================================================
MSG: robot_vision_msgs/Joint
# Pixel Coordinates for one single joint
int16 x
int16 y

================================================================================
MSG: robot_vision_msgs/CheckForHumanPosesActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
CheckForHumanPosesFeedback feedback

================================================================================
MSG: robot_vision_msgs/CheckForHumanPosesFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback definition


")



(provide :robot_vision_msgs/CheckForHumanPosesAction "f9940c3d122ee0706cd0ff94992623a8")


