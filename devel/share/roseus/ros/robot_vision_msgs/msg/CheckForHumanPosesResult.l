;; Auto-generated. Do not edit!


(when (boundp 'robot_vision_msgs::CheckForHumanPosesResult)
  (if (not (find-package "ROBOT_VISION_MSGS"))
    (make-package "ROBOT_VISION_MSGS"))
  (shadow 'CheckForHumanPosesResult (find-package "ROBOT_VISION_MSGS")))
(unless (find-package "ROBOT_VISION_MSGS::CHECKFORHUMANPOSESRESULT")
  (make-package "ROBOT_VISION_MSGS::CHECKFORHUMANPOSESRESULT"))

(in-package "ROS")
;;//! \htmlinclude CheckForHumanPosesResult.msg.html


(defclass robot_vision_msgs::CheckForHumanPosesResult
  :super ros::object
  :slots (_id _human_poses ))

(defmethod robot_vision_msgs::CheckForHumanPosesResult
  (:init
   (&key
    ((:id __id) 0)
    ((:human_poses __human_poses) (instance robot_vision_msgs::HumanPoses :init))
    )
   (send-super :init)
   (setq _id (round __id))
   (setq _human_poses __human_poses)
   self)
  (:id
   (&optional __id)
   (if __id (setq _id __id)) _id)
  (:human_poses
   (&rest __human_poses)
   (if (keywordp (car __human_poses))
       (send* _human_poses __human_poses)
     (progn
       (if __human_poses (setq _human_poses (car __human_poses)))
       _human_poses)))
  (:serialization-length
   ()
   (+
    ;; int16 _id
    2
    ;; robot_vision_msgs/HumanPoses _human_poses
    (send _human_poses :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int16 _id
       (write-word _id s)
     ;; robot_vision_msgs/HumanPoses _human_poses
       (send _human_poses :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int16 _id
     (setq _id (sys::peek buf ptr- :short)) (incf ptr- 2)
   ;; robot_vision_msgs/HumanPoses _human_poses
     (send _human_poses :deserialize buf ptr-) (incf ptr- (send _human_poses :serialization-length))
   ;;
   self)
  )

(setf (get robot_vision_msgs::CheckForHumanPosesResult :md5sum-) "b5d80e49b1e27164586685518cf7c02e")
(setf (get robot_vision_msgs::CheckForHumanPosesResult :datatype-) "robot_vision_msgs/CheckForHumanPosesResult")
(setf (get robot_vision_msgs::CheckForHumanPosesResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result definition
int16 id
robot_vision_msgs/HumanPoses human_poses


================================================================================
MSG: robot_vision_msgs/HumanPoses
Header header
Header image_header
# Poses for several people
HumanPose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: robot_vision_msgs/HumanPose
# Pose for one single person
uint32 human_id
string pose
# Joints
Joint Nose
Joint Chest
Joint RShoulder
Joint RElbow
Joint RWrist
Joint LShoulder
Joint LElbow
Joint LWrist
Joint RHip
Joint RKnee
Joint RAnkle
Joint LHip
Joint LKnee
Joint LAnkle
Joint REye
Joint LEye
Joint REar
Joint LEar


================================================================================
MSG: robot_vision_msgs/Joint
# Pixel Coordinates for one single joint
int16 x
int16 y

")



(provide :robot_vision_msgs/CheckForHumanPosesResult "b5d80e49b1e27164586685518cf7c02e")


