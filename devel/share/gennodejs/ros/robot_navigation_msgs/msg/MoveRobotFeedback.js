// Auto-generated. Do not edit!

// (in-package robot_navigation_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class MoveRobotFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.current_distance = null;
      this.current_angle = null;
    }
    else {
      if (initObj.hasOwnProperty('current_distance')) {
        this.current_distance = initObj.current_distance
      }
      else {
        this.current_distance = 0.0;
      }
      if (initObj.hasOwnProperty('current_angle')) {
        this.current_angle = initObj.current_angle
      }
      else {
        this.current_angle = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MoveRobotFeedback
    // Serialize message field [current_distance]
    bufferOffset = _serializer.float64(obj.current_distance, buffer, bufferOffset);
    // Serialize message field [current_angle]
    bufferOffset = _serializer.float64(obj.current_angle, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MoveRobotFeedback
    let len;
    let data = new MoveRobotFeedback(null);
    // Deserialize message field [current_distance]
    data.current_distance = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [current_angle]
    data.current_angle = _deserializer.float64(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 16;
  }

  static datatype() {
    // Returns string type for a message object
    return 'robot_navigation_msgs/MoveRobotFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '478c62c992a762e2f4b59f78e3eb7ca6';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Feedback
    float64 current_distance
    float64 current_angle
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MoveRobotFeedback(null);
    if (msg.current_distance !== undefined) {
      resolved.current_distance = msg.current_distance;
    }
    else {
      resolved.current_distance = 0.0
    }

    if (msg.current_angle !== undefined) {
      resolved.current_angle = msg.current_angle;
    }
    else {
      resolved.current_angle = 0.0
    }

    return resolved;
    }
};

module.exports = MoveRobotFeedback;
