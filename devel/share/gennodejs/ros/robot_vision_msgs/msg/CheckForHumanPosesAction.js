// Auto-generated. Do not edit!

// (in-package robot_vision_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let CheckForHumanPosesActionGoal = require('./CheckForHumanPosesActionGoal.js');
let CheckForHumanPosesActionResult = require('./CheckForHumanPosesActionResult.js');
let CheckForHumanPosesActionFeedback = require('./CheckForHumanPosesActionFeedback.js');

//-----------------------------------------------------------

class CheckForHumanPosesAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new CheckForHumanPosesActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new CheckForHumanPosesActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new CheckForHumanPosesActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type CheckForHumanPosesAction
    // Serialize message field [action_goal]
    bufferOffset = CheckForHumanPosesActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = CheckForHumanPosesActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = CheckForHumanPosesActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type CheckForHumanPosesAction
    let len;
    let data = new CheckForHumanPosesAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = CheckForHumanPosesActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = CheckForHumanPosesActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = CheckForHumanPosesActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += CheckForHumanPosesActionGoal.getMessageSize(object.action_goal);
    length += CheckForHumanPosesActionResult.getMessageSize(object.action_result);
    length += CheckForHumanPosesActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'robot_vision_msgs/CheckForHumanPosesAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'f9940c3d122ee0706cd0ff94992623a8';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    CheckForHumanPosesActionGoal action_goal
    CheckForHumanPosesActionResult action_result
    CheckForHumanPosesActionFeedback action_feedback
    
    ================================================================================
    MSG: robot_vision_msgs/CheckForHumanPosesActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    CheckForHumanPosesGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: robot_vision_msgs/CheckForHumanPosesGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Check if human in image
    
    # Goal definition
    int16 id
    sensor_msgs/Image image
    
    
    ================================================================================
    MSG: sensor_msgs/Image
    # This message contains an uncompressed image
    # (0, 0) is at top-left corner of image
    #
    
    Header header        # Header timestamp should be acquisition time of image
                         # Header frame_id should be optical frame of camera
                         # origin of frame should be optical center of camera
                         # +x should point to the right in the image
                         # +y should point down in the image
                         # +z should point into to plane of the image
                         # If the frame_id here and the frame_id of the CameraInfo
                         # message associated with the image conflict
                         # the behavior is undefined
    
    uint32 height         # image height, that is, number of rows
    uint32 width          # image width, that is, number of columns
    
    # The legal values for encoding are in file src/image_encodings.cpp
    # If you want to standardize a new string format, join
    # ros-users@lists.sourceforge.net and send an email proposing a new encoding.
    
    string encoding       # Encoding of pixels -- channel meaning, ordering, size
                          # taken from the list of strings in include/sensor_msgs/image_encodings.h
    
    uint8 is_bigendian    # is this data bigendian?
    uint32 step           # Full row length in bytes
    uint8[] data          # actual matrix data, size is (step * rows)
    
    ================================================================================
    MSG: robot_vision_msgs/CheckForHumanPosesActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    CheckForHumanPosesResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: robot_vision_msgs/CheckForHumanPosesResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Result definition
    int16 id
    robot_vision_msgs/HumanPoses human_poses
    
    
    ================================================================================
    MSG: robot_vision_msgs/HumanPoses
    Header header
    Header image_header
    # Poses for several people
    HumanPose[] poses
    
    ================================================================================
    MSG: robot_vision_msgs/HumanPose
    # Pose for one single person
    uint32 human_id
    string pose
    # Joints
    Joint Nose
    Joint Chest
    Joint RShoulder
    Joint RElbow
    Joint RWrist
    Joint LShoulder
    Joint LElbow
    Joint LWrist
    Joint RHip
    Joint RKnee
    Joint RAnkle
    Joint LHip
    Joint LKnee
    Joint LAnkle
    Joint REye
    Joint LEye
    Joint REar
    Joint LEar
    
    
    ================================================================================
    MSG: robot_vision_msgs/Joint
    # Pixel Coordinates for one single joint
    int16 x
    int16 y
    
    ================================================================================
    MSG: robot_vision_msgs/CheckForHumanPosesActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    CheckForHumanPosesFeedback feedback
    
    ================================================================================
    MSG: robot_vision_msgs/CheckForHumanPosesFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Feedback definition
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new CheckForHumanPosesAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = CheckForHumanPosesActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new CheckForHumanPosesActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = CheckForHumanPosesActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new CheckForHumanPosesActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = CheckForHumanPosesActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new CheckForHumanPosesActionFeedback()
    }

    return resolved;
    }
};

module.exports = CheckForHumanPosesAction;
