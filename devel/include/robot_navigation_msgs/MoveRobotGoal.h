// Generated by gencpp from file robot_navigation_msgs/MoveRobotGoal.msg
// DO NOT EDIT!


#ifndef ROBOT_NAVIGATION_MSGS_MESSAGE_MOVEROBOTGOAL_H
#define ROBOT_NAVIGATION_MSGS_MESSAGE_MOVEROBOTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_navigation_msgs
{
template <class ContainerAllocator>
struct MoveRobotGoal_
{
  typedef MoveRobotGoal_<ContainerAllocator> Type;

  MoveRobotGoal_()
    : angle(0.0)
    , distance(0.0)  {
    }
  MoveRobotGoal_(const ContainerAllocator& _alloc)
    : angle(0.0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef double _angle_type;
  _angle_type angle;

   typedef double _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MoveRobotGoal_

typedef ::robot_navigation_msgs::MoveRobotGoal_<std::allocator<void> > MoveRobotGoal;

typedef boost::shared_ptr< ::robot_navigation_msgs::MoveRobotGoal > MoveRobotGoalPtr;
typedef boost::shared_ptr< ::robot_navigation_msgs::MoveRobotGoal const> MoveRobotGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator1> & lhs, const ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator1> & lhs, const ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5a2ee2aaf541b354d2c44aa9ea8522e";
  }

  static const char* value(const ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5a2ee2aaf541b35ULL;
  static const uint64_t static_value2 = 0x4d2c44aa9ea8522eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_navigation_msgs/MoveRobotGoal";
  }

  static const char* value(const ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal definition\n"
"float64 angle\n"
"float64 distance\n"
"\n"
;
  }

  static const char* value(const ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveRobotGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_navigation_msgs::MoveRobotGoal_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_NAVIGATION_MSGS_MESSAGE_MOVEROBOTGOAL_H
