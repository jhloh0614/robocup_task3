// Generated by gencpp from file robot_navigation_msgs/MoveRobotResult.msg
// DO NOT EDIT!


#ifndef ROBOT_NAVIGATION_MSGS_MESSAGE_MOVEROBOTRESULT_H
#define ROBOT_NAVIGATION_MSGS_MESSAGE_MOVEROBOTRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>

namespace robot_navigation_msgs
{
template <class ContainerAllocator>
struct MoveRobotResult_
{
  typedef MoveRobotResult_<ContainerAllocator> Type;

  MoveRobotResult_()
    : rotation()
    , translation()  {
    }
  MoveRobotResult_(const ContainerAllocator& _alloc)
    : rotation(_alloc)
    , translation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _rotation_type;
  _rotation_type rotation;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _translation_type;
  _translation_type translation;





  typedef boost::shared_ptr< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> const> ConstPtr;

}; // struct MoveRobotResult_

typedef ::robot_navigation_msgs::MoveRobotResult_<std::allocator<void> > MoveRobotResult;

typedef boost::shared_ptr< ::robot_navigation_msgs::MoveRobotResult > MoveRobotResultPtr;
typedef boost::shared_ptr< ::robot_navigation_msgs::MoveRobotResult const> MoveRobotResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator1> & lhs, const ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator2> & rhs)
{
  return lhs.rotation == rhs.rotation &&
    lhs.translation == rhs.translation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator1> & lhs, const ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a058c49fa3d286954e8794e488fb330";
  }

  static const char* value(const ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a058c49fa3d2869ULL;
  static const uint64_t static_value2 = 0x54e8794e488fb330ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_navigation_msgs/MoveRobotResult";
  }

  static const char* value(const ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result definition\n"
"geometry_msgs/Quaternion rotation\n"
"geometry_msgs/Vector3 translation\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rotation);
      stream.next(m.translation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveRobotResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_navigation_msgs::MoveRobotResult_<ContainerAllocator>& v)
  {
    s << indent << "rotation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.rotation);
    s << indent << "translation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.translation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_NAVIGATION_MSGS_MESSAGE_MOVEROBOTRESULT_H
