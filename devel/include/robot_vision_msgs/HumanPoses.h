// Generated by gencpp from file robot_vision_msgs/HumanPoses.msg
// DO NOT EDIT!


#ifndef ROBOT_VISION_MSGS_MESSAGE_HUMANPOSES_H
#define ROBOT_VISION_MSGS_MESSAGE_HUMANPOSES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Header.h>
#include <robot_vision_msgs/HumanPose.h>

namespace robot_vision_msgs
{
template <class ContainerAllocator>
struct HumanPoses_
{
  typedef HumanPoses_<ContainerAllocator> Type;

  HumanPoses_()
    : header()
    , image_header()
    , poses()  {
    }
  HumanPoses_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , image_header(_alloc)
    , poses(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _image_header_type;
  _image_header_type image_header;

   typedef std::vector< ::robot_vision_msgs::HumanPose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robot_vision_msgs::HumanPose_<ContainerAllocator> >::other >  _poses_type;
  _poses_type poses;





  typedef boost::shared_ptr< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> const> ConstPtr;

}; // struct HumanPoses_

typedef ::robot_vision_msgs::HumanPoses_<std::allocator<void> > HumanPoses;

typedef boost::shared_ptr< ::robot_vision_msgs::HumanPoses > HumanPosesPtr;
typedef boost::shared_ptr< ::robot_vision_msgs::HumanPoses const> HumanPosesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_vision_msgs::HumanPoses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_vision_msgs::HumanPoses_<ContainerAllocator1> & lhs, const ::robot_vision_msgs::HumanPoses_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.image_header == rhs.image_header &&
    lhs.poses == rhs.poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_vision_msgs::HumanPoses_<ContainerAllocator1> & lhs, const ::robot_vision_msgs::HumanPoses_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dac44cd3c77340f9fbe0789c527d99b0";
  }

  static const char* value(const ::robot_vision_msgs::HumanPoses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdac44cd3c77340f9ULL;
  static const uint64_t static_value2 = 0xfbe0789c527d99b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_vision_msgs/HumanPoses";
  }

  static const char* value(const ::robot_vision_msgs::HumanPoses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"Header image_header\n"
"# Poses for several people\n"
"HumanPose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: robot_vision_msgs/HumanPose\n"
"# Pose for one single person\n"
"uint32 human_id\n"
"string pose\n"
"# Joints\n"
"Joint Nose\n"
"Joint Chest\n"
"Joint RShoulder\n"
"Joint RElbow\n"
"Joint RWrist\n"
"Joint LShoulder\n"
"Joint LElbow\n"
"Joint LWrist\n"
"Joint RHip\n"
"Joint RKnee\n"
"Joint RAnkle\n"
"Joint LHip\n"
"Joint LKnee\n"
"Joint LAnkle\n"
"Joint REye\n"
"Joint LEye\n"
"Joint REar\n"
"Joint LEar\n"
"\n"
"\n"
"================================================================================\n"
"MSG: robot_vision_msgs/Joint\n"
"# Pixel Coordinates for one single joint\n"
"int16 x\n"
"int16 y\n"
;
  }

  static const char* value(const ::robot_vision_msgs::HumanPoses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.image_header);
      stream.next(m.poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanPoses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_vision_msgs::HumanPoses_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "image_header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.image_header);
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_vision_msgs::HumanPose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_VISION_MSGS_MESSAGE_HUMANPOSES_H
