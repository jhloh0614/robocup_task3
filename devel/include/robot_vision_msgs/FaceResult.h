// Generated by gencpp from file robot_vision_msgs/FaceResult.msg
// DO NOT EDIT!


#ifndef ROBOT_VISION_MSGS_MESSAGE_FACERESULT_H
#define ROBOT_VISION_MSGS_MESSAGE_FACERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_vision_msgs
{
template <class ContainerAllocator>
struct FaceResult_
{
  typedef FaceResult_<ContainerAllocator> Type;

  FaceResult_()
    : label(0)
    , emotion()
    , confidence(0.0)
    , xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)
    , age(0)
    , gender()
    , angle_r(0.0)
    , angle_p(0.0)
    , angle_y(0.0)  {
    }
  FaceResult_(const ContainerAllocator& _alloc)
    : label(0)
    , emotion(_alloc)
    , confidence(0.0)
    , xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)
    , age(0)
    , gender(_alloc)
    , angle_r(0.0)
    , angle_p(0.0)
    , angle_y(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _label_type;
  _label_type label;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _emotion_type;
  _emotion_type emotion;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef int8_t _xmin_type;
  _xmin_type xmin;

   typedef int8_t _ymin_type;
  _ymin_type ymin;

   typedef int8_t _xmax_type;
  _xmax_type xmax;

   typedef int8_t _ymax_type;
  _ymax_type ymax;

   typedef int8_t _age_type;
  _age_type age;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gender_type;
  _gender_type gender;

   typedef float _angle_r_type;
  _angle_r_type angle_r;

   typedef float _angle_p_type;
  _angle_p_type angle_p;

   typedef float _angle_y_type;
  _angle_y_type angle_y;





  typedef boost::shared_ptr< ::robot_vision_msgs::FaceResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_vision_msgs::FaceResult_<ContainerAllocator> const> ConstPtr;

}; // struct FaceResult_

typedef ::robot_vision_msgs::FaceResult_<std::allocator<void> > FaceResult;

typedef boost::shared_ptr< ::robot_vision_msgs::FaceResult > FaceResultPtr;
typedef boost::shared_ptr< ::robot_vision_msgs::FaceResult const> FaceResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_vision_msgs::FaceResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_vision_msgs::FaceResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_vision_msgs::FaceResult_<ContainerAllocator1> & lhs, const ::robot_vision_msgs::FaceResult_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.emotion == rhs.emotion &&
    lhs.confidence == rhs.confidence &&
    lhs.xmin == rhs.xmin &&
    lhs.ymin == rhs.ymin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymax == rhs.ymax &&
    lhs.age == rhs.age &&
    lhs.gender == rhs.gender &&
    lhs.angle_r == rhs.angle_r &&
    lhs.angle_p == rhs.angle_p &&
    lhs.angle_y == rhs.angle_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_vision_msgs::FaceResult_<ContainerAllocator1> & lhs, const ::robot_vision_msgs::FaceResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_vision_msgs::FaceResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_vision_msgs::FaceResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_vision_msgs::FaceResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_vision_msgs::FaceResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_vision_msgs::FaceResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_vision_msgs::FaceResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_vision_msgs::FaceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "469ef5dabeb552b26e82e20e1922c338";
  }

  static const char* value(const ::robot_vision_msgs::FaceResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x469ef5dabeb552b2ULL;
  static const uint64_t static_value2 = 0x6e82e20e1922c338ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_vision_msgs::FaceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_vision_msgs/FaceResult";
  }

  static const char* value(const ::robot_vision_msgs::FaceResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_vision_msgs::FaceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 label\n"
"string emotion\n"
"float32 confidence\n"
"int8 xmin\n"
"int8 ymin\n"
"int8 xmax\n"
"int8 ymax\n"
"\n"
"int8 age\n"
"string gender\n"
"\n"
"float32 angle_r\n"
"float32 angle_p\n"
"float32 angle_y\n"
"\n"
"\n"
;
  }

  static const char* value(const ::robot_vision_msgs::FaceResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_vision_msgs::FaceResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.emotion);
      stream.next(m.confidence);
      stream.next(m.xmin);
      stream.next(m.ymin);
      stream.next(m.xmax);
      stream.next(m.ymax);
      stream.next(m.age);
      stream.next(m.gender);
      stream.next(m.angle_r);
      stream.next(m.angle_p);
      stream.next(m.angle_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaceResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_vision_msgs::FaceResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_vision_msgs::FaceResult_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<int8_t>::stream(s, indent + "  ", v.label);
    s << indent << "emotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.emotion);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "xmin: ";
    Printer<int8_t>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymin: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ymin);
    s << indent << "xmax: ";
    Printer<int8_t>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymax: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ymax);
    s << indent << "age: ";
    Printer<int8_t>::stream(s, indent + "  ", v.age);
    s << indent << "gender: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gender);
    s << indent << "angle_r: ";
    Printer<float>::stream(s, indent + "  ", v.angle_r);
    s << indent << "angle_p: ";
    Printer<float>::stream(s, indent + "  ", v.angle_p);
    s << indent << "angle_y: ";
    Printer<float>::stream(s, indent + "  ", v.angle_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_VISION_MSGS_MESSAGE_FACERESULT_H
