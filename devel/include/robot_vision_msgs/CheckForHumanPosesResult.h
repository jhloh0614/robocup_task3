// Generated by gencpp from file robot_vision_msgs/CheckForHumanPosesResult.msg
// DO NOT EDIT!


#ifndef ROBOT_VISION_MSGS_MESSAGE_CHECKFORHUMANPOSESRESULT_H
#define ROBOT_VISION_MSGS_MESSAGE_CHECKFORHUMANPOSESRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_vision_msgs/HumanPoses.h>

namespace robot_vision_msgs
{
template <class ContainerAllocator>
struct CheckForHumanPosesResult_
{
  typedef CheckForHumanPosesResult_<ContainerAllocator> Type;

  CheckForHumanPosesResult_()
    : id(0)
    , human_poses()  {
    }
  CheckForHumanPosesResult_(const ContainerAllocator& _alloc)
    : id(0)
    , human_poses(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef  ::robot_vision_msgs::HumanPoses_<ContainerAllocator>  _human_poses_type;
  _human_poses_type human_poses;





  typedef boost::shared_ptr< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> const> ConstPtr;

}; // struct CheckForHumanPosesResult_

typedef ::robot_vision_msgs::CheckForHumanPosesResult_<std::allocator<void> > CheckForHumanPosesResult;

typedef boost::shared_ptr< ::robot_vision_msgs::CheckForHumanPosesResult > CheckForHumanPosesResultPtr;
typedef boost::shared_ptr< ::robot_vision_msgs::CheckForHumanPosesResult const> CheckForHumanPosesResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator1> & lhs, const ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.human_poses == rhs.human_poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator1> & lhs, const ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5d80e49b1e27164586685518cf7c02e";
  }

  static const char* value(const ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5d80e49b1e27164ULL;
  static const uint64_t static_value2 = 0x586685518cf7c02eULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_vision_msgs/CheckForHumanPosesResult";
  }

  static const char* value(const ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result definition\n"
"int16 id\n"
"robot_vision_msgs/HumanPoses human_poses\n"
"\n"
"\n"
"================================================================================\n"
"MSG: robot_vision_msgs/HumanPoses\n"
"Header header\n"
"Header image_header\n"
"# Poses for several people\n"
"HumanPose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: robot_vision_msgs/HumanPose\n"
"# Pose for one single person\n"
"uint32 human_id\n"
"string pose\n"
"# Joints\n"
"Joint Nose\n"
"Joint Chest\n"
"Joint RShoulder\n"
"Joint RElbow\n"
"Joint RWrist\n"
"Joint LShoulder\n"
"Joint LElbow\n"
"Joint LWrist\n"
"Joint RHip\n"
"Joint RKnee\n"
"Joint RAnkle\n"
"Joint LHip\n"
"Joint LKnee\n"
"Joint LAnkle\n"
"Joint REye\n"
"Joint LEye\n"
"Joint REar\n"
"Joint LEar\n"
"\n"
"\n"
"================================================================================\n"
"MSG: robot_vision_msgs/Joint\n"
"# Pixel Coordinates for one single joint\n"
"int16 x\n"
"int16 y\n"
;
  }

  static const char* value(const ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.human_poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckForHumanPosesResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_vision_msgs::CheckForHumanPosesResult_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "human_poses: ";
    s << std::endl;
    Printer< ::robot_vision_msgs::HumanPoses_<ContainerAllocator> >::stream(s, indent + "  ", v.human_poses);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_VISION_MSGS_MESSAGE_CHECKFORHUMANPOSESRESULT_H
