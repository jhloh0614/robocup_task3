// Generated by gencpp from file robot_control_msgs/PixelCoords.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MSGS_MESSAGE_PIXELCOORDS_H
#define ROBOT_CONTROL_MSGS_MESSAGE_PIXELCOORDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_control_msgs
{
template <class ContainerAllocator>
struct PixelCoords_
{
  typedef PixelCoords_<ContainerAllocator> Type;

  PixelCoords_()
    : pixel_x(0)
    , pixel_y(0)  {
    }
  PixelCoords_(const ContainerAllocator& _alloc)
    : pixel_x(0)
    , pixel_y(0)  {
  (void)_alloc;
    }



   typedef int32_t _pixel_x_type;
  _pixel_x_type pixel_x;

   typedef int32_t _pixel_y_type;
  _pixel_y_type pixel_y;





  typedef boost::shared_ptr< ::robot_control_msgs::PixelCoords_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control_msgs::PixelCoords_<ContainerAllocator> const> ConstPtr;

}; // struct PixelCoords_

typedef ::robot_control_msgs::PixelCoords_<std::allocator<void> > PixelCoords;

typedef boost::shared_ptr< ::robot_control_msgs::PixelCoords > PixelCoordsPtr;
typedef boost::shared_ptr< ::robot_control_msgs::PixelCoords const> PixelCoordsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control_msgs::PixelCoords_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control_msgs::PixelCoords_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control_msgs::PixelCoords_<ContainerAllocator1> & lhs, const ::robot_control_msgs::PixelCoords_<ContainerAllocator2> & rhs)
{
  return lhs.pixel_x == rhs.pixel_x &&
    lhs.pixel_y == rhs.pixel_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control_msgs::PixelCoords_<ContainerAllocator1> & lhs, const ::robot_control_msgs::PixelCoords_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::PixelCoords_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::PixelCoords_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::PixelCoords_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::PixelCoords_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::PixelCoords_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::PixelCoords_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control_msgs::PixelCoords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c8af6213d5d1bfed5439aa1baf4890b";
  }

  static const char* value(const ::robot_control_msgs::PixelCoords_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c8af6213d5d1bfeULL;
  static const uint64_t static_value2 = 0xd5439aa1baf4890bULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control_msgs::PixelCoords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control_msgs/PixelCoords";
  }

  static const char* value(const ::robot_control_msgs::PixelCoords_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control_msgs::PixelCoords_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 pixel_x\n"
"int32 pixel_y\n"
;
  }

  static const char* value(const ::robot_control_msgs::PixelCoords_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control_msgs::PixelCoords_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pixel_x);
      stream.next(m.pixel_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixelCoords_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control_msgs::PixelCoords_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control_msgs::PixelCoords_<ContainerAllocator>& v)
  {
    s << indent << "pixel_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pixel_x);
    s << indent << "pixel_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pixel_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MSGS_MESSAGE_PIXELCOORDS_H
