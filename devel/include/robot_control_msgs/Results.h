// Generated by gencpp from file robot_control_msgs/Results.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MSGS_MESSAGE_RESULTS_H
#define ROBOT_CONTROL_MSGS_MESSAGE_RESULTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_control_msgs/HumanResult.h>
#include <robot_control_msgs/ObjectResult.h>
#include <robot_control_msgs/VisionResult.h>
#include <robot_control_msgs/SpeechResult.h>

namespace robot_control_msgs
{
template <class ContainerAllocator>
struct Results_
{
  typedef Results_<ContainerAllocator> Type;

  Results_()
    : human()
    , object()
    , vision()
    , speech()  {
    }
  Results_(const ContainerAllocator& _alloc)
    : human(_alloc)
    , object(_alloc)
    , vision(_alloc)
    , speech(_alloc)  {
  (void)_alloc;
    }



   typedef  ::robot_control_msgs::HumanResult_<ContainerAllocator>  _human_type;
  _human_type human;

   typedef  ::robot_control_msgs::ObjectResult_<ContainerAllocator>  _object_type;
  _object_type object;

   typedef  ::robot_control_msgs::VisionResult_<ContainerAllocator>  _vision_type;
  _vision_type vision;

   typedef  ::robot_control_msgs::SpeechResult_<ContainerAllocator>  _speech_type;
  _speech_type speech;





  typedef boost::shared_ptr< ::robot_control_msgs::Results_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control_msgs::Results_<ContainerAllocator> const> ConstPtr;

}; // struct Results_

typedef ::robot_control_msgs::Results_<std::allocator<void> > Results;

typedef boost::shared_ptr< ::robot_control_msgs::Results > ResultsPtr;
typedef boost::shared_ptr< ::robot_control_msgs::Results const> ResultsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control_msgs::Results_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control_msgs::Results_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control_msgs::Results_<ContainerAllocator1> & lhs, const ::robot_control_msgs::Results_<ContainerAllocator2> & rhs)
{
  return lhs.human == rhs.human &&
    lhs.object == rhs.object &&
    lhs.vision == rhs.vision &&
    lhs.speech == rhs.speech;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control_msgs::Results_<ContainerAllocator1> & lhs, const ::robot_control_msgs::Results_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::Results_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control_msgs::Results_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::Results_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control_msgs::Results_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::Results_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control_msgs::Results_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control_msgs::Results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0dfbe2e11b0d9abfab0f0b4f50f8f0bb";
  }

  static const char* value(const ::robot_control_msgs::Results_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0dfbe2e11b0d9abfULL;
  static const uint64_t static_value2 = 0xab0f0b4f50f8f0bbULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control_msgs::Results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control_msgs/Results";
  }

  static const char* value(const ::robot_control_msgs::Results_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control_msgs::Results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# For human result\n"
"HumanResult human\n"
"\n"
"# For object result\n"
"ObjectResult object\n"
"\n"
"# For Vision result\n"
"VisionResult vision\n"
"\n"
"# For speech/speak result\n"
"SpeechResult speech\n"
"\n"
"\n"
"================================================================================\n"
"MSG: robot_control_msgs/HumanResult\n"
"int32 num\n"
"int32 male_num\n"
"int32 female_num\n"
"\n"
"string[] name\n"
"string[] gender\n"
"string[] gesture\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: robot_control_msgs/ObjectResult\n"
"string name\n"
"string color\n"
"\n"
"\n"
"================================================================================\n"
"MSG: robot_control_msgs/VisionResult\n"
"Header header\n"
"PixelCoords pixel_coords\n"
"SpaceCoords space_coords\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: robot_control_msgs/PixelCoords\n"
"int32 pixel_x\n"
"int32 pixel_y\n"
"\n"
"================================================================================\n"
"MSG: robot_control_msgs/SpaceCoords\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"================================================================================\n"
"MSG: robot_control_msgs/SpeechResult\n"
"string key_word\n"
;
  }

  static const char* value(const ::robot_control_msgs::Results_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control_msgs::Results_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.human);
      stream.next(m.object);
      stream.next(m.vision);
      stream.next(m.speech);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Results_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control_msgs::Results_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control_msgs::Results_<ContainerAllocator>& v)
  {
    s << indent << "human: ";
    s << std::endl;
    Printer< ::robot_control_msgs::HumanResult_<ContainerAllocator> >::stream(s, indent + "  ", v.human);
    s << indent << "object: ";
    s << std::endl;
    Printer< ::robot_control_msgs::ObjectResult_<ContainerAllocator> >::stream(s, indent + "  ", v.object);
    s << indent << "vision: ";
    s << std::endl;
    Printer< ::robot_control_msgs::VisionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.vision);
    s << indent << "speech: ";
    s << std::endl;
    Printer< ::robot_control_msgs::SpeechResult_<ContainerAllocator> >::stream(s, indent + "  ", v.speech);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MSGS_MESSAGE_RESULTS_H
